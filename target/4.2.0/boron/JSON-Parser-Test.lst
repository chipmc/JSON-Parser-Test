
/Users/chipmc/Documents/Maker/Particle/Utilities/JSON-Parser-Test/target/4.2.0/boron/JSON-Parser-Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00006e94  000b401c  000b401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000baeb0  000baeb0  0000aeb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000baed4  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000088  2003b6b8  000baed8  0001b6b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000030b0  2003b740  2003b740  0002b740  2**2
                  ALLOC
  7 .module_info_suffix 00000028  000baf60  000baf60  0002af60  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000baf88  000baf88  0002af88  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   0015f251  00000000  00000000  0002af8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 000171e0  00000000  00000000  0018a1dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    000483c5  00000000  00000000  001a13bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00003480  00000000  00000000  001e9782  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 0000c800  00000000  00000000  001ecc02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003efb0  00000000  00000000  001f9402  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0004f196  00000000  00000000  002383b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001428b3  00000000  00000000  00287548  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  00009b00  00000000  00000000  003c9dfc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b401c:	4809      	ldr	r0, [pc, #36]	; (b4044 <module_user_pre_init+0x28>)
   b401e:	490a      	ldr	r1, [pc, #40]	; (b4048 <module_user_pre_init+0x2c>)
   b4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4024:	d005      	beq.n	b4032 <module_user_pre_init+0x16>
   b4026:	4a09      	ldr	r2, [pc, #36]	; (b404c <module_user_pre_init+0x30>)
   b4028:	4282      	cmp	r2, r0
   b402a:	d002      	beq.n	b4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b402c:	1a12      	subs	r2, r2, r0
   b402e:	f005 fd67 	bl	b9b00 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4032:	4807      	ldr	r0, [pc, #28]	; (b4050 <module_user_pre_init+0x34>)
   b4034:	4a07      	ldr	r2, [pc, #28]	; (b4054 <module_user_pre_init+0x38>)
   b4036:	2100      	movs	r1, #0
   b4038:	1a12      	subs	r2, r2, r0
   b403a:	f005 fd89 	bl	b9b50 <memset>
    return &link_global_data_start;
}
   b403e:	4801      	ldr	r0, [pc, #4]	; (b4044 <module_user_pre_init+0x28>)
   b4040:	bd08      	pop	{r3, pc}
   b4042:	bf00      	nop
   b4044:	2003b6b8 	.word	0x2003b6b8
   b4048:	000baed8 	.word	0x000baed8
   b404c:	2003b740 	.word	0x2003b740
   b4050:	2003b740 	.word	0x2003b740
   b4054:	2003e7ed 	.word	0x2003e7ed

000b4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405a:	4e07      	ldr	r6, [pc, #28]	; (b4078 <module_user_init+0x20>)
   b405c:	4c07      	ldr	r4, [pc, #28]	; (b407c <module_user_init+0x24>)
    module_user_init_hook();
   b405e:	f005 facb 	bl	b95f8 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4062:	1ba4      	subs	r4, r4, r6
   b4064:	08a4      	lsrs	r4, r4, #2
   b4066:	2500      	movs	r5, #0
   b4068:	42ac      	cmp	r4, r5
   b406a:	d100      	bne.n	b406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b406e:	f856 3b04 	ldr.w	r3, [r6], #4
   b4072:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4074:	3501      	adds	r5, #1
   b4076:	e7f7      	b.n	b4068 <module_user_init+0x10>
   b4078:	000bae80 	.word	0x000bae80
   b407c:	000baea8 	.word	0x000baea8

000b4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4080:	f000 bdf2 	b.w	b4c68 <setup>

000b4084 <module_user_loop>:
}

void module_user_loop() {
   b4084:	b508      	push	{r3, lr}
    loop();
   b4086:	f000 ffed 	bl	b5064 <loop>
    _post_loop();
}
   b408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b408e:	f005 ba6b 	b.w	b9568 <_post_loop>

000b4092 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4092:	f003 b8a9 	b.w	b71e8 <malloc>

000b4096 <_Znaj>:
   b4096:	f003 b8a7 	b.w	b71e8 <malloc>

000b409a <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b409a:	f003 b8ad 	b.w	b71f8 <free>
	...

000b40a0 <__cxa_pure_virtual>:
int __wrap_printf(const char* fmt, ...) {
    return -1;
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   b40a0:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   b40a2:	4a03      	ldr	r2, [pc, #12]	; (b40b0 <__cxa_pure_virtual+0x10>)
   b40a4:	4903      	ldr	r1, [pc, #12]	; (b40b4 <__cxa_pure_virtual+0x14>)
   b40a6:	200c      	movs	r0, #12
   b40a8:	f002 ffa2 	bl	b6ff0 <panic_>
  while (1);
   b40ac:	e7fe      	b.n	b40ac <__cxa_pure_virtual+0xc>
   b40ae:	bf00      	nop
   b40b0:	000b6db1 	.word	0x000b6db1
   b40b4:	000b9f20 	.word	0x000b9f20

000b40b8 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40b8:	7800      	ldrb	r0, [r0, #0]
   b40ba:	fab0 f080 	clz	r0, r0
   b40be:	0940      	lsrs	r0, r0, #5
   b40c0:	4770      	bx	lr

000b40c2 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40c2:	2301      	movs	r3, #1
   b40c4:	7003      	strb	r3, [r0, #0]
   b40c6:	4770      	bx	lr

000b40c8 <_ZN5spark10LogHandler5writeEPKcj>:
    }
}

inline void spark::LogHandler::write(const char *data, size_t size) {
    // Default implementation does nothing
}
   b40c8:	4770      	bx	lr

000b40ca <_ZN5spark16StreamLogHandler5writeEPKcj>:
inline Print* spark::StreamLogHandler::stream() const {
    return stream_;
}

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
   b40ca:	6a00      	ldr	r0, [r0, #32]
   b40cc:	6803      	ldr	r3, [r0, #0]
   b40ce:	68db      	ldr	r3, [r3, #12]
   b40d0:	4718      	bx	r3
	...

000b40d4 <_ZN16JsonParserStaticILj3072ELj550EED1Ev>:
 *
 * @param MAX_TOKENS The maximum number of tokens you expect. Each object has a token and two for each key/value pair.
 * Each array is a token and one for each element in the array.
 */
template <size_t BUFFER_SIZE, size_t MAX_TOKENS>
class JsonParserStatic : public JsonParser {
   b40d4:	b510      	push	{r4, lr}
   b40d6:	4b03      	ldr	r3, [pc, #12]	; (b40e4 <_ZN16JsonParserStaticILj3072ELj550EED1Ev+0x10>)
   b40d8:	6003      	str	r3, [r0, #0]
   b40da:	4604      	mov	r4, r0
   b40dc:	f001 f898 	bl	b5210 <_ZN10JsonParserD1Ev>
   b40e0:	4620      	mov	r0, r4
   b40e2:	bd10      	pop	{r4, pc}
   b40e4:	000ba798 	.word	0x000ba798

000b40e8 <_ZN16JsonParserStaticILj3072ELj550EED0Ev>:
   b40e8:	b510      	push	{r4, lr}
   b40ea:	4604      	mov	r4, r0
   b40ec:	f7ff fff2 	bl	b40d4 <_ZN16JsonParserStaticILj3072ELj550EED1Ev>
   b40f0:	4620      	mov	r0, r4
   b40f2:	f642 618c 	movw	r1, #11916	; 0x2e8c
   b40f6:	f7ff ffd0 	bl	b409a <_ZdlPvj>
   b40fa:	4620      	mov	r0, r4
   b40fc:	bd10      	pop	{r4, pc}

000b40fe <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>:
	bool getValueByKey(const JsonParserGeneratorRK::jsmntok_t *container, const char *name, T &result) const {
   b40fe:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b4100:	461d      	mov	r5, r3
		if (getValueTokenByKey(container, name, value)) {
   b4102:	ab01      	add	r3, sp, #4
	bool getValueByKey(const JsonParserGeneratorRK::jsmntok_t *container, const char *name, T &result) const {
   b4104:	4604      	mov	r4, r0
		if (getValueTokenByKey(container, name, value)) {
   b4106:	f001 fa69 	bl	b55dc <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
   b410a:	b120      	cbz	r0, b4116 <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0+0x18>
			return getTokenValue(value, result);
   b410c:	9901      	ldr	r1, [sp, #4]
   b410e:	462a      	mov	r2, r5
   b4110:	4620      	mov	r0, r4
   b4112:	f001 f975 	bl	b5400 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tERi>
	}
   b4116:	b003      	add	sp, #12
   b4118:	bd30      	pop	{r4, r5, pc}

000b411a <_ZN10JsonWriter11startObjectEv.isra.0>:
	void init();

	/**
	 * @brief Start a new JSON object. Make sure you finish it with finishObjectOrArray()
	 */
	bool startObject() { return startObjectOrArray('{', '}'); };
   b411a:	227d      	movs	r2, #125	; 0x7d
   b411c:	217b      	movs	r1, #123	; 0x7b
   b411e:	f001 bb8c 	b.w	b583a <_ZN10JsonWriter18startObjectOrArrayEcc>
	...

000b4124 <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
   b4124:	4b0a      	ldr	r3, [pc, #40]	; (b4150 <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
   b4126:	b510      	push	{r4, lr}
   b4128:	4604      	mov	r4, r0
   b412a:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
   b412c:	f004 f880 	bl	b8230 <_ZN5spark10LogManager8instanceEv>
   b4130:	4621      	mov	r1, r4
   b4132:	f004 fab8 	bl	b86a6 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
   b4136:	f005 f9cf 	bl	b94d8 <_Z16_fetch_usbserialv>
   b413a:	f005 f9c1 	bl	b94c0 <_ZN9USBSerial3endEv>
    virtual ~LogHandler() = default;
   b413e:	4620      	mov	r0, r4
   b4140:	4b04      	ldr	r3, [pc, #16]	; (b4154 <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
   b4142:	f840 3b04 	str.w	r3, [r0], #4
   b4146:	f004 f949 	bl	b83dc <_ZN5spark6detail9LogFilterD1Ev>
    }
   b414a:	4620      	mov	r0, r4
   b414c:	bd10      	pop	{r4, pc}
   b414e:	bf00      	nop
   b4150:	000ba780 	.word	0x000ba780
   b4154:	000ba768 	.word	0x000ba768

000b4158 <_ZN5spark16SerialLogHandlerD0Ev>:
    virtual ~SerialLogHandler() {
   b4158:	b510      	push	{r4, lr}
   b415a:	4604      	mov	r4, r0
    }
   b415c:	f7ff ffe2 	bl	b4124 <_ZN5spark16SerialLogHandlerD1Ev>
   b4160:	4620      	mov	r0, r4
   b4162:	2124      	movs	r1, #36	; 0x24
   b4164:	f7ff ff99 	bl	b409a <_ZdlPvj>
   b4168:	4620      	mov	r0, r4
   b416a:	bd10      	pop	{r4, pc}

000b416c <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   b416c:	b40e      	push	{r1, r2, r3}
   b416e:	b500      	push	{lr}
   b4170:	b08c      	sub	sp, #48	; 0x30
   b4172:	aa0d      	add	r2, sp, #52	; 0x34
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   b4174:	f04f 0c20 	mov.w	ip, #32
inline void spark::Logger::info(const char *fmt, ...) const {
   b4178:	f852 1b04 	ldr.w	r1, [r2], #4
    va_start(args, fmt);
   b417c:	9203      	str	r2, [sp, #12]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b417e:	e9cd 1200 	strd	r1, r2, [sp]
    attr.flags = 0;
   b4182:	2300      	movs	r3, #0
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b4184:	6801      	ldr	r1, [r0, #0]
   b4186:	aa04      	add	r2, sp, #16
   b4188:	201e      	movs	r0, #30
    attr.flags = 0;
   b418a:	e9cd c304 	strd	ip, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b418e:	f002 ff37 	bl	b7000 <log_message_v>
}
   b4192:	b00c      	add	sp, #48	; 0x30
   b4194:	f85d eb04 	ldr.w	lr, [sp], #4
   b4198:	b003      	add	sp, #12
   b419a:	4770      	bx	lr

000b419c <_Z10printTokenR10JsonParserPKN21JsonParserGeneratorRK9jsmntok_tE.part.0>:
	}

	Log.info("Total tokens=%d (%4.2f%% full) storage=%d (%4.2f%% full)", tokenCount, (100*((float)tokenCount/(float)jp.getMaxTokens())), storageSize, (100*((float)storageSize/(float)jp.getBufferLen())));
}

void printToken(JsonParser &jp, const JsonParserGeneratorRK::jsmntok_t *tok) {
   b419c:	b5f0      	push	{r4, r5, r6, r7, lr}
		typeName = "UNDEFINED";
		break;

	case JsonParserGeneratorRK::JSMN_OBJECT:
		typeName = "OBJECT";
		memcpy(tempBuf, jp.getBuffer() + tok->start, tok->end - tok->start);
   b419e:	e9d1 5601 	ldrd	r5, r6, [r1, #4]
void printToken(JsonParser &jp, const JsonParserGeneratorRK::jsmntok_t *tok) {
   b41a2:	f2ad 4d14 	subw	sp, sp, #1044	; 0x414
   b41a6:	460c      	mov	r4, r1
		memcpy(tempBuf, jp.getBuffer() + tok->start, tok->end - tok->start);
   b41a8:	6841      	ldr	r1, [r0, #4]
   b41aa:	ab04      	add	r3, sp, #16
   b41ac:	1b77      	subs	r7, r6, r5
   b41ae:	463a      	mov	r2, r7
   b41b0:	4429      	add	r1, r5
   b41b2:	4618      	mov	r0, r3
   b41b4:	f005 fca4 	bl	b9b00 <memcpy>
		tempBuf[tok->end - tok->start] = 0;
		Log.info("type=%s start=%d end=%d tokens=%d - %s", typeName, tok->start, tok->end, tok->size, tempBuf);
   b41b8:	68e3      	ldr	r3, [r4, #12]
   b41ba:	4907      	ldr	r1, [pc, #28]	; (b41d8 <_Z10printTokenR10JsonParserPKN21JsonParserGeneratorRK9jsmntok_tE.part.0+0x3c>)
		tempBuf[tok->end - tok->start] = 0;
   b41bc:	2200      	movs	r2, #0
   b41be:	55c2      	strb	r2, [r0, r7]
		Log.info("type=%s start=%d end=%d tokens=%d - %s", typeName, tok->start, tok->end, tok->size, tempBuf);
   b41c0:	e9cd 6300 	strd	r6, r3, [sp]
   b41c4:	9002      	str	r0, [sp, #8]
   b41c6:	4a05      	ldr	r2, [pc, #20]	; (b41dc <_Z10printTokenR10JsonParserPKN21JsonParserGeneratorRK9jsmntok_tE.part.0+0x40>)
   b41c8:	4805      	ldr	r0, [pc, #20]	; (b41e0 <_Z10printTokenR10JsonParserPKN21JsonParserGeneratorRK9jsmntok_tE.part.0+0x44>)
   b41ca:	462b      	mov	r3, r5
   b41cc:	f7ff ffce 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
	case JsonParserGeneratorRK::JSMN_PRIMITIVE:
		typeName = "PRIMITIVE";
		break;
	}

}
   b41d0:	f20d 4d14 	addw	sp, sp, #1044	; 0x414
   b41d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b41d6:	bf00      	nop
   b41d8:	000b9f3c 	.word	0x000b9f3c
   b41dc:	000b9f35 	.word	0x000b9f35
   b41e0:	2003e6b0 	.word	0x2003e6b0

000b41e4 <_Z7getTypei>:
byte getType(int nodeNumber) {
   b41e4:	b513      	push	{r0, r1, r4, lr}
   b41e6:	4604      	mov	r4, r0
	jp.getValueTokenByKey(jp.getOuterObject(), "nodes", nodesArrayContainer);
   b41e8:	480c      	ldr	r0, [pc, #48]	; (b421c <_Z7getTypei+0x38>)
   b41ea:	f001 f88e 	bl	b530a <_ZNK10JsonParser14getOuterObjectEv>
   b41ee:	4a0c      	ldr	r2, [pc, #48]	; (b4220 <_Z7getTypei+0x3c>)
   b41f0:	4601      	mov	r1, r0
   b41f2:	ab01      	add	r3, sp, #4
   b41f4:	4809      	ldr	r0, [pc, #36]	; (b421c <_Z7getTypei+0x38>)
   b41f6:	f001 f9f1 	bl	b55dc <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
	nodeObjectContainer = jp.getTokenByIndex(nodesArrayContainer, nodeNumber-1);
   b41fa:	9901      	ldr	r1, [sp, #4]
   b41fc:	4807      	ldr	r0, [pc, #28]	; (b421c <_Z7getTypei+0x38>)
   b41fe:	1e62      	subs	r2, r4, #1
   b4200:	f001 f8a5 	bl	b534e <_ZNK10JsonParser15getTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj>
	if(nodeObjectContainer == NULL) return false;								// Ran out of entries
   b4204:	b138      	cbz	r0, b4216 <_Z7getTypei+0x32>
	jp.getValueByKey(nodeObjectContainer, "type", type);
   b4206:	4601      	mov	r1, r0
   b4208:	4a06      	ldr	r2, [pc, #24]	; (b4224 <_Z7getTypei+0x40>)
   b420a:	4804      	ldr	r0, [pc, #16]	; (b421c <_Z7getTypei+0x38>)
   b420c:	466b      	mov	r3, sp
   b420e:	f7ff ff76 	bl	b40fe <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
	return type;
   b4212:	f89d 0000 	ldrb.w	r0, [sp]
}
   b4216:	b002      	add	sp, #8
   b4218:	bd10      	pop	{r4, pc}
   b421a:	bf00      	nop
   b421c:	2003b778 	.word	0x2003b778
   b4220:	000b9f63 	.word	0x000b9f63
   b4224:	000b9f69 	.word	0x000b9f69

000b4228 <_Z10printTokenR10JsonParserPKN21JsonParserGeneratorRK9jsmntok_tE>:
	switch(tok->type) {
   b4228:	780b      	ldrb	r3, [r1, #0]
   b422a:	2b01      	cmp	r3, #1
   b422c:	d101      	bne.n	b4232 <_Z10printTokenR10JsonParserPKN21JsonParserGeneratorRK9jsmntok_tE+0xa>
   b422e:	f7ff bfb5 	b.w	b419c <_Z10printTokenR10JsonParserPKN21JsonParserGeneratorRK9jsmntok_tE.part.0>
}
   b4232:	4770      	bx	lr

000b4234 <_Z14decompressDatahPhS_>:
        bitOffset += bitSizes[i];
    }
    return compressedData;
}

void decompressData(uint8_t compressedData, uint8_t data[], uint8_t bitSizes[]) {
   b4234:	b5f0      	push	{r4, r5, r6, r7, lr}
   b4236:	3901      	subs	r1, #1
   b4238:	1e55      	subs	r5, r2, #1
    uint8_t bitOffset = 0;
   b423a:	2400      	movs	r4, #0
   b423c:	3203      	adds	r2, #3
    for (uint8_t i = 0; i < 4; ++i) {
        data[i] = (compressedData >> bitOffset) & ((1 << bitSizes[i]) - 1);
   b423e:	2701      	movs	r7, #1
   b4240:	f815 3f01 	ldrb.w	r3, [r5, #1]!
   b4244:	fa07 f303 	lsl.w	r3, r7, r3
   b4248:	fa40 f604 	asr.w	r6, r0, r4
   b424c:	3b01      	subs	r3, #1
   b424e:	4033      	ands	r3, r6
   b4250:	f801 3f01 	strb.w	r3, [r1, #1]!
        bitOffset += bitSizes[i];
   b4254:	782b      	ldrb	r3, [r5, #0]
    for (uint8_t i = 0; i < 4; ++i) {
   b4256:	42aa      	cmp	r2, r5
        bitOffset += bitSizes[i];
   b4258:	441c      	add	r4, r3
   b425a:	b2e4      	uxtb	r4, r4
    for (uint8_t i = 0; i < 4; ++i) {
   b425c:	d1f0      	bne.n	b4240 <_Z14decompressDatahPhS_+0xc>
    }
}
   b425e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b4260 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   b4260:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   b4262:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   b4264:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   b4266:	b17c      	cbz	r4, b4288 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   b4268:	6863      	ldr	r3, [r4, #4]
   b426a:	3b01      	subs	r3, #1
   b426c:	6063      	str	r3, [r4, #4]
   b426e:	b95b      	cbnz	r3, b4288 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   b4270:	6823      	ldr	r3, [r4, #0]
   b4272:	4620      	mov	r0, r4
   b4274:	689b      	ldr	r3, [r3, #8]
   b4276:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b4278:	68a3      	ldr	r3, [r4, #8]
   b427a:	3b01      	subs	r3, #1
   b427c:	60a3      	str	r3, [r4, #8]
   b427e:	b91b      	cbnz	r3, b4288 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   b4280:	6823      	ldr	r3, [r4, #0]
   b4282:	4620      	mov	r0, r4
   b4284:	68db      	ldr	r3, [r3, #12]
   b4286:	4798      	blx	r3
	  _M_pi->_M_release();
      }
   b4288:	4628      	mov	r0, r5
   b428a:	bd38      	pop	{r3, r4, r5, pc}

000b428c <_Z11printTokensR10JsonParserb>:
void printTokens(JsonParser &jp, bool verbose) {
   b428c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b4290:	ed2d 8b02 	vpush	{d8}
   b4294:	4604      	mov	r4, r0
   b4296:	f2ad 4d24 	subw	sp, sp, #1060	; 0x424
	if (verbose) Log.info("printing tokens");
   b429a:	460e      	mov	r6, r1
   b429c:	b119      	cbz	r1, b42a6 <_Z11printTokensR10JsonParserb+0x1a>
   b429e:	493b      	ldr	r1, [pc, #236]	; (b438c <_Z11printTokensR10JsonParserb+0x100>)
   b42a0:	483b      	ldr	r0, [pc, #236]	; (b4390 <_Z11printTokensR10JsonParserb+0x104>)
   b42a2:	f7ff ff63 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
	JsonParserGeneratorRK::jsmntok_t *getTokens() { return tokens; };
   b42a6:	e9d4 5905 	ldrd	r5, r9, [r4, #20]
	memcpy(tempBuf, jp.getBuffer() + tok->start, tok->end - tok->start);
   b42aa:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
   b42ae:	6861      	ldr	r1, [r4, #4]
   b42b0:	1ad2      	subs	r2, r2, r3
   b42b2:	4419      	add	r1, r3
   b42b4:	a808      	add	r0, sp, #32
   b42b6:	f005 fc23 	bl	b9b00 <memcpy>
	tempBuf[tok->end - tok->start] = 0;
   b42ba:	e9d5 2301 	ldrd	r2, r3, [r5, #4]
   b42be:	a908      	add	r1, sp, #32
   b42c0:	1a9b      	subs	r3, r3, r2
   b42c2:	2200      	movs	r2, #0
   b42c4:	54ca      	strb	r2, [r1, r3]
	storageSize += tok->end;
   b42c6:	f8d5 8008 	ldr.w	r8, [r5, #8]
	if (verbose) Log.info("Outer object start=%d end=%d tokens=%d - %s", tok->start, tok->end, tok->size, tempBuf);
   b42ca:	b146      	cbz	r6, b42de <_Z11printTokensR10JsonParserb+0x52>
   b42cc:	9101      	str	r1, [sp, #4]
   b42ce:	68eb      	ldr	r3, [r5, #12]
   b42d0:	9300      	str	r3, [sp, #0]
   b42d2:	686a      	ldr	r2, [r5, #4]
   b42d4:	492f      	ldr	r1, [pc, #188]	; (b4394 <_Z11printTokensR10JsonParserb+0x108>)
   b42d6:	482e      	ldr	r0, [pc, #184]	; (b4390 <_Z11printTokensR10JsonParserb+0x104>)
   b42d8:	4643      	mov	r3, r8
   b42da:	f7ff ff47 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
	sniprintf(tempBuf, sizeof(tempBuf), "test %s", charlike);
   b42de:	4b2e      	ldr	r3, [pc, #184]	; (b4398 <_Z11printTokensR10JsonParserb+0x10c>)
   b42e0:	4a2e      	ldr	r2, [pc, #184]	; (b439c <_Z11printTokensR10JsonParserb+0x110>)
   b42e2:	f44f 6180 	mov.w	r1, #1024	; 0x400
   b42e6:	a808      	add	r0, sp, #32
   b42e8:	f002 ffa6 	bl	b7238 <sniprintf>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   b42ec:	4b2c      	ldr	r3, [pc, #176]	; (b43a0 <_Z11printTokensR10JsonParserb+0x114>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b42ee:	492d      	ldr	r1, [pc, #180]	; (b43a4 <_Z11printTokensR10JsonParserb+0x118>)
   b42f0:	781b      	ldrb	r3, [r3, #0]
   b42f2:	f88d 3000 	strb.w	r3, [sp]
   b42f6:	aa08      	add	r2, sp, #32
   b42f8:	233c      	movs	r3, #60	; 0x3c
   b42fa:	a806      	add	r0, sp, #24
   b42fc:	f003 f9ac 	bl	b7658 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   b4300:	a807      	add	r0, sp, #28
   b4302:	f7ff ffad 	bl	b4260 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b4306:	6965      	ldr	r5, [r4, #20]
	int tokenCount = 0;
   b4308:	2700      	movs	r7, #0
	for(JsonParserGeneratorRK::jsmntok_t *tok = jp.getTokens(); tok < tokensEnd; tok++) {
   b430a:	454d      	cmp	r5, r9
   b430c:	d20b      	bcs.n	b4326 <_Z11printTokensR10JsonParserb+0x9a>
		if (tok->start > 0) {
   b430e:	686b      	ldr	r3, [r5, #4]
   b4310:	2b00      	cmp	r3, #0
			tokenCount += tok->size;
   b4312:	bfc4      	itt	gt
   b4314:	68eb      	ldrgt	r3, [r5, #12]
   b4316:	18ff      	addgt	r7, r7, r3
		if (verbose) {
   b4318:	b11e      	cbz	r6, b4322 <_Z11printTokensR10JsonParserb+0x96>
			printToken(jp, tok);
   b431a:	4629      	mov	r1, r5
   b431c:	4620      	mov	r0, r4
   b431e:	f7ff ff83 	bl	b4228 <_Z10printTokenR10JsonParserPKN21JsonParserGeneratorRK9jsmntok_tE>
	for(JsonParserGeneratorRK::jsmntok_t *tok = jp.getTokens(); tok < tokensEnd; tok++) {
   b4322:	3510      	adds	r5, #16
   b4324:	e7f1      	b.n	b430a <_Z11printTokensR10JsonParserb+0x7e>
	Log.info("Total tokens=%d (%4.2f%% full) storage=%d (%4.2f%% full)", tokenCount, (100*((float)tokenCount/(float)jp.getMaxTokens())), storageSize, (100*((float)storageSize/(float)jp.getBufferLen())));
   b4326:	ee07 8a90 	vmov	s15, r8
   b432a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
   b432e:	edd4 7a02 	vldr	s15, [r4, #8]
   b4332:	ed9f 8a1d 	vldr	s16, [pc, #116]	; b43a8 <_Z11printTokensR10JsonParserb+0x11c>
   b4336:	eef8 7a67 	vcvt.f32.u32	s15, s15
   b433a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
   b433e:	ee67 7a08 	vmul.f32	s15, s14, s16
   b4342:	ee17 0a90 	vmov	r0, s15
   b4346:	f005 fb75 	bl	b9a34 <__aeabi_f2d>
   b434a:	ee07 7a90 	vmov	s15, r7
   b434e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
   b4352:	edd4 7a07 	vldr	s15, [r4, #28]
   b4356:	f8cd 8008 	str.w	r8, [sp, #8]
   b435a:	eef8 7a67 	vcvt.f32.u32	s15, s15
   b435e:	e9cd 0104 	strd	r0, r1, [sp, #16]
   b4362:	ee86 7aa7 	vdiv.f32	s14, s13, s15
   b4366:	ee67 7a08 	vmul.f32	s15, s14, s16
   b436a:	ee17 0a90 	vmov	r0, s15
   b436e:	f005 fb61 	bl	b9a34 <__aeabi_f2d>
   b4372:	463a      	mov	r2, r7
   b4374:	e9cd 0100 	strd	r0, r1, [sp]
   b4378:	490c      	ldr	r1, [pc, #48]	; (b43ac <_Z11printTokensR10JsonParserb+0x120>)
   b437a:	4805      	ldr	r0, [pc, #20]	; (b4390 <_Z11printTokensR10JsonParserb+0x104>)
   b437c:	f7ff fef6 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
}
   b4380:	f20d 4d24 	addw	sp, sp, #1060	; 0x424
   b4384:	ecbd 8b02 	vpop	{d8}
   b4388:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b438c:	000b9f6e 	.word	0x000b9f6e
   b4390:	2003e6b0 	.word	0x2003e6b0
   b4394:	000b9f7e 	.word	0x000b9f7e
   b4398:	000b9faa 	.word	0x000b9faa
   b439c:	000b9faf 	.word	0x000b9faf
   b43a0:	2003b770 	.word	0x2003b770
   b43a4:	000b9fb7 	.word	0x000b9fb7
   b43a8:	42c80000 	.word	0x42c80000
   b43ac:	000b9fbc 	.word	0x000b9fbc

000b43b0 <_Z22parseJoinPayloadValueshhRhS_S_S_>:
bool parseJoinPayloadValues(uint8_t sensorType, uint8_t compressedJoinPayload, uint8_t& payload1, uint8_t& payload2, uint8_t& payload3, uint8_t& payload4) {
   b43b0:	b570      	push	{r4, r5, r6, lr}
   b43b2:	4604      	mov	r4, r0
   b43b4:	b086      	sub	sp, #24
   b43b6:	461d      	mov	r5, r3
    switch (sensorType) {
   b43b8:	2c13      	cmp	r4, #19
    uint8_t data[4] = {0};
   b43ba:	f04f 0300 	mov.w	r3, #0
    uint8_t bitSizes[4] = {0};
   b43be:	e9cd 3302 	strd	r3, r3, [sp, #8]
bool parseJoinPayloadValues(uint8_t sensorType, uint8_t compressedJoinPayload, uint8_t& payload1, uint8_t& payload2, uint8_t& payload3, uint8_t& payload4) {
   b43c2:	4608      	mov	r0, r1
   b43c4:	4616      	mov	r6, r2
    switch (sensorType) {
   b43c6:	d81c      	bhi.n	b4402 <_Z22parseJoinPayloadValueshhRhS_S_S_+0x52>
   b43c8:	2c09      	cmp	r4, #9
   b43ca:	d83c      	bhi.n	b4446 <_Z22parseJoinPayloadValueshhRhS_S_S_+0x96>
   b43cc:	1e63      	subs	r3, r4, #1
   b43ce:	2b08      	cmp	r3, #8
   b43d0:	d922      	bls.n	b4418 <_Z22parseJoinPayloadValueshhRhS_S_S_+0x68>
            Log.info("Unknown sensor type in parseJoinPayloadValues %d", sensorType);
   b43d2:	4921      	ldr	r1, [pc, #132]	; (b4458 <_Z22parseJoinPayloadValueshhRhS_S_S_+0xa8>)
   b43d4:	4821      	ldr	r0, [pc, #132]	; (b445c <_Z22parseJoinPayloadValueshhRhS_S_S_+0xac>)
   b43d6:	4622      	mov	r2, r4
   b43d8:	f7ff fec8 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   b43dc:	f002 fe84 	bl	b70e8 <spark_cloud_flag_connected>
            if (Particle.connected()) Particle.publish("Alert", "Unknown sensor type in parseJoinPayloadValues", PRIVATE);
   b43e0:	b168      	cbz	r0, b43fe <_Z22parseJoinPayloadValueshhRhS_S_S_+0x4e>
   b43e2:	4b1f      	ldr	r3, [pc, #124]	; (b4460 <_Z22parseJoinPayloadValueshhRhS_S_S_+0xb0>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b43e4:	4a1f      	ldr	r2, [pc, #124]	; (b4464 <_Z22parseJoinPayloadValueshhRhS_S_S_+0xb4>)
   b43e6:	781b      	ldrb	r3, [r3, #0]
   b43e8:	491f      	ldr	r1, [pc, #124]	; (b4468 <_Z22parseJoinPayloadValueshhRhS_S_S_+0xb8>)
   b43ea:	f88d 3000 	strb.w	r3, [sp]
   b43ee:	a804      	add	r0, sp, #16
   b43f0:	233c      	movs	r3, #60	; 0x3c
   b43f2:	f003 f931 	bl	b7658 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   b43f6:	a805      	add	r0, sp, #20
   b43f8:	f7ff ff32 	bl	b4260 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            return false;
   b43fc:	2000      	movs	r0, #0
}
   b43fe:	b006      	add	sp, #24
   b4400:	bd70      	pop	{r4, r5, r6, pc}
    switch (sensorType) {
   b4402:	f1a4 0314 	sub.w	r3, r4, #20
   b4406:	2b09      	cmp	r3, #9
   b4408:	d8e3      	bhi.n	b43d2 <_Z22parseJoinPayloadValueshhRhS_S_S_+0x22>
            bitSizes[0] = 6; // space (6 bits)
   b440a:	2306      	movs	r3, #6
   b440c:	f88d 300c 	strb.w	r3, [sp, #12]
            bitSizes[1] = 1; // placement (1 bit)
   b4410:	2301      	movs	r3, #1
   b4412:	f88d 300d 	strb.w	r3, [sp, #13]
        } break;
   b4416:	e002      	b.n	b441e <_Z22parseJoinPayloadValueshhRhS_S_S_+0x6e>
            bitSizes[0] = 1; // 2-Way (1 bit)
   b4418:	2301      	movs	r3, #1
   b441a:	f88d 300c 	strb.w	r3, [sp, #12]
    decompressData(compressedJoinPayload, data, bitSizes);
   b441e:	aa03      	add	r2, sp, #12
   b4420:	a902      	add	r1, sp, #8
   b4422:	f7ff ff07 	bl	b4234 <_Z14decompressDatahPhS_>
    payload1 = data[0];
   b4426:	f89d 3008 	ldrb.w	r3, [sp, #8]
   b442a:	7033      	strb	r3, [r6, #0]
    payload2 = data[1];
   b442c:	f89d 3009 	ldrb.w	r3, [sp, #9]
   b4430:	702b      	strb	r3, [r5, #0]
    payload3 = data[2];
   b4432:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b4434:	f89d 200a 	ldrb.w	r2, [sp, #10]
   b4438:	701a      	strb	r2, [r3, #0]
    payload4 = data[3];
   b443a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b443c:	f89d 200b 	ldrb.w	r2, [sp, #11]
   b4440:	701a      	strb	r2, [r3, #0]
    return true;
   b4442:	2001      	movs	r0, #1
   b4444:	e7db      	b.n	b43fe <_Z22parseJoinPayloadValueshhRhS_S_S_+0x4e>
            bitSizes[0] = 6; // space (6 bits)
   b4446:	2306      	movs	r3, #6
   b4448:	f88d 300c 	strb.w	r3, [sp, #12]
            bitSizes[1] = 1; // placement (1 bit)
   b444c:	2301      	movs	r3, #1
   b444e:	f88d 300d 	strb.w	r3, [sp, #13]
            bitSizes[2] = 1; // multi (1 bit)
   b4452:	f88d 300e 	strb.w	r3, [sp, #14]
        } break;
   b4456:	e7e2      	b.n	b441e <_Z22parseJoinPayloadValueshhRhS_S_S_+0x6e>
   b4458:	000b9ff5 	.word	0x000b9ff5
   b445c:	2003e6b0 	.word	0x2003e6b0
   b4460:	2003b770 	.word	0x2003b770
   b4464:	000ba026 	.word	0x000ba026
   b4468:	000ba054 	.word	0x000ba054

000b446c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   b446c:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b446e:	e9d0 5300 	ldrd	r5, r3, [r0]
   b4472:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   b4474:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b4476:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b447a:	42ae      	cmp	r6, r5
   b447c:	d004      	beq.n	b4488 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
class LogCategoryFilter {
   b447e:	4628      	mov	r0, r5
   b4480:	f004 fe2c 	bl	b90dc <_ZN6StringD1Ev>
   b4484:	3514      	adds	r5, #20
   b4486:	e7f8      	b.n	b447a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   b4488:	6820      	ldr	r0, [r4, #0]
   b448a:	f002 feb5 	bl	b71f8 <free>
    AllocatorT::free(data_);
}
   b448e:	4620      	mov	r0, r4
   b4490:	bd70      	pop	{r4, r5, r6, pc}

000b4492 <_ZNK10JsonParser13getValueByKeyImEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_>:
	bool getValueByKey(const JsonParserGeneratorRK::jsmntok_t *container, const char *name, T &result) const {
   b4492:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b4494:	461d      	mov	r5, r3
		if (getValueTokenByKey(container, name, value)) {
   b4496:	ab01      	add	r3, sp, #4
	bool getValueByKey(const JsonParserGeneratorRK::jsmntok_t *container, const char *name, T &result) const {
   b4498:	4604      	mov	r4, r0
		if (getValueTokenByKey(container, name, value)) {
   b449a:	f001 f89f 	bl	b55dc <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
   b449e:	b120      	cbz	r0, b44aa <_ZNK10JsonParser13getValueByKeyImEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_+0x18>
			return getTokenValue(value, result);
   b44a0:	9901      	ldr	r1, [sp, #4]
   b44a2:	462a      	mov	r2, r5
   b44a4:	4620      	mov	r0, r4
   b44a6:	f000 ffbd 	bl	b5424 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tERm>
	}
   b44aa:	b003      	add	sp, #12
   b44ac:	bd30      	pop	{r4, r5, pc}
	...

000b44b0 <_Z13printNodeDatab>:
void printNodeData(bool publish) {
   b44b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b44b4:	4607      	mov	r7, r0
   b44b6:	f5ad 7d37 	sub.w	sp, sp, #732	; 0x2dc
	jp.getValueTokenByKey(jp.getOuterObject(), "nodes", nodesArrayContainer);
   b44ba:	4877      	ldr	r0, [pc, #476]	; (b4698 <_Z13printNodeDatab+0x1e8>)
		nodeObjectContainer = jp.getTokenByIndex(nodesArrayContainer, i);
   b44bc:	4d76      	ldr	r5, [pc, #472]	; (b4698 <_Z13printNodeDatab+0x1e8>)
		jp.getValueByKey(nodeObjectContainer, "uID", uniqueID);
   b44be:	f8df a218 	ldr.w	sl, [pc, #536]	; b46d8 <_Z13printNodeDatab+0x228>
		jp.getValueByKey(nodeObjectContainer, "node", nodeNumber);
   b44c2:	f8df b218 	ldr.w	fp, [pc, #536]	; b46dc <_Z13printNodeDatab+0x22c>
	jp.getValueTokenByKey(jp.getOuterObject(), "nodes", nodesArrayContainer);
   b44c6:	f000 ff20 	bl	b530a <_ZNK10JsonParser14getOuterObjectEv>
   b44ca:	4a74      	ldr	r2, [pc, #464]	; (b469c <_Z13printNodeDatab+0x1ec>)
   b44cc:	4601      	mov	r1, r0
   b44ce:	ab14      	add	r3, sp, #80	; 0x50
   b44d0:	4871      	ldr	r0, [pc, #452]	; (b4698 <_Z13printNodeDatab+0x1e8>)
   b44d2:	f001 f883 	bl	b55dc <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
	for (int i=0; i<100; i++) {												// Iterate through the array looking for a match
   b44d6:	2600      	movs	r6, #0
		nodeObjectContainer = jp.getTokenByIndex(nodesArrayContainer, i);
   b44d8:	9914      	ldr	r1, [sp, #80]	; 0x50
   b44da:	4632      	mov	r2, r6
   b44dc:	4628      	mov	r0, r5
   b44de:	f000 ff36 	bl	b534e <_ZNK10JsonParser15getTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj>
		if(nodeObjectContainer == NULL) {
   b44e2:	4604      	mov	r4, r0
   b44e4:	2800      	cmp	r0, #0
   b44e6:	f000 80ab 	beq.w	b4640 <_Z13printNodeDatab+0x190>
		jp.getValueByKey(nodeObjectContainer, "uID", uniqueID);
   b44ea:	4601      	mov	r1, r0
   b44ec:	ab0d      	add	r3, sp, #52	; 0x34
   b44ee:	4652      	mov	r2, sl
   b44f0:	4628      	mov	r0, r5
   b44f2:	f7ff ffce 	bl	b4492 <_ZNK10JsonParser13getValueByKeyImEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_>
		jp.getValueByKey(nodeObjectContainer, "node", nodeNumber);
   b44f6:	ab0c      	add	r3, sp, #48	; 0x30
   b44f8:	465a      	mov	r2, fp
   b44fa:	4621      	mov	r1, r4
   b44fc:	4628      	mov	r0, r5
   b44fe:	f7ff fdfe 	bl	b40fe <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
		jp.getValueByKey(nodeObjectContainer, "type", sensorType);
   b4502:	4a67      	ldr	r2, [pc, #412]	; (b46a0 <_Z13printNodeDatab+0x1f0>)
   b4504:	ab0e      	add	r3, sp, #56	; 0x38
   b4506:	4621      	mov	r1, r4
   b4508:	4628      	mov	r0, r5
   b450a:	f7ff fdf8 	bl	b40fe <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
		jp.getValueByKey(nodeObjectContainer, "p", compressedJoinPayload);
   b450e:	4a65      	ldr	r2, [pc, #404]	; (b46a4 <_Z13printNodeDatab+0x1f4>)
   b4510:	ab0f      	add	r3, sp, #60	; 0x3c
   b4512:	4621      	mov	r1, r4
   b4514:	4628      	mov	r0, r5
   b4516:	f7ff fdf2 	bl	b40fe <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
		jp.getValueByKey(nodeObjectContainer, "p1", uncompressedJoinPayload1);
   b451a:	4a63      	ldr	r2, [pc, #396]	; (b46a8 <_Z13printNodeDatab+0x1f8>)
   b451c:	ab10      	add	r3, sp, #64	; 0x40
   b451e:	4621      	mov	r1, r4
   b4520:	4628      	mov	r0, r5
   b4522:	f7ff fdec 	bl	b40fe <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
		jp.getValueByKey(nodeObjectContainer, "p2", uncompressedJoinPayload2);
   b4526:	4a61      	ldr	r2, [pc, #388]	; (b46ac <_Z13printNodeDatab+0x1fc>)
   b4528:	ab11      	add	r3, sp, #68	; 0x44
   b452a:	4621      	mov	r1, r4
   b452c:	4628      	mov	r0, r5
   b452e:	f7ff fde6 	bl	b40fe <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
		jp.getValueByKey(nodeObjectContainer, "pend", pendingAlertCode);
   b4532:	4a5f      	ldr	r2, [pc, #380]	; (b46b0 <_Z13printNodeDatab+0x200>)
   b4534:	ab12      	add	r3, sp, #72	; 0x48
   b4536:	4621      	mov	r1, r4
   b4538:	4628      	mov	r0, r5
   b453a:	f7ff fde0 	bl	b40fe <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
		parseJoinPayloadValues(sensorType, compressedJoinPayload, payload1, payload2, payload3, payload4);
   b453e:	f10d 092f 	add.w	r9, sp, #47	; 0x2f
		jp.getValueByKey(nodeObjectContainer, "cont", pendingAlertContext);
   b4542:	4a5c      	ldr	r2, [pc, #368]	; (b46b4 <_Z13printNodeDatab+0x204>)
   b4544:	ab13      	add	r3, sp, #76	; 0x4c
   b4546:	4621      	mov	r1, r4
   b4548:	4628      	mov	r0, r5
		parseJoinPayloadValues(sensorType, compressedJoinPayload, payload1, payload2, payload3, payload4);
   b454a:	f10d 082e 	add.w	r8, sp, #46	; 0x2e
		jp.getValueByKey(nodeObjectContainer, "cont", pendingAlertContext);
   b454e:	f7ff fdd6 	bl	b40fe <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
		parseJoinPayloadValues(sensorType, compressedJoinPayload, payload1, payload2, payload3, payload4);
   b4552:	aa0b      	add	r2, sp, #44	; 0x2c
   b4554:	f89d 103c 	ldrb.w	r1, [sp, #60]	; 0x3c
   b4558:	f89d 0038 	ldrb.w	r0, [sp, #56]	; 0x38
   b455c:	f8cd 9004 	str.w	r9, [sp, #4]
   b4560:	f8cd 8000 	str.w	r8, [sp]
   b4564:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
   b4568:	f7ff ff22 	bl	b43b0 <_Z22parseJoinPayloadValueshhRhS_S_S_>
		switch (sensorType) {
   b456c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   b456e:	2a13      	cmp	r2, #19
   b4570:	dc1a      	bgt.n	b45a8 <_Z13printNodeDatab+0xf8>
   b4572:	2a09      	cmp	r2, #9
   b4574:	dc1c      	bgt.n	b45b0 <_Z13printNodeDatab+0x100>
   b4576:	1e53      	subs	r3, r2, #1
   b4578:	2b08      	cmp	r3, #8
   b457a:	d972      	bls.n	b4662 <_Z13printNodeDatab+0x1b2>
				Log.info("Unknown sensor type in printNodeData %d", sensorType);
   b457c:	494e      	ldr	r1, [pc, #312]	; (b46b8 <_Z13printNodeDatab+0x208>)
   b457e:	484f      	ldr	r0, [pc, #316]	; (b46bc <_Z13printNodeDatab+0x20c>)
   b4580:	f7ff fdf4 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b4584:	f002 fdb0 	bl	b70e8 <spark_cloud_flag_connected>
				if (Particle.connected()) Particle.publish("Alert", "Unknown sensor type in printNodeData", PRIVATE);
   b4588:	2800      	cmp	r0, #0
   b458a:	d03c      	beq.n	b4606 <_Z13printNodeDatab+0x156>
   b458c:	4b4c      	ldr	r3, [pc, #304]	; (b46c0 <_Z13printNodeDatab+0x210>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b458e:	4a4d      	ldr	r2, [pc, #308]	; (b46c4 <_Z13printNodeDatab+0x214>)
   b4590:	781b      	ldrb	r3, [r3, #0]
   b4592:	f88d 3000 	strb.w	r3, [sp]
   b4596:	a816      	add	r0, sp, #88	; 0x58
   b4598:	494b      	ldr	r1, [pc, #300]	; (b46c8 <_Z13printNodeDatab+0x218>)
   b459a:	233c      	movs	r3, #60	; 0x3c
   b459c:	f003 f85c 	bl	b7658 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   b45a0:	a817      	add	r0, sp, #92	; 0x5c
   b45a2:	f7ff fe5d 	bl	b4260 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b45a6:	e02e      	b.n	b4606 <_Z13printNodeDatab+0x156>
		switch (sensorType) {
   b45a8:	f1a2 0314 	sub.w	r3, r2, #20
   b45ac:	2b09      	cmp	r3, #9
   b45ae:	e7e4      	b.n	b457a <_Z13printNodeDatab+0xca>
				jp.getValueByKey(nodeObjectContainer, "p1", occupancyNet);
   b45b0:	4a3d      	ldr	r2, [pc, #244]	; (b46a8 <_Z13printNodeDatab+0x1f8>)
   b45b2:	ab15      	add	r3, sp, #84	; 0x54
   b45b4:	4621      	mov	r1, r4
   b45b6:	4628      	mov	r0, r5
   b45b8:	f7ff fda1 	bl	b40fe <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
				jp.getValueByKey(nodeObjectContainer, "p2", occupancyGross);
   b45bc:	4a3b      	ldr	r2, [pc, #236]	; (b46ac <_Z13printNodeDatab+0x1fc>)
   b45be:	ab16      	add	r3, sp, #88	; 0x58
   b45c0:	4621      	mov	r1, r4
   b45c2:	4628      	mov	r0, r5
   b45c4:	f7ff fd9b 	bl	b40fe <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
				snprintf(data, sizeof(data), "Node %d, uniqueID %lu, type %d, occupancyNet %d, occupancyGross %d, payload (%d/%d/%d/%d) with pending alert %d and alert context %d", nodeNumber, uniqueID, sensorType, occupancyNet, occupancyGross, payload1, payload2, payload3, payload4, pendingAlertCode, pendingAlertContext);
   b45c8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   b45ca:	9309      	str	r3, [sp, #36]	; 0x24
   b45cc:	9b12      	ldr	r3, [sp, #72]	; 0x48
   b45ce:	9308      	str	r3, [sp, #32]
   b45d0:	f899 3000 	ldrb.w	r3, [r9]
   b45d4:	9307      	str	r3, [sp, #28]
   b45d6:	f898 3000 	ldrb.w	r3, [r8]
   b45da:	9306      	str	r3, [sp, #24]
   b45dc:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   b45e0:	9305      	str	r3, [sp, #20]
   b45e2:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   b45e6:	9304      	str	r3, [sp, #16]
   b45e8:	9b16      	ldr	r3, [sp, #88]	; 0x58
   b45ea:	9303      	str	r3, [sp, #12]
   b45ec:	9b15      	ldr	r3, [sp, #84]	; 0x54
   b45ee:	9302      	str	r3, [sp, #8]
   b45f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   b45f2:	9301      	str	r3, [sp, #4]
   b45f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   b45f6:	9300      	str	r3, [sp, #0]
   b45f8:	4a34      	ldr	r2, [pc, #208]	; (b46cc <_Z13printNodeDatab+0x21c>)
   b45fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b45fc:	f240 216e 	movw	r1, #622	; 0x26e
   b4600:	a81a      	add	r0, sp, #104	; 0x68
   b4602:	f002 fe11 	bl	b7228 <snprintf>
		Log.info(data);
   b4606:	482d      	ldr	r0, [pc, #180]	; (b46bc <_Z13printNodeDatab+0x20c>)
   b4608:	a91a      	add	r1, sp, #104	; 0x68
   b460a:	f7ff fdaf 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b460e:	f002 fd6b 	bl	b70e8 <spark_cloud_flag_connected>
		if (Particle.connected() && publish) {
   b4612:	b188      	cbz	r0, b4638 <_Z13printNodeDatab+0x188>
   b4614:	b187      	cbz	r7, b4638 <_Z13printNodeDatab+0x188>
   b4616:	4b2a      	ldr	r3, [pc, #168]	; (b46c0 <_Z13printNodeDatab+0x210>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b4618:	492d      	ldr	r1, [pc, #180]	; (b46d0 <_Z13printNodeDatab+0x220>)
   b461a:	781b      	ldrb	r3, [r3, #0]
   b461c:	f88d 3000 	strb.w	r3, [sp]
   b4620:	aa1a      	add	r2, sp, #104	; 0x68
   b4622:	233c      	movs	r3, #60	; 0x3c
   b4624:	a816      	add	r0, sp, #88	; 0x58
   b4626:	f003 f817 	bl	b7658 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   b462a:	a817      	add	r0, sp, #92	; 0x5c
   b462c:	f7ff fe18 	bl	b4260 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
			delay(1000);
   b4630:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b4634:	f002 fe38 	bl	b72a8 <delay>
	for (int i=0; i<100; i++) {												// Iterate through the array looking for a match
   b4638:	3601      	adds	r6, #1
   b463a:	2e64      	cmp	r6, #100	; 0x64
   b463c:	f47f af4c 	bne.w	b44d8 <_Z13printNodeDatab+0x28>
	Log.info(nodeDatabase.get_nodeIDJson());  // See the raw JSON string
   b4640:	f001 fdaa 	bl	b6198 <_ZN10nodeIDData8instanceEv>
   b4644:	4601      	mov	r1, r0
   b4646:	a816      	add	r0, sp, #88	; 0x58
   b4648:	f001 fdca 	bl	b61e0 <_ZNK10nodeIDData14get_nodeIDJsonEv>
   b464c:	9916      	ldr	r1, [sp, #88]	; 0x58
   b464e:	481b      	ldr	r0, [pc, #108]	; (b46bc <_Z13printNodeDatab+0x20c>)
   b4650:	f7ff fd8c 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
   b4654:	a816      	add	r0, sp, #88	; 0x58
   b4656:	f004 fd41 	bl	b90dc <_ZN6StringD1Ev>
}
   b465a:	f50d 7d37 	add.w	sp, sp, #732	; 0x2dc
   b465e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				snprintf(data, sizeof(data), "Node %d, uniqueID %lu, type %d, payload (%d/%d/%d/%d) with pending alert %d and alert context %d", nodeNumber, uniqueID, sensorType, payload1, payload2, payload3, payload4, pendingAlertCode, pendingAlertContext);
   b4662:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   b4664:	9307      	str	r3, [sp, #28]
   b4666:	9b12      	ldr	r3, [sp, #72]	; 0x48
   b4668:	9306      	str	r3, [sp, #24]
   b466a:	f899 3000 	ldrb.w	r3, [r9]
   b466e:	9305      	str	r3, [sp, #20]
   b4670:	f898 3000 	ldrb.w	r3, [r8]
   b4674:	9304      	str	r3, [sp, #16]
   b4676:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   b467a:	9303      	str	r3, [sp, #12]
   b467c:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   b4680:	e9cd 2301 	strd	r2, r3, [sp, #4]
   b4684:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   b4686:	9300      	str	r3, [sp, #0]
   b4688:	4a12      	ldr	r2, [pc, #72]	; (b46d4 <_Z13printNodeDatab+0x224>)
   b468a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b468c:	f240 216e 	movw	r1, #622	; 0x26e
   b4690:	a81a      	add	r0, sp, #104	; 0x68
   b4692:	f002 fdc9 	bl	b7228 <snprintf>
			} break;
   b4696:	e7b6      	b.n	b4606 <_Z13printNodeDatab+0x156>
   b4698:	2003b778 	.word	0x2003b778
   b469c:	000b9f63 	.word	0x000b9f63
   b46a0:	000b9f69 	.word	0x000b9f69
   b46a4:	000bab98 	.word	0x000bab98
   b46a8:	000ba063 	.word	0x000ba063
   b46ac:	000ba066 	.word	0x000ba066
   b46b0:	000ba069 	.word	0x000ba069
   b46b4:	000ba06e 	.word	0x000ba06e
   b46b8:	000ba159 	.word	0x000ba159
   b46bc:	2003e6b0 	.word	0x2003e6b0
   b46c0:	2003b770 	.word	0x2003b770
   b46c4:	000ba181 	.word	0x000ba181
   b46c8:	000ba054 	.word	0x000ba054
   b46cc:	000ba073 	.word	0x000ba073
   b46d0:	000ba1a6 	.word	0x000ba1a6
   b46d4:	000ba0f8 	.word	0x000ba0f8
   b46d8:	000ba05a 	.word	0x000ba05a
   b46dc:	000ba05e 	.word	0x000ba05e

000b46e0 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>:
	 *
	 * Uses templates so you can pass any type object that's supported by insertValue() overloads,
	 * for example: bool, int, float, double, const char *.
	 */
	template<class T>
	void insertKeyValue(const char *key, T value) {
   b46e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b46e2:	4604      	mov	r4, r0
   b46e4:	4615      	mov	r5, r2
   b46e6:	9101      	str	r1, [sp, #4]
		insertCheckSeparator();
   b46e8:	f001 f89c 	bl	b5824 <_ZN10JsonWriter20insertCheckSeparatorEv>
	void insertValue(const char *value) { insertString(value, true); }
   b46ec:	9901      	ldr	r1, [sp, #4]
   b46ee:	2201      	movs	r2, #1
   b46f0:	4620      	mov	r0, r4
   b46f2:	f001 f805 	bl	b5700 <_ZN10JsonWriter12insertStringEPKcb>
		insertValue(key);
		insertChar(':');
   b46f6:	4620      	mov	r0, r4
   b46f8:	213a      	movs	r1, #58	; 0x3a
   b46fa:	f000 ffb5 	bl	b5668 <_ZN10JsonWriter10insertCharEc>
	void insertValue(int value) { insertsprintf("%d", value); }
   b46fe:	4904      	ldr	r1, [pc, #16]	; (b4710 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_+0x30>)
   b4700:	462a      	mov	r2, r5
   b4702:	4620      	mov	r0, r4
		insertValue(value);
	}
   b4704:	b003      	add	sp, #12
   b4706:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	void insertValue(int value) { insertsprintf("%d", value); }
   b470a:	f000 bfec 	b.w	b56e6 <_ZN10JsonWriter13insertsprintfEPKcz>
   b470e:	bf00      	nop
   b4710:	000ba273 	.word	0x000ba273

000b4714 <_ZN10JsonWriter14insertKeyValueImEEvPKcT_>:
	void insertKeyValue(const char *key, T value) {
   b4714:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b4716:	4604      	mov	r4, r0
   b4718:	4615      	mov	r5, r2
   b471a:	9101      	str	r1, [sp, #4]
		insertCheckSeparator();
   b471c:	f001 f882 	bl	b5824 <_ZN10JsonWriter20insertCheckSeparatorEv>
	void insertValue(const char *value) { insertString(value, true); }
   b4720:	9901      	ldr	r1, [sp, #4]
   b4722:	2201      	movs	r2, #1
   b4724:	4620      	mov	r0, r4
   b4726:	f000 ffeb 	bl	b5700 <_ZN10JsonWriter12insertStringEPKcb>
		insertChar(':');
   b472a:	4620      	mov	r0, r4
   b472c:	213a      	movs	r1, #58	; 0x3a
   b472e:	f000 ff9b 	bl	b5668 <_ZN10JsonWriter10insertCharEc>
	void insertValue(unsigned long value) { insertsprintf("%lu", value); }
   b4732:	4904      	ldr	r1, [pc, #16]	; (b4744 <_ZN10JsonWriter14insertKeyValueImEEvPKcT_+0x30>)
   b4734:	462a      	mov	r2, r5
   b4736:	4620      	mov	r0, r4
	}
   b4738:	b003      	add	sp, #12
   b473a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	void insertValue(unsigned long value) { insertsprintf("%lu", value); }
   b473e:	f000 bfd2 	b.w	b56e6 <_ZN10JsonWriter13insertsprintfEPKcz>
   b4742:	bf00      	nop
   b4744:	000ba1af 	.word	0x000ba1af

000b4748 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   b4748:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b474a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b474c:	4604      	mov	r4, r0
   b474e:	460d      	mov	r5, r1
   b4750:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b4752:	d916      	bls.n	b4782 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
   b4754:	4290      	cmp	r0, r2
   b4756:	d215      	bcs.n	b4784 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            --end;
   b4758:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   b475c:	1a75      	subs	r5, r6, r1
   b475e:	f1a1 0714 	sub.w	r7, r1, #20
   b4762:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b4764:	42b7      	cmp	r7, r6
   b4766:	d01c      	beq.n	b47a2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
   b4768:	b12c      	cbz	r4, b4776 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
   b476a:	4631      	mov	r1, r6
   b476c:	4620      	mov	r0, r4
   b476e:	f004 fd32 	bl	b91d6 <_ZN6StringC1EOS_>
   b4772:	7c33      	ldrb	r3, [r6, #16]
   b4774:	7423      	strb	r3, [r4, #16]
   b4776:	4630      	mov	r0, r6
   b4778:	f004 fcb0 	bl	b90dc <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   b477c:	3e14      	subs	r6, #20
   b477e:	3c14      	subs	r4, #20
   b4780:	e7f0      	b.n	b4764 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   b4782:	d00e      	beq.n	b47a2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
   b4784:	42b5      	cmp	r5, r6
   b4786:	d00c      	beq.n	b47a2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
   b4788:	b12c      	cbz	r4, b4796 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
   b478a:	4629      	mov	r1, r5
   b478c:	4620      	mov	r0, r4
   b478e:	f004 fd22 	bl	b91d6 <_ZN6StringC1EOS_>
   b4792:	7c2b      	ldrb	r3, [r5, #16]
   b4794:	7423      	strb	r3, [r4, #16]
   b4796:	4628      	mov	r0, r5
   b4798:	f004 fca0 	bl	b90dc <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   b479c:	3514      	adds	r5, #20
   b479e:	3414      	adds	r4, #20
   b47a0:	e7f0      	b.n	b4784 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
    }
   b47a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b47a4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b47a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   b47a8:	2300      	movs	r3, #0
   b47aa:	e9c0 3300 	strd	r3, r3, [r0]
   b47ae:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b47b0:	684f      	ldr	r7, [r1, #4]
   b47b2:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b47b4:	4604      	mov	r4, r0
   b47b6:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b47b8:	dd23      	ble.n	b4802 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
   b47ba:	f04f 0814 	mov.w	r8, #20
    return ::malloc(size);
   b47be:	fb08 f007 	mul.w	r0, r8, r7
   b47c2:	f002 fd11 	bl	b71e8 <malloc>
            if (!d) {
   b47c6:	4605      	mov	r5, r0
   b47c8:	b1d8      	cbz	r0, b4802 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            move(d, data_, data_ + size_);
   b47ca:	e9d4 1200 	ldrd	r1, r2, [r4]
   b47ce:	fb08 1202 	mla	r2, r8, r2, r1
   b47d2:	f7ff ffb9 	bl	b4748 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   b47d6:	6820      	ldr	r0, [r4, #0]
   b47d8:	f002 fd0e 	bl	b71f8 <free>
        data_ = d;
   b47dc:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   b47de:	60a7      	str	r7, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b47e0:	e9d6 7300 	ldrd	r7, r3, [r6]
   b47e4:	fb08 7803 	mla	r8, r8, r3, r7
        for (; it != end; ++it, ++dest) {
   b47e8:	45b8      	cmp	r8, r7
   b47ea:	d008      	beq.n	b47fe <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5a>
   b47ec:	4639      	mov	r1, r7
   b47ee:	4628      	mov	r0, r5
   b47f0:	f004 fd0b 	bl	b920a <_ZN6StringC1ERKS_>
   b47f4:	7c3b      	ldrb	r3, [r7, #16]
   b47f6:	742b      	strb	r3, [r5, #16]
   b47f8:	3714      	adds	r7, #20
   b47fa:	3514      	adds	r5, #20
   b47fc:	e7f4      	b.n	b47e8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>
        size_ = vector.size_;
   b47fe:	6873      	ldr	r3, [r6, #4]
   b4800:	6063      	str	r3, [r4, #4]
}
   b4802:	4620      	mov	r0, r4
   b4804:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b4808 <_GLOBAL__sub_I_LogHandler>:
	mod.finish();

	nodeDatabase.set_nodeIDJson(jp.getBuffer());									// This should backup the nodeID database - now updated to persistent storage

	return true;
   b4808:	b5f0      	push	{r4, r5, r6, r7, lr}
        val_(val) {
   b480a:	4b2d      	ldr	r3, [pc, #180]	; (b48c0 <_GLOBAL__sub_I_LogHandler+0xb8>)
        filter_(level, filters) {
   b480c:	4d2d      	ldr	r5, [pc, #180]	; (b48c4 <_GLOBAL__sub_I_LogHandler+0xbc>)
   b480e:	b08f      	sub	sp, #60	; 0x3c
   b4810:	2201      	movs	r2, #1
   b4812:	701a      	strb	r2, [r3, #0]
        capacity_(0) {
   b4814:	2400      	movs	r4, #0
   b4816:	e9cd 4402 	strd	r4, r4, [sp, #8]
   b481a:	9404      	str	r4, [sp, #16]
            StreamLogHandler(Serial, level, filters) {
   b481c:	f004 fe5c 	bl	b94d8 <_Z16_fetch_usbserialv>
   b4820:	a902      	add	r1, sp, #8
   b4822:	4606      	mov	r6, r0
   b4824:	a805      	add	r0, sp, #20
   b4826:	f7ff ffbd 	bl	b47a4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b482a:	462f      	mov	r7, r5
        stream_(&stream) {
   b482c:	a905      	add	r1, sp, #20
   b482e:	a808      	add	r0, sp, #32
   b4830:	f7ff ffb8 	bl	b47a4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   b4834:	4b24      	ldr	r3, [pc, #144]	; (b48c8 <_GLOBAL__sub_I_LogHandler+0xc0>)
   b4836:	f847 3b04 	str.w	r3, [r7], #4
   b483a:	a908      	add	r1, sp, #32
   b483c:	a80b      	add	r0, sp, #44	; 0x2c
   b483e:	f7ff ffb1 	bl	b47a4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b4842:	aa0b      	add	r2, sp, #44	; 0x2c
   b4844:	211e      	movs	r1, #30
   b4846:	4638      	mov	r0, r7
   b4848:	f004 f810 	bl	b886c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b484c:	a80b      	add	r0, sp, #44	; 0x2c
   b484e:	f7ff fe0d 	bl	b446c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   b4852:	a808      	add	r0, sp, #32
   b4854:	f7ff fe0a 	bl	b446c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b4858:	4b1c      	ldr	r3, [pc, #112]	; (b48cc <_GLOBAL__sub_I_LogHandler+0xc4>)
   b485a:	602b      	str	r3, [r5, #0]
   b485c:	a805      	add	r0, sp, #20
   b485e:	622e      	str	r6, [r5, #32]
   b4860:	f7ff fe04 	bl	b446c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b4864:	4b1a      	ldr	r3, [pc, #104]	; (b48d0 <_GLOBAL__sub_I_LogHandler+0xc8>)
   b4866:	602b      	str	r3, [r5, #0]
        Serial.begin();
   b4868:	f004 fe36 	bl	b94d8 <_Z16_fetch_usbserialv>
   b486c:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b4870:	f004 fe22 	bl	b94b8 <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
   b4874:	f003 fcdc 	bl	b8230 <_ZN5spark10LogManager8instanceEv>
   b4878:	4629      	mov	r1, r5
   b487a:	f003 fecd 	bl	b8618 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
SerialLogHandler LogHandler;
   b487e:	a802      	add	r0, sp, #8
   b4880:	f7ff fdf4 	bl	b446c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b4884:	4b13      	ldr	r3, [pc, #76]	; (b48d4 <_GLOBAL__sub_I_LogHandler+0xcc>)
    SleepResult() {}
   b4886:	4a14      	ldr	r2, [pc, #80]	; (b48d8 <_GLOBAL__sub_I_LogHandler+0xd0>)
   b4888:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b488a:	e9c3 4400 	strd	r4, r4, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b488e:	2003      	movs	r0, #3
   b4890:	f002 fbe6 	bl	b7060 <set_system_mode>
	explicit JsonParserStatic() : JsonParser(staticBuffer, BUFFER_SIZE, staticTokens, MAX_TOKENS) {};
   b4894:	4b11      	ldr	r3, [pc, #68]	; (b48dc <_GLOBAL__sub_I_LogHandler+0xd4>)
   b4896:	f240 2226 	movw	r2, #550	; 0x226
   b489a:	f6a3 442c 	subw	r4, r3, #3116	; 0xc2c
   b489e:	9200      	str	r2, [sp, #0]
   b48a0:	f5a3 6140 	sub.w	r1, r3, #3072	; 0xc00
   b48a4:	f44f 6240 	mov.w	r2, #3072	; 0xc00
   b48a8:	4620      	mov	r0, r4
   b48aa:	f000 fd13 	bl	b52d4 <_ZN10JsonParserC1EPcjPN21JsonParserGeneratorRK9jsmntok_tEj>
   b48ae:	4b0c      	ldr	r3, [pc, #48]	; (b48e0 <_GLOBAL__sub_I_LogHandler+0xd8>)
String s;
   b48b0:	490c      	ldr	r1, [pc, #48]	; (b48e4 <_GLOBAL__sub_I_LogHandler+0xdc>)
   b48b2:	480d      	ldr	r0, [pc, #52]	; (b48e8 <_GLOBAL__sub_I_LogHandler+0xe0>)
   b48b4:	6023      	str	r3, [r4, #0]
   b48b6:	b00f      	add	sp, #60	; 0x3c
   b48b8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
String s;
   b48bc:	f004 bc59 	b.w	b9172 <_ZN6StringC1EPK19__FlashStringHelper>
   b48c0:	2003b770 	.word	0x2003b770
   b48c4:	2003b740 	.word	0x2003b740
   b48c8:	000ba768 	.word	0x000ba768
   b48cc:	000babfc 	.word	0x000babfc
   b48d0:	000ba780 	.word	0x000ba780
   b48d4:	2003b764 	.word	0x2003b764
   b48d8:	ffff0000 	.word	0xffff0000
   b48dc:	2003c3a4 	.word	0x2003c3a4
   b48e0:	000ba798 	.word	0x000ba798
   b48e4:	000babc7 	.word	0x000babc7
   b48e8:	2003e604 	.word	0x2003e604

000b48ec <_Z14findNodeNumberm>:
byte findNodeNumber(uint32_t uniqueID) {
   b48ec:	b5f0      	push	{r4, r5, r6, r7, lr}
   b48ee:	b097      	sub	sp, #92	; 0x5c
	int node = 0;
   b48f0:	2300      	movs	r3, #0
byte findNodeNumber(uint32_t uniqueID) {
   b48f2:	4605      	mov	r5, r0
	jp.getValueTokenByKey(jp.getOuterObject(), "nodes", nodesArrayContainer);
   b48f4:	483b      	ldr	r0, [pc, #236]	; (b49e4 <_Z14findNodeNumberm+0xf8>)
	int node = 0;
   b48f6:	9304      	str	r3, [sp, #16]
	jp.getValueTokenByKey(jp.getOuterObject(), "nodes", nodesArrayContainer);
   b48f8:	f000 fd07 	bl	b530a <_ZNK10JsonParser14getOuterObjectEv>
   b48fc:	4a3a      	ldr	r2, [pc, #232]	; (b49e8 <_Z14findNodeNumberm+0xfc>)
		nodeObjectContainer = jp.getTokenByIndex(nodesArrayContainer, i);
   b48fe:	4e39      	ldr	r6, [pc, #228]	; (b49e4 <_Z14findNodeNumberm+0xf8>)
		jp.getValueByKey(nodeObjectContainer, "uID", nodeUniqueID);			// Get the uniqueID and compare
   b4900:	4f3a      	ldr	r7, [pc, #232]	; (b49ec <_Z14findNodeNumberm+0x100>)
	jp.getValueTokenByKey(jp.getOuterObject(), "nodes", nodesArrayContainer);
   b4902:	4601      	mov	r1, r0
   b4904:	ab05      	add	r3, sp, #20
   b4906:	4837      	ldr	r0, [pc, #220]	; (b49e4 <_Z14findNodeNumberm+0xf8>)
   b4908:	f000 fe68 	bl	b55dc <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
	int index = 1;				// Start at one since node zero is the gateway
   b490c:	2401      	movs	r4, #1
		nodeObjectContainer = jp.getTokenByIndex(nodesArrayContainer, i);
   b490e:	9905      	ldr	r1, [sp, #20]
   b4910:	1e62      	subs	r2, r4, #1
   b4912:	4630      	mov	r0, r6
   b4914:	f000 fd1b 	bl	b534e <_ZNK10JsonParser15getTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj>
		if(nodeObjectContainer == NULL) break;								// Ran out of entries - no match found
   b4918:	4601      	mov	r1, r0
   b491a:	b1d8      	cbz	r0, b4954 <_Z14findNodeNumberm+0x68>
		jp.getValueByKey(nodeObjectContainer, "uID", nodeUniqueID);			// Get the uniqueID and compare
   b491c:	ab03      	add	r3, sp, #12
   b491e:	9001      	str	r0, [sp, #4]
   b4920:	463a      	mov	r2, r7
   b4922:	4630      	mov	r0, r6
   b4924:	f7ff fdb5 	bl	b4492 <_ZNK10JsonParser13getValueByKeyImEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_>
		if (nodeUniqueID == uniqueID) {
   b4928:	9b03      	ldr	r3, [sp, #12]
   b492a:	9901      	ldr	r1, [sp, #4]
   b492c:	42ab      	cmp	r3, r5
   b492e:	d10e      	bne.n	b494e <_Z14findNodeNumberm+0x62>
			jp.getValueByKey(nodeObjectContainer, "node", node);		// A match!
   b4930:	4a2f      	ldr	r2, [pc, #188]	; (b49f0 <_Z14findNodeNumberm+0x104>)
   b4932:	482c      	ldr	r0, [pc, #176]	; (b49e4 <_Z14findNodeNumberm+0xf8>)
   b4934:	ab04      	add	r3, sp, #16
   b4936:	f7ff fbe2 	bl	b40fe <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
			Log.info("Found the uniqueID, node of %d",node);
   b493a:	9a04      	ldr	r2, [sp, #16]
   b493c:	492d      	ldr	r1, [pc, #180]	; (b49f4 <_Z14findNodeNumberm+0x108>)
   b493e:	482e      	ldr	r0, [pc, #184]	; (b49f8 <_Z14findNodeNumberm+0x10c>)
   b4940:	f7ff fc14 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
			return node;
   b4944:	f89d 4010 	ldrb.w	r4, [sp, #16]
}
   b4948:	4620      	mov	r0, r4
   b494a:	b017      	add	sp, #92	; 0x5c
   b494c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		index++;															// This will be the node number for the next node if no match is found
   b494e:	3401      	adds	r4, #1
	for (int i=0; i<50; i++) {												// Iterate through the array looking for a match
   b4950:	2c33      	cmp	r4, #51	; 0x33
   b4952:	d1dc      	bne.n	b490e <_Z14findNodeNumberm+0x22>
	JsonModifier mod(jp);
   b4954:	4923      	ldr	r1, [pc, #140]	; (b49e4 <_Z14findNodeNumberm+0xf8>)
   b4956:	a806      	add	r0, sp, #24
   b4958:	f000 ff88 	bl	b586c <_ZN12JsonModifierC1ER10JsonParser>
	Log.info("Did not find the uniqueID, new node of %d",index);
   b495c:	4622      	mov	r2, r4
   b495e:	4927      	ldr	r1, [pc, #156]	; (b49fc <_Z14findNodeNumberm+0x110>)
   b4960:	4825      	ldr	r0, [pc, #148]	; (b49f8 <_Z14findNodeNumberm+0x10c>)
   b4962:	f7ff fc03 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
	mod.startAppend(jp.getOuterArray());
   b4966:	481f      	ldr	r0, [pc, #124]	; (b49e4 <_Z14findNodeNumberm+0xf8>)
   b4968:	f000 fcc4 	bl	b52f4 <_ZNK10JsonParser13getOuterArrayEv>
   b496c:	4601      	mov	r1, r0
   b496e:	a806      	add	r0, sp, #24
   b4970:	f000 ffb7 	bl	b58e2 <_ZN12JsonModifier11startAppendEPKN21JsonParserGeneratorRK9jsmntok_tE>
		mod.startObject();
   b4974:	a806      	add	r0, sp, #24
   b4976:	f7ff fbd0 	bl	b411a <_ZN10JsonWriter11startObjectEv.isra.0>
		mod.insertKeyValue("node", (int)index);
   b497a:	4622      	mov	r2, r4
   b497c:	a806      	add	r0, sp, #24
   b497e:	491c      	ldr	r1, [pc, #112]	; (b49f0 <_Z14findNodeNumberm+0x104>)
   b4980:	f7ff feae 	bl	b46e0 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>
		mod.insertKeyValue("uID", (uint32_t)uniqueID);
   b4984:	462a      	mov	r2, r5
   b4986:	a806      	add	r0, sp, #24
   b4988:	4918      	ldr	r1, [pc, #96]	; (b49ec <_Z14findNodeNumberm+0x100>)
   b498a:	f7ff fec3 	bl	b4714 <_ZN10JsonWriter14insertKeyValueImEEvPKcT_>
		mod.insertKeyValue("type", (int)sensorType_1);
   b498e:	4b1c      	ldr	r3, [pc, #112]	; (b4a00 <_Z14findNodeNumberm+0x114>)
   b4990:	491c      	ldr	r1, [pc, #112]	; (b4a04 <_Z14findNodeNumberm+0x118>)
   b4992:	681a      	ldr	r2, [r3, #0]
   b4994:	a806      	add	r0, sp, #24
   b4996:	f7ff fea3 	bl	b46e0 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>
		mod.insertKeyValue("p", 0);
   b499a:	a806      	add	r0, sp, #24
   b499c:	491a      	ldr	r1, [pc, #104]	; (b4a08 <_Z14findNodeNumberm+0x11c>)
   b499e:	2200      	movs	r2, #0
   b49a0:	f7ff fe9e 	bl	b46e0 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>
		mod.insertKeyValue("p1", 0);
   b49a4:	a806      	add	r0, sp, #24
   b49a6:	4919      	ldr	r1, [pc, #100]	; (b4a0c <_Z14findNodeNumberm+0x120>)
   b49a8:	2200      	movs	r2, #0
   b49aa:	f7ff fe99 	bl	b46e0 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>
		mod.insertKeyValue("p2", 0);
   b49ae:	a806      	add	r0, sp, #24
   b49b0:	4917      	ldr	r1, [pc, #92]	; (b4a10 <_Z14findNodeNumberm+0x124>)
   b49b2:	2200      	movs	r2, #0
   b49b4:	f7ff fe94 	bl	b46e0 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>
		mod.insertKeyValue("pend", 0);	
   b49b8:	a806      	add	r0, sp, #24
   b49ba:	4916      	ldr	r1, [pc, #88]	; (b4a14 <_Z14findNodeNumberm+0x128>)
   b49bc:	2200      	movs	r2, #0
   b49be:	f7ff fe8f 	bl	b46e0 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>
		mod.insertKeyValue("cont", 0);
   b49c2:	4915      	ldr	r1, [pc, #84]	; (b4a18 <_Z14findNodeNumberm+0x12c>)
   b49c4:	2200      	movs	r2, #0
   b49c6:	a806      	add	r0, sp, #24
   b49c8:	f7ff fe8a 	bl	b46e0 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>
		mod.finishObjectOrArray();
   b49cc:	a806      	add	r0, sp, #24
   b49ce:	f000 fe59 	bl	b5684 <_ZN10JsonWriter19finishObjectOrArrayEv>
	mod.finish();
   b49d2:	a806      	add	r0, sp, #24
   b49d4:	f001 fa64 	bl	b5ea0 <_ZN12JsonModifier6finishEv>
	JsonModifier mod(jp);
   b49d8:	a806      	add	r0, sp, #24
	return index;
   b49da:	b2e4      	uxtb	r4, r4
	JsonModifier mod(jp);
   b49dc:	f000 fc04 	bl	b51e8 <_ZN12JsonModifierD1Ev>
   b49e0:	e7b2      	b.n	b4948 <_Z14findNodeNumberm+0x5c>
   b49e2:	bf00      	nop
   b49e4:	2003b778 	.word	0x2003b778
   b49e8:	000b9f63 	.word	0x000b9f63
   b49ec:	000ba05a 	.word	0x000ba05a
   b49f0:	000ba05e 	.word	0x000ba05e
   b49f4:	000ba1b3 	.word	0x000ba1b3
   b49f8:	2003e6b0 	.word	0x2003e6b0
   b49fc:	000ba1d2 	.word	0x000ba1d2
   b4a00:	2003b6b8 	.word	0x2003b6b8
   b4a04:	000b9f69 	.word	0x000b9f69
   b4a08:	000bab98 	.word	0x000bab98
   b4a0c:	000ba063 	.word	0x000ba063
   b4a10:	000ba066 	.word	0x000ba066
   b4a14:	000ba069 	.word	0x000ba069
   b4a18:	000ba06e 	.word	0x000ba06e

000b4a1c <_Z7setTypeii>:
bool setType(int nodeNumber, int newType) {
   b4a1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b4a20:	460d      	mov	r5, r1
   b4a22:	b09a      	sub	sp, #104	; 0x68
	if (nodeNumber == 0 || nodeNumber == 255) return false;
   b4a24:	4604      	mov	r4, r0
   b4a26:	2800      	cmp	r0, #0
   b4a28:	f000 80f7 	beq.w	b4c1a <_Z7setTypeii+0x1fe>
   b4a2c:	28ff      	cmp	r0, #255	; 0xff
   b4a2e:	f000 80f4 	beq.w	b4c1a <_Z7setTypeii+0x1fe>
	jp.getValueTokenByKey(jp.getOuterObject(), "nodes", nodesArrayContainer);
   b4a32:	487b      	ldr	r0, [pc, #492]	; (b4c20 <_Z7setTypeii+0x204>)
   b4a34:	4e7a      	ldr	r6, [pc, #488]	; (b4c20 <_Z7setTypeii+0x204>)
   b4a36:	f000 fc68 	bl	b530a <_ZNK10JsonParser14getOuterObjectEv>
	nodeObjectContainer = jp.getTokenByIndex(nodesArrayContainer, nodeNumber-1);
   b4a3a:	f104 38ff 	add.w	r8, r4, #4294967295	; 0xffffffff
	jp.getValueTokenByKey(jp.getOuterObject(), "nodes", nodesArrayContainer);
   b4a3e:	4601      	mov	r1, r0
   b4a40:	4a78      	ldr	r2, [pc, #480]	; (b4c24 <_Z7setTypeii+0x208>)
   b4a42:	4877      	ldr	r0, [pc, #476]	; (b4c20 <_Z7setTypeii+0x204>)
   b4a44:	ab07      	add	r3, sp, #28
   b4a46:	f000 fdc9 	bl	b55dc <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
	nodeObjectContainer = jp.getTokenByIndex(nodesArrayContainer, nodeNumber-1);
   b4a4a:	9907      	ldr	r1, [sp, #28]
   b4a4c:	4874      	ldr	r0, [pc, #464]	; (b4c20 <_Z7setTypeii+0x204>)
   b4a4e:	4642      	mov	r2, r8
   b4a50:	f000 fc7d 	bl	b534e <_ZNK10JsonParser15getTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj>
	if(nodeObjectContainer == NULL) return false;								// Ran out of entries 
   b4a54:	4607      	mov	r7, r0
   b4a56:	2800      	cmp	r0, #0
   b4a58:	f000 80df 	beq.w	b4c1a <_Z7setTypeii+0x1fe>
	JsonModifier mod(jp);
   b4a5c:	4631      	mov	r1, r6
   b4a5e:	a80a      	add	r0, sp, #40	; 0x28
   b4a60:	f000 ff04 	bl	b586c <_ZN12JsonModifierC1ER10JsonParser>
	jp.getValueByKey(nodeObjectContainer, "uID", uniqueID);
   b4a64:	4a70      	ldr	r2, [pc, #448]	; (b4c28 <_Z7setTypeii+0x20c>)
   b4a66:	ab03      	add	r3, sp, #12
   b4a68:	4639      	mov	r1, r7
   b4a6a:	4630      	mov	r0, r6
   b4a6c:	f7ff fd11 	bl	b4492 <_ZNK10JsonParser13getValueByKeyImEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_>
	jp.getValueByKey(nodeObjectContainer, "type", type);
   b4a70:	4a6e      	ldr	r2, [pc, #440]	; (b4c2c <_Z7setTypeii+0x210>)
   b4a72:	ab02      	add	r3, sp, #8
   b4a74:	4639      	mov	r1, r7
   b4a76:	4630      	mov	r0, r6
   b4a78:	f7ff fb41 	bl	b40fe <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
	jp.getValueByKey(nodeObjectContainer, "p", compressedJoinPayload);
   b4a7c:	4a6c      	ldr	r2, [pc, #432]	; (b4c30 <_Z7setTypeii+0x214>)
   b4a7e:	ab04      	add	r3, sp, #16
   b4a80:	4639      	mov	r1, r7
   b4a82:	4630      	mov	r0, r6
   b4a84:	f7ff fb3b 	bl	b40fe <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
	jp.getValueByKey(nodeObjectContainer, "pend", pendingAlert);
   b4a88:	4a6a      	ldr	r2, [pc, #424]	; (b4c34 <_Z7setTypeii+0x218>)
   b4a8a:	ab05      	add	r3, sp, #20
   b4a8c:	4639      	mov	r1, r7
   b4a8e:	4630      	mov	r0, r6
   b4a90:	f7ff fb35 	bl	b40fe <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
	jp.getValueByKey(nodeObjectContainer, "cont", pendingAlertContext);
   b4a94:	4a68      	ldr	r2, [pc, #416]	; (b4c38 <_Z7setTypeii+0x21c>)
   b4a96:	ab06      	add	r3, sp, #24
   b4a98:	4639      	mov	r1, r7
   b4a9a:	4630      	mov	r0, r6
   b4a9c:	f7ff fb2f 	bl	b40fe <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
	Log.info("Changing sensor type from %d to %d", type, newType);
   b4aa0:	9a02      	ldr	r2, [sp, #8]
   b4aa2:	4966      	ldr	r1, [pc, #408]	; (b4c3c <_Z7setTypeii+0x220>)
   b4aa4:	4866      	ldr	r0, [pc, #408]	; (b4c40 <_Z7setTypeii+0x224>)
   b4aa6:	462b      	mov	r3, r5
   b4aa8:	f7ff fb60 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
	switch (newType) {
   b4aac:	2d13      	cmp	r5, #19
   b4aae:	dc1b      	bgt.n	b4ae8 <_Z7setTypeii+0xcc>
   b4ab0:	2d09      	cmp	r5, #9
   b4ab2:	dc1d      	bgt.n	b4af0 <_Z7setTypeii+0xd4>
   b4ab4:	1e6b      	subs	r3, r5, #1
   b4ab6:	2b08      	cmp	r3, #8
   b4ab8:	d971      	bls.n	b4b9e <_Z7setTypeii+0x182>
			Log.info("Unable to update to new sensorType in setType: %d", newType);
   b4aba:	4962      	ldr	r1, [pc, #392]	; (b4c44 <_Z7setTypeii+0x228>)
   b4abc:	4860      	ldr	r0, [pc, #384]	; (b4c40 <_Z7setTypeii+0x224>)
   b4abe:	462a      	mov	r2, r5
   b4ac0:	f7ff fb54 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b4ac4:	f002 fb10 	bl	b70e8 <spark_cloud_flag_connected>
			if (Particle.connected()) Particle.publish("Alert", "Unable to update to new sensorType in setType", PRIVATE);
   b4ac8:	2800      	cmp	r0, #0
   b4aca:	d056      	beq.n	b4b7a <_Z7setTypeii+0x15e>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   b4acc:	4b5e      	ldr	r3, [pc, #376]	; (b4c48 <_Z7setTypeii+0x22c>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b4ace:	4a5f      	ldr	r2, [pc, #380]	; (b4c4c <_Z7setTypeii+0x230>)
   b4ad0:	781b      	ldrb	r3, [r3, #0]
   b4ad2:	f88d 3000 	strb.w	r3, [sp]
   b4ad6:	a808      	add	r0, sp, #32
   b4ad8:	495d      	ldr	r1, [pc, #372]	; (b4c50 <_Z7setTypeii+0x234>)
   b4ada:	233c      	movs	r3, #60	; 0x3c
   b4adc:	f002 fdbc 	bl	b7658 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   b4ae0:	a809      	add	r0, sp, #36	; 0x24
   b4ae2:	f7ff fbbd 	bl	b4260 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b4ae6:	e048      	b.n	b4b7a <_Z7setTypeii+0x15e>
	switch (newType) {
   b4ae8:	f1a5 0314 	sub.w	r3, r5, #20
   b4aec:	2b09      	cmp	r3, #9
   b4aee:	e7e3      	b.n	b4ab8 <_Z7setTypeii+0x9c>
			Log.info("Removing array index");
   b4af0:	4958      	ldr	r1, [pc, #352]	; (b4c54 <_Z7setTypeii+0x238>)
   b4af2:	4853      	ldr	r0, [pc, #332]	; (b4c40 <_Z7setTypeii+0x224>)
   b4af4:	f7ff fb3a 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
			mod.removeArrayIndex(nodesArrayContainer, nodeNumber-1);	// remove the JSON as it was
   b4af8:	4642      	mov	r2, r8
   b4afa:	9907      	ldr	r1, [sp, #28]
   b4afc:	a80a      	add	r0, sp, #40	; 0x28
   b4afe:	f001 f996 	bl	b5e2e <_ZN12JsonModifier16removeArrayIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj>
			mod.startAppend(jp.getOuterArray());						// insert it back, but with the type specific variables for counter
   b4b02:	4630      	mov	r0, r6
   b4b04:	f000 fbf6 	bl	b52f4 <_ZNK10JsonParser13getOuterArrayEv>
   b4b08:	4601      	mov	r1, r0
   b4b0a:	a80a      	add	r0, sp, #40	; 0x28
   b4b0c:	f000 fee9 	bl	b58e2 <_ZN12JsonModifier11startAppendEPKN21JsonParserGeneratorRK9jsmntok_tE>
				mod.startObject();
   b4b10:	a80a      	add	r0, sp, #40	; 0x28
   b4b12:	f7ff fb02 	bl	b411a <_ZN10JsonWriter11startObjectEv.isra.0>
					mod.insertKeyValue("node", nodeNumber);
   b4b16:	4950      	ldr	r1, [pc, #320]	; (b4c58 <_Z7setTypeii+0x23c>)
   b4b18:	4622      	mov	r2, r4
   b4b1a:	a80a      	add	r0, sp, #40	; 0x28
   b4b1c:	f7ff fde0 	bl	b46e0 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>
					mod.insertKeyValue("uID", uniqueID);
   b4b20:	9a03      	ldr	r2, [sp, #12]
   b4b22:	4941      	ldr	r1, [pc, #260]	; (b4c28 <_Z7setTypeii+0x20c>)
   b4b24:	a80a      	add	r0, sp, #40	; 0x28
   b4b26:	f7ff fdf5 	bl	b4714 <_ZN10JsonWriter14insertKeyValueImEEvPKcT_>
					mod.insertKeyValue("type", newType);					
   b4b2a:	4940      	ldr	r1, [pc, #256]	; (b4c2c <_Z7setTypeii+0x210>)
   b4b2c:	462a      	mov	r2, r5
   b4b2e:	a80a      	add	r0, sp, #40	; 0x28
   b4b30:	f7ff fdd6 	bl	b46e0 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>
					mod.insertKeyValue("p", compressedJoinPayload);
   b4b34:	9a04      	ldr	r2, [sp, #16]
   b4b36:	493e      	ldr	r1, [pc, #248]	; (b4c30 <_Z7setTypeii+0x214>)
   b4b38:	a80a      	add	r0, sp, #40	; 0x28
   b4b3a:	f7ff fdd1 	bl	b46e0 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>
					mod.insertKeyValue("p1", 0);
   b4b3e:	4947      	ldr	r1, [pc, #284]	; (b4c5c <_Z7setTypeii+0x240>)
   b4b40:	2200      	movs	r2, #0
   b4b42:	a80a      	add	r0, sp, #40	; 0x28
   b4b44:	f7ff fdcc 	bl	b46e0 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>
					mod.insertKeyValue("p2", 0);		
   b4b48:	4945      	ldr	r1, [pc, #276]	; (b4c60 <_Z7setTypeii+0x244>)
   b4b4a:	2200      	movs	r2, #0
   b4b4c:	a80a      	add	r0, sp, #40	; 0x28
   b4b4e:	f7ff fdc7 	bl	b46e0 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>
					mod.insertKeyValue("pend",pendingAlert);
   b4b52:	9a05      	ldr	r2, [sp, #20]
   b4b54:	4937      	ldr	r1, [pc, #220]	; (b4c34 <_Z7setTypeii+0x218>)
   b4b56:	a80a      	add	r0, sp, #40	; 0x28
   b4b58:	f7ff fdc2 	bl	b46e0 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>
					mod.insertKeyValue("cont",pendingAlertContext);
   b4b5c:	4936      	ldr	r1, [pc, #216]	; (b4c38 <_Z7setTypeii+0x21c>)
   b4b5e:	9a06      	ldr	r2, [sp, #24]
   b4b60:	a80a      	add	r0, sp, #40	; 0x28
   b4b62:	f7ff fdbd 	bl	b46e0 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>
				mod.finishObjectOrArray();
   b4b66:	a80a      	add	r0, sp, #40	; 0x28
   b4b68:	f000 fd8c 	bl	b5684 <_ZN10JsonWriter19finishObjectOrArrayEv>
			mod.finish();
   b4b6c:	a80a      	add	r0, sp, #40	; 0x28
   b4b6e:	f001 f997 	bl	b5ea0 <_ZN12JsonModifier6finishEv>
			Log.info("append complete");
   b4b72:	493c      	ldr	r1, [pc, #240]	; (b4c64 <_Z7setTypeii+0x248>)
   b4b74:	4832      	ldr	r0, [pc, #200]	; (b4c40 <_Z7setTypeii+0x224>)
   b4b76:	f7ff faf9 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
	nodeDatabase.set_nodeIDJson(jp.getBuffer());									// This should backup the nodeID database - now updated to persistent storage
   b4b7a:	f001 fb0d 	bl	b6198 <_ZN10nodeIDData8instanceEv>
   b4b7e:	6871      	ldr	r1, [r6, #4]
   b4b80:	f001 fb40 	bl	b6204 <_ZN10nodeIDData14set_nodeIDJsonEPKc>
	nodeDatabase.flush(false);													// Store the nodeDatabase into memory
   b4b84:	f001 fb08 	bl	b6198 <_ZN10nodeIDData8instanceEv>
   b4b88:	6803      	ldr	r3, [r0, #0]
   b4b8a:	2100      	movs	r1, #0
   b4b8c:	68db      	ldr	r3, [r3, #12]
   b4b8e:	4798      	blx	r3
	JsonModifier mod(jp);
   b4b90:	a80a      	add	r0, sp, #40	; 0x28
   b4b92:	f000 fb29 	bl	b51e8 <_ZN12JsonModifierD1Ev>
	return true;
   b4b96:	2001      	movs	r0, #1
}
   b4b98:	b01a      	add	sp, #104	; 0x68
   b4b9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			mod.removeArrayIndex(nodesArrayContainer, nodeNumber-1);	// remove the JSON as it was
   b4b9e:	4642      	mov	r2, r8
   b4ba0:	9907      	ldr	r1, [sp, #28]
   b4ba2:	a80a      	add	r0, sp, #40	; 0x28
   b4ba4:	f001 f943 	bl	b5e2e <_ZN12JsonModifier16removeArrayIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj>
			mod.startAppend(jp.getOuterArray());						// insert it back, but with the type specific variables for counter
   b4ba8:	4630      	mov	r0, r6
   b4baa:	f000 fba3 	bl	b52f4 <_ZNK10JsonParser13getOuterArrayEv>
   b4bae:	4601      	mov	r1, r0
   b4bb0:	a80a      	add	r0, sp, #40	; 0x28
   b4bb2:	f000 fe96 	bl	b58e2 <_ZN12JsonModifier11startAppendEPKN21JsonParserGeneratorRK9jsmntok_tE>
				mod.startObject();
   b4bb6:	a80a      	add	r0, sp, #40	; 0x28
   b4bb8:	f7ff faaf 	bl	b411a <_ZN10JsonWriter11startObjectEv.isra.0>
					mod.insertKeyValue("node", nodeNumber);
   b4bbc:	4622      	mov	r2, r4
   b4bbe:	a80a      	add	r0, sp, #40	; 0x28
   b4bc0:	4925      	ldr	r1, [pc, #148]	; (b4c58 <_Z7setTypeii+0x23c>)
   b4bc2:	f7ff fd8d 	bl	b46e0 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>
					mod.insertKeyValue("uID", uniqueID);
   b4bc6:	9a03      	ldr	r2, [sp, #12]
   b4bc8:	4917      	ldr	r1, [pc, #92]	; (b4c28 <_Z7setTypeii+0x20c>)
   b4bca:	a80a      	add	r0, sp, #40	; 0x28
   b4bcc:	f7ff fda2 	bl	b4714 <_ZN10JsonWriter14insertKeyValueImEEvPKcT_>
					mod.insertKeyValue("type", newType);					
   b4bd0:	462a      	mov	r2, r5
   b4bd2:	a80a      	add	r0, sp, #40	; 0x28
   b4bd4:	4915      	ldr	r1, [pc, #84]	; (b4c2c <_Z7setTypeii+0x210>)
   b4bd6:	f7ff fd83 	bl	b46e0 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>
					mod.insertKeyValue("p", compressedJoinPayload);
   b4bda:	9a04      	ldr	r2, [sp, #16]
   b4bdc:	4914      	ldr	r1, [pc, #80]	; (b4c30 <_Z7setTypeii+0x214>)
   b4bde:	a80a      	add	r0, sp, #40	; 0x28
   b4be0:	f7ff fd7e 	bl	b46e0 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>
					mod.insertKeyValue("p1", 0);
   b4be4:	a80a      	add	r0, sp, #40	; 0x28
   b4be6:	491d      	ldr	r1, [pc, #116]	; (b4c5c <_Z7setTypeii+0x240>)
   b4be8:	2200      	movs	r2, #0
   b4bea:	f7ff fd79 	bl	b46e0 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>
					mod.insertKeyValue("p2", 0);		
   b4bee:	a80a      	add	r0, sp, #40	; 0x28
   b4bf0:	491b      	ldr	r1, [pc, #108]	; (b4c60 <_Z7setTypeii+0x244>)
   b4bf2:	2200      	movs	r2, #0
   b4bf4:	f7ff fd74 	bl	b46e0 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>
					mod.insertKeyValue("pend",pendingAlert);
   b4bf8:	9a05      	ldr	r2, [sp, #20]
   b4bfa:	490e      	ldr	r1, [pc, #56]	; (b4c34 <_Z7setTypeii+0x218>)
   b4bfc:	a80a      	add	r0, sp, #40	; 0x28
   b4bfe:	f7ff fd6f 	bl	b46e0 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>
					mod.insertKeyValue("cont",pendingAlertContext);
   b4c02:	9a06      	ldr	r2, [sp, #24]
   b4c04:	490c      	ldr	r1, [pc, #48]	; (b4c38 <_Z7setTypeii+0x21c>)
   b4c06:	a80a      	add	r0, sp, #40	; 0x28
   b4c08:	f7ff fd6a 	bl	b46e0 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>
				mod.finishObjectOrArray();
   b4c0c:	a80a      	add	r0, sp, #40	; 0x28
   b4c0e:	f000 fd39 	bl	b5684 <_ZN10JsonWriter19finishObjectOrArrayEv>
			mod.finish();
   b4c12:	a80a      	add	r0, sp, #40	; 0x28
   b4c14:	f001 f944 	bl	b5ea0 <_ZN12JsonModifier6finishEv>
		} break;
   b4c18:	e7af      	b.n	b4b7a <_Z7setTypeii+0x15e>
	if (nodeNumber == 0 || nodeNumber == 255) return false;
   b4c1a:	2000      	movs	r0, #0
   b4c1c:	e7bc      	b.n	b4b98 <_Z7setTypeii+0x17c>
   b4c1e:	bf00      	nop
   b4c20:	2003b778 	.word	0x2003b778
   b4c24:	000b9f63 	.word	0x000b9f63
   b4c28:	000ba05a 	.word	0x000ba05a
   b4c2c:	000b9f69 	.word	0x000b9f69
   b4c30:	000bab98 	.word	0x000bab98
   b4c34:	000ba069 	.word	0x000ba069
   b4c38:	000ba06e 	.word	0x000ba06e
   b4c3c:	000ba1fc 	.word	0x000ba1fc
   b4c40:	2003e6b0 	.word	0x2003e6b0
   b4c44:	000ba244 	.word	0x000ba244
   b4c48:	2003b770 	.word	0x2003b770
   b4c4c:	000ba276 	.word	0x000ba276
   b4c50:	000ba054 	.word	0x000ba054
   b4c54:	000ba21f 	.word	0x000ba21f
   b4c58:	000ba05e 	.word	0x000ba05e
   b4c5c:	000ba063 	.word	0x000ba063
   b4c60:	000ba066 	.word	0x000ba066
   b4c64:	000ba234 	.word	0x000ba234

000b4c68 <setup>:
void setup() {
   b4c68:	b570      	push	{r4, r5, r6, lr}
   b4c6a:	ed2d 8b02 	vpush	{d8}
	delay(2000);                        // Give the serial port time to connect
   b4c6e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
void setup() {
   b4c72:	b086      	sub	sp, #24
	delay(2000);                        // Give the serial port time to connect
   b4c74:	f002 fb18 	bl	b72a8 <delay>
	nodeIDData::instance().setup();		// Initialize the nodeDatabase
   b4c78:	f001 fa8e 	bl	b6198 <_ZN10nodeIDData8instanceEv>
   b4c7c:	6803      	ldr	r3, [r0, #0]
   b4c7e:	681b      	ldr	r3, [r3, #0]
   b4c80:	4798      	blx	r3
	Log.info("Starting tests");
   b4c82:	4988      	ldr	r1, [pc, #544]	; (b4ea4 <setup+0x23c>)
   b4c84:	4888      	ldr	r0, [pc, #544]	; (b4ea8 <setup+0x240>)
   b4c86:	f7ff fa71 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
	Log.info("First Test, we will clear the Node Database and load the sample data set");
   b4c8a:	4988      	ldr	r1, [pc, #544]	; (b4eac <setup+0x244>)
   b4c8c:	4886      	ldr	r0, [pc, #536]	; (b4ea8 <setup+0x240>)
   b4c8e:	f7ff fa6d 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
	nodeDatabase.resetNodeIDs();	// Clear the Node Database
   b4c92:	f001 fa81 	bl	b6198 <_ZN10nodeIDData8instanceEv>
   b4c96:	f001 fb33 	bl	b6300 <_ZN10nodeIDData12resetNodeIDsEv>
	printTokens(jp, false);
   b4c9a:	4885      	ldr	r0, [pc, #532]	; (b4eb0 <setup+0x248>)
   b4c9c:	2100      	movs	r1, #0
   b4c9e:	f7ff faf5 	bl	b428c <_Z11printTokensR10JsonParserb>
	Log.info("Now that the nodeDatabase is empty, we will load the sample data set");
   b4ca2:	4984      	ldr	r1, [pc, #528]	; (b4eb4 <setup+0x24c>)
   b4ca4:	4880      	ldr	r0, [pc, #512]	; (b4ea8 <setup+0x240>)
   b4ca6:	f7ff fa61 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
	bool addString(const char *data) { return addData(data, strlen(data)); }
   b4caa:	4983      	ldr	r1, [pc, #524]	; (b4eb8 <setup+0x250>)
   b4cac:	4880      	ldr	r0, [pc, #512]	; (b4eb0 <setup+0x248>)
   b4cae:	22a1      	movs	r2, #161	; 0xa1
   b4cb0:	f000 fae9 	bl	b5286 <_ZN10JsonBuffer7addDataEPKcj>
	if (jp.parse()) Log.info("Parsed Successfully");
   b4cb4:	487e      	ldr	r0, [pc, #504]	; (b4eb0 <setup+0x248>)
   b4cb6:	f001 f86d 	bl	b5d94 <_ZN10JsonParser5parseEv>
   b4cba:	2800      	cmp	r0, #0
   b4cbc:	f000 80e6 	beq.w	b4e8c <setup+0x224>
   b4cc0:	497e      	ldr	r1, [pc, #504]	; (b4ebc <setup+0x254>)
	printTokens(jp, true);
   b4cc2:	4c7b      	ldr	r4, [pc, #492]	; (b4eb0 <setup+0x248>)
		Log.info("Parsing error");
   b4cc4:	4878      	ldr	r0, [pc, #480]	; (b4ea8 <setup+0x240>)
   b4cc6:	f7ff fa51 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
	printTokens(jp, true);
   b4cca:	2101      	movs	r1, #1
   b4ccc:	4620      	mov	r0, r4
   b4cce:	f7ff fadd 	bl	b428c <_Z11printTokensR10JsonParserb>
	Log.info("Next, we will load and store the node database into memory");
   b4cd2:	497b      	ldr	r1, [pc, #492]	; (b4ec0 <setup+0x258>)
   b4cd4:	4874      	ldr	r0, [pc, #464]	; (b4ea8 <setup+0x240>)
   b4cd6:	f7ff fa49 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
	nodeDatabase.set_nodeIDJson(data);				// Load the text object from this sketch into the nodeDatabase
   b4cda:	f001 fa5d 	bl	b6198 <_ZN10nodeIDData8instanceEv>
   b4cde:	4976      	ldr	r1, [pc, #472]	; (b4eb8 <setup+0x250>)
   b4ce0:	f001 fa90 	bl	b6204 <_ZN10nodeIDData14set_nodeIDJsonEPKc>
	nodeDatabase.flush(false);						// Store the nodeDatabase into memory
   b4ce4:	f001 fa58 	bl	b6198 <_ZN10nodeIDData8instanceEv>
   b4ce8:	6803      	ldr	r3, [r0, #0]
   b4cea:	2100      	movs	r1, #0
   b4cec:	68db      	ldr	r3, [r3, #12]
   b4cee:	4798      	blx	r3
	Log.info("Note that our JSON object allocation is %4.2f%% of the memory allocated (less than 100%% is OK)", 100*(float)jp.getBufferLen()/(float)nodeDatabase.nodeDataStorageSize());
   b4cf0:	edd4 7a02 	vldr	s15, [r4, #8]
   b4cf4:	eeb8 8a67 	vcvt.f32.u32	s16, s15
   b4cf8:	eddf 7a72 	vldr	s15, [pc, #456]	; b4ec4 <setup+0x25c>
   b4cfc:	ee28 8a27 	vmul.f32	s16, s16, s15
   b4d00:	f001 fa4a 	bl	b6198 <_ZN10nodeIDData8instanceEv>
   b4d04:	f001 fa68 	bl	b61d8 <_ZN10nodeIDData19nodeDataStorageSizeEv>
   b4d08:	ee07 0a90 	vmov	s15, r0
   b4d0c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b4d10:	eec8 7a27 	vdiv.f32	s15, s16, s15
   b4d14:	ee17 0a90 	vmov	r0, s15
   b4d18:	f004 fe8c 	bl	b9a34 <__aeabi_f2d>
   b4d1c:	460b      	mov	r3, r1
   b4d1e:	4602      	mov	r2, r0
   b4d20:	4969      	ldr	r1, [pc, #420]	; (b4ec8 <setup+0x260>)
   b4d22:	4861      	ldr	r0, [pc, #388]	; (b4ea8 <setup+0x240>)
   b4d24:	f7ff fa22 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
	jp.clear();										// Clear the JSON object from memory
   b4d28:	4620      	mov	r0, r4
   b4d2a:	f000 fac9 	bl	b52c0 <_ZN10JsonBuffer5clearEv>
	jp.addString(nodeDatabase.get_nodeIDJson());	// Read in the JSON string from memory
   b4d2e:	f001 fa33 	bl	b6198 <_ZN10nodeIDData8instanceEv>
   b4d32:	4601      	mov	r1, r0
   b4d34:	a802      	add	r0, sp, #8
   b4d36:	f001 fa53 	bl	b61e0 <_ZNK10nodeIDData14get_nodeIDJsonEv>
    char operator [] (unsigned int index) const;
    char& operator [] (unsigned int index);
    void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
    void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
        {getBytes((unsigned char *)buf, bufsize, index);}
    const char * c_str() const { return buffer; }
   b4d3a:	9902      	ldr	r1, [sp, #8]
   b4d3c:	9101      	str	r1, [sp, #4]
   b4d3e:	4608      	mov	r0, r1
   b4d40:	f004 ffc1 	bl	b9cc6 <strlen>
   b4d44:	9901      	ldr	r1, [sp, #4]
   b4d46:	4602      	mov	r2, r0
   b4d48:	4620      	mov	r0, r4
   b4d4a:	f000 fa9c 	bl	b5286 <_ZN10JsonBuffer7addDataEPKcj>
   b4d4e:	a802      	add	r0, sp, #8
   b4d50:	f004 f9c4 	bl	b90dc <_ZN6StringD1Ev>
	Log.info("The node string is: %s",nodeDatabase.get_nodeIDJson().c_str());
   b4d54:	f001 fa20 	bl	b6198 <_ZN10nodeIDData8instanceEv>
   b4d58:	4601      	mov	r1, r0
   b4d5a:	a802      	add	r0, sp, #8
   b4d5c:	f001 fa40 	bl	b61e0 <_ZNK10nodeIDData14get_nodeIDJsonEv>
   b4d60:	9a02      	ldr	r2, [sp, #8]
   b4d62:	495a      	ldr	r1, [pc, #360]	; (b4ecc <setup+0x264>)
   b4d64:	4850      	ldr	r0, [pc, #320]	; (b4ea8 <setup+0x240>)
   b4d66:	f7ff fa01 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
   b4d6a:	a802      	add	r0, sp, #8
   b4d6c:	f004 f9b6 	bl	b90dc <_ZN6StringD1Ev>
	if (jp.parse()) Log.info("Parsed Successfully");
   b4d70:	4620      	mov	r0, r4
   b4d72:	f001 f80f 	bl	b5d94 <_ZN10JsonParser5parseEv>
   b4d76:	2800      	cmp	r0, #0
   b4d78:	f000 808e 	beq.w	b4e98 <setup+0x230>
   b4d7c:	494f      	ldr	r1, [pc, #316]	; (b4ebc <setup+0x254>)
		Log.info("Parsing error");
   b4d7e:	484a      	ldr	r0, [pc, #296]	; (b4ea8 <setup+0x240>)
	byte nodeNumber = findNodeNumber(uniqueID_1);
   b4d80:	4c53      	ldr	r4, [pc, #332]	; (b4ed0 <setup+0x268>)
	setType(nodeNumber, sensorType_2);
   b4d82:	4e54      	ldr	r6, [pc, #336]	; (b4ed4 <setup+0x26c>)
	setType(nodeNumber, sensorType_3);
   b4d84:	4d54      	ldr	r5, [pc, #336]	; (b4ed8 <setup+0x270>)
		Log.info("Parsing error");
   b4d86:	f7ff f9f1 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
	printTokens(jp, false);
   b4d8a:	4849      	ldr	r0, [pc, #292]	; (b4eb0 <setup+0x248>)
   b4d8c:	2100      	movs	r1, #0
   b4d8e:	f7ff fa7d 	bl	b428c <_Z11printTokensR10JsonParserb>
	Log.info("Finally, we will add a new node to the database and print the database");
   b4d92:	4952      	ldr	r1, [pc, #328]	; (b4edc <setup+0x274>)
   b4d94:	4844      	ldr	r0, [pc, #272]	; (b4ea8 <setup+0x240>)
   b4d96:	f7ff f9e9 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
	byte nodeNumber = findNodeNumber(uniqueID_1);
   b4d9a:	6820      	ldr	r0, [r4, #0]
   b4d9c:	f7ff fda6 	bl	b48ec <_Z14findNodeNumberm>
	Log.info("The node number is: %d",nodeNumber);
   b4da0:	494f      	ldr	r1, [pc, #316]	; (b4ee0 <setup+0x278>)
	byte nodeNumber = findNodeNumber(uniqueID_1);
   b4da2:	4602      	mov	r2, r0
	Log.info("The node number is: %d",nodeNumber);
   b4da4:	4840      	ldr	r0, [pc, #256]	; (b4ea8 <setup+0x240>)
   b4da6:	f7ff f9e1 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
	printTokens(jp, false);
   b4daa:	2100      	movs	r1, #0
   b4dac:	4840      	ldr	r0, [pc, #256]	; (b4eb0 <setup+0x248>)
   b4dae:	f7ff fa6d 	bl	b428c <_Z11printTokensR10JsonParserb>
	printNodeData(false);
   b4db2:	2000      	movs	r0, #0
   b4db4:	f7ff fb7c 	bl	b44b0 <_Z13printNodeDatab>
	Log.info("Now we will change the type of the node and print the database");
   b4db8:	494a      	ldr	r1, [pc, #296]	; (b4ee4 <setup+0x27c>)
   b4dba:	483b      	ldr	r0, [pc, #236]	; (b4ea8 <setup+0x240>)
   b4dbc:	f7ff f9d6 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
	nodeNumber = findNodeNumber(uniqueID_1);
   b4dc0:	6820      	ldr	r0, [r4, #0]
   b4dc2:	f7ff fd93 	bl	b48ec <_Z14findNodeNumberm>
   b4dc6:	4604      	mov	r4, r0
	byte currentType = getType(nodeNumber);
   b4dc8:	f7ff fa0c 	bl	b41e4 <_Z7getTypei>
	Log.info("The current type for node number %d is: %d",nodeNumber, currentType);
   b4dcc:	4622      	mov	r2, r4
	byte currentType = getType(nodeNumber);
   b4dce:	4603      	mov	r3, r0
	Log.info("The current type for node number %d is: %d",nodeNumber, currentType);
   b4dd0:	4945      	ldr	r1, [pc, #276]	; (b4ee8 <setup+0x280>)
   b4dd2:	4835      	ldr	r0, [pc, #212]	; (b4ea8 <setup+0x240>)
   b4dd4:	f7ff f9ca 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
	setType(nodeNumber, sensorType_2);
   b4dd8:	6831      	ldr	r1, [r6, #0]
   b4dda:	4620      	mov	r0, r4
   b4ddc:	f7ff fe1e 	bl	b4a1c <_Z7setTypeii>
	currentType = getType(nodeNumber);
   b4de0:	4620      	mov	r0, r4
   b4de2:	f7ff f9ff 	bl	b41e4 <_Z7getTypei>
	Log.info("The new type for node number %d is: %d",nodeNumber, currentType);
   b4de6:	4622      	mov	r2, r4
	currentType = getType(nodeNumber);
   b4de8:	4603      	mov	r3, r0
	Log.info("The new type for node number %d is: %d",nodeNumber, currentType);
   b4dea:	4940      	ldr	r1, [pc, #256]	; (b4eec <setup+0x284>)
   b4dec:	482e      	ldr	r0, [pc, #184]	; (b4ea8 <setup+0x240>)
   b4dee:	f7ff f9bd 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
	Log.info("Now we will change the type which will alter its structure and print the database");
   b4df2:	493f      	ldr	r1, [pc, #252]	; (b4ef0 <setup+0x288>)
   b4df4:	482c      	ldr	r0, [pc, #176]	; (b4ea8 <setup+0x240>)
   b4df6:	f7ff f9b9 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
	setType(nodeNumber, sensorType_3);
   b4dfa:	6829      	ldr	r1, [r5, #0]
   b4dfc:	4620      	mov	r0, r4
   b4dfe:	f7ff fe0d 	bl	b4a1c <_Z7setTypeii>
	printTokens(jp, false);
   b4e02:	2100      	movs	r1, #0
   b4e04:	482a      	ldr	r0, [pc, #168]	; (b4eb0 <setup+0x248>)
   b4e06:	f7ff fa41 	bl	b428c <_Z11printTokensR10JsonParserb>
	printNodeData(false);
   b4e0a:	2000      	movs	r0, #0
   b4e0c:	f7ff fb50 	bl	b44b0 <_Z13printNodeDatab>
	Log.info("Now we will change the type on a note that is in the middle of the pack and then change it back. ");
   b4e10:	4938      	ldr	r1, [pc, #224]	; (b4ef4 <setup+0x28c>)
   b4e12:	4825      	ldr	r0, [pc, #148]	; (b4ea8 <setup+0x240>)
   b4e14:	f7ff f9aa 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
	nodeNumber = findNodeNumber(uniqueID_2);
   b4e18:	4b37      	ldr	r3, [pc, #220]	; (b4ef8 <setup+0x290>)
   b4e1a:	6818      	ldr	r0, [r3, #0]
   b4e1c:	f7ff fd66 	bl	b48ec <_Z14findNodeNumberm>
   b4e20:	4604      	mov	r4, r0
	currentType = getType(nodeNumber);
   b4e22:	f7ff f9df 	bl	b41e4 <_Z7getTypei>
	Log.info("The current type for node number %d is: %d",nodeNumber, currentType);
   b4e26:	4622      	mov	r2, r4
	currentType = getType(nodeNumber);
   b4e28:	4603      	mov	r3, r0
	Log.info("The current type for node number %d is: %d",nodeNumber, currentType);
   b4e2a:	492f      	ldr	r1, [pc, #188]	; (b4ee8 <setup+0x280>)
   b4e2c:	481e      	ldr	r0, [pc, #120]	; (b4ea8 <setup+0x240>)
   b4e2e:	f7ff f99d 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
	setType(nodeNumber, sensorType_2);
   b4e32:	6831      	ldr	r1, [r6, #0]
   b4e34:	4620      	mov	r0, r4
   b4e36:	f7ff fdf1 	bl	b4a1c <_Z7setTypeii>
	printNodeData(false);
   b4e3a:	2000      	movs	r0, #0
   b4e3c:	f7ff fb38 	bl	b44b0 <_Z13printNodeDatab>
	currentType = getType(nodeNumber);
   b4e40:	4620      	mov	r0, r4
   b4e42:	f7ff f9cf 	bl	b41e4 <_Z7getTypei>
	Log.info("The new type for node number %d is: %d",nodeNumber, currentType);
   b4e46:	4622      	mov	r2, r4
	currentType = getType(nodeNumber);
   b4e48:	4603      	mov	r3, r0
	Log.info("The new type for node number %d is: %d",nodeNumber, currentType);
   b4e4a:	4928      	ldr	r1, [pc, #160]	; (b4eec <setup+0x284>)
   b4e4c:	4816      	ldr	r0, [pc, #88]	; (b4ea8 <setup+0x240>)
   b4e4e:	f7ff f98d 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
	setType(nodeNumber, sensorType_3);
   b4e52:	6829      	ldr	r1, [r5, #0]
   b4e54:	4620      	mov	r0, r4
   b4e56:	f7ff fde1 	bl	b4a1c <_Z7setTypeii>
	currentType = getType(nodeNumber);
   b4e5a:	4620      	mov	r0, r4
   b4e5c:	f7ff f9c2 	bl	b41e4 <_Z7getTypei>
	Log.info("The new type for node number %d is: %d",nodeNumber, currentType);
   b4e60:	4622      	mov	r2, r4
	currentType = getType(nodeNumber);
   b4e62:	4603      	mov	r3, r0
	Log.info("The new type for node number %d is: %d",nodeNumber, currentType);
   b4e64:	4921      	ldr	r1, [pc, #132]	; (b4eec <setup+0x284>)
   b4e66:	4810      	ldr	r0, [pc, #64]	; (b4ea8 <setup+0x240>)
   b4e68:	f7ff f980 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
	printTokens(jp, false);
   b4e6c:	4810      	ldr	r0, [pc, #64]	; (b4eb0 <setup+0x248>)
   b4e6e:	2100      	movs	r1, #0
   b4e70:	f7ff fa0c 	bl	b428c <_Z11printTokensR10JsonParserb>
	Log.info("Notice how the new node is now at the end of the outer ojbect - this will break our code");
   b4e74:	4921      	ldr	r1, [pc, #132]	; (b4efc <setup+0x294>)
   b4e76:	480c      	ldr	r0, [pc, #48]	; (b4ea8 <setup+0x240>)
   b4e78:	f7ff f978 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
	Log.info("Finished Parsing Test. Running data report tests in a loop.");
   b4e7c:	4920      	ldr	r1, [pc, #128]	; (b4f00 <setup+0x298>)
   b4e7e:	480a      	ldr	r0, [pc, #40]	; (b4ea8 <setup+0x240>)
   b4e80:	f7ff f974 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
}
   b4e84:	b006      	add	sp, #24
   b4e86:	ecbd 8b02 	vpop	{d8}
   b4e8a:	bd70      	pop	{r4, r5, r6, pc}
		nodeDatabase.resetNodeIDs();
   b4e8c:	f001 f984 	bl	b6198 <_ZN10nodeIDData8instanceEv>
   b4e90:	f001 fa36 	bl	b6300 <_ZN10nodeIDData12resetNodeIDsEv>
		Log.info("Parsing error");
   b4e94:	491b      	ldr	r1, [pc, #108]	; (b4f04 <setup+0x29c>)
   b4e96:	e714      	b.n	b4cc2 <setup+0x5a>
		nodeDatabase.resetNodeIDs();
   b4e98:	f001 f97e 	bl	b6198 <_ZN10nodeIDData8instanceEv>
   b4e9c:	f001 fa30 	bl	b6300 <_ZN10nodeIDData12resetNodeIDsEv>
		Log.info("Parsing error");
   b4ea0:	4918      	ldr	r1, [pc, #96]	; (b4f04 <setup+0x29c>)
   b4ea2:	e76c      	b.n	b4d7e <setup+0x116>
   b4ea4:	000ba2a4 	.word	0x000ba2a4
   b4ea8:	2003e6b0 	.word	0x2003e6b0
   b4eac:	000ba2b3 	.word	0x000ba2b3
   b4eb0:	2003b778 	.word	0x2003b778
   b4eb4:	000ba2fc 	.word	0x000ba2fc
   b4eb8:	000ba341 	.word	0x000ba341
   b4ebc:	000ba3e3 	.word	0x000ba3e3
   b4ec0:	000ba405 	.word	0x000ba405
   b4ec4:	42c80000 	.word	0x42c80000
   b4ec8:	000ba440 	.word	0x000ba440
   b4ecc:	000ba4a0 	.word	0x000ba4a0
   b4ed0:	2003b6c4 	.word	0x2003b6c4
   b4ed4:	2003b6bc 	.word	0x2003b6bc
   b4ed8:	2003b6c0 	.word	0x2003b6c0
   b4edc:	000ba4b7 	.word	0x000ba4b7
   b4ee0:	000ba4fe 	.word	0x000ba4fe
   b4ee4:	000ba515 	.word	0x000ba515
   b4ee8:	000ba554 	.word	0x000ba554
   b4eec:	000ba57f 	.word	0x000ba57f
   b4ef0:	000ba5a6 	.word	0x000ba5a6
   b4ef4:	000ba5f8 	.word	0x000ba5f8
   b4ef8:	2003b6c8 	.word	0x2003b6c8
   b4efc:	000ba65a 	.word	0x000ba65a
   b4f00:	000ba6b3 	.word	0x000ba6b3
   b4f04:	000ba3f7 	.word	0x000ba3f7

000b4f08 <_Z12setJsonData1iii>:
bool setJsonData1(int nodeNumber, int sensorType, int newJsonData1) {
   b4f08:	b570      	push	{r4, r5, r6, lr}
   b4f0a:	4616      	mov	r6, r2
   b4f0c:	b094      	sub	sp, #80	; 0x50
	if (nodeNumber == 0 || nodeNumber == 255) return false;
   b4f0e:	4604      	mov	r4, r0
   b4f10:	2800      	cmp	r0, #0
   b4f12:	d041      	beq.n	b4f98 <_Z12setJsonData1iii+0x90>
   b4f14:	28ff      	cmp	r0, #255	; 0xff
   b4f16:	d03f      	beq.n	b4f98 <_Z12setJsonData1iii+0x90>
	if (sensorType > 29) return false; 					// Return false if node is not a valid sensor type
   b4f18:	291d      	cmp	r1, #29
   b4f1a:	dc3d      	bgt.n	b4f98 <_Z12setJsonData1iii+0x90>
	jp.getValueTokenByKey(jp.getOuterObject(), "nodes", nodesArrayContainer);
   b4f1c:	4d1f      	ldr	r5, [pc, #124]	; (b4f9c <_Z12setJsonData1iii+0x94>)
   b4f1e:	4628      	mov	r0, r5
   b4f20:	f000 f9f3 	bl	b530a <_ZNK10JsonParser14getOuterObjectEv>
   b4f24:	4a1e      	ldr	r2, [pc, #120]	; (b4fa0 <_Z12setJsonData1iii+0x98>)
   b4f26:	4601      	mov	r1, r0
   b4f28:	ab02      	add	r3, sp, #8
   b4f2a:	4628      	mov	r0, r5
   b4f2c:	f000 fb56 	bl	b55dc <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
	nodeObjectContainer = jp.getTokenByIndex(nodesArrayContainer, nodeNumber-1);
   b4f30:	1e62      	subs	r2, r4, #1
   b4f32:	9902      	ldr	r1, [sp, #8]
   b4f34:	4628      	mov	r0, r5
   b4f36:	f000 fa0a 	bl	b534e <_ZNK10JsonParser15getTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj>
	if(nodeObjectContainer == NULL) return false;						    // Ran out of entries 
   b4f3a:	4604      	mov	r4, r0
   b4f3c:	b360      	cbz	r0, b4f98 <_Z12setJsonData1iii+0x90>
	jp.getValueByKey(nodeObjectContainer, "p1", jsonData1);
   b4f3e:	4601      	mov	r1, r0
   b4f40:	4a18      	ldr	r2, [pc, #96]	; (b4fa4 <_Z12setJsonData1iii+0x9c>)
   b4f42:	ab01      	add	r3, sp, #4
   b4f44:	4628      	mov	r0, r5
   b4f46:	f7ff f8da 	bl	b40fe <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
	Log.info("Updating jsonData1 value from %d to %d", jsonData1, newJsonData1);
   b4f4a:	9a01      	ldr	r2, [sp, #4]
   b4f4c:	4916      	ldr	r1, [pc, #88]	; (b4fa8 <_Z12setJsonData1iii+0xa0>)
   b4f4e:	4817      	ldr	r0, [pc, #92]	; (b4fac <_Z12setJsonData1iii+0xa4>)
   b4f50:	4633      	mov	r3, r6
   b4f52:	f7ff f90b 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
	jp.getValueTokenByKey(nodeObjectContainer, "p1", value);
   b4f56:	ab03      	add	r3, sp, #12
   b4f58:	4a12      	ldr	r2, [pc, #72]	; (b4fa4 <_Z12setJsonData1iii+0x9c>)
   b4f5a:	4621      	mov	r1, r4
   b4f5c:	4628      	mov	r0, r5
   b4f5e:	f000 fb3d 	bl	b55dc <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
	JsonModifier mod(jp);
   b4f62:	4629      	mov	r1, r5
   b4f64:	a804      	add	r0, sp, #16
   b4f66:	f000 fc81 	bl	b586c <_ZN12JsonModifierC1ER10JsonParser>
	mod.startModify(value);
   b4f6a:	9903      	ldr	r1, [sp, #12]
   b4f6c:	a804      	add	r0, sp, #16
   b4f6e:	f000 fc8f 	bl	b5890 <_ZN12JsonModifier11startModifyEPKN21JsonParserGeneratorRK9jsmntok_tE>
	void insertValue(int value) { insertsprintf("%d", value); }
   b4f72:	4632      	mov	r2, r6
   b4f74:	490e      	ldr	r1, [pc, #56]	; (b4fb0 <_Z12setJsonData1iii+0xa8>)
   b4f76:	a804      	add	r0, sp, #16
   b4f78:	f000 fbb5 	bl	b56e6 <_ZN10JsonWriter13insertsprintfEPKcz>
	mod.finish();
   b4f7c:	a804      	add	r0, sp, #16
   b4f7e:	f000 ff8f 	bl	b5ea0 <_ZN12JsonModifier6finishEv>
	nodeDatabase.set_nodeIDJson(jp.getBuffer());									// This should backup the nodeID database - now updated to persistent storage
   b4f82:	f001 f909 	bl	b6198 <_ZN10nodeIDData8instanceEv>
   b4f86:	6869      	ldr	r1, [r5, #4]
   b4f88:	f001 f93c 	bl	b6204 <_ZN10nodeIDData14set_nodeIDJsonEPKc>
	JsonModifier mod(jp);
   b4f8c:	a804      	add	r0, sp, #16
   b4f8e:	f000 f92b 	bl	b51e8 <_ZN12JsonModifierD1Ev>
	return true;
   b4f92:	2001      	movs	r0, #1
}
   b4f94:	b014      	add	sp, #80	; 0x50
   b4f96:	bd70      	pop	{r4, r5, r6, pc}
	if (nodeNumber == 0 || nodeNumber == 255) return false;
   b4f98:	2000      	movs	r0, #0
   b4f9a:	e7fb      	b.n	b4f94 <_Z12setJsonData1iii+0x8c>
   b4f9c:	2003b778 	.word	0x2003b778
   b4fa0:	000b9f63 	.word	0x000b9f63
   b4fa4:	000ba063 	.word	0x000ba063
   b4fa8:	000ba6ef 	.word	0x000ba6ef
   b4fac:	2003e6b0 	.word	0x2003e6b0
   b4fb0:	000ba273 	.word	0x000ba273

000b4fb4 <_Z12setJsonData2iii>:
bool setJsonData2(int nodeNumber, int sensorType, int newJsonData2) {
   b4fb4:	b570      	push	{r4, r5, r6, lr}
   b4fb6:	4616      	mov	r6, r2
   b4fb8:	b094      	sub	sp, #80	; 0x50
	if (nodeNumber == 0 || nodeNumber == 255) return false;
   b4fba:	4604      	mov	r4, r0
   b4fbc:	2800      	cmp	r0, #0
   b4fbe:	d042      	beq.n	b5046 <_Z12setJsonData2iii+0x92>
   b4fc0:	28ff      	cmp	r0, #255	; 0xff
   b4fc2:	d040      	beq.n	b5046 <_Z12setJsonData2iii+0x92>
	if (sensorType < 10 || sensorType > 19) return false; 					// Return false if node is not an occupancy counter
   b4fc4:	390a      	subs	r1, #10
   b4fc6:	2909      	cmp	r1, #9
   b4fc8:	d83d      	bhi.n	b5046 <_Z12setJsonData2iii+0x92>
	jp.getValueTokenByKey(jp.getOuterObject(), "nodes", nodesArrayContainer);
   b4fca:	4d20      	ldr	r5, [pc, #128]	; (b504c <_Z12setJsonData2iii+0x98>)
   b4fcc:	4628      	mov	r0, r5
   b4fce:	f000 f99c 	bl	b530a <_ZNK10JsonParser14getOuterObjectEv>
   b4fd2:	4a1f      	ldr	r2, [pc, #124]	; (b5050 <_Z12setJsonData2iii+0x9c>)
   b4fd4:	4601      	mov	r1, r0
   b4fd6:	ab02      	add	r3, sp, #8
   b4fd8:	4628      	mov	r0, r5
   b4fda:	f000 faff 	bl	b55dc <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
	nodeObjectContainer = jp.getTokenByIndex(nodesArrayContainer, nodeNumber-1);
   b4fde:	1e62      	subs	r2, r4, #1
   b4fe0:	9902      	ldr	r1, [sp, #8]
   b4fe2:	4628      	mov	r0, r5
   b4fe4:	f000 f9b3 	bl	b534e <_ZNK10JsonParser15getTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj>
	if(nodeObjectContainer == NULL) return false;								// Ran out of entries 
   b4fe8:	4604      	mov	r4, r0
   b4fea:	b360      	cbz	r0, b5046 <_Z12setJsonData2iii+0x92>
	jp.getValueByKey(nodeObjectContainer, "p2", jsonData2);
   b4fec:	4601      	mov	r1, r0
   b4fee:	4a19      	ldr	r2, [pc, #100]	; (b5054 <_Z12setJsonData2iii+0xa0>)
   b4ff0:	ab01      	add	r3, sp, #4
   b4ff2:	4628      	mov	r0, r5
   b4ff4:	f7ff f883 	bl	b40fe <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
	Log.info("Updating jsonData2 value from %d to %d", jsonData2, newJsonData2);
   b4ff8:	9a01      	ldr	r2, [sp, #4]
   b4ffa:	4917      	ldr	r1, [pc, #92]	; (b5058 <_Z12setJsonData2iii+0xa4>)
   b4ffc:	4817      	ldr	r0, [pc, #92]	; (b505c <_Z12setJsonData2iii+0xa8>)
   b4ffe:	4633      	mov	r3, r6
   b5000:	f7ff f8b4 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
	jp.getValueTokenByKey(nodeObjectContainer, "p2", value);
   b5004:	ab03      	add	r3, sp, #12
   b5006:	4a13      	ldr	r2, [pc, #76]	; (b5054 <_Z12setJsonData2iii+0xa0>)
   b5008:	4621      	mov	r1, r4
   b500a:	4628      	mov	r0, r5
   b500c:	f000 fae6 	bl	b55dc <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
	JsonModifier mod(jp);
   b5010:	4629      	mov	r1, r5
   b5012:	a804      	add	r0, sp, #16
   b5014:	f000 fc2a 	bl	b586c <_ZN12JsonModifierC1ER10JsonParser>
	mod.startModify(value);
   b5018:	9903      	ldr	r1, [sp, #12]
   b501a:	a804      	add	r0, sp, #16
   b501c:	f000 fc38 	bl	b5890 <_ZN12JsonModifier11startModifyEPKN21JsonParserGeneratorRK9jsmntok_tE>
   b5020:	4632      	mov	r2, r6
   b5022:	490f      	ldr	r1, [pc, #60]	; (b5060 <_Z12setJsonData2iii+0xac>)
   b5024:	a804      	add	r0, sp, #16
   b5026:	f000 fb5e 	bl	b56e6 <_ZN10JsonWriter13insertsprintfEPKcz>
	mod.finish();
   b502a:	a804      	add	r0, sp, #16
   b502c:	f000 ff38 	bl	b5ea0 <_ZN12JsonModifier6finishEv>
	nodeDatabase.set_nodeIDJson(jp.getBuffer());									// This should backup the nodeID database - now updated to persistent storage
   b5030:	f001 f8b2 	bl	b6198 <_ZN10nodeIDData8instanceEv>
   b5034:	6869      	ldr	r1, [r5, #4]
   b5036:	f001 f8e5 	bl	b6204 <_ZN10nodeIDData14set_nodeIDJsonEPKc>
	JsonModifier mod(jp);
   b503a:	a804      	add	r0, sp, #16
   b503c:	f000 f8d4 	bl	b51e8 <_ZN12JsonModifierD1Ev>
	return true;
   b5040:	2001      	movs	r0, #1
   b5042:	b014      	add	sp, #80	; 0x50
   b5044:	bd70      	pop	{r4, r5, r6, pc}
	if (nodeNumber == 0 || nodeNumber == 255) return false;
   b5046:	2000      	movs	r0, #0
   b5048:	e7fb      	b.n	b5042 <_Z12setJsonData2iii+0x8e>
   b504a:	bf00      	nop
   b504c:	2003b778 	.word	0x2003b778
   b5050:	000b9f63 	.word	0x000b9f63
   b5054:	000ba066 	.word	0x000ba066
   b5058:	000ba716 	.word	0x000ba716
   b505c:	2003e6b0 	.word	0x2003e6b0
   b5060:	000ba273 	.word	0x000ba273

000b5064 <loop>:
void loop() {
   b5064:	b5f0      	push	{r4, r5, r6, r7, lr}
    int currentIndex = numLoops % uniqueIDsCount;
   b5066:	4f45      	ldr	r7, [pc, #276]	; (b517c <loop+0x118>)
void loop() {
   b5068:	b09f      	sub	sp, #124	; 0x7c
	delay(2000);
   b506a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   b506e:	f002 f91b 	bl	b72a8 <delay>
    int currentIndex = numLoops % uniqueIDsCount;
   b5072:	683c      	ldr	r4, [r7, #0]
   b5074:	210e      	movs	r1, #14
   b5076:	fbb4 f3f1 	udiv	r3, r4, r1
   b507a:	fb01 4413 	mls	r4, r1, r3, r4
    unsigned long currentTime = Time.now();
   b507e:	f004 f953 	bl	b9328 <_ZN9TimeClass3nowEv>
    std::srand(currentTime);
   b5082:	f004 fd6d 	bl	b9b60 <srand>
    DataReport report = DataReport(uniqueIDs[currentIndex]); 
   b5086:	4b3e      	ldr	r3, [pc, #248]	; (b5180 <loop+0x11c>)
   b5088:	ae0f      	add	r6, sp, #60	; 0x3c
   b508a:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
   b508e:	4630      	mov	r0, r6
   b5090:	f001 fd46 	bl	b6b20 <_ZN10DataReportC1Em>
    report.setNodeNumber(currentIndex + 1); // The nodeNumber is equal to the index + 1 for all uniqueIDs
   b5094:	1c61      	adds	r1, r4, #1
   b5096:	4630      	mov	r0, r6
   b5098:	b2c9      	uxtb	r1, r1
   b509a:	f001 fd51 	bl	b6b40 <_ZN10DataReport13setNodeNumberEh>
    report.setSensorType(10); // sensorType is 10 for occupancy nodes
   b509e:	210a      	movs	r1, #10
   b50a0:	4630      	mov	r0, r6
   b50a2:	f001 fd4f 	bl	b6b44 <_ZN10DataReport13setSensorTypeEh>
    report.setOccupancyNet(std::rand() % 1001); // The data report will have a random value for occupancyNet
   b50a6:	f004 fd89 	bl	b9bbc <rand>
   b50aa:	f240 34e9 	movw	r4, #1001	; 0x3e9
   b50ae:	fb90 f1f4 	sdiv	r1, r0, r4
   b50b2:	fb01 0114 	mls	r1, r1, r4, r0
   b50b6:	b289      	uxth	r1, r1
   b50b8:	4630      	mov	r0, r6
   b50ba:	f001 fd48 	bl	b6b4e <_ZN10DataReport15setOccupancyNetEt>
    report.setOccupancyGross(std::rand() % 1001); // The data report will have a random value for occupancyGross
   b50be:	f004 fd7d 	bl	b9bbc <rand>
   b50c2:	fb90 f1f4 	sdiv	r1, r0, r4
   b50c6:	fb01 0114 	mls	r1, r1, r4, r0
   b50ca:	b289      	uxth	r1, r1
   b50cc:	4630      	mov	r0, r6
   b50ce:	f001 fd3c 	bl	b6b4a <_ZN10DataReport17setOccupancyGrossEt>
    Gateway::instance().processDataReport(report); // Send the data report to the gateway to populate MyPersistentData
   b50d2:	f001 fd97 	bl	b6c04 <_ZN7Gateway8instanceEv>
   b50d6:	ad12      	add	r5, sp, #72	; 0x48
   b50d8:	4684      	mov	ip, r0
   b50da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b50dc:	466c      	mov	r4, sp
   b50de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b50e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b50e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b50e4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   b50e8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   b50ec:	4660      	mov	r0, ip
   b50ee:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
   b50f2:	f001 fdf3 	bl	b6cdc <_ZN7Gateway17processDataReportE10DataReport>
    bool result1 = setJsonData1(current.get_nodeNumber(), current.get_sensorType(), current.get_payload3() <<8 | current.get_payload4());
   b50f6:	f000 ffcf 	bl	b6098 <_ZN17currentStatusData8instanceEv>
   b50fa:	f001 f96d 	bl	b63d8 <_ZNK17currentStatusData14get_nodeNumberEv>
   b50fe:	4604      	mov	r4, r0
   b5100:	f000 ffca 	bl	b6098 <_ZN17currentStatusData8instanceEv>
   b5104:	f001 f96d 	bl	b63e2 <_ZNK17currentStatusData14get_sensorTypeEv>
   b5108:	900d      	str	r0, [sp, #52]	; 0x34
   b510a:	f000 ffc5 	bl	b6098 <_ZN17currentStatusData8instanceEv>
   b510e:	f001 f977 	bl	b6400 <_ZNK17currentStatusData12get_payload3Ev>
   b5112:	4605      	mov	r5, r0
   b5114:	f000 ffc0 	bl	b6098 <_ZN17currentStatusData8instanceEv>
   b5118:	f001 f977 	bl	b640a <_ZNK17currentStatusData12get_payload4Ev>
   b511c:	990d      	ldr	r1, [sp, #52]	; 0x34
   b511e:	ea40 2205 	orr.w	r2, r0, r5, lsl #8
   b5122:	4620      	mov	r0, r4
   b5124:	f7ff fef0 	bl	b4f08 <_Z12setJsonData1iii>
   b5128:	4604      	mov	r4, r0
    bool result2 = setJsonData2(current.get_nodeNumber(), current.get_sensorType(), current.get_payload1() <<8 | current.get_payload2());
   b512a:	f000 ffb5 	bl	b6098 <_ZN17currentStatusData8instanceEv>
   b512e:	f001 f953 	bl	b63d8 <_ZNK17currentStatusData14get_nodeNumberEv>
   b5132:	4605      	mov	r5, r0
   b5134:	f000 ffb0 	bl	b6098 <_ZN17currentStatusData8instanceEv>
   b5138:	f001 f953 	bl	b63e2 <_ZNK17currentStatusData14get_sensorTypeEv>
   b513c:	900d      	str	r0, [sp, #52]	; 0x34
   b513e:	f000 ffab 	bl	b6098 <_ZN17currentStatusData8instanceEv>
   b5142:	f001 f953 	bl	b63ec <_ZNK17currentStatusData12get_payload1Ev>
   b5146:	4606      	mov	r6, r0
   b5148:	f000 ffa6 	bl	b6098 <_ZN17currentStatusData8instanceEv>
   b514c:	f001 f953 	bl	b63f6 <_ZNK17currentStatusData12get_payload2Ev>
   b5150:	990d      	ldr	r1, [sp, #52]	; 0x34
   b5152:	ea40 2206 	orr.w	r2, r0, r6, lsl #8
   b5156:	4628      	mov	r0, r5
   b5158:	f7ff ff2c 	bl	b4fb4 <_Z12setJsonData2iii>
    if(!(result1 && result2)){
   b515c:	b104      	cbz	r4, b5160 <loop+0xfc>
   b515e:	b918      	cbnz	r0, b5168 <loop+0x104>
        Log.info("Failed to set Json Data!! Tokens:");
   b5160:	4908      	ldr	r1, [pc, #32]	; (b5184 <loop+0x120>)
   b5162:	4809      	ldr	r0, [pc, #36]	; (b5188 <loop+0x124>)
   b5164:	f7ff f802 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
	printTokens(jp, true);
   b5168:	4808      	ldr	r0, [pc, #32]	; (b518c <loop+0x128>)
   b516a:	2101      	movs	r1, #1
   b516c:	f7ff f88e 	bl	b428c <_Z11printTokensR10JsonParserb>
    numLoops += 1;
   b5170:	683b      	ldr	r3, [r7, #0]
   b5172:	3301      	adds	r3, #1
   b5174:	603b      	str	r3, [r7, #0]
}
   b5176:	b01f      	add	sp, #124	; 0x7c
   b5178:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b517a:	bf00      	nop
   b517c:	2003b774 	.word	0x2003b774
   b5180:	000ba7a0 	.word	0x000ba7a0
   b5184:	000ba73d 	.word	0x000ba73d
   b5188:	2003e6b0 	.word	0x2003e6b0
   b518c:	2003b778 	.word	0x2003b778

000b5190 <_ZN10JsonBufferD1Ev>:


JsonBuffer::JsonBuffer()  : buffer(0), bufferLen(0), offset(0), staticBuffers(false) {

}
JsonBuffer::~JsonBuffer() {
   b5190:	b510      	push	{r4, lr}
   b5192:	4b05      	ldr	r3, [pc, #20]	; (b51a8 <_ZN10JsonBufferD1Ev+0x18>)
   b5194:	6003      	str	r3, [r0, #0]
	if (!staticBuffers && buffer) {
   b5196:	7c03      	ldrb	r3, [r0, #16]
JsonBuffer::~JsonBuffer() {
   b5198:	4604      	mov	r4, r0
	if (!staticBuffers && buffer) {
   b519a:	b91b      	cbnz	r3, b51a4 <_ZN10JsonBufferD1Ev+0x14>
   b519c:	6840      	ldr	r0, [r0, #4]
   b519e:	b108      	cbz	r0, b51a4 <_ZN10JsonBufferD1Ev+0x14>
		free(buffer);
   b51a0:	f002 f82a 	bl	b71f8 <free>
	}
}
   b51a4:	4620      	mov	r0, r4
   b51a6:	bd10      	pop	{r4, pc}
   b51a8:	000ba7e8 	.word	0x000ba7e8

000b51ac <_ZN10JsonBufferD0Ev>:
JsonBuffer::~JsonBuffer() {
   b51ac:	b510      	push	{r4, lr}
   b51ae:	4604      	mov	r4, r0
}
   b51b0:	f7ff ffee 	bl	b5190 <_ZN10JsonBufferD1Ev>
   b51b4:	4620      	mov	r0, r4
   b51b6:	2114      	movs	r1, #20
   b51b8:	f7fe ff6f 	bl	b409a <_ZdlPvj>
   b51bc:	4620      	mov	r0, r4
   b51be:	bd10      	pop	{r4, pc}

000b51c0 <_ZN10JsonWriterD1Ev>:
//
JsonWriter::JsonWriter() : JsonBuffer(), floatPlaces(-1) {
	init();
}

JsonWriter::~JsonWriter() {
   b51c0:	b510      	push	{r4, lr}
   b51c2:	4b03      	ldr	r3, [pc, #12]	; (b51d0 <_ZN10JsonWriterD1Ev+0x10>)
   b51c4:	6003      	str	r3, [r0, #0]
   b51c6:	4604      	mov	r4, r0
   b51c8:	f7ff ffe2 	bl	b5190 <_ZN10JsonBufferD1Ev>

}
   b51cc:	4620      	mov	r0, r4
   b51ce:	bd10      	pop	{r4, pc}
   b51d0:	000ba808 	.word	0x000ba808

000b51d4 <_ZN10JsonWriterD0Ev>:
JsonWriter::~JsonWriter() {
   b51d4:	b510      	push	{r4, lr}
   b51d6:	4604      	mov	r4, r0
}
   b51d8:	f7ff fff2 	bl	b51c0 <_ZN10JsonWriterD1Ev>
   b51dc:	4620      	mov	r0, r4
   b51de:	2130      	movs	r1, #48	; 0x30
   b51e0:	f7fe ff5b 	bl	b409a <_ZdlPvj>
   b51e4:	4620      	mov	r0, r4
   b51e6:	bd10      	pop	{r4, pc}

000b51e8 <_ZN12JsonModifierD1Ev>:

JsonModifier::JsonModifier(JsonParser &jp) : jp(jp) {

}

JsonModifier::~JsonModifier() {
   b51e8:	b510      	push	{r4, lr}
   b51ea:	4b03      	ldr	r3, [pc, #12]	; (b51f8 <_ZN12JsonModifierD1Ev+0x10>)
   b51ec:	6003      	str	r3, [r0, #0]
   b51ee:	4604      	mov	r4, r0
   b51f0:	f7ff ffe6 	bl	b51c0 <_ZN10JsonWriterD1Ev>

}
   b51f4:	4620      	mov	r0, r4
   b51f6:	bd10      	pop	{r4, pc}
   b51f8:	000ba818 	.word	0x000ba818

000b51fc <_ZN12JsonModifierD0Ev>:
JsonModifier::~JsonModifier() {
   b51fc:	b510      	push	{r4, lr}
   b51fe:	4604      	mov	r4, r0
}
   b5200:	f7ff fff2 	bl	b51e8 <_ZN12JsonModifierD1Ev>
   b5204:	4620      	mov	r0, r4
   b5206:	2140      	movs	r1, #64	; 0x40
   b5208:	f7fe ff47 	bl	b409a <_ZdlPvj>
   b520c:	4620      	mov	r0, r4
   b520e:	bd10      	pop	{r4, pc}

000b5210 <_ZN10JsonParserD1Ev>:
JsonParser::~JsonParser() {
   b5210:	b510      	push	{r4, lr}
   b5212:	4b07      	ldr	r3, [pc, #28]	; (b5230 <_ZN10JsonParserD1Ev+0x20>)
   b5214:	6003      	str	r3, [r0, #0]
	if (!staticBuffers && tokens) {
   b5216:	7c03      	ldrb	r3, [r0, #16]
JsonParser::~JsonParser() {
   b5218:	4604      	mov	r4, r0
	if (!staticBuffers && tokens) {
   b521a:	b91b      	cbnz	r3, b5224 <_ZN10JsonParserD1Ev+0x14>
   b521c:	6940      	ldr	r0, [r0, #20]
   b521e:	b108      	cbz	r0, b5224 <_ZN10JsonParserD1Ev+0x14>
		free(tokens);
   b5220:	f001 ffea 	bl	b71f8 <free>
JsonParser::~JsonParser() {
   b5224:	4620      	mov	r0, r4
   b5226:	f7ff ffb3 	bl	b5190 <_ZN10JsonBufferD1Ev>
}
   b522a:	4620      	mov	r0, r4
   b522c:	bd10      	pop	{r4, pc}
   b522e:	bf00      	nop
   b5230:	000ba7f8 	.word	0x000ba7f8

000b5234 <_ZN10JsonParserD0Ev>:
JsonParser::~JsonParser() {
   b5234:	b510      	push	{r4, lr}
   b5236:	4604      	mov	r4, r0
}
   b5238:	f7ff ffea 	bl	b5210 <_ZN10JsonParserD1Ev>
   b523c:	4620      	mov	r0, r4
   b523e:	212c      	movs	r1, #44	; 0x2c
   b5240:	f7fe ff2b 	bl	b409a <_ZdlPvj>
   b5244:	4620      	mov	r0, r4
   b5246:	bd10      	pop	{r4, pc}

000b5248 <_ZN10JsonBufferC1Ev>:
JsonBuffer::JsonBuffer()  : buffer(0), bufferLen(0), offset(0), staticBuffers(false) {
   b5248:	4a03      	ldr	r2, [pc, #12]	; (b5258 <_ZN10JsonBufferC1Ev+0x10>)
   b524a:	6002      	str	r2, [r0, #0]
   b524c:	2200      	movs	r2, #0
   b524e:	e9c0 2201 	strd	r2, r2, [r0, #4]
   b5252:	60c2      	str	r2, [r0, #12]
   b5254:	7402      	strb	r2, [r0, #16]
}
   b5256:	4770      	bx	lr
   b5258:	000ba7e8 	.word	0x000ba7e8

000b525c <_ZN10JsonBuffer8allocateEj>:
bool JsonBuffer::allocate(size_t len) {
   b525c:	b538      	push	{r3, r4, r5, lr}
	if (!staticBuffers) {
   b525e:	7c03      	ldrb	r3, [r0, #16]
bool JsonBuffer::allocate(size_t len) {
   b5260:	4604      	mov	r4, r0
   b5262:	460d      	mov	r5, r1
	if (!staticBuffers) {
   b5264:	b10b      	cbz	r3, b526a <_ZN10JsonBuffer8allocateEj+0xe>
		return false;
   b5266:	2000      	movs	r0, #0
}
   b5268:	bd38      	pop	{r3, r4, r5, pc}
		if (buffer) {
   b526a:	6840      	ldr	r0, [r0, #4]
   b526c:	b138      	cbz	r0, b527e <_ZN10JsonBuffer8allocateEj+0x22>
			newBuffer = (char *) realloc(buffer, len);
   b526e:	f001 ffcb 	bl	b7208 <realloc>
		if (newBuffer) {
   b5272:	2800      	cmp	r0, #0
   b5274:	d0f7      	beq.n	b5266 <_ZN10JsonBuffer8allocateEj+0xa>
			bufferLen = len;
   b5276:	e9c4 0501 	strd	r0, r5, [r4, #4]
			return true;
   b527a:	2001      	movs	r0, #1
   b527c:	e7f4      	b.n	b5268 <_ZN10JsonBuffer8allocateEj+0xc>
			newBuffer = (char *) malloc(len);
   b527e:	4608      	mov	r0, r1
   b5280:	f001 ffb2 	bl	b71e8 <malloc>
   b5284:	e7f5      	b.n	b5272 <_ZN10JsonBuffer8allocateEj+0x16>

000b5286 <_ZN10JsonBuffer7addDataEPKcj>:
bool JsonBuffer::addData(const char *data, size_t dataLen) {
   b5286:	b570      	push	{r4, r5, r6, lr}
	if (!buffer || (offset + dataLen) > bufferLen) {
   b5288:	68c3      	ldr	r3, [r0, #12]
bool JsonBuffer::addData(const char *data, size_t dataLen) {
   b528a:	460e      	mov	r6, r1
   b528c:	4615      	mov	r5, r2
	if (!buffer || (offset + dataLen) > bufferLen) {
   b528e:	18d1      	adds	r1, r2, r3
   b5290:	6842      	ldr	r2, [r0, #4]
bool JsonBuffer::addData(const char *data, size_t dataLen) {
   b5292:	4604      	mov	r4, r0
	if (!buffer || (offset + dataLen) > bufferLen) {
   b5294:	b172      	cbz	r2, b52b4 <_ZN10JsonBuffer7addDataEPKcj+0x2e>
   b5296:	6882      	ldr	r2, [r0, #8]
   b5298:	428a      	cmp	r2, r1
   b529a:	d30b      	bcc.n	b52b4 <_ZN10JsonBuffer7addDataEPKcj+0x2e>
	memcpy(&buffer[offset], data, dataLen);
   b529c:	6860      	ldr	r0, [r4, #4]
   b529e:	68e3      	ldr	r3, [r4, #12]
   b52a0:	462a      	mov	r2, r5
   b52a2:	4631      	mov	r1, r6
   b52a4:	4418      	add	r0, r3
   b52a6:	f004 fc2b 	bl	b9b00 <memcpy>
	offset += dataLen;
   b52aa:	68e2      	ldr	r2, [r4, #12]
   b52ac:	442a      	add	r2, r5
   b52ae:	60e2      	str	r2, [r4, #12]
	return true;
   b52b0:	2001      	movs	r0, #1
}
   b52b2:	bd70      	pop	{r4, r5, r6, pc}
		if (!allocate(offset + dataLen)) {
   b52b4:	4620      	mov	r0, r4
   b52b6:	f7ff ffd1 	bl	b525c <_ZN10JsonBuffer8allocateEj>
   b52ba:	2800      	cmp	r0, #0
   b52bc:	d1ee      	bne.n	b529c <_ZN10JsonBuffer7addDataEPKcj+0x16>
   b52be:	e7f8      	b.n	b52b2 <_ZN10JsonBuffer7addDataEPKcj+0x2c>

000b52c0 <_ZN10JsonBuffer5clearEv>:
	if (buffer && bufferLen) {
   b52c0:	6843      	ldr	r3, [r0, #4]
	offset = 0;
   b52c2:	2100      	movs	r1, #0
   b52c4:	60c1      	str	r1, [r0, #12]
	if (buffer && bufferLen) {
   b52c6:	b123      	cbz	r3, b52d2 <_ZN10JsonBuffer5clearEv+0x12>
   b52c8:	6882      	ldr	r2, [r0, #8]
   b52ca:	b112      	cbz	r2, b52d2 <_ZN10JsonBuffer5clearEv+0x12>
		memset(buffer, 0, bufferLen);
   b52cc:	4618      	mov	r0, r3
   b52ce:	f004 bc3f 	b.w	b9b50 <memset>
}
   b52d2:	4770      	bx	lr

000b52d4 <_ZN10JsonParserC1EPcjPN21JsonParserGeneratorRK9jsmntok_tEj>:
JsonParser::JsonParser(char *buffer, size_t bufferLen, JsonParserGeneratorRK::jsmntok_t *tokens, size_t maxTokens) :
   b52d4:	b510      	push	{r4, lr}
JsonBuffer::JsonBuffer(char *buffer, size_t bufferLen)  : buffer(buffer), bufferLen(bufferLen), offset(0), staticBuffers(true) {
   b52d6:	e9c0 1201 	strd	r1, r2, [r0, #4]
   b52da:	2200      	movs	r2, #0
   b52dc:	60c2      	str	r2, [r0, #12]
   b52de:	2201      	movs	r2, #1
   b52e0:	7402      	strb	r2, [r0, #16]
		JsonBuffer(buffer, bufferLen), tokens(tokens), maxTokens(maxTokens) {
   b52e2:	6143      	str	r3, [r0, #20]
   b52e4:	4a02      	ldr	r2, [pc, #8]	; (b52f0 <_ZN10JsonParserC1EPcjPN21JsonParserGeneratorRK9jsmntok_tEj+0x1c>)
   b52e6:	9b02      	ldr	r3, [sp, #8]
   b52e8:	6002      	str	r2, [r0, #0]
   b52ea:	61c3      	str	r3, [r0, #28]
}
   b52ec:	bd10      	pop	{r4, pc}
   b52ee:	bf00      	nop
   b52f0:	000ba7f8 	.word	0x000ba7f8

000b52f4 <_ZNK10JsonParser13getOuterArrayEv>:
	for(const JsonParserGeneratorRK::jsmntok_t *token = tokens; token < tokensEnd; token++) {
   b52f4:	e9d0 0305 	ldrd	r0, r3, [r0, #20]
   b52f8:	4283      	cmp	r3, r0
   b52fa:	d904      	bls.n	b5306 <_ZNK10JsonParser13getOuterArrayEv+0x12>
		if (token->type == JsonParserGeneratorRK::JSMN_ARRAY) {
   b52fc:	7802      	ldrb	r2, [r0, #0]
   b52fe:	2a02      	cmp	r2, #2
   b5300:	d002      	beq.n	b5308 <_ZNK10JsonParser13getOuterArrayEv+0x14>
	for(const JsonParserGeneratorRK::jsmntok_t *token = tokens; token < tokensEnd; token++) {
   b5302:	3010      	adds	r0, #16
   b5304:	e7f8      	b.n	b52f8 <_ZNK10JsonParser13getOuterArrayEv+0x4>
	return 0;
   b5306:	2000      	movs	r0, #0
}
   b5308:	4770      	bx	lr

000b530a <_ZNK10JsonParser14getOuterObjectEv>:
	if (tokens < tokensEnd && tokens[0].type == JsonParserGeneratorRK::JSMN_OBJECT) {
   b530a:	e9d0 0305 	ldrd	r0, r3, [r0, #20]
   b530e:	4298      	cmp	r0, r3
   b5310:	d204      	bcs.n	b531c <_ZNK10JsonParser14getOuterObjectEv+0x12>
   b5312:	7803      	ldrb	r3, [r0, #0]
		return 0;
   b5314:	2b01      	cmp	r3, #1
   b5316:	bf18      	it	ne
   b5318:	2000      	movne	r0, #0
   b531a:	4770      	bx	lr
   b531c:	2000      	movs	r0, #0
}
   b531e:	4770      	bx	lr

000b5320 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>:
bool JsonParser::skipObject(const JsonParserGeneratorRK::jsmntok_t *container, const JsonParserGeneratorRK::jsmntok_t *&obj) const {
   b5320:	b570      	push	{r4, r5, r6, lr}
	int curObjectEnd = obj->end;
   b5322:	6813      	ldr	r3, [r2, #0]
   b5324:	689d      	ldr	r5, [r3, #8]
	while(++obj < tokensEnd && obj->end < container->end && obj->end <= curObjectEnd) {
   b5326:	6813      	ldr	r3, [r2, #0]
   b5328:	f103 0410 	add.w	r4, r3, #16
   b532c:	6014      	str	r4, [r2, #0]
   b532e:	6986      	ldr	r6, [r0, #24]
   b5330:	42b4      	cmp	r4, r6
   b5332:	d20a      	bcs.n	b534a <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_+0x2a>
   b5334:	699b      	ldr	r3, [r3, #24]
   b5336:	688c      	ldr	r4, [r1, #8]
   b5338:	42a3      	cmp	r3, r4
   b533a:	da01      	bge.n	b5340 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_+0x20>
   b533c:	42ab      	cmp	r3, r5
   b533e:	ddf2      	ble.n	b5326 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_+0x6>
	if (obj >= tokensEnd || obj->end > container->end) {
   b5340:	42a3      	cmp	r3, r4
   b5342:	bfcc      	ite	gt
   b5344:	2000      	movgt	r0, #0
   b5346:	2001      	movle	r0, #1
   b5348:	e000      	b.n	b534c <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_+0x2c>
		return false;
   b534a:	2000      	movs	r0, #0
}
   b534c:	bd70      	pop	{r4, r5, r6, pc}

000b534e <_ZNK10JsonParser15getTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj>:
const JsonParserGeneratorRK::jsmntok_t *JsonParser::getTokenByIndex(const JsonParserGeneratorRK::jsmntok_t *container, size_t desiredIndex) const {
   b534e:	b573      	push	{r0, r1, r4, r5, r6, lr}
	const JsonParserGeneratorRK::jsmntok_t *token = container + 1;
   b5350:	f101 0310 	add.w	r3, r1, #16
const JsonParserGeneratorRK::jsmntok_t *JsonParser::getTokenByIndex(const JsonParserGeneratorRK::jsmntok_t *container, size_t desiredIndex) const {
   b5354:	4604      	mov	r4, r0
   b5356:	4616      	mov	r6, r2
	const JsonParserGeneratorRK::jsmntok_t *token = container + 1;
   b5358:	9301      	str	r3, [sp, #4]
	size_t index = 0;
   b535a:	2500      	movs	r5, #0
	while(token < tokensEnd && token->end < container->end) {
   b535c:	9801      	ldr	r0, [sp, #4]
   b535e:	69a3      	ldr	r3, [r4, #24]
   b5360:	4283      	cmp	r3, r0
   b5362:	d90b      	bls.n	b537c <_ZNK10JsonParser15getTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj+0x2e>
   b5364:	6882      	ldr	r2, [r0, #8]
   b5366:	688b      	ldr	r3, [r1, #8]
   b5368:	429a      	cmp	r2, r3
   b536a:	da07      	bge.n	b537c <_ZNK10JsonParser15getTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj+0x2e>
		if (desiredIndex == index) {
   b536c:	42b5      	cmp	r5, r6
   b536e:	d006      	beq.n	b537e <_ZNK10JsonParser15getTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj+0x30>
		skipObject(container, token);
   b5370:	aa01      	add	r2, sp, #4
   b5372:	4620      	mov	r0, r4
		index++;
   b5374:	3501      	adds	r5, #1
		skipObject(container, token);
   b5376:	f7ff ffd3 	bl	b5320 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>
	while(token < tokensEnd && token->end < container->end) {
   b537a:	e7ef      	b.n	b535c <_ZNK10JsonParser15getTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj+0xe>
	return 0;
   b537c:	2000      	movs	r0, #0
}
   b537e:	b002      	add	sp, #8
   b5380:	bd70      	pop	{r4, r5, r6, pc}

000b5382 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j>:
bool JsonParser::getKeyValueTokenByIndex(const JsonParserGeneratorRK::jsmntok_t *container, const JsonParserGeneratorRK::jsmntok_t *&key, const JsonParserGeneratorRK::jsmntok_t *&value, size_t desiredIndex) const {
   b5382:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b5386:	9d08      	ldr	r5, [sp, #32]
   b5388:	4698      	mov	r8, r3
	const JsonParserGeneratorRK::jsmntok_t *token = container + 1;
   b538a:	f101 0310 	add.w	r3, r1, #16
bool JsonParser::getKeyValueTokenByIndex(const JsonParserGeneratorRK::jsmntok_t *container, const JsonParserGeneratorRK::jsmntok_t *&key, const JsonParserGeneratorRK::jsmntok_t *&value, size_t desiredIndex) const {
   b538e:	4604      	mov	r4, r0
   b5390:	4617      	mov	r7, r2
	const JsonParserGeneratorRK::jsmntok_t *token = container + 1;
   b5392:	9301      	str	r3, [sp, #4]
	size_t index = 0;
   b5394:	2600      	movs	r6, #0
	while(token < tokensEnd && token->end < container->end) {
   b5396:	9801      	ldr	r0, [sp, #4]
   b5398:	69a3      	ldr	r3, [r4, #24]
   b539a:	4283      	cmp	r3, r0
   b539c:	d91a      	bls.n	b53d4 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x52>
   b539e:	6882      	ldr	r2, [r0, #8]
   b53a0:	688b      	ldr	r3, [r1, #8]
   b53a2:	429a      	cmp	r2, r3
   b53a4:	da16      	bge.n	b53d4 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x52>
		if (desiredIndex == index) {
   b53a6:	42ae      	cmp	r6, r5
   b53a8:	d10b      	bne.n	b53c2 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x40>
			key = token;
   b53aa:	6038      	str	r0, [r7, #0]
			if (skipObject(container, token)) {
   b53ac:	aa01      	add	r2, sp, #4
   b53ae:	4620      	mov	r0, r4
   b53b0:	f7ff ffb6 	bl	b5320 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>
   b53b4:	b128      	cbz	r0, b53c2 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x40>
				value = token;
   b53b6:	9b01      	ldr	r3, [sp, #4]
   b53b8:	f8c8 3000 	str.w	r3, [r8]
}
   b53bc:	b002      	add	sp, #8
   b53be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		skipObject(container, token);
   b53c2:	aa01      	add	r2, sp, #4
   b53c4:	4620      	mov	r0, r4
   b53c6:	f7ff ffab 	bl	b5320 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>
		skipObject(container, token);
   b53ca:	4620      	mov	r0, r4
		index++;
   b53cc:	3601      	adds	r6, #1
		skipObject(container, token);
   b53ce:	f7ff ffa7 	bl	b5320 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>
	while(token < tokensEnd && token->end < container->end) {
   b53d2:	e7e0      	b.n	b5396 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x14>
	return false;
   b53d4:	2000      	movs	r0, #0
   b53d6:	e7f1      	b.n	b53bc <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x3a>

000b53d8 <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj>:
void JsonParser::copyTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, char *dst, size_t dstLen) const {
   b53d8:	b5f0      	push	{r4, r5, r6, r7, lr}
	for(ii = 0; ii < (token->end - token->start) && ii < ((int)dstLen - 1); ii++) {
   b53da:	3b01      	subs	r3, #1
   b53dc:	2400      	movs	r4, #0
   b53de:	e9d1 7601 	ldrd	r7, r6, [r1, #4]
   b53e2:	1bf6      	subs	r6, r6, r7
   b53e4:	42a6      	cmp	r6, r4
   b53e6:	dd08      	ble.n	b53fa <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj+0x22>
   b53e8:	42a3      	cmp	r3, r4
   b53ea:	dd06      	ble.n	b53fa <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj+0x22>
		dst[ii] = buffer[token->start + ii];
   b53ec:	6845      	ldr	r5, [r0, #4]
   b53ee:	443d      	add	r5, r7
   b53f0:	5d2d      	ldrb	r5, [r5, r4]
   b53f2:	f802 5b01 	strb.w	r5, [r2], #1
	for(ii = 0; ii < (token->end - token->start) && ii < ((int)dstLen - 1); ii++) {
   b53f6:	3401      	adds	r4, #1
   b53f8:	e7f1      	b.n	b53de <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj+0x6>
	dst[ii] = 0;
   b53fa:	2300      	movs	r3, #0
   b53fc:	7013      	strb	r3, [r2, #0]
}
   b53fe:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b5400 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tERi>:
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, int &result) const {
   b5400:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b5402:	4614      	mov	r4, r2
	copyTokenValue(token, tmp, sizeof(tmp));
   b5404:	2310      	movs	r3, #16
   b5406:	466a      	mov	r2, sp
   b5408:	f7ff ffe6 	bl	b53d8 <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj>
	if (sscanf(tmp, "%d", &result) == 1) {
   b540c:	4904      	ldr	r1, [pc, #16]	; (b5420 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tERi+0x20>)
   b540e:	4622      	mov	r2, r4
   b5410:	4668      	mov	r0, sp
   b5412:	f001 ff01 	bl	b7218 <sscanf>
}
   b5416:	1e43      	subs	r3, r0, #1
   b5418:	4258      	negs	r0, r3
   b541a:	4158      	adcs	r0, r3
   b541c:	b004      	add	sp, #16
   b541e:	bd10      	pop	{r4, pc}
   b5420:	000ba273 	.word	0x000ba273

000b5424 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tERm>:
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, unsigned long &result) const {
   b5424:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b5426:	4614      	mov	r4, r2
	copyTokenValue(token, tmp, sizeof(tmp));
   b5428:	2310      	movs	r3, #16
   b542a:	466a      	mov	r2, sp
   b542c:	f7ff ffd4 	bl	b53d8 <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj>
	if (sscanf(tmp, "%lu", &result) == 1) {
   b5430:	4904      	ldr	r1, [pc, #16]	; (b5444 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tERm+0x20>)
   b5432:	4622      	mov	r2, r4
   b5434:	4668      	mov	r0, sp
   b5436:	f001 feef 	bl	b7218 <sscanf>
}
   b543a:	1e43      	subs	r3, r0, #1
   b543c:	4258      	negs	r0, r3
   b543e:	4158      	adcs	r0, r3
   b5440:	b004      	add	sp, #16
   b5442:	bd10      	pop	{r4, pc}
   b5444:	000ba1af 	.word	0x000ba1af

000b5448 <_ZN16JsonParserString6appendEc>:
void JsonParserString::append(char ch) {
   b5448:	b510      	push	{r4, lr}
   b544a:	4604      	mov	r4, r0
	if (str) {
   b544c:	6800      	ldr	r0, [r0, #0]
void JsonParserString::append(char ch) {
   b544e:	460b      	mov	r3, r1
	if (str) {
   b5450:	b128      	cbz	r0, b545e <_ZN16JsonParserString6appendEc+0x16>
		str->concat(ch);
   b5452:	f003 ff0e 	bl	b9272 <_ZN6String6concatEc>
		length++;
   b5456:	68e3      	ldr	r3, [r4, #12]
   b5458:	3301      	adds	r3, #1
   b545a:	60e3      	str	r3, [r4, #12]
}
   b545c:	bd10      	pop	{r4, pc}
		if (buf && length < (bufLen - 1)) {
   b545e:	6860      	ldr	r0, [r4, #4]
   b5460:	2800      	cmp	r0, #0
   b5462:	d0f8      	beq.n	b5456 <_ZN16JsonParserString6appendEc+0xe>
   b5464:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
   b5468:	3a01      	subs	r2, #1
   b546a:	428a      	cmp	r2, r1
			buf[length] = ch;
   b546c:	bf88      	it	hi
   b546e:	5443      	strbhi	r3, [r0, r1]
   b5470:	e7f1      	b.n	b5456 <_ZN16JsonParserString6appendEc+0xe>

000b5472 <_ZN10JsonParser10appendUtf8EtR16JsonParserString>:
void JsonParser::appendUtf8(uint16_t unicode, JsonParserString &str) {
   b5472:	4603      	mov	r3, r0
	if (unicode <= 0x007f) {
   b5474:	2b7f      	cmp	r3, #127	; 0x7f
void JsonParser::appendUtf8(uint16_t unicode, JsonParserString &str) {
   b5476:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b5478:	4608      	mov	r0, r1
		str.append((char)unicode);
   b547a:	b2d9      	uxtb	r1, r3
	if (unicode <= 0x007f) {
   b547c:	d804      	bhi.n	b5488 <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0x16>
}
   b547e:	b003      	add	sp, #12
   b5480:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		str.append((char)value);
   b5484:	f7ff bfe0 	b.w	b5448 <_ZN16JsonParserString6appendEc>
		value = (0b10000000 | (unicode & 0b111111));
   b5488:	f001 013f 	and.w	r1, r1, #63	; 0x3f
	if (unicode <= 0x7ff) {
   b548c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
		value = (0b11000000 | ((unicode >> 6) & 0b11111));
   b5490:	f3c3 1587 	ubfx	r5, r3, #6, #8
		value = (0b10000000 | (unicode & 0b111111));
   b5494:	f041 0480 	orr.w	r4, r1, #128	; 0x80
	if (unicode <= 0x7ff) {
   b5498:	d207      	bcs.n	b54aa <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0x38>
		str.append((char)value);
   b549a:	f045 01c0 	orr.w	r1, r5, #192	; 0xc0
   b549e:	9001      	str	r0, [sp, #4]
		str.append((char)value);
   b54a0:	f7ff ffd2 	bl	b5448 <_ZN16JsonParserString6appendEc>
		str.append((char)value);
   b54a4:	9801      	ldr	r0, [sp, #4]
   b54a6:	4621      	mov	r1, r4
   b54a8:	e7e9      	b.n	b547e <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0xc>
		value = 0b11100000 | ((unicode >> 12) & 0b1111);
   b54aa:	0b1b      	lsrs	r3, r3, #12
		str.append((char)value);
   b54ac:	f043 01e0 	orr.w	r1, r3, #224	; 0xe0
   b54b0:	9001      	str	r0, [sp, #4]
   b54b2:	f7ff ffc9 	bl	b5448 <_ZN16JsonParserString6appendEc>
		value = 0b10000000 | ((unicode >> 6) & 0b111111);
   b54b6:	f005 013f 	and.w	r1, r5, #63	; 0x3f
		str.append((char)value);
   b54ba:	9801      	ldr	r0, [sp, #4]
   b54bc:	f041 0180 	orr.w	r1, r1, #128	; 0x80
   b54c0:	e7ee      	b.n	b54a0 <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0x2e>
	...

000b54c4 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString>:
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, JsonParserString &str) const {
   b54c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
	bool escape = false;
   b54c8:	2400      	movs	r4, #0
	for(int ii = token->start; ii < token->end; ii++) {
   b54ca:	684e      	ldr	r6, [r1, #4]
					if (sscanf(tmp, "%04x", &unicode) == 1) {
   b54cc:	f8df a0cc 	ldr.w	sl, [pc, #204]	; b559c <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xd8>
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, JsonParserString &str) const {
   b54d0:	4680      	mov	r8, r0
   b54d2:	460f      	mov	r7, r1
   b54d4:	4615      	mov	r5, r2
			escape = false;
   b54d6:	46a1      	mov	r9, r4
	for(int ii = token->start; ii < token->end; ii++) {
   b54d8:	68b8      	ldr	r0, [r7, #8]
   b54da:	42b0      	cmp	r0, r6
   b54dc:	dd5a      	ble.n	b5594 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xd0>
			switch(buffer[ii]) {
   b54de:	f8d8 3004 	ldr.w	r3, [r8, #4]
   b54e2:	5d99      	ldrb	r1, [r3, r6]
   b54e4:	199a      	adds	r2, r3, r6
		if (escape) {
   b54e6:	2c00      	cmp	r4, #0
   b54e8:	d04b      	beq.n	b5582 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xbe>
			switch(buffer[ii]) {
   b54ea:	2975      	cmp	r1, #117	; 0x75
   b54ec:	d805      	bhi.n	b54fa <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
   b54ee:	296d      	cmp	r1, #109	; 0x6d
   b54f0:	d807      	bhi.n	b5502 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x3e>
   b54f2:	2962      	cmp	r1, #98	; 0x62
   b54f4:	d01e      	beq.n	b5534 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x70>
   b54f6:	2966      	cmp	r1, #102	; 0x66
   b54f8:	d01e      	beq.n	b5538 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x74>
				str.append(buffer[ii]);
   b54fa:	4628      	mov	r0, r5
   b54fc:	f7ff ffa4 	bl	b5448 <_ZN16JsonParserString6appendEc>
				break;
   b5500:	e03d      	b.n	b557e <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xba>
   b5502:	f1a1 046e 	sub.w	r4, r1, #110	; 0x6e
   b5506:	2c07      	cmp	r4, #7
   b5508:	d8f7      	bhi.n	b54fa <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
   b550a:	f20f 0c08 	addw	ip, pc, #8
   b550e:	f85c f024 	ldr.w	pc, [ip, r4, lsl #2]
   b5512:	bf00      	nop
   b5514:	000b553d 	.word	0x000b553d
   b5518:	000b54fb 	.word	0x000b54fb
   b551c:	000b54fb 	.word	0x000b54fb
   b5520:	000b54fb 	.word	0x000b54fb
   b5524:	000b5541 	.word	0x000b5541
   b5528:	000b54fb 	.word	0x000b54fb
   b552c:	000b5545 	.word	0x000b5545
   b5530:	000b5549 	.word	0x000b5549
				str.append('\b');
   b5534:	2108      	movs	r1, #8
   b5536:	e7e0      	b.n	b54fa <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				str.append('\f');
   b5538:	210c      	movs	r1, #12
   b553a:	e7de      	b.n	b54fa <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				str.append('\n');
   b553c:	210a      	movs	r1, #10
   b553e:	e7dc      	b.n	b54fa <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				str.append('\r');
   b5540:	210d      	movs	r1, #13
   b5542:	e7da      	b.n	b54fa <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				str.append('\t');
   b5544:	2109      	movs	r1, #9
   b5546:	e7d8      	b.n	b54fa <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				if ((ii + 4) < token->end) {
   b5548:	1d31      	adds	r1, r6, #4
   b554a:	4288      	cmp	r0, r1
   b554c:	dd17      	ble.n	b557e <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xba>
   b554e:	a902      	add	r1, sp, #8
   b5550:	3304      	adds	r3, #4
   b5552:	4433      	add	r3, r6
   b5554:	4608      	mov	r0, r1
						tmp[jj] = buffer[ii + jj + 1];
   b5556:	f812 4f01 	ldrb.w	r4, [r2, #1]!
   b555a:	f801 4b01 	strb.w	r4, [r1], #1
					for(size_t jj = 0; jj < 4; jj++) {
   b555e:	429a      	cmp	r2, r3
   b5560:	d1f9      	bne.n	b5556 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x92>
					if (sscanf(tmp, "%04x", &unicode) == 1) {
   b5562:	aa01      	add	r2, sp, #4
   b5564:	4651      	mov	r1, sl
					tmp[4] = 0;
   b5566:	f88d 900c 	strb.w	r9, [sp, #12]
					if (sscanf(tmp, "%04x", &unicode) == 1) {
   b556a:	f001 fe55 	bl	b7218 <sscanf>
   b556e:	2801      	cmp	r0, #1
   b5570:	d105      	bne.n	b557e <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xba>
						appendUtf8((uint16_t)unicode, str);
   b5572:	f8bd 0004 	ldrh.w	r0, [sp, #4]
   b5576:	4629      	mov	r1, r5
   b5578:	f7ff ff7b 	bl	b5472 <_ZN10JsonParser10appendUtf8EtR16JsonParserString>
						ii += 5; // also increments in loop
   b557c:	3605      	adds	r6, #5
			escape = false;
   b557e:	2400      	movs	r4, #0
   b5580:	e004      	b.n	b558c <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xc8>
		if (buffer[ii] == '\\') {
   b5582:	295c      	cmp	r1, #92	; 0x5c
   b5584:	d004      	beq.n	b5590 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xcc>
			str.append(buffer[ii]);
   b5586:	4628      	mov	r0, r5
   b5588:	f7ff ff5e 	bl	b5448 <_ZN16JsonParserString6appendEc>
	for(int ii = token->start; ii < token->end; ii++) {
   b558c:	3601      	adds	r6, #1
   b558e:	e7a3      	b.n	b54d8 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x14>
			escape = true;
   b5590:	2401      	movs	r4, #1
   b5592:	e7fb      	b.n	b558c <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xc8>
}
   b5594:	2001      	movs	r0, #1
   b5596:	b004      	add	sp, #16
   b5598:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b559c:	000bab68 	.word	0x000bab68

000b55a0 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER6String>:
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, String &result) const {
   b55a0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b55a2:	460c      	mov	r4, r1
   b55a4:	4606      	mov	r6, r0
	result = "";
   b55a6:	490c      	ldr	r1, [pc, #48]	; (b55d8 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER6String+0x38>)
   b55a8:	4610      	mov	r0, r2
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, String &result) const {
   b55aa:	4615      	mov	r5, r2
	result = "";
   b55ac:	f003 fe38 	bl	b9220 <_ZN6StringaSEPKc>
	result.reserve(token->end - token->start + 1);
   b55b0:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
   b55b4:	1ac9      	subs	r1, r1, r3
   b55b6:	3101      	adds	r1, #1
   b55b8:	4628      	mov	r0, r5
   b55ba:	f003 fdad 	bl	b9118 <_ZN6String7reserveEj>
JsonParserString::JsonParserString(String *str) : str(str), buf(0), bufLen(0), length(0){
   b55be:	2300      	movs	r3, #0
	return getTokenValue(token, strWrapper);
   b55c0:	466a      	mov	r2, sp
   b55c2:	4621      	mov	r1, r4
   b55c4:	4630      	mov	r0, r6
JsonParserString::JsonParserString(String *str) : str(str), buf(0), bufLen(0), length(0){
   b55c6:	e9cd 3301 	strd	r3, r3, [sp, #4]
   b55ca:	9500      	str	r5, [sp, #0]
   b55cc:	9303      	str	r3, [sp, #12]
	return getTokenValue(token, strWrapper);
   b55ce:	f7ff ff79 	bl	b54c4 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString>
}
   b55d2:	b004      	add	sp, #16
   b55d4:	bd70      	pop	{r4, r5, r6, pc}
   b55d6:	bf00      	nop
   b55d8:	000babc7 	.word	0x000babc7

000b55dc <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>:
bool JsonParser::getValueTokenByKey(const JsonParserGeneratorRK::jsmntok_t *container, const char *name, const JsonParserGeneratorRK::jsmntok_t *&value) const {
   b55dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b55e0:	b089      	sub	sp, #36	; 0x24
   b55e2:	4605      	mov	r5, r0
   b55e4:	4688      	mov	r8, r1
	String keyName;
   b55e6:	a804      	add	r0, sp, #16
   b55e8:	4912      	ldr	r1, [pc, #72]	; (b5634 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x58>)
bool JsonParser::getValueTokenByKey(const JsonParserGeneratorRK::jsmntok_t *container, const char *name, const JsonParserGeneratorRK::jsmntok_t *&value) const {
   b55ea:	4616      	mov	r6, r2
   b55ec:	4699      	mov	r9, r3
	String keyName;
   b55ee:	f003 fdc0 	bl	b9172 <_ZN6StringC1EPK19__FlashStringHelper>
	for(size_t ii = 0; getKeyValueTokenByIndex(container, key, value, ii); ii++) {
   b55f2:	2700      	movs	r7, #0
   b55f4:	9700      	str	r7, [sp, #0]
   b55f6:	464b      	mov	r3, r9
   b55f8:	aa03      	add	r2, sp, #12
   b55fa:	4641      	mov	r1, r8
   b55fc:	4628      	mov	r0, r5
   b55fe:	f7ff fec0 	bl	b5382 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j>
   b5602:	4604      	mov	r4, r0
   b5604:	b170      	cbz	r0, b5624 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x48>
		if (getTokenValue(key, keyName) && keyName == name) {
   b5606:	9903      	ldr	r1, [sp, #12]
   b5608:	aa04      	add	r2, sp, #16
   b560a:	4628      	mov	r0, r5
   b560c:	f7ff ffc8 	bl	b55a0 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER6String>
   b5610:	4604      	mov	r4, r0
   b5612:	b908      	cbnz	r0, b5618 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x3c>
	for(size_t ii = 0; getKeyValueTokenByIndex(container, key, value, ii); ii++) {
   b5614:	3701      	adds	r7, #1
   b5616:	e7ed      	b.n	b55f4 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x18>
    unsigned char operator == (const char *cstr) const {return equals(cstr);}
   b5618:	4631      	mov	r1, r6
   b561a:	a804      	add	r0, sp, #16
   b561c:	f003 fe36 	bl	b928c <_ZNK6String6equalsEPKc>
		if (getTokenValue(key, keyName) && keyName == name) {
   b5620:	2800      	cmp	r0, #0
   b5622:	d0f7      	beq.n	b5614 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x38>
	String keyName;
   b5624:	a804      	add	r0, sp, #16
   b5626:	f003 fd59 	bl	b90dc <_ZN6StringD1Ev>
}
   b562a:	4620      	mov	r0, r4
   b562c:	b009      	add	sp, #36	; 0x24
   b562e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b5632:	bf00      	nop
   b5634:	000babc7 	.word	0x000babc7

000b5638 <_ZN10JsonWriter4initEv>:
	offset = 0;
   b5638:	2300      	movs	r3, #0
	context[contextIndex].isFirst = true;
   b563a:	2201      	movs	r2, #1
	offset = 0;
   b563c:	60c3      	str	r3, [r0, #12]
	contextIndex = 0;
   b563e:	6143      	str	r3, [r0, #20]
	context[contextIndex].isFirst = true;
   b5640:	8302      	strh	r2, [r0, #24]
	truncated = false;
   b5642:	f880 302a 	strb.w	r3, [r0, #42]	; 0x2a
}
   b5646:	4770      	bx	lr

000b5648 <_ZN10JsonWriterC1Ev>:
JsonWriter::JsonWriter() : JsonBuffer(), floatPlaces(-1) {
   b5648:	b508      	push	{r3, lr}
   b564a:	4603      	mov	r3, r0
   b564c:	f7ff fdfc 	bl	b5248 <_ZN10JsonBufferC1Ev>
   b5650:	4a04      	ldr	r2, [pc, #16]	; (b5664 <_ZN10JsonWriterC1Ev+0x1c>)
   b5652:	601a      	str	r2, [r3, #0]
   b5654:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	init();
   b5658:	4618      	mov	r0, r3
JsonWriter::JsonWriter() : JsonBuffer(), floatPlaces(-1) {
   b565a:	62da      	str	r2, [r3, #44]	; 0x2c
	init();
   b565c:	f7ff ffec 	bl	b5638 <_ZN10JsonWriter4initEv>
}
   b5660:	bd08      	pop	{r3, pc}
   b5662:	bf00      	nop
   b5664:	000ba808 	.word	0x000ba808

000b5668 <_ZN10JsonWriter10insertCharEc>:
	if (offset < bufferLen) {
   b5668:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
void JsonWriter::insertChar(char ch) {
   b566c:	b510      	push	{r4, lr}
	if (offset < bufferLen) {
   b566e:	4293      	cmp	r3, r2
		buffer[offset++] = ch;
   b5670:	bf3f      	itttt	cc
   b5672:	6842      	ldrcc	r2, [r0, #4]
   b5674:	1c5c      	addcc	r4, r3, #1
   b5676:	60c4      	strcc	r4, [r0, #12]
   b5678:	54d1      	strbcc	r1, [r2, r3]
		truncated = true;
   b567a:	bf24      	itt	cs
   b567c:	2301      	movcs	r3, #1
   b567e:	f880 302a 	strbcs.w	r3, [r0, #42]	; 0x2a
}
   b5682:	bd10      	pop	{r4, pc}

000b5684 <_ZN10JsonWriter19finishObjectOrArrayEv>:
void JsonWriter::finishObjectOrArray() {
   b5684:	b510      	push	{r4, lr}
	if (contextIndex > 0) {
   b5686:	6943      	ldr	r3, [r0, #20]
void JsonWriter::finishObjectOrArray() {
   b5688:	4604      	mov	r4, r0
	if (contextIndex > 0) {
   b568a:	b143      	cbz	r3, b569e <_ZN10JsonWriter19finishObjectOrArrayEv+0x1a>
		if (context[contextIndex].terminator != 0) {
   b568c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
   b5690:	7e59      	ldrb	r1, [r3, #25]
   b5692:	b109      	cbz	r1, b5698 <_ZN10JsonWriter19finishObjectOrArrayEv+0x14>
			insertChar(context[contextIndex].terminator);
   b5694:	f7ff ffe8 	bl	b5668 <_ZN10JsonWriter10insertCharEc>
		contextIndex--;
   b5698:	6963      	ldr	r3, [r4, #20]
   b569a:	3b01      	subs	r3, #1
   b569c:	6163      	str	r3, [r4, #20]
	if (offset < bufferLen) {
   b569e:	e9d4 1002 	ldrd	r1, r0, [r4, #8]
		buffer[offset] = 0;
   b56a2:	6863      	ldr	r3, [r4, #4]
	if (offset < bufferLen) {
   b56a4:	4288      	cmp	r0, r1
   b56a6:	f04f 0200 	mov.w	r2, #0
		buffer[bufferLen - 1] = 0;
   b56aa:	bf2a      	itet	cs
   b56ac:	185b      	addcs	r3, r3, r1
		buffer[offset] = 0;
   b56ae:	541a      	strbcc	r2, [r3, r0]
		buffer[bufferLen - 1] = 0;
   b56b0:	f803 2c01 	strbcs.w	r2, [r3, #-1]
}
   b56b4:	bd10      	pop	{r4, pc}

000b56b6 <_ZN10JsonWriter14insertvsprintfEPKcSt9__va_list>:
void JsonWriter::insertvsprintf(const char *fmt, va_list ap) {
   b56b6:	b570      	push	{r4, r5, r6, lr}
   b56b8:	4604      	mov	r4, r0
	size_t spaceAvailable = bufferLen - offset;
   b56ba:	e9d0 5002 	ldrd	r5, r0, [r0, #8]
	size_t count = vsnprintf(&buffer[offset], spaceAvailable, fmt, ap);
   b56be:	6866      	ldr	r6, [r4, #4]
	size_t spaceAvailable = bufferLen - offset;
   b56c0:	1a2d      	subs	r5, r5, r0
void JsonWriter::insertvsprintf(const char *fmt, va_list ap) {
   b56c2:	4613      	mov	r3, r2
	size_t count = vsnprintf(&buffer[offset], spaceAvailable, fmt, ap);
   b56c4:	4430      	add	r0, r6
   b56c6:	460a      	mov	r2, r1
   b56c8:	4629      	mov	r1, r5
   b56ca:	f001 fdbd 	bl	b7248 <vsnprintf>
	if (count <= spaceAvailable) {
   b56ce:	4285      	cmp	r5, r0
		offset += count;
   b56d0:	bf2d      	iteet	cs
   b56d2:	68e3      	ldrcs	r3, [r4, #12]
		offset = bufferLen;
   b56d4:	68a3      	ldrcc	r3, [r4, #8]
   b56d6:	60e3      	strcc	r3, [r4, #12]
		offset += count;
   b56d8:	18c0      	addcs	r0, r0, r3
		truncated = true;
   b56da:	bf36      	itet	cc
   b56dc:	2301      	movcc	r3, #1
		offset += count;
   b56de:	60e0      	strcs	r0, [r4, #12]
		truncated = true;
   b56e0:	f884 302a 	strbcc.w	r3, [r4, #42]	; 0x2a
}
   b56e4:	bd70      	pop	{r4, r5, r6, pc}

000b56e6 <_ZN10JsonWriter13insertsprintfEPKcz>:
void JsonWriter::insertsprintf(const char *fmt, ...) {
   b56e6:	b40e      	push	{r1, r2, r3}
   b56e8:	b503      	push	{r0, r1, lr}
   b56ea:	aa03      	add	r2, sp, #12
   b56ec:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(ap, fmt);
   b56f0:	9201      	str	r2, [sp, #4]
	insertvsprintf(fmt, ap);
   b56f2:	f7ff ffe0 	bl	b56b6 <_ZN10JsonWriter14insertvsprintfEPKcSt9__va_list>
}
   b56f6:	b002      	add	sp, #8
   b56f8:	f85d eb04 	ldr.w	lr, [sp], #4
   b56fc:	b003      	add	sp, #12
   b56fe:	4770      	bx	lr

000b5700 <_ZN10JsonWriter12insertStringEPKcb>:
void JsonWriter::insertString(const char *s, bool quoted) {
   b5700:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b5704:	4604      	mov	r4, r0
   b5706:	460e      	mov	r6, r1
	if (quoted) {
   b5708:	4617      	mov	r7, r2
   b570a:	b112      	cbz	r2, b5712 <_ZN10JsonWriter12insertStringEPKcb+0x12>
		insertChar('"');
   b570c:	2122      	movs	r1, #34	; 0x22
   b570e:	f7ff ffab 	bl	b5668 <_ZN10JsonWriter10insertCharEc>
				insertsprintf("\\u%04X", utf16);
   b5712:	f8df 810c 	ldr.w	r8, [pc, #268]	; b5820 <_ZN10JsonWriter12insertStringEPKcb+0x120>
void JsonWriter::insertString(const char *s, bool quoted) {
   b5716:	2500      	movs	r5, #0
	for(size_t ii = 0; s[ii] && offset < bufferLen; ii++) {
   b5718:	5d71      	ldrb	r1, [r6, r5]
   b571a:	eb06 0905 	add.w	r9, r6, r5
   b571e:	2900      	cmp	r1, #0
   b5720:	d074      	beq.n	b580c <_ZN10JsonWriter12insertStringEPKcb+0x10c>
   b5722:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   b5726:	429a      	cmp	r2, r3
   b5728:	d270      	bcs.n	b580c <_ZN10JsonWriter12insertStringEPKcb+0x10c>
		if (s[ii] & 0x80) {
   b572a:	060b      	lsls	r3, r1, #24
   b572c:	d534      	bpl.n	b5798 <_ZN10JsonWriter12insertStringEPKcb+0x98>
			if (((s[ii] & 0b11110000) == 0b11100000) && ((s[ii+1] & 0b11000000) == 0b10000000) && ((s[ii+2] & 0b11000000) == 0b10000000)) {
   b572e:	f001 03f0 	and.w	r3, r1, #240	; 0xf0
   b5732:	2be0      	cmp	r3, #224	; 0xe0
   b5734:	f105 0901 	add.w	r9, r5, #1
   b5738:	d11d      	bne.n	b5776 <_ZN10JsonWriter12insertStringEPKcb+0x76>
   b573a:	f816 2009 	ldrb.w	r2, [r6, r9]
   b573e:	f002 03c0 	and.w	r3, r2, #192	; 0xc0
   b5742:	2b80      	cmp	r3, #128	; 0x80
   b5744:	d139      	bne.n	b57ba <_ZN10JsonWriter12insertStringEPKcb+0xba>
   b5746:	f105 0902 	add.w	r9, r5, #2
   b574a:	f816 3009 	ldrb.w	r3, [r6, r9]
   b574e:	f003 00c0 	and.w	r0, r3, #192	; 0xc0
   b5752:	2880      	cmp	r0, #128	; 0x80
   b5754:	d131      	bne.n	b57ba <_ZN10JsonWriter12insertStringEPKcb+0xba>
				uint16_t utf16 = ((s[ii] & 0b1111) << 12) | ((s[ii+1] & 0b111111) << 6) | (s[ii+2] & 0b111111);
   b5756:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   b575a:	0192      	lsls	r2, r2, #6
   b575c:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
   b5760:	f402 627c 	and.w	r2, r2, #4032	; 0xfc0
   b5764:	431a      	orrs	r2, r3
				insertsprintf("\\u%04X", utf16);
   b5766:	b292      	uxth	r2, r2
				insertsprintf("\\u%04X", utf16);
   b5768:	4641      	mov	r1, r8
   b576a:	4620      	mov	r0, r4
   b576c:	f7ff ffbb 	bl	b56e6 <_ZN10JsonWriter13insertsprintfEPKcz>
				ii++; // plus one more in loop increment
   b5770:	464d      	mov	r5, r9
	for(size_t ii = 0; s[ii] && offset < bufferLen; ii++) {
   b5772:	3501      	adds	r5, #1
   b5774:	e7d0      	b.n	b5718 <_ZN10JsonWriter12insertStringEPKcb+0x18>
			if (((s[ii] & 0b11100000) == 0b11000000) && ((s[ii+1] & 0b11000000) == 0b10000000)) {
   b5776:	f001 03e0 	and.w	r3, r1, #224	; 0xe0
   b577a:	2bc0      	cmp	r3, #192	; 0xc0
   b577c:	d11d      	bne.n	b57ba <_ZN10JsonWriter12insertStringEPKcb+0xba>
   b577e:	f816 3009 	ldrb.w	r3, [r6, r9]
   b5782:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
   b5786:	2a80      	cmp	r2, #128	; 0x80
   b5788:	d117      	bne.n	b57ba <_ZN10JsonWriter12insertStringEPKcb+0xba>
				uint16_t utf16 = ((s[ii] & 0b11111) << 6) | (s[ii+1] & 0b111111);
   b578a:	0189      	lsls	r1, r1, #6
   b578c:	f401 62f8 	and.w	r2, r1, #1984	; 0x7c0
   b5790:	f003 033f 	and.w	r3, r3, #63	; 0x3f
				insertsprintf("\\u%04X", utf16);
   b5794:	431a      	orrs	r2, r3
   b5796:	e7e7      	b.n	b5768 <_ZN10JsonWriter12insertStringEPKcb+0x68>
			switch(s[ii]) {
   b5798:	290d      	cmp	r1, #13
   b579a:	d80a      	bhi.n	b57b2 <_ZN10JsonWriter12insertStringEPKcb+0xb2>
   b579c:	2907      	cmp	r1, #7
   b579e:	d90c      	bls.n	b57ba <_ZN10JsonWriter12insertStringEPKcb+0xba>
   b57a0:	f1a1 0308 	sub.w	r3, r1, #8
   b57a4:	2b05      	cmp	r3, #5
   b57a6:	d808      	bhi.n	b57ba <_ZN10JsonWriter12insertStringEPKcb+0xba>
   b57a8:	e8df f003 	tbb	[pc, r3]
   b57ac:	07172309 	.word	0x07172309
   b57b0:	1d11      	.short	0x1d11
   b57b2:	2922      	cmp	r1, #34	; 0x22
   b57b4:	d023      	beq.n	b57fe <_ZN10JsonWriter12insertStringEPKcb+0xfe>
   b57b6:	295c      	cmp	r1, #92	; 0x5c
   b57b8:	d021      	beq.n	b57fe <_ZN10JsonWriter12insertStringEPKcb+0xfe>
				insertChar(s[ii]);
   b57ba:	4620      	mov	r0, r4
   b57bc:	e004      	b.n	b57c8 <_ZN10JsonWriter12insertStringEPKcb+0xc8>
				insertChar('\\');
   b57be:	215c      	movs	r1, #92	; 0x5c
   b57c0:	4620      	mov	r0, r4
   b57c2:	f7ff ff51 	bl	b5668 <_ZN10JsonWriter10insertCharEc>
				insertChar('b');
   b57c6:	2162      	movs	r1, #98	; 0x62
				insertChar(s[ii]);
   b57c8:	f7ff ff4e 	bl	b5668 <_ZN10JsonWriter10insertCharEc>
				break;
   b57cc:	e7d1      	b.n	b5772 <_ZN10JsonWriter12insertStringEPKcb+0x72>
				insertChar('\\');
   b57ce:	215c      	movs	r1, #92	; 0x5c
   b57d0:	4620      	mov	r0, r4
   b57d2:	f7ff ff49 	bl	b5668 <_ZN10JsonWriter10insertCharEc>
				insertChar('f');
   b57d6:	2166      	movs	r1, #102	; 0x66
   b57d8:	e7f6      	b.n	b57c8 <_ZN10JsonWriter12insertStringEPKcb+0xc8>
				insertChar('\\');
   b57da:	215c      	movs	r1, #92	; 0x5c
   b57dc:	4620      	mov	r0, r4
   b57de:	f7ff ff43 	bl	b5668 <_ZN10JsonWriter10insertCharEc>
				insertChar('n');
   b57e2:	216e      	movs	r1, #110	; 0x6e
   b57e4:	e7f0      	b.n	b57c8 <_ZN10JsonWriter12insertStringEPKcb+0xc8>
				insertChar('\\');
   b57e6:	215c      	movs	r1, #92	; 0x5c
   b57e8:	4620      	mov	r0, r4
   b57ea:	f7ff ff3d 	bl	b5668 <_ZN10JsonWriter10insertCharEc>
				insertChar('r');
   b57ee:	2172      	movs	r1, #114	; 0x72
   b57f0:	e7ea      	b.n	b57c8 <_ZN10JsonWriter12insertStringEPKcb+0xc8>
				insertChar('\\');
   b57f2:	215c      	movs	r1, #92	; 0x5c
   b57f4:	4620      	mov	r0, r4
   b57f6:	f7ff ff37 	bl	b5668 <_ZN10JsonWriter10insertCharEc>
				insertChar('t');
   b57fa:	2174      	movs	r1, #116	; 0x74
   b57fc:	e7e4      	b.n	b57c8 <_ZN10JsonWriter12insertStringEPKcb+0xc8>
				insertChar('\\');
   b57fe:	215c      	movs	r1, #92	; 0x5c
   b5800:	4620      	mov	r0, r4
   b5802:	f7ff ff31 	bl	b5668 <_ZN10JsonWriter10insertCharEc>
				insertChar(s[ii]);
   b5806:	f899 1000 	ldrb.w	r1, [r9]
   b580a:	e7dd      	b.n	b57c8 <_ZN10JsonWriter12insertStringEPKcb+0xc8>
	if (quoted) {
   b580c:	b12f      	cbz	r7, b581a <_ZN10JsonWriter12insertStringEPKcb+0x11a>
		insertChar('"');
   b580e:	4620      	mov	r0, r4
   b5810:	2122      	movs	r1, #34	; 0x22
}
   b5812:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		insertChar('"');
   b5816:	f7ff bf27 	b.w	b5668 <_ZN10JsonWriter10insertCharEc>
}
   b581a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b581e:	bf00      	nop
   b5820:	000ba7d8 	.word	0x000ba7d8

000b5824 <_ZN10JsonWriter20insertCheckSeparatorEv>:
	if (context[contextIndex].isFirst) {
   b5824:	6942      	ldr	r2, [r0, #20]
   b5826:	eb00 0342 	add.w	r3, r0, r2, lsl #1
   b582a:	7e1a      	ldrb	r2, [r3, #24]
   b582c:	b112      	cbz	r2, b5834 <_ZN10JsonWriter20insertCheckSeparatorEv+0x10>
		context[contextIndex].isFirst = false;
   b582e:	2200      	movs	r2, #0
   b5830:	761a      	strb	r2, [r3, #24]
}
   b5832:	4770      	bx	lr
		insertChar(',');
   b5834:	212c      	movs	r1, #44	; 0x2c
   b5836:	f7ff bf17 	b.w	b5668 <_ZN10JsonWriter10insertCharEc>

000b583a <_ZN10JsonWriter18startObjectOrArrayEcc>:
bool JsonWriter::startObjectOrArray(char startChar, char endChar) {
   b583a:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if ((contextIndex + 1) >= MAX_NESTED_CONTEXT) {
   b583c:	6943      	ldr	r3, [r0, #20]
bool JsonWriter::startObjectOrArray(char startChar, char endChar) {
   b583e:	9101      	str	r1, [sp, #4]
	if ((contextIndex + 1) >= MAX_NESTED_CONTEXT) {
   b5840:	3301      	adds	r3, #1
   b5842:	2b08      	cmp	r3, #8
bool JsonWriter::startObjectOrArray(char startChar, char endChar) {
   b5844:	4616      	mov	r6, r2
	if ((contextIndex + 1) >= MAX_NESTED_CONTEXT) {
   b5846:	d80f      	bhi.n	b5868 <_ZN10JsonWriter18startObjectOrArrayEcc+0x2e>
	insertCheckSeparator();
   b5848:	f7ff ffec 	bl	b5824 <_ZN10JsonWriter20insertCheckSeparatorEv>
	contextIndex++;
   b584c:	6943      	ldr	r3, [r0, #20]
	insertChar(startChar);
   b584e:	9901      	ldr	r1, [sp, #4]
   b5850:	eb00 0443 	add.w	r4, r0, r3, lsl #1
	contextIndex++;
   b5854:	1c5a      	adds	r2, r3, #1
	context[contextIndex].isFirst = true;
   b5856:	2501      	movs	r5, #1
	contextIndex++;
   b5858:	6142      	str	r2, [r0, #20]
	context[contextIndex].isFirst = true;
   b585a:	76a5      	strb	r5, [r4, #26]
	context[contextIndex].terminator = endChar;
   b585c:	76e6      	strb	r6, [r4, #27]
	insertChar(startChar);
   b585e:	f7ff ff03 	bl	b5668 <_ZN10JsonWriter10insertCharEc>
   b5862:	4628      	mov	r0, r5
}
   b5864:	b002      	add	sp, #8
   b5866:	bd70      	pop	{r4, r5, r6, pc}
		return false;
   b5868:	2000      	movs	r0, #0
   b586a:	e7fb      	b.n	b5864 <_ZN10JsonWriter18startObjectOrArrayEcc+0x2a>

000b586c <_ZN12JsonModifierC1ER10JsonParser>:
JsonModifier::JsonModifier(JsonParser &jp) : jp(jp) {
   b586c:	b510      	push	{r4, lr}
   b586e:	4604      	mov	r4, r0
   b5870:	f7ff feea 	bl	b5648 <_ZN10JsonWriterC1Ev>
   b5874:	4b05      	ldr	r3, [pc, #20]	; (b588c <_ZN12JsonModifierC1ER10JsonParser+0x20>)
   b5876:	6023      	str	r3, [r4, #0]
   b5878:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b587c:	2300      	movs	r3, #0
   b587e:	e9c4 230d 	strd	r2, r3, [r4, #52]	; 0x34
   b5882:	6321      	str	r1, [r4, #48]	; 0x30
   b5884:	63e3      	str	r3, [r4, #60]	; 0x3c
}
   b5886:	4620      	mov	r0, r4
   b5888:	bd10      	pop	{r4, pc}
   b588a:	bf00      	nop
   b588c:	000ba818 	.word	0x000ba818

000b5890 <_ZN12JsonModifier11startModifyEPKN21JsonParserGeneratorRK9jsmntok_tE>:
	jp.setOffset(left + origAfter);
	jp.parse();

	return true;
}
bool JsonModifier::startModify(const JsonParserGeneratorRK::jsmntok_t *token) {
   b5890:	b570      	push	{r4, r5, r6, lr}
	if (start != -1) {
   b5892:	6b43      	ldr	r3, [r0, #52]	; 0x34
   b5894:	3301      	adds	r3, #1
bool JsonModifier::startModify(const JsonParserGeneratorRK::jsmntok_t *token) {
   b5896:	4604      	mov	r4, r0
	if (start != -1) {
   b5898:	d121      	bne.n	b58de <_ZN12JsonModifier11startModifyEPKN21JsonParserGeneratorRK9jsmntok_tE+0x4e>
		// Modification or insertion already in progress
		return false;
	}
	start = token->start;
	origAfter = jp.getOffset() - token->end;
   b589a:	6b05      	ldr	r5, [r0, #48]	; 0x30
	start = token->start;
   b589c:	684b      	ldr	r3, [r1, #4]
   b589e:	6343      	str	r3, [r0, #52]	; 0x34
	size_t getOffset() const { return offset; }
   b58a0:	68eb      	ldr	r3, [r5, #12]
	origAfter = jp.getOffset() - token->end;
   b58a2:	6888      	ldr	r0, [r1, #8]
   b58a4:	1a1a      	subs	r2, r3, r0
   b58a6:	63a2      	str	r2, [r4, #56]	; 0x38
	saveLoc = jp.getBufferLen() - origAfter;
   b58a8:	68ae      	ldr	r6, [r5, #8]
   b58aa:	4430      	add	r0, r6
   b58ac:	1ac3      	subs	r3, r0, r3

	//printf("start=%d origAfter=%d saveLoc=%d bufferSize=%d\n", start, origAfter, saveLoc, saveLoc - start);

	if (origAfter > 0) {
   b58ae:	2a00      	cmp	r2, #0
	saveLoc = jp.getBufferLen() - origAfter;
   b58b0:	63e3      	str	r3, [r4, #60]	; 0x3c
	if (origAfter > 0) {
   b58b2:	dd05      	ble.n	b58c0 <_ZN12JsonModifier11startModifyEPKN21JsonParserGeneratorRK9jsmntok_tE+0x30>
	char *getBuffer() const { return buffer; }
   b58b4:	6868      	ldr	r0, [r5, #4]
		memmove(jp.getBuffer() + saveLoc, jp.getBuffer() + token->end, origAfter);
   b58b6:	6889      	ldr	r1, [r1, #8]
   b58b8:	4401      	add	r1, r0
   b58ba:	4418      	add	r0, r3
   b58bc:	f004 f92e 	bl	b9b1c <memmove>
   b58c0:	6b22      	ldr	r2, [r4, #48]	; 0x30
	}

	setBuffer(jp.getBuffer() + start, saveLoc - start);
   b58c2:	6b61      	ldr	r1, [r4, #52]	; 0x34
   b58c4:	6852      	ldr	r2, [r2, #4]
   b58c6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   b58c8:	440a      	add	r2, r1
   b58ca:	1a5b      	subs	r3, r3, r1
	this->staticBuffers = true;
   b58cc:	2101      	movs	r1, #1
	init();
   b58ce:	4620      	mov	r0, r4
	this->bufferLen = bufferLen;
   b58d0:	e9c4 2301 	strd	r2, r3, [r4, #4]
	this->staticBuffers = true;
   b58d4:	7421      	strb	r1, [r4, #16]
	init();
   b58d6:	f7ff feaf 	bl	b5638 <_ZN10JsonWriter4initEv>
   b58da:	4608      	mov	r0, r1

	return true;
}
   b58dc:	bd70      	pop	{r4, r5, r6, pc}
		return false;
   b58de:	2000      	movs	r0, #0
   b58e0:	e7fc      	b.n	b58dc <_ZN12JsonModifier11startModifyEPKN21JsonParserGeneratorRK9jsmntok_tE+0x4c>

000b58e2 <_ZN12JsonModifier11startAppendEPKN21JsonParserGeneratorRK9jsmntok_tE>:

bool JsonModifier::startAppend(const JsonParserGeneratorRK::jsmntok_t *arrayOrObjectToken) {
   b58e2:	b570      	push	{r4, r5, r6, lr}
	if (start != -1) {
   b58e4:	6b43      	ldr	r3, [r0, #52]	; 0x34
   b58e6:	3301      	adds	r3, #1
bool JsonModifier::startAppend(const JsonParserGeneratorRK::jsmntok_t *arrayOrObjectToken) {
   b58e8:	4604      	mov	r4, r0
   b58ea:	460e      	mov	r6, r1
	if (start != -1) {
   b58ec:	d129      	bne.n	b5942 <_ZN12JsonModifier11startAppendEPKN21JsonParserGeneratorRK9jsmntok_tE+0x60>
		// Modification or insertion already in progress
		return false;
	}

	start = arrayOrObjectToken->end - 1; // Before the closing ] or }
   b58ee:	688d      	ldr	r5, [r1, #8]
	origAfter = jp.getOffset() - start;
   b58f0:	6b01      	ldr	r1, [r0, #48]	; 0x30
	start = arrayOrObjectToken->end - 1; // Before the closing ] or }
   b58f2:	3d01      	subs	r5, #1
   b58f4:	6345      	str	r5, [r0, #52]	; 0x34
	size_t getOffset() const { return offset; }
   b58f6:	68cb      	ldr	r3, [r1, #12]
	origAfter = jp.getOffset() - start;
   b58f8:	1b5a      	subs	r2, r3, r5
   b58fa:	6382      	str	r2, [r0, #56]	; 0x38
	saveLoc = jp.getBufferLen() - origAfter;
   b58fc:	6888      	ldr	r0, [r1, #8]
   b58fe:	4428      	add	r0, r5
   b5900:	1ac3      	subs	r3, r0, r3

	if (origAfter > 0) {
   b5902:	2a00      	cmp	r2, #0
	saveLoc = jp.getBufferLen() - origAfter;
   b5904:	63e3      	str	r3, [r4, #60]	; 0x3c
	if (origAfter > 0) {
   b5906:	dd04      	ble.n	b5912 <_ZN12JsonModifier11startAppendEPKN21JsonParserGeneratorRK9jsmntok_tE+0x30>
	char *getBuffer() const { return buffer; }
   b5908:	6848      	ldr	r0, [r1, #4]
		memmove(jp.getBuffer() + saveLoc, jp.getBuffer() + start, origAfter);
   b590a:	1941      	adds	r1, r0, r5
   b590c:	4418      	add	r0, r3
   b590e:	f004 f905 	bl	b9b1c <memmove>
   b5912:	6b22      	ldr	r2, [r4, #48]	; 0x30
	}

	setBuffer(jp.getBuffer() + start, saveLoc - start);
   b5914:	6b61      	ldr	r1, [r4, #52]	; 0x34
   b5916:	6852      	ldr	r2, [r2, #4]
   b5918:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   b591a:	440a      	add	r2, r1
   b591c:	1a5b      	subs	r3, r3, r1
	this->staticBuffers = true;
   b591e:	2501      	movs	r5, #1
	this->bufferLen = bufferLen;
   b5920:	e9c4 2301 	strd	r2, r3, [r4, #4]
	init();
   b5924:	4620      	mov	r0, r4
	this->staticBuffers = true;
   b5926:	7425      	strb	r5, [r4, #16]
	init();
   b5928:	f7ff fe86 	bl	b5638 <_ZN10JsonWriter4initEv>
	context[contextIndex].isFirst = isFirst;
   b592c:	6963      	ldr	r3, [r4, #20]
   b592e:	f103 020c 	add.w	r2, r3, #12

	// If array is not empty, add a separator
	setIsFirst(arrayOrObjectToken->size == 0);
   b5932:	68f3      	ldr	r3, [r6, #12]
   b5934:	fab3 f383 	clz	r3, r3
   b5938:	095b      	lsrs	r3, r3, #5
   b593a:	f804 3012 	strb.w	r3, [r4, r2, lsl #1]
	context[contextIndex].isFirst = isFirst;
   b593e:	4628      	mov	r0, r5

	return true;
}
   b5940:	bd70      	pop	{r4, r5, r6, pc}
		return false;
   b5942:	2000      	movs	r0, #0
   b5944:	e7fc      	b.n	b5940 <_ZN12JsonModifier11startAppendEPKN21JsonParserGeneratorRK9jsmntok_tE+0x5e>

000b5946 <_ZNK12JsonModifier15tokenWithQuotesEPKN21JsonParserGeneratorRK9jsmntok_tE>:
	jp.parse();
	start = -1;
}


JsonParserGeneratorRK::jsmntok_t JsonModifier::tokenWithQuotes(const JsonParserGeneratorRK::jsmntok_t *tok) const {
   b5946:	b530      	push	{r4, r5, lr}
   b5948:	4604      	mov	r4, r0
   b594a:	4615      	mov	r5, r2
	JsonParserGeneratorRK::jsmntok_t expandedToken = *tok;
   b594c:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
   b594e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	if (tok->type == JsonParserGeneratorRK::JSMN_STRING) {
   b5952:	782b      	ldrb	r3, [r5, #0]
   b5954:	2b03      	cmp	r3, #3
		expandedToken.start--;
   b5956:	bf01      	itttt	eq
   b5958:	f101 31ff 	addeq.w	r1, r1, #4294967295	; 0xffffffff
		expandedToken.end++;
   b595c:	3201      	addeq	r2, #1
		expandedToken.start--;
   b595e:	6061      	streq	r1, [r4, #4]
		expandedToken.end++;
   b5960:	60a2      	streq	r2, [r4, #8]
	}
	return expandedToken;
}
   b5962:	4620      	mov	r0, r4
   b5964:	bd30      	pop	{r4, r5, pc}

000b5966 <_ZNK12JsonModifier13findLeftCommaEPKN21JsonParserGeneratorRK9jsmntok_tE>:

int JsonModifier::findLeftComma(const JsonParserGeneratorRK::jsmntok_t *tok) const {
   b5966:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b5968:	460a      	mov	r2, r1
   b596a:	4604      	mov	r4, r0

	JsonParserGeneratorRK::jsmntok_t expandedToken = tokenWithQuotes(tok);
   b596c:	4601      	mov	r1, r0
   b596e:	4668      	mov	r0, sp
   b5970:	f7ff ffe9 	bl	b5946 <_ZNK12JsonModifier15tokenWithQuotesEPKN21JsonParserGeneratorRK9jsmntok_tE>

	int ii = expandedToken.start - 1;
   b5974:	9b01      	ldr	r3, [sp, #4]
   b5976:	1e58      	subs	r0, r3, #1
	while(ii >= 0 && jp.getBuffer()[ii] == ' ') {
   b5978:	2800      	cmp	r0, #0
   b597a:	db06      	blt.n	b598a <_ZNK12JsonModifier13findLeftCommaEPKN21JsonParserGeneratorRK9jsmntok_tE+0x24>
   b597c:	6b23      	ldr	r3, [r4, #48]	; 0x30
   b597e:	685b      	ldr	r3, [r3, #4]
   b5980:	5c1b      	ldrb	r3, [r3, r0]
   b5982:	2b20      	cmp	r3, #32
   b5984:	d105      	bne.n	b5992 <_ZNK12JsonModifier13findLeftCommaEPKN21JsonParserGeneratorRK9jsmntok_tE+0x2c>
		// Whitespace
		ii--;
   b5986:	3801      	subs	r0, #1
	while(ii >= 0 && jp.getBuffer()[ii] == ' ') {
   b5988:	e7f6      	b.n	b5978 <_ZNK12JsonModifier13findLeftCommaEPKN21JsonParserGeneratorRK9jsmntok_tE+0x12>
	}
	// printf("after whitespace check ii=%d c=%c\n", ii, jp.getBuffer()[ii]);

	if (ii < 0 || jp.getBuffer()[ii] != ',') {
		return -1;
   b598a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}


	return ii;
}
   b598e:	b004      	add	sp, #16
   b5990:	bd10      	pop	{r4, pc}
		return -1;
   b5992:	2b2c      	cmp	r3, #44	; 0x2c
   b5994:	bf18      	it	ne
   b5996:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   b599a:	e7f8      	b.n	b598e <_ZNK12JsonModifier13findLeftCommaEPKN21JsonParserGeneratorRK9jsmntok_tE+0x28>

000b599c <_ZNK12JsonModifier14findRightCommaEPKN21JsonParserGeneratorRK9jsmntok_tE>:

int JsonModifier::findRightComma(const JsonParserGeneratorRK::jsmntok_t *tok) const {
   b599c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b599e:	4604      	mov	r4, r0
   b59a0:	460a      	mov	r2, r1
	JsonParserGeneratorRK::jsmntok_t expandedToken = tokenWithQuotes(tok);
   b59a2:	4601      	mov	r1, r0
   b59a4:	4668      	mov	r0, sp
   b59a6:	f7ff ffce 	bl	b5946 <_ZNK12JsonModifier15tokenWithQuotesEPKN21JsonParserGeneratorRK9jsmntok_tE>

	int ii = expandedToken.end;
	while(ii < jp.getOffset() && jp.getBuffer()[ii] == ' ') {
   b59aa:	6b23      	ldr	r3, [r4, #48]	; 0x30
	int ii = expandedToken.end;
   b59ac:	9802      	ldr	r0, [sp, #8]
	size_t getOffset() const { return offset; }
   b59ae:	68da      	ldr	r2, [r3, #12]
	while(ii < jp.getOffset() && jp.getBuffer()[ii] == ' ') {
   b59b0:	4282      	cmp	r2, r0
   b59b2:	d905      	bls.n	b59c0 <_ZNK12JsonModifier14findRightCommaEPKN21JsonParserGeneratorRK9jsmntok_tE+0x24>
   b59b4:	6859      	ldr	r1, [r3, #4]
   b59b6:	5c09      	ldrb	r1, [r1, r0]
   b59b8:	2920      	cmp	r1, #32
   b59ba:	d101      	bne.n	b59c0 <_ZNK12JsonModifier14findRightCommaEPKN21JsonParserGeneratorRK9jsmntok_tE+0x24>
		// Whitespace
		ii++;
   b59bc:	3001      	adds	r0, #1
	while(ii < jp.getOffset() && jp.getBuffer()[ii] == ' ') {
   b59be:	e7f7      	b.n	b59b0 <_ZNK12JsonModifier14findRightCommaEPKN21JsonParserGeneratorRK9jsmntok_tE+0x14>
	}

	if (ii < 0 || jp.getBuffer()[ii] != ',') {
   b59c0:	2800      	cmp	r0, #0
   b59c2:	db07      	blt.n	b59d4 <_ZNK12JsonModifier14findRightCommaEPKN21JsonParserGeneratorRK9jsmntok_tE+0x38>
   b59c4:	685b      	ldr	r3, [r3, #4]
   b59c6:	5c1b      	ldrb	r3, [r3, r0]
		return -1;
   b59c8:	2b2c      	cmp	r3, #44	; 0x2c
   b59ca:	bf18      	it	ne
   b59cc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
	}

	return ii;
}
   b59d0:	b004      	add	sp, #16
   b59d2:	bd10      	pop	{r4, pc}
		return -1;
   b59d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b59d8:	e7fa      	b.n	b59d0 <_ZNK12JsonModifier14findRightCommaEPKN21JsonParserGeneratorRK9jsmntok_tE+0x34>
	...

000b59dc <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>:

/**
 * Parse JSON string and fill tokens.
 */
int jsmn_parse(jsmn_parser *parser, const char *js, size_t len,
		jsmntok_t *tokens, unsigned int num_tokens) {
   b59dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int r;
	int i;
	jsmntok_t *token;
	int count = parser->toknext;
   b59e0:	6844      	ldr	r4, [r0, #4]
   b59e2:	f04f 0c01 	mov.w	ip, #1
	tok->start = tok->end = -1;
   b59e6:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff

	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b59ea:	f8d0 e000 	ldr.w	lr, [r0]
   b59ee:	4596      	cmp	lr, r2
   b59f0:	f080 81b9 	bcs.w	b5d66 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x38a>
   b59f4:	f811 800e 	ldrb.w	r8, [r1, lr]
   b59f8:	f1b8 0f00 	cmp.w	r8, #0
   b59fc:	f000 81b3 	beq.w	b5d66 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x38a>
		char c;
		jsmntype_t type;

		c = js[parser->pos];
		switch (c) {
   b5a00:	f1b8 0f3a 	cmp.w	r8, #58	; 0x3a
   b5a04:	f000 8098 	beq.w	b5b38 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x15c>
   b5a08:	d833      	bhi.n	b5a72 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x96>
   b5a0a:	f1b8 0f22 	cmp.w	r8, #34	; 0x22
   b5a0e:	f000 80a6 	beq.w	b5b5e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x182>
   b5a12:	d810      	bhi.n	b5a36 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x5a>
   b5a14:	f1a8 0809 	sub.w	r8, r8, #9
   b5a18:	fa5f f888 	uxtb.w	r8, r8
   b5a1c:	f1b8 0f17 	cmp.w	r8, #23
   b5a20:	d80d      	bhi.n	b5a3e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x62>
   b5a22:	4d9f      	ldr	r5, [pc, #636]	; (b5ca0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2c4>)
   b5a24:	fa0c f808 	lsl.w	r8, ip, r8
   b5a28:	ea18 0f05 	tst.w	r8, r5
   b5a2c:	d007      	beq.n	b5a3e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x62>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b5a2e:	6805      	ldr	r5, [r0, #0]
   b5a30:	3501      	adds	r5, #1
   b5a32:	6005      	str	r5, [r0, #0]
   b5a34:	e7d9      	b.n	b59ea <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xe>
		switch (c) {
   b5a36:	f1b8 0f2c 	cmp.w	r8, #44	; 0x2c
   b5a3a:	f000 8133 	beq.w	b5ca4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2c8>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b5a3e:	f8d0 8000 	ldr.w	r8, [r0]
   b5a42:	4542      	cmp	r2, r8
   b5a44:	d90e      	bls.n	b5a64 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x88>
   b5a46:	f811 5008 	ldrb.w	r5, [r1, r8]
   b5a4a:	b15d      	cbz	r5, b5a64 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x88>
		switch (js[parser->pos]) {
   b5a4c:	2d3a      	cmp	r5, #58	; 0x3a
   b5a4e:	f200 8169 	bhi.w	b5d24 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x348>
   b5a52:	2d1f      	cmp	r5, #31
   b5a54:	f200 8151 	bhi.w	b5cfa <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x31e>
   b5a58:	2d0a      	cmp	r5, #10
   b5a5a:	f200 8160 	bhi.w	b5d1e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x342>
   b5a5e:	2d08      	cmp	r5, #8
   b5a60:	f240 8156 	bls.w	b5d10 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x334>
	if (tokens == NULL) {
   b5a64:	2b00      	cmp	r3, #0
   b5a66:	f040 8162 	bne.w	b5d2e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x352>
		parser->pos--;
   b5a6a:	f108 35ff 	add.w	r5, r8, #4294967295	; 0xffffffff
	parser->pos--;
   b5a6e:	6005      	str	r5, [r0, #0]
   b5a70:	e0a5      	b.n	b5bbe <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1e2>
		switch (c) {
   b5a72:	f1b8 0f7b 	cmp.w	r8, #123	; 0x7b
   b5a76:	d037      	beq.n	b5ae8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x10c>
   b5a78:	d82e      	bhi.n	b5ad8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xfc>
   b5a7a:	f1b8 0f5b 	cmp.w	r8, #91	; 0x5b
   b5a7e:	d033      	beq.n	b5ae8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x10c>
   b5a80:	f1b8 0f5d 	cmp.w	r8, #93	; 0x5d
   b5a84:	d1db      	bne.n	b5a3e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x62>
				token->type = (c == '{' ? JSMN_OBJECT : JSMN_ARRAY);
				token->start = parser->pos;
				parser->toksuper = parser->toknext - 1;
				break;
			case '}': case ']':
				if (tokens == NULL)
   b5a86:	2b00      	cmp	r3, #0
   b5a88:	d0d1      	beq.n	b5a2e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
					break;
				type = (c == '}' ? JSMN_OBJECT : JSMN_ARRAY);
   b5a8a:	f04f 0902 	mov.w	r9, #2
						break;
					}
					token = &tokens[token->parent];
				}
#else
				for (i = parser->toknext - 1; i >= 0; i--) {
   b5a8e:	6845      	ldr	r5, [r0, #4]
   b5a90:	3d01      	subs	r5, #1
   b5a92:	eb03 1805 	add.w	r8, r3, r5, lsl #4
   b5a96:	2d00      	cmp	r5, #0
   b5a98:	db55      	blt.n	b5b46 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x16a>
					token = &tokens[i];
					if (token->start != -1 && token->end == -1) {
   b5a9a:	f8d8 7004 	ldr.w	r7, [r8, #4]
   b5a9e:	3701      	adds	r7, #1
   b5aa0:	d04d      	beq.n	b5b3e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x162>
   b5aa2:	f8d8 a008 	ldr.w	sl, [r8, #8]
   b5aa6:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
   b5aaa:	d148      	bne.n	b5b3e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x162>
						if (token->type != type) {
   b5aac:	f898 b000 	ldrb.w	fp, [r8]
   b5ab0:	45cb      	cmp	fp, r9
   b5ab2:	d14b      	bne.n	b5b4c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x170>
							return JSMN_ERROR_INVAL;
						}
						parser->toksuper = -1;
						token->end = parser->pos + 1;
   b5ab4:	f10e 0e01 	add.w	lr, lr, #1
						parser->toksuper = -1;
   b5ab8:	f8c0 a008 	str.w	sl, [r0, #8]
						token->end = parser->pos + 1;
   b5abc:	f8c8 e008 	str.w	lr, [r8, #8]
						break;
					}
				}
				/* Error if unmatched closing bracket */
				if (i == -1) return JSMN_ERROR_INVAL;
   b5ac0:	eb03 1e05 	add.w	lr, r3, r5, lsl #4
				for (; i >= 0; i--) {
					token = &tokens[i];
					if (token->start != -1 && token->end == -1) {
   b5ac4:	f8de 7004 	ldr.w	r7, [lr, #4]
   b5ac8:	3701      	adds	r7, #1
   b5aca:	d042      	beq.n	b5b52 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x176>
   b5acc:	f8de 7008 	ldr.w	r7, [lr, #8]
   b5ad0:	3701      	adds	r7, #1
   b5ad2:	d13e      	bne.n	b5b52 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x176>
					tokens[parser->toksuper].size++;
				break;
			case '\t' : case '\r' : case '\n' : case ' ':
				break;
			case ':':
				parser->toksuper = parser->toknext - 1;
   b5ad4:	6085      	str	r5, [r0, #8]
				break;
   b5ad6:	e7aa      	b.n	b5a2e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
		switch (c) {
   b5ad8:	f1b8 0f7d 	cmp.w	r8, #125	; 0x7d
   b5adc:	d1af      	bne.n	b5a3e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x62>
				if (tokens == NULL)
   b5ade:	2b00      	cmp	r3, #0
   b5ae0:	d0a5      	beq.n	b5a2e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
				type = (c == '}' ? JSMN_OBJECT : JSMN_ARRAY);
   b5ae2:	f04f 0901 	mov.w	r9, #1
   b5ae6:	e7d2      	b.n	b5a8e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xb2>
				count++;
   b5ae8:	3401      	adds	r4, #1
				if (tokens == NULL) {
   b5aea:	2b00      	cmp	r3, #0
   b5aec:	d09f      	beq.n	b5a2e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
	if (parser->toknext >= num_tokens) {
   b5aee:	6845      	ldr	r5, [r0, #4]
   b5af0:	9f09      	ldr	r7, [sp, #36]	; 0x24
   b5af2:	42af      	cmp	r7, r5
   b5af4:	d94a      	bls.n	b5b8c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1b0>
	tok = &tokens[parser->toknext++];
   b5af6:	f105 0e01 	add.w	lr, r5, #1
   b5afa:	f8c0 e004 	str.w	lr, [r0, #4]
   b5afe:	eb03 1e05 	add.w	lr, r3, r5, lsl #4
	tok->start = tok->end = -1;
   b5b02:	e9ce 6601 	strd	r6, r6, [lr, #4]
	tok = &tokens[parser->toknext++];
   b5b06:	ea4f 1a05 	mov.w	sl, r5, lsl #4
	tok->size = 0;
   b5b0a:	2500      	movs	r5, #0
   b5b0c:	f8ce 500c 	str.w	r5, [lr, #12]
				if (parser->toksuper != -1) {
   b5b10:	6885      	ldr	r5, [r0, #8]
   b5b12:	1c6f      	adds	r7, r5, #1
					tokens[parser->toksuper].size++;
   b5b14:	bf1f      	itttt	ne
   b5b16:	eb03 1905 	addne.w	r9, r3, r5, lsl #4
   b5b1a:	f8d9 500c 	ldrne.w	r5, [r9, #12]
   b5b1e:	3501      	addne	r5, #1
   b5b20:	f8c9 500c 	strne.w	r5, [r9, #12]
				token->type = (c == '{' ? JSMN_OBJECT : JSMN_ARRAY);
   b5b24:	f1b8 0f7b 	cmp.w	r8, #123	; 0x7b
   b5b28:	bf0c      	ite	eq
   b5b2a:	2501      	moveq	r5, #1
   b5b2c:	2502      	movne	r5, #2
   b5b2e:	f803 500a 	strb.w	r5, [r3, sl]
				token->start = parser->pos;
   b5b32:	6805      	ldr	r5, [r0, #0]
   b5b34:	f8ce 5004 	str.w	r5, [lr, #4]
				parser->toksuper = parser->toknext - 1;
   b5b38:	6845      	ldr	r5, [r0, #4]
   b5b3a:	3d01      	subs	r5, #1
   b5b3c:	e7ca      	b.n	b5ad4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xf8>
				for (i = parser->toknext - 1; i >= 0; i--) {
   b5b3e:	3d01      	subs	r5, #1
   b5b40:	f1a8 0810 	sub.w	r8, r8, #16
   b5b44:	e7a7      	b.n	b5a96 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xba>
				if (i == -1) return JSMN_ERROR_INVAL;
   b5b46:	3501      	adds	r5, #1
   b5b48:	f47f af71 	bne.w	b5a2e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
							return JSMN_ERROR_INVAL;
   b5b4c:	f06f 0401 	mvn.w	r4, #1
   b5b50:	e01e      	b.n	b5b90 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1b4>
				for (; i >= 0; i--) {
   b5b52:	3d01      	subs	r5, #1
   b5b54:	1c6f      	adds	r7, r5, #1
   b5b56:	f1ae 0e10 	sub.w	lr, lr, #16
   b5b5a:	d1b3      	bne.n	b5ac4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xe8>
   b5b5c:	e767      	b.n	b5a2e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
	parser->pos++;
   b5b5e:	f10e 0901 	add.w	r9, lr, #1
   b5b62:	f8c0 9000 	str.w	r9, [r0]
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b5b66:	f8d0 8000 	ldr.w	r8, [r0]
   b5b6a:	4542      	cmp	r2, r8
   b5b6c:	f240 8093 	bls.w	b5c96 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ba>
   b5b70:	f811 5008 	ldrb.w	r5, [r1, r8]
   b5b74:	2d00      	cmp	r5, #0
   b5b76:	f000 808e 	beq.w	b5c96 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ba>
		if (c == '\"') {
   b5b7a:	2d22      	cmp	r5, #34	; 0x22
   b5b7c:	d130      	bne.n	b5be0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x204>
			if (tokens == NULL) {
   b5b7e:	b1f3      	cbz	r3, b5bbe <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1e2>
	if (parser->toknext >= num_tokens) {
   b5b80:	6845      	ldr	r5, [r0, #4]
   b5b82:	9f09      	ldr	r7, [sp, #36]	; 0x24
   b5b84:	42af      	cmp	r7, r5
   b5b86:	d806      	bhi.n	b5b96 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1ba>
		parser->pos = start;
   b5b88:	f8c0 e000 	str.w	lr, [r0]
					return JSMN_ERROR_NOMEM;
   b5b8c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
			}
		}
	}

	return count;
}
   b5b90:	4620      	mov	r0, r4
   b5b92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	tok = &tokens[parser->toknext++];
   b5b96:	f105 0e01 	add.w	lr, r5, #1
   b5b9a:	ea4f 1805 	mov.w	r8, r5, lsl #4
   b5b9e:	eb03 1505 	add.w	r5, r3, r5, lsl #4
   b5ba2:	f8c0 e004 	str.w	lr, [r0, #4]
	tok->start = tok->end = -1;
   b5ba6:	e9c5 6601 	strd	r6, r6, [r5, #4]
	tok->size = 0;
   b5baa:	2700      	movs	r7, #0
   b5bac:	60ef      	str	r7, [r5, #12]
			jsmn_fill_token(token, JSMN_STRING, start+1, parser->pos);
   b5bae:	f8d0 e000 	ldr.w	lr, [r0]
	token->type = type;
   b5bb2:	f04f 0a03 	mov.w	sl, #3
   b5bb6:	f803 a008 	strb.w	sl, [r3, r8]
	token->end = end;
   b5bba:	e9c5 9e01 	strd	r9, lr, [r5, #4]
				if (parser->toksuper != -1 && tokens != NULL)
   b5bbe:	6885      	ldr	r5, [r0, #8]
   b5bc0:	1c6f      	adds	r7, r5, #1
				count++;
   b5bc2:	f104 0401 	add.w	r4, r4, #1
				if (parser->toksuper != -1 && tokens != NULL)
   b5bc6:	f43f af32 	beq.w	b5a2e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
   b5bca:	2b00      	cmp	r3, #0
   b5bcc:	f43f af2f 	beq.w	b5a2e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
					tokens[parser->toksuper].size++;
   b5bd0:	eb03 1e05 	add.w	lr, r3, r5, lsl #4
   b5bd4:	f8de 500c 	ldr.w	r5, [lr, #12]
   b5bd8:	3501      	adds	r5, #1
   b5bda:	f8ce 500c 	str.w	r5, [lr, #12]
   b5bde:	e726      	b.n	b5a2e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
		if (c == '\\' && parser->pos + 1 < len) {
   b5be0:	2d5c      	cmp	r5, #92	; 0x5c
   b5be2:	d111      	bne.n	b5c08 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x22c>
   b5be4:	f108 0501 	add.w	r5, r8, #1
   b5be8:	42aa      	cmp	r2, r5
   b5bea:	d90d      	bls.n	b5c08 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x22c>
			parser->pos++;
   b5bec:	6005      	str	r5, [r0, #0]
			switch (js[parser->pos]) {
   b5bee:	5d4d      	ldrb	r5, [r1, r5]
   b5bf0:	2d75      	cmp	r5, #117	; 0x75
   b5bf2:	d82b      	bhi.n	b5c4c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
   b5bf4:	2d6d      	cmp	r5, #109	; 0x6d
   b5bf6:	d80b      	bhi.n	b5c10 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x234>
   b5bf8:	2d66      	cmp	r5, #102	; 0x66
   b5bfa:	d827      	bhi.n	b5c4c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
   b5bfc:	2d5b      	cmp	r5, #91	; 0x5b
   b5bfe:	d81d      	bhi.n	b5c3c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x260>
   b5c00:	2d22      	cmp	r5, #34	; 0x22
   b5c02:	d001      	beq.n	b5c08 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x22c>
   b5c04:	2d2f      	cmp	r5, #47	; 0x2f
   b5c06:	d121      	bne.n	b5c4c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b5c08:	6805      	ldr	r5, [r0, #0]
   b5c0a:	3501      	adds	r5, #1
   b5c0c:	6005      	str	r5, [r0, #0]
   b5c0e:	e7aa      	b.n	b5b66 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x18a>
   b5c10:	3d6e      	subs	r5, #110	; 0x6e
   b5c12:	2d07      	cmp	r5, #7
   b5c14:	d81a      	bhi.n	b5c4c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
   b5c16:	a701      	add	r7, pc, #4	; (adr r7, b5c1c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x240>)
   b5c18:	f857 f025 	ldr.w	pc, [r7, r5, lsl #2]
   b5c1c:	000b5c09 	.word	0x000b5c09
   b5c20:	000b5c4d 	.word	0x000b5c4d
   b5c24:	000b5c4d 	.word	0x000b5c4d
   b5c28:	000b5c4d 	.word	0x000b5c4d
   b5c2c:	000b5c09 	.word	0x000b5c09
   b5c30:	000b5c4d 	.word	0x000b5c4d
   b5c34:	000b5c09 	.word	0x000b5c09
   b5c38:	000b5c53 	.word	0x000b5c53
   b5c3c:	3d5c      	subs	r5, #92	; 0x5c
   b5c3e:	b2ed      	uxtb	r5, r5
   b5c40:	fa0c f505 	lsl.w	r5, ip, r5
   b5c44:	f240 4741 	movw	r7, #1089	; 0x441
   b5c48:	423d      	tst	r5, r7
   b5c4a:	d1dd      	bne.n	b5c08 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x22c>
			parser->pos = start;
   b5c4c:	f8c0 e000 	str.w	lr, [r0]
				if (r < 0) return r;
   b5c50:	e77c      	b.n	b5b4c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x170>
					parser->pos++;
   b5c52:	f108 0502 	add.w	r5, r8, #2
   b5c56:	6005      	str	r5, [r0, #0]
   b5c58:	f04f 0a04 	mov.w	sl, #4
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
   b5c5c:	f8d0 8000 	ldr.w	r8, [r0]
   b5c60:	4542      	cmp	r2, r8
   b5c62:	d803      	bhi.n	b5c6c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x290>
					parser->pos--;
   b5c64:	6805      	ldr	r5, [r0, #0]
   b5c66:	3d01      	subs	r5, #1
   b5c68:	6005      	str	r5, [r0, #0]
					break;
   b5c6a:	e7cd      	b.n	b5c08 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x22c>
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
   b5c6c:	f811 5008 	ldrb.w	r5, [r1, r8]
   b5c70:	2d00      	cmp	r5, #0
   b5c72:	d0f7      	beq.n	b5c64 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x288>
						if(!((js[parser->pos] >= 48 && js[parser->pos] <= 57) || /* 0-9 */
   b5c74:	f1a5 0b30 	sub.w	fp, r5, #48	; 0x30
   b5c78:	f1bb 0f09 	cmp.w	fp, #9
   b5c7c:	d904      	bls.n	b5c88 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ac>
   b5c7e:	f025 0520 	bic.w	r5, r5, #32
   b5c82:	3d41      	subs	r5, #65	; 0x41
   b5c84:	2d05      	cmp	r5, #5
   b5c86:	d8e1      	bhi.n	b5c4c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
						parser->pos++;
   b5c88:	f108 0501 	add.w	r5, r8, #1
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
   b5c8c:	f1ba 0a01 	subs.w	sl, sl, #1
						parser->pos++;
   b5c90:	6005      	str	r5, [r0, #0]
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
   b5c92:	d1e3      	bne.n	b5c5c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x280>
   b5c94:	e7e6      	b.n	b5c64 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x288>
	parser->pos = start;
   b5c96:	f8c0 e000 	str.w	lr, [r0]
				return JSMN_ERROR_PART;
   b5c9a:	f06f 0402 	mvn.w	r4, #2
   b5c9e:	e777      	b.n	b5b90 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1b4>
   b5ca0:	00800013 	.word	0x00800013
				if (tokens != NULL && parser->toksuper != -1 &&
   b5ca4:	2b00      	cmp	r3, #0
   b5ca6:	f43f aec2 	beq.w	b5a2e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
   b5caa:	6885      	ldr	r5, [r0, #8]
   b5cac:	1c6f      	adds	r7, r5, #1
   b5cae:	f43f aebe 	beq.w	b5a2e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
						tokens[parser->toksuper].type != JSMN_ARRAY &&
   b5cb2:	012d      	lsls	r5, r5, #4
   b5cb4:	5d5d      	ldrb	r5, [r3, r5]
   b5cb6:	3d01      	subs	r5, #1
   b5cb8:	2d01      	cmp	r5, #1
   b5cba:	f67f aeb8 	bls.w	b5a2e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
					for (i = parser->toknext - 1; i >= 0; i--) {
   b5cbe:	6845      	ldr	r5, [r0, #4]
   b5cc0:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
   b5cc4:	eb03 1e05 	add.w	lr, r3, r5, lsl #4
   b5cc8:	f1b8 0f00 	cmp.w	r8, #0
   b5ccc:	f6ff aeaf 	blt.w	b5a2e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
						if (tokens[i].type == JSMN_ARRAY || tokens[i].type == JSMN_OBJECT) {
   b5cd0:	f81e 5c10 	ldrb.w	r5, [lr, #-16]
   b5cd4:	3d01      	subs	r5, #1
   b5cd6:	2d01      	cmp	r5, #1
   b5cd8:	d80a      	bhi.n	b5cf0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x314>
							if (tokens[i].start != -1 && tokens[i].end == -1) {
   b5cda:	f85e 5c0c 	ldr.w	r5, [lr, #-12]
   b5cde:	3501      	adds	r5, #1
   b5ce0:	d006      	beq.n	b5cf0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x314>
   b5ce2:	f85e 5c08 	ldr.w	r5, [lr, #-8]
   b5ce6:	3501      	adds	r5, #1
   b5ce8:	d102      	bne.n	b5cf0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x314>
								parser->toksuper = i;
   b5cea:	f8c0 8008 	str.w	r8, [r0, #8]
								break;
   b5cee:	e69e      	b.n	b5a2e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
					for (i = parser->toknext - 1; i >= 0; i--) {
   b5cf0:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   b5cf4:	f1ae 0e10 	sub.w	lr, lr, #16
   b5cf8:	e7e6      	b.n	b5cc8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ec>
   b5cfa:	f1a5 0920 	sub.w	r9, r5, #32
   b5cfe:	4f24      	ldr	r7, [pc, #144]	; (b5d90 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x3b4>)
   b5d00:	fa5f f989 	uxtb.w	r9, r9
   b5d04:	fa0c f909 	lsl.w	r9, ip, r9
   b5d08:	ea19 0f07 	tst.w	r9, r7
   b5d0c:	f47f aeaa 	bne.w	b5a64 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x88>
		if (js[parser->pos] < 32 || js[parser->pos] >= 127) {
   b5d10:	3d20      	subs	r5, #32
   b5d12:	2d5e      	cmp	r5, #94	; 0x5e
   b5d14:	d89a      	bhi.n	b5c4c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b5d16:	f108 0501 	add.w	r5, r8, #1
   b5d1a:	6005      	str	r5, [r0, #0]
   b5d1c:	e68f      	b.n	b5a3e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x62>
		switch (js[parser->pos]) {
   b5d1e:	2d0d      	cmp	r5, #13
   b5d20:	d1f6      	bne.n	b5d10 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x334>
   b5d22:	e69f      	b.n	b5a64 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x88>
   b5d24:	f005 09df 	and.w	r9, r5, #223	; 0xdf
   b5d28:	f1b9 0f5d 	cmp.w	r9, #93	; 0x5d
   b5d2c:	e7f8      	b.n	b5d20 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x344>
	if (parser->toknext >= num_tokens) {
   b5d2e:	6845      	ldr	r5, [r0, #4]
   b5d30:	9f09      	ldr	r7, [sp, #36]	; 0x24
   b5d32:	42af      	cmp	r7, r5
   b5d34:	f67f af28 	bls.w	b5b88 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1ac>
	tok = &tokens[parser->toknext++];
   b5d38:	f105 0801 	add.w	r8, r5, #1
   b5d3c:	ea4f 1905 	mov.w	r9, r5, lsl #4
   b5d40:	eb03 1505 	add.w	r5, r3, r5, lsl #4
   b5d44:	f8c0 8004 	str.w	r8, [r0, #4]
	tok->start = tok->end = -1;
   b5d48:	e9c5 6601 	strd	r6, r6, [r5, #4]
	tok->size = 0;
   b5d4c:	2700      	movs	r7, #0
   b5d4e:	60ef      	str	r7, [r5, #12]
	jsmn_fill_token(token, JSMN_PRIMITIVE, start, parser->pos);
   b5d50:	f8d0 8000 	ldr.w	r8, [r0]
	token->type = type;
   b5d54:	f04f 0a04 	mov.w	sl, #4
   b5d58:	f803 a009 	strb.w	sl, [r3, r9]
	token->end = end;
   b5d5c:	e9c5 e801 	strd	lr, r8, [r5, #4]
	parser->pos--;
   b5d60:	6805      	ldr	r5, [r0, #0]
   b5d62:	3d01      	subs	r5, #1
   b5d64:	e683      	b.n	b5a6e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x92>
	if (tokens != NULL) {
   b5d66:	2b00      	cmp	r3, #0
   b5d68:	f43f af12 	beq.w	b5b90 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1b4>
		for (i = parser->toknext - 1; i >= 0; i--) {
   b5d6c:	6842      	ldr	r2, [r0, #4]
   b5d6e:	1e51      	subs	r1, r2, #1
   b5d70:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   b5d74:	2900      	cmp	r1, #0
   b5d76:	f6ff af0b 	blt.w	b5b90 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1b4>
			if (tokens[i].start != -1 && tokens[i].end == -1) {
   b5d7a:	f853 2c0c 	ldr.w	r2, [r3, #-12]
   b5d7e:	3201      	adds	r2, #1
   b5d80:	d003      	beq.n	b5d8a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x3ae>
   b5d82:	f853 2c08 	ldr.w	r2, [r3, #-8]
   b5d86:	3201      	adds	r2, #1
   b5d88:	d087      	beq.n	b5c9a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2be>
		for (i = parser->toknext - 1; i >= 0; i--) {
   b5d8a:	3901      	subs	r1, #1
   b5d8c:	3b10      	subs	r3, #16
   b5d8e:	e7f1      	b.n	b5d74 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x398>
   b5d90:	04001001 	.word	0x04001001

000b5d94 <_ZN10JsonParser5parseEv>:
bool JsonParser::parse() {
   b5d94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (offset == 0) {
   b5d96:	68c2      	ldr	r2, [r0, #12]
bool JsonParser::parse() {
   b5d98:	4604      	mov	r4, r0
	if (offset == 0) {
   b5d9a:	b912      	cbnz	r2, b5da2 <_ZN10JsonParser5parseEv+0xe>
		return false;
   b5d9c:	2000      	movs	r0, #0
}
   b5d9e:	b003      	add	sp, #12
   b5da0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (tokens) {
   b5da2:	6943      	ldr	r3, [r0, #20]
		JsonParserGeneratorRK::jsmn_init(&parser);
   b5da4:	f100 0620 	add.w	r6, r0, #32
	if (tokens) {
   b5da8:	b1ab      	cbz	r3, b5dd6 <_ZN10JsonParser5parseEv+0x42>
/**
 * Creates a new parser based over a given  buffer with an array of tokens
 * available.
 */
void jsmn_init(jsmn_parser *parser) {
	parser->pos = 0;
   b5daa:	2100      	movs	r1, #0
	parser->toknext = 0;
   b5dac:	e9c0 1108 	strd	r1, r1, [r0, #32]
	parser->toksuper = -1;
   b5db0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   b5db4:	6281      	str	r1, [r0, #40]	; 0x28
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   b5db6:	69c1      	ldr	r1, [r0, #28]
   b5db8:	9100      	str	r1, [sp, #0]
   b5dba:	6841      	ldr	r1, [r0, #4]
   b5dbc:	4630      	mov	r0, r6
   b5dbe:	f7ff fe0d 	bl	b59dc <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>
		if (result == JsonParserGeneratorRK::JSMN_ERROR_NOMEM) {
   b5dc2:	1c43      	adds	r3, r0, #1
   b5dc4:	d128      	bne.n	b5e18 <_ZN10JsonParser5parseEv+0x84>
			if (staticBuffers) {
   b5dc6:	7c25      	ldrb	r5, [r4, #16]
   b5dc8:	2d00      	cmp	r5, #0
   b5dca:	d1e7      	bne.n	b5d9c <_ZN10JsonParser5parseEv+0x8>
			free(tokens);
   b5dcc:	6960      	ldr	r0, [r4, #20]
   b5dce:	f001 fa13 	bl	b71f8 <free>
			tokens = 0;
   b5dd2:	6165      	str	r5, [r4, #20]
			maxTokens = 0;
   b5dd4:	61e5      	str	r5, [r4, #28]
	parser->pos = 0;
   b5dd6:	2500      	movs	r5, #0
	parser->toksuper = -1;
   b5dd8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
	parser->toknext = 0;
   b5ddc:	e9c4 5508 	strd	r5, r5, [r4, #32]
	int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, 0, 0);
   b5de0:	68e2      	ldr	r2, [r4, #12]
   b5de2:	6861      	ldr	r1, [r4, #4]
	parser->toksuper = -1;
   b5de4:	62a7      	str	r7, [r4, #40]	; 0x28
	int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, 0, 0);
   b5de6:	9500      	str	r5, [sp, #0]
   b5de8:	462b      	mov	r3, r5
   b5dea:	4630      	mov	r0, r6
   b5dec:	f7ff fdf6 	bl	b59dc <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>
	if (result < 0) {
   b5df0:	2800      	cmp	r0, #0
   b5df2:	dbd3      	blt.n	b5d9c <_ZN10JsonParser5parseEv+0x8>
	maxTokens = (size_t) result;
   b5df4:	61e0      	str	r0, [r4, #28]
	if (maxTokens > 0) {
   b5df6:	d017      	beq.n	b5e28 <_ZN10JsonParser5parseEv+0x94>
		tokens = (JsonParserGeneratorRK::jsmntok_t *)malloc(sizeof(JsonParserGeneratorRK::jsmntok_t) * maxTokens);
   b5df8:	0100      	lsls	r0, r0, #4
   b5dfa:	f001 f9f5 	bl	b71e8 <malloc>
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   b5dfe:	69e2      	ldr	r2, [r4, #28]
		tokens = (JsonParserGeneratorRK::jsmntok_t *)malloc(sizeof(JsonParserGeneratorRK::jsmntok_t) * maxTokens);
   b5e00:	6160      	str	r0, [r4, #20]
   b5e02:	4603      	mov	r3, r0
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   b5e04:	9200      	str	r2, [sp, #0]
	parser->toknext = 0;
   b5e06:	e9c4 5508 	strd	r5, r5, [r4, #32]
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   b5e0a:	68e2      	ldr	r2, [r4, #12]
   b5e0c:	6861      	ldr	r1, [r4, #4]
	parser->toksuper = -1;
   b5e0e:	62a7      	str	r7, [r4, #40]	; 0x28
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   b5e10:	4630      	mov	r0, r6
   b5e12:	f7ff fde3 	bl	b59dc <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>
   b5e16:	e001      	b.n	b5e1c <_ZN10JsonParser5parseEv+0x88>
		if (result < 0) {
   b5e18:	2800      	cmp	r0, #0
   b5e1a:	dbbf      	blt.n	b5d9c <_ZN10JsonParser5parseEv+0x8>
		tokensEnd = &tokens[result];
   b5e1c:	6963      	ldr	r3, [r4, #20]
   b5e1e:	eb03 1000 	add.w	r0, r3, r0, lsl #4
   b5e22:	61a0      	str	r0, [r4, #24]
	return true;
   b5e24:	2001      	movs	r0, #1
   b5e26:	e7ba      	b.n	b5d9e <_ZN10JsonParser5parseEv+0xa>
		tokensEnd = tokens;
   b5e28:	6963      	ldr	r3, [r4, #20]
   b5e2a:	61a3      	str	r3, [r4, #24]
   b5e2c:	e7fa      	b.n	b5e24 <_ZN10JsonParser5parseEv+0x90>

000b5e2e <_ZN12JsonModifier16removeArrayIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj>:
bool JsonModifier::removeArrayIndex(const JsonParserGeneratorRK::jsmntok_t *container, size_t index) {
   b5e2e:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   b5e32:	4604      	mov	r4, r0
	const JsonParserGeneratorRK::jsmntok_t *tok = jp.getTokenByIndex(container, index);
   b5e34:	6b00      	ldr	r0, [r0, #48]	; 0x30
   b5e36:	f7ff fa8a 	bl	b534e <_ZNK10JsonParser15getTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj>
	if (!tok) {
   b5e3a:	4605      	mov	r5, r0
   b5e3c:	b348      	cbz	r0, b5e92 <_ZN12JsonModifier16removeArrayIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj+0x64>
	const JsonParserGeneratorRK::jsmntok_t expandedToken = tokenWithQuotes(tok);
   b5e3e:	4602      	mov	r2, r0
   b5e40:	4621      	mov	r1, r4
   b5e42:	4668      	mov	r0, sp
   b5e44:	f7ff fd7f 	bl	b5946 <_ZNK12JsonModifier15tokenWithQuotesEPKN21JsonParserGeneratorRK9jsmntok_tE>
	int left = findLeftComma(tok);
   b5e48:	4629      	mov	r1, r5
   b5e4a:	4620      	mov	r0, r4
   b5e4c:	f7ff fd8b 	bl	b5966 <_ZNK12JsonModifier13findLeftCommaEPKN21JsonParserGeneratorRK9jsmntok_tE>
	int right = findRightComma(tok);
   b5e50:	4629      	mov	r1, r5
	int left = findLeftComma(tok);
   b5e52:	4680      	mov	r8, r0
	int right = findRightComma(tok);
   b5e54:	4620      	mov	r0, r4
   b5e56:	f7ff fda1 	bl	b599c <_ZNK12JsonModifier14findRightCommaEPKN21JsonParserGeneratorRK9jsmntok_tE>
	if (left >= 0 && right >= 0) {
   b5e5a:	f1b8 0f00 	cmp.w	r8, #0
	const JsonParserGeneratorRK::jsmntok_t expandedToken = tokenWithQuotes(tok);
   b5e5e:	e9dd 7601 	ldrd	r7, r6, [sp, #4]
	if (left >= 0 && right >= 0) {
   b5e62:	db19      	blt.n	b5e98 <_ZN12JsonModifier16removeArrayIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj+0x6a>
   b5e64:	2800      	cmp	r0, #0
   b5e66:	bfac      	ite	ge
   b5e68:	4606      	movge	r6, r0
   b5e6a:	4647      	movlt	r7, r8
	origAfter = jp.getOffset() - right;
   b5e6c:	6b23      	ldr	r3, [r4, #48]	; 0x30
   b5e6e:	68da      	ldr	r2, [r3, #12]
   b5e70:	1b92      	subs	r2, r2, r6
	if (origAfter > 0) {
   b5e72:	2a00      	cmp	r2, #0
	origAfter = jp.getOffset() - right;
   b5e74:	63a2      	str	r2, [r4, #56]	; 0x38
	if (origAfter > 0) {
   b5e76:	dd04      	ble.n	b5e82 <_ZN12JsonModifier16removeArrayIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj+0x54>
	char *getBuffer() const { return buffer; }
   b5e78:	6858      	ldr	r0, [r3, #4]
		memmove(jp.getBuffer() + left, jp.getBuffer() + right, origAfter);
   b5e7a:	1981      	adds	r1, r0, r6
   b5e7c:	4438      	add	r0, r7
   b5e7e:	f003 fe4d 	bl	b9b1c <memmove>
	jp.setOffset(left + origAfter);
   b5e82:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   b5e84:	6b22      	ldr	r2, [r4, #48]	; 0x30
   b5e86:	443b      	add	r3, r7
	void setOffset(size_t offset) { this->offset = offset; };
   b5e88:	60d3      	str	r3, [r2, #12]
	jp.parse();
   b5e8a:	6b20      	ldr	r0, [r4, #48]	; 0x30
   b5e8c:	f7ff ff82 	bl	b5d94 <_ZN10JsonParser5parseEv>
	return true;
   b5e90:	2001      	movs	r0, #1
}
   b5e92:	b004      	add	sp, #16
   b5e94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (right >= 0) {
   b5e98:	2800      	cmp	r0, #0
		right++;
   b5e9a:	bfa8      	it	ge
   b5e9c:	1c46      	addge	r6, r0, #1
		left = expandedToken.start;
   b5e9e:	e7e5      	b.n	b5e6c <_ZN12JsonModifier16removeArrayIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj+0x3e>

000b5ea0 <_ZN12JsonModifier6finishEv>:
void JsonModifier::finish() {
   b5ea0:	b538      	push	{r3, r4, r5, lr}
	if (start == -1) {
   b5ea2:	6b43      	ldr	r3, [r0, #52]	; 0x34
   b5ea4:	1c5a      	adds	r2, r3, #1
void JsonModifier::finish() {
   b5ea6:	4604      	mov	r4, r0
	if (start == -1) {
   b5ea8:	d018      	beq.n	b5edc <_ZN12JsonModifier6finishEv+0x3c>
	if (origAfter > 0) {
   b5eaa:	6b82      	ldr	r2, [r0, #56]	; 0x38
   b5eac:	2a00      	cmp	r2, #0
   b5eae:	dd08      	ble.n	b5ec2 <_ZN12JsonModifier6finishEv+0x22>
	char *getBuffer() const { return buffer; }
   b5eb0:	6b01      	ldr	r1, [r0, #48]	; 0x30
		memmove(jp.getBuffer() + start + getOffset(), jp.getBuffer() + saveLoc, origAfter);
   b5eb2:	68e5      	ldr	r5, [r4, #12]
   b5eb4:	6848      	ldr	r0, [r1, #4]
   b5eb6:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   b5eb8:	442b      	add	r3, r5
   b5eba:	4401      	add	r1, r0
   b5ebc:	4418      	add	r0, r3
   b5ebe:	f003 fe2d 	bl	b9b1c <memmove>
	jp.setOffset(start + getOffset() + origAfter);
   b5ec2:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	; 0x30
   b5ec6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   b5ec8:	440b      	add	r3, r1
   b5eca:	68e1      	ldr	r1, [r4, #12]
   b5ecc:	440b      	add	r3, r1
	void setOffset(size_t offset) { this->offset = offset; };
   b5ece:	60d3      	str	r3, [r2, #12]
	jp.parse();
   b5ed0:	6b20      	ldr	r0, [r4, #48]	; 0x30
   b5ed2:	f7ff ff5f 	bl	b5d94 <_ZN10JsonParser5parseEv>
	start = -1;
   b5ed6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b5eda:	6363      	str	r3, [r4, #52]	; 0x34
}
   b5edc:	bd38      	pop	{r3, r4, r5, pc}
	...

000b5ee0 <_ZN8MB85RC64D1Ev>:
	size_t memorySize;
	int addr; // This is just 0-7, the (0b1010000 of the 7-bit address is ORed in later)

};

class MB85RC64 : public MB85RC {
   b5ee0:	b510      	push	{r4, lr}
   b5ee2:	4b03      	ldr	r3, [pc, #12]	; (b5ef0 <_ZN8MB85RC64D1Ev+0x10>)
   b5ee4:	6003      	str	r3, [r0, #0]
   b5ee6:	4604      	mov	r4, r0
   b5ee8:	f000 fb60 	bl	b65ac <_ZN6MB85RCD1Ev>
   b5eec:	4620      	mov	r0, r4
   b5eee:	bd10      	pop	{r4, pc}
   b5ef0:	000ba910 	.word	0x000ba910

000b5ef4 <_ZN8MB85RC64D0Ev>:
   b5ef4:	b510      	push	{r4, lr}
   b5ef6:	4604      	mov	r4, r0
   b5ef8:	f7ff fff2 	bl	b5ee0 <_ZN8MB85RC64D1Ev>
   b5efc:	4620      	mov	r0, r4
   b5efe:	2110      	movs	r1, #16
   b5f00:	f7fe f8cb 	bl	b409a <_ZdlPvj>
   b5f04:	4620      	mov	r0, r4
   b5f06:	bd10      	pop	{r4, pc}

000b5f08 <_ZN17currentStatusData8validateEj>:

void currentStatusData::loop() {
    current.flush(false);
}

bool currentStatusData::validate(size_t dataSize) {
   b5f08:	b510      	push	{r4, lr}
    bool valid = PersistentDataFRAM::validate(dataSize);
   b5f0a:	f000 fd61 	bl	b69d0 <_ZN15StorageHelperRK18PersistentDataBase8validateEj>
    if (!valid) Log.info("current data is %s",(valid) ? "valid": "not valid");
   b5f0e:	4604      	mov	r4, r0
   b5f10:	b920      	cbnz	r0, b5f1c <_ZN17currentStatusData8validateEj+0x14>
   b5f12:	4a03      	ldr	r2, [pc, #12]	; (b5f20 <_ZN17currentStatusData8validateEj+0x18>)
   b5f14:	4903      	ldr	r1, [pc, #12]	; (b5f24 <_ZN17currentStatusData8validateEj+0x1c>)
   b5f16:	4804      	ldr	r0, [pc, #16]	; (b5f28 <_ZN17currentStatusData8validateEj+0x20>)
   b5f18:	f7fe f928 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
    return valid;
}
   b5f1c:	4620      	mov	r0, r4
   b5f1e:	bd10      	pop	{r4, pc}
   b5f20:	000ba820 	.word	0x000ba820
   b5f24:	000ba82a 	.word	0x000ba82a
   b5f28:	2003e6b0 	.word	0x2003e6b0

000b5f2c <_ZN17currentStatusData10initializeEv>:

void currentStatusData::initialize() {
   b5f2c:	b510      	push	{r4, lr}
   b5f2e:	4604      	mov	r4, r0
    PersistentDataFRAM::initialize();
   b5f30:	f000 fdba 	bl	b6aa8 <_ZN15StorageHelperRK18PersistentDataBase10initializeEv>
    Log.info("Current Data Initialized");
   b5f34:	4804      	ldr	r0, [pc, #16]	; (b5f48 <_ZN17currentStatusData10initializeEv+0x1c>)
   b5f36:	4905      	ldr	r1, [pc, #20]	; (b5f4c <_ZN17currentStatusData10initializeEv+0x20>)
   b5f38:	f7fe f918 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
    // If you manually update fields here, be sure to update the hash
    updateHash();
   b5f3c:	4620      	mov	r0, r4
}
   b5f3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    updateHash();
   b5f42:	f000 bd09 	b.w	b6958 <_ZN15StorageHelperRK18PersistentDataBase10updateHashEv>
   b5f46:	bf00      	nop
   b5f48:	2003e6b0 	.word	0x2003e6b0
   b5f4c:	000ba83d 	.word	0x000ba83d

000b5f50 <_ZN10nodeIDData8validateEj>:
    nodeDatabase.set_nodeIDJson(blank);
    nodeDatabase.flush(true);
    Log.info("NodeID data is now %s", nodeDatabase.get_nodeIDJson().c_str());
}

bool nodeIDData::validate(size_t dataSize) {
   b5f50:	b510      	push	{r4, lr}
    bool valid = PersistentDataFRAM::validate(dataSize);
   b5f52:	f000 fd3d 	bl	b69d0 <_ZN15StorageHelperRK18PersistentDataBase8validateEj>
    if (!valid) Log.info("nodeID data is %s",(valid) ? "valid": "not valid");
   b5f56:	4604      	mov	r4, r0
   b5f58:	b920      	cbnz	r0, b5f64 <_ZN10nodeIDData8validateEj+0x14>
   b5f5a:	4a03      	ldr	r2, [pc, #12]	; (b5f68 <_ZN10nodeIDData8validateEj+0x18>)
   b5f5c:	4903      	ldr	r1, [pc, #12]	; (b5f6c <_ZN10nodeIDData8validateEj+0x1c>)
   b5f5e:	4804      	ldr	r0, [pc, #16]	; (b5f70 <_ZN10nodeIDData8validateEj+0x20>)
   b5f60:	f7fe f904 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
    return valid;
}
   b5f64:	4620      	mov	r0, r4
   b5f66:	bd10      	pop	{r4, pc}
   b5f68:	000ba820 	.word	0x000ba820
   b5f6c:	000ba856 	.word	0x000ba856
   b5f70:	2003e6b0 	.word	0x2003e6b0

000b5f74 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>:
         * 
         * Blocks if another thread has obtained the mutex, continues when the other thread releases it.
         * 
         * Never call lock from a SINGLE_THREADED_BLOCK since deadlock can occur.
         */
        void lock() const { 
   b5f74:	b510      	push	{r4, lr}
            if (!handle_) {
   b5f76:	6803      	ldr	r3, [r0, #0]
        void lock() const { 
   b5f78:	4604      	mov	r4, r0
            if (!handle_) {
   b5f7a:	b90b      	cbnz	r3, b5f80 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv+0xc>
                os_mutex_recursive_create(&handle_);
   b5f7c:	f000 fef0 	bl	b6d60 <os_mutex_recursive_create>
            }
            os_mutex_recursive_lock(handle_); 
   b5f80:	6820      	ldr	r0, [r4, #0]
        }
   b5f82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            os_mutex_recursive_lock(handle_); 
   b5f86:	f000 befb 	b.w	b6d80 <os_mutex_recursive_lock>

000b5f8a <_ZN15StorageHelperRK18PersistentDataFRAM4saveEv>:
        }

        /**
         * @brief Save the persistent data file. You normally do not need to call this; it will be saved automatically.
         */
        virtual void save() {
   b5f8a:	b538      	push	{r3, r4, r5, lr}
   b5f8c:	4604      	mov	r4, r0
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
      { _M_device.lock(); }
   b5f8e:	3004      	adds	r0, #4
   b5f90:	f7ff fff0 	bl	b5f74 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
            WITH_LOCK(*this) {
                fram.writeData(framOffset, (const uint8_t*)savedDataHeader, savedDataSize);
   b5f94:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b5f96:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   b5f98:	6803      	ldr	r3, [r0, #0]
   b5f9a:	68dd      	ldr	r5, [r3, #12]
   b5f9c:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   b5fa0:	47a8      	blx	r5
            os_mutex_recursive_unlock(handle_); 
   b5fa2:	6860      	ldr	r0, [r4, #4]
   b5fa4:	f000 fef4 	bl	b6d90 <os_mutex_recursive_unlock>
            }
            PersistentDataBase::save();
   b5fa8:	4620      	mov	r0, r4
        } 
   b5faa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            PersistentDataBase::save();
   b5fae:	f000 bd91 	b.w	b6ad4 <_ZN15StorageHelperRK18PersistentDataBase4saveEv>

000b5fb2 <_ZN15StorageHelperRK18PersistentDataFRAM4loadEv>:
        virtual bool load() {
   b5fb2:	b538      	push	{r3, r4, r5, lr}
   b5fb4:	4604      	mov	r4, r0
   b5fb6:	3004      	adds	r0, #4
   b5fb8:	f7ff ffdc 	bl	b5f74 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                fram.readData(framOffset, (uint8_t*)savedDataHeader, savedDataSize);
   b5fbc:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b5fbe:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   b5fc0:	6803      	ldr	r3, [r0, #0]
   b5fc2:	689d      	ldr	r5, [r3, #8]
   b5fc4:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   b5fc8:	47a8      	blx	r5
                if (!validate(savedDataHeader->size)) {
   b5fca:	68a2      	ldr	r2, [r4, #8]
   b5fcc:	6823      	ldr	r3, [r4, #0]
   b5fce:	88d1      	ldrh	r1, [r2, #6]
   b5fd0:	695b      	ldr	r3, [r3, #20]
   b5fd2:	4620      	mov	r0, r4
   b5fd4:	4798      	blx	r3
   b5fd6:	b918      	cbnz	r0, b5fe0 <_ZN15StorageHelperRK18PersistentDataFRAM4loadEv+0x2e>
                    initialize();
   b5fd8:	6823      	ldr	r3, [r4, #0]
   b5fda:	4620      	mov	r0, r4
   b5fdc:	699b      	ldr	r3, [r3, #24]
   b5fde:	4798      	blx	r3
            os_mutex_recursive_unlock(handle_); 
   b5fe0:	6860      	ldr	r0, [r4, #4]
   b5fe2:	f000 fed5 	bl	b6d90 <os_mutex_recursive_unlock>
        }
   b5fe6:	2001      	movs	r0, #1
   b5fe8:	bd38      	pop	{r3, r4, r5, pc}
	...

000b5fec <_ZN15StorageHelperRK18PersistentDataFRAMD1Ev>:
    class PersistentDataFRAM : public PersistentDataBase {
   b5fec:	b510      	push	{r4, lr}
    class PersistentDataBase : public CustomRecursiveMutex {
   b5fee:	4b04      	ldr	r3, [pc, #16]	; (b6000 <_ZN15StorageHelperRK18PersistentDataFRAMD1Ev+0x14>)
   b5ff0:	6003      	str	r3, [r0, #0]
    class PersistentDataFRAM : public PersistentDataBase {
   b5ff2:	4604      	mov	r4, r0
            if (handle_) {
   b5ff4:	6840      	ldr	r0, [r0, #4]
   b5ff6:	b108      	cbz	r0, b5ffc <_ZN15StorageHelperRK18PersistentDataFRAMD1Ev+0x10>
                os_mutex_recursive_destroy(handle_);
   b5ff8:	f000 feba 	bl	b6d70 <os_mutex_recursive_destroy>
    class PersistentDataFRAM : public PersistentDataBase {
   b5ffc:	4620      	mov	r0, r4
   b5ffe:	bd10      	pop	{r4, pc}
   b6000:	000baa30 	.word	0x000baa30

000b6004 <_ZN17currentStatusDataD1Ev>:
currentStatusData::~currentStatusData() {
   b6004:	b510      	push	{r4, lr}
   b6006:	4b03      	ldr	r3, [pc, #12]	; (b6014 <_ZN17currentStatusDataD1Ev+0x10>)
   b6008:	6003      	str	r3, [r0, #0]
   b600a:	4604      	mov	r4, r0
   b600c:	f7ff ffee 	bl	b5fec <_ZN15StorageHelperRK18PersistentDataFRAMD1Ev>
}
   b6010:	4620      	mov	r0, r4
   b6012:	bd10      	pop	{r4, pc}
   b6014:	000ba958 	.word	0x000ba958

000b6018 <_ZN17currentStatusDataD0Ev>:
currentStatusData::~currentStatusData() {
   b6018:	b510      	push	{r4, lr}
   b601a:	4604      	mov	r4, r0
}
   b601c:	f7ff fff2 	bl	b6004 <_ZN17currentStatusDataD1Ev>
   b6020:	4620      	mov	r0, r4
   b6022:	2160      	movs	r1, #96	; 0x60
   b6024:	f7fe f839 	bl	b409a <_ZdlPvj>
   b6028:	4620      	mov	r0, r4
   b602a:	bd10      	pop	{r4, pc}

000b602c <_ZN10nodeIDDataD1Ev>:
nodeIDData::~nodeIDData() {
   b602c:	b510      	push	{r4, lr}
   b602e:	4b03      	ldr	r3, [pc, #12]	; (b603c <_ZN10nodeIDDataD1Ev+0x10>)
   b6030:	6003      	str	r3, [r0, #0]
   b6032:	4604      	mov	r4, r0
   b6034:	f7ff ffda 	bl	b5fec <_ZN15StorageHelperRK18PersistentDataFRAMD1Ev>
}
   b6038:	4620      	mov	r0, r4
   b603a:	bd10      	pop	{r4, pc}
   b603c:	000ba92c 	.word	0x000ba92c

000b6040 <_ZN10nodeIDDataD0Ev>:
nodeIDData::~nodeIDData() {
   b6040:	b510      	push	{r4, lr}
   b6042:	4604      	mov	r4, r0
}
   b6044:	f7ff fff2 	bl	b602c <_ZN10nodeIDDataD1Ev>
   b6048:	4620      	mov	r0, r4
   b604a:	f640 413c 	movw	r1, #3132	; 0xc3c
   b604e:	f7fe f824 	bl	b409a <_ZdlPvj>
   b6052:	4620      	mov	r0, r4
   b6054:	bd10      	pop	{r4, pc}
	...

000b6058 <_ZN17currentStatusDataC1Ev>:
currentStatusData::currentStatusData() : StorageHelperRK::PersistentDataFRAM(::fram, 100, &currentData.currentHeader, sizeof(CurrentData), CURRENT_DATA_MAGIC, CURRENT_DATA_VERSION) {
   b6058:	f100 012c 	add.w	r1, r0, #44	; 0x2c
        CustomRecursiveMutex() : handle_(nullptr) {
   b605c:	2200      	movs	r2, #0
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b605e:	6081      	str	r1, [r0, #8]
   b6060:	490a      	ldr	r1, [pc, #40]	; (b608c <_ZN17currentStatusDataC1Ev+0x34>)
        CustomRecursiveMutex() : handle_(nullptr) {
   b6062:	6042      	str	r2, [r0, #4]
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b6064:	f04f 0c34 	mov.w	ip, #52	; 0x34
   b6068:	6182      	str	r2, [r0, #24]
   b606a:	f880 2020 	strb.w	r2, [r0, #32]
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion), fram(fram), framOffset(framOffset) {
   b606e:	4a08      	ldr	r2, [pc, #32]	; (b6090 <_ZN17currentStatusDataC1Ev+0x38>)
   b6070:	6242      	str	r2, [r0, #36]	; 0x24
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b6072:	e9c0 c103 	strd	ip, r1, [r0, #12]
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion), fram(fram), framOffset(framOffset) {
   b6076:	2264      	movs	r2, #100	; 0x64
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b6078:	2103      	movs	r1, #3
   b607a:	8281      	strh	r1, [r0, #20]
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion), fram(fram), framOffset(framOffset) {
   b607c:	6282      	str	r2, [r0, #40]	; 0x28
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b607e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   b6082:	4a04      	ldr	r2, [pc, #16]	; (b6094 <_ZN17currentStatusDataC1Ev+0x3c>)
   b6084:	61c1      	str	r1, [r0, #28]
   b6086:	6002      	str	r2, [r0, #0]
};
   b6088:	4770      	bx	lr
   b608a:	bf00      	nop
   b608c:	20a99e80 	.word	0x20a99e80
   b6090:	2003e620 	.word	0x2003e620
   b6094:	000ba958 	.word	0x000ba958

000b6098 <_ZN17currentStatusData8instanceEv>:
currentStatusData &currentStatusData::instance() {
   b6098:	b510      	push	{r4, lr}
    if (!_instance) {
   b609a:	4c06      	ldr	r4, [pc, #24]	; (b60b4 <_ZN17currentStatusData8instanceEv+0x1c>)
   b609c:	6823      	ldr	r3, [r4, #0]
   b609e:	b93b      	cbnz	r3, b60b0 <_ZN17currentStatusData8instanceEv+0x18>
        _instance = new currentStatusData();
   b60a0:	2060      	movs	r0, #96	; 0x60
   b60a2:	f7fd fff6 	bl	b4092 <_Znwj>
   b60a6:	4603      	mov	r3, r0
   b60a8:	b108      	cbz	r0, b60ae <_ZN17currentStatusData8instanceEv+0x16>
   b60aa:	f7ff ffd5 	bl	b6058 <_ZN17currentStatusDataC1Ev>
   b60ae:	6023      	str	r3, [r4, #0]
}
   b60b0:	6820      	ldr	r0, [r4, #0]
   b60b2:	bd10      	pop	{r4, pc}
   b60b4:	2003e61c 	.word	0x2003e61c

000b60b8 <_ZN17currentStatusData5setupEv>:
void currentStatusData::setup() {
   b60b8:	b510      	push	{r4, lr}
    fram.begin();
   b60ba:	6a40      	ldr	r0, [r0, #36]	; 0x24
   b60bc:	f000 fa8c 	bl	b65d8 <_ZN6MB85RC5beginEv>
    current
   b60c0:	f7ff ffea 	bl	b6098 <_ZN17currentStatusData8instanceEv>
            saveDelayMs = value;
   b60c4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
        .load();
   b60c8:	6803      	ldr	r3, [r0, #0]
   b60ca:	61c2      	str	r2, [r0, #28]
}
   b60cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        .load();
   b60d0:	685b      	ldr	r3, [r3, #4]
   b60d2:	4718      	bx	r3

000b60d4 <_ZNK17currentStatusData12get_uniqueIDEv>:
uint32_t currentStatusData::get_uniqueID() const {
   b60d4:	b538      	push	{r3, r4, r5, lr}
   b60d6:	4604      	mov	r4, r0
   b60d8:	3004      	adds	r0, #4
   b60da:	f7ff ff4b 	bl	b5f74 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b60de:	68e3      	ldr	r3, [r4, #12]
            os_mutex_recursive_unlock(handle_); 
   b60e0:	6860      	ldr	r0, [r4, #4]
                if (offset <= (savedDataSize - sizeof(T))) {
   b60e2:	3b04      	subs	r3, #4
   b60e4:	2b17      	cmp	r3, #23
                    result = *(const T *)p;
   b60e6:	bf86      	itte	hi
   b60e8:	68a3      	ldrhi	r3, [r4, #8]
   b60ea:	699d      	ldrhi	r5, [r3, #24]
            T result = 0;
   b60ec:	2500      	movls	r5, #0
            os_mutex_recursive_unlock(handle_); 
   b60ee:	f000 fe4f 	bl	b6d90 <os_mutex_recursive_unlock>
}
   b60f2:	4628      	mov	r0, r5
   b60f4:	bd38      	pop	{r3, r4, r5, pc}

000b60f6 <_ZN17currentStatusData12set_uniqueIDEm>:
void currentStatusData::set_uniqueID(uint32_t value) {
   b60f6:	b538      	push	{r3, r4, r5, lr}
   b60f8:	4604      	mov	r4, r0
   b60fa:	3004      	adds	r0, #4
   b60fc:	460d      	mov	r5, r1
   b60fe:	f7ff ff39 	bl	b5f74 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b6102:	68e3      	ldr	r3, [r4, #12]
   b6104:	3b04      	subs	r3, #4
   b6106:	2b17      	cmp	r3, #23
   b6108:	d907      	bls.n	b611a <_ZN17currentStatusData12set_uniqueIDEm+0x24>
                    uint8_t *p = (uint8_t *)savedDataHeader;
   b610a:	68a3      	ldr	r3, [r4, #8]
                    if (oldValue != value) {
   b610c:	699a      	ldr	r2, [r3, #24]
   b610e:	4295      	cmp	r5, r2
   b6110:	d003      	beq.n	b611a <_ZN17currentStatusData12set_uniqueIDEm+0x24>
                        *(T *)p = value;
   b6112:	619d      	str	r5, [r3, #24]
                        updateHash();
   b6114:	4620      	mov	r0, r4
   b6116:	f000 fc1f 	bl	b6958 <_ZN15StorageHelperRK18PersistentDataBase10updateHashEv>
            os_mutex_recursive_unlock(handle_); 
   b611a:	6860      	ldr	r0, [r4, #4]
}
   b611c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b6120:	f000 be36 	b.w	b6d90 <os_mutex_recursive_unlock>

000b6124 <_ZN17currentStatusData17set_stateOfChargeEa>:
void currentStatusData::set_stateOfCharge(int8_t value) {
   b6124:	b538      	push	{r3, r4, r5, lr}
   b6126:	4604      	mov	r4, r0
   b6128:	3004      	adds	r0, #4
   b612a:	460d      	mov	r5, r1
   b612c:	f7ff ff22 	bl	b5f74 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b6130:	68e3      	ldr	r3, [r4, #12]
   b6132:	3b01      	subs	r3, #1
   b6134:	2b24      	cmp	r3, #36	; 0x24
   b6136:	d909      	bls.n	b614c <_ZN17currentStatusData17set_stateOfChargeEa+0x28>
                    uint8_t *p = (uint8_t *)savedDataHeader;
   b6138:	68a3      	ldr	r3, [r4, #8]
                    if (oldValue != value) {
   b613a:	f993 2025 	ldrsb.w	r2, [r3, #37]	; 0x25
   b613e:	42aa      	cmp	r2, r5
   b6140:	d004      	beq.n	b614c <_ZN17currentStatusData17set_stateOfChargeEa+0x28>
                        *(T *)p = value;
   b6142:	f883 5025 	strb.w	r5, [r3, #37]	; 0x25
                        updateHash();
   b6146:	4620      	mov	r0, r4
   b6148:	f000 fc06 	bl	b6958 <_ZN15StorageHelperRK18PersistentDataBase10updateHashEv>
            os_mutex_recursive_unlock(handle_); 
   b614c:	6860      	ldr	r0, [r4, #4]
}
   b614e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b6152:	f000 be1d 	b.w	b6d90 <os_mutex_recursive_unlock>
	...

000b6158 <_ZN10nodeIDDataC1Ev>:
nodeIDData::nodeIDData() : StorageHelperRK::PersistentDataFRAM(::fram, 200, &nodeData.nodeHeader, sizeof(NodeData), NODEID_DATA_MAGIC, NODEID_DATA_VERSION) {
   b6158:	f100 012c 	add.w	r1, r0, #44	; 0x2c
        CustomRecursiveMutex() : handle_(nullptr) {
   b615c:	2200      	movs	r2, #0
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b615e:	6081      	str	r1, [r0, #8]
   b6160:	490a      	ldr	r1, [pc, #40]	; (b618c <_ZN10nodeIDDataC1Ev+0x34>)
        CustomRecursiveMutex() : handle_(nullptr) {
   b6162:	6042      	str	r2, [r0, #4]
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b6164:	f44f 6c41 	mov.w	ip, #3088	; 0xc10
   b6168:	6182      	str	r2, [r0, #24]
   b616a:	f880 2020 	strb.w	r2, [r0, #32]
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion), fram(fram), framOffset(framOffset) {
   b616e:	4a08      	ldr	r2, [pc, #32]	; (b6190 <_ZN10nodeIDDataC1Ev+0x38>)
   b6170:	6242      	str	r2, [r0, #36]	; 0x24
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b6172:	e9c0 c103 	strd	ip, r1, [r0, #12]
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion), fram(fram), framOffset(framOffset) {
   b6176:	22c8      	movs	r2, #200	; 0xc8
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b6178:	2102      	movs	r1, #2
   b617a:	8281      	strh	r1, [r0, #20]
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion), fram(fram), framOffset(framOffset) {
   b617c:	6282      	str	r2, [r0, #40]	; 0x28
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b617e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   b6182:	4a04      	ldr	r2, [pc, #16]	; (b6194 <_ZN10nodeIDDataC1Ev+0x3c>)
   b6184:	61c1      	str	r1, [r0, #28]
   b6186:	6002      	str	r2, [r0, #0]
};
   b6188:	4770      	bx	lr
   b618a:	bf00      	nop
   b618c:	20a99e60 	.word	0x20a99e60
   b6190:	2003e620 	.word	0x2003e620
   b6194:	000ba92c 	.word	0x000ba92c

000b6198 <_ZN10nodeIDData8instanceEv>:
nodeIDData &nodeIDData::instance() {
   b6198:	b510      	push	{r4, lr}
    if (!_instance) {
   b619a:	4c07      	ldr	r4, [pc, #28]	; (b61b8 <_ZN10nodeIDData8instanceEv+0x20>)
   b619c:	6823      	ldr	r3, [r4, #0]
   b619e:	b943      	cbnz	r3, b61b2 <_ZN10nodeIDData8instanceEv+0x1a>
        _instance = new nodeIDData();
   b61a0:	f640 403c 	movw	r0, #3132	; 0xc3c
   b61a4:	f7fd ff75 	bl	b4092 <_Znwj>
   b61a8:	4603      	mov	r3, r0
   b61aa:	b108      	cbz	r0, b61b0 <_ZN10nodeIDData8instanceEv+0x18>
   b61ac:	f7ff ffd4 	bl	b6158 <_ZN10nodeIDDataC1Ev>
   b61b0:	6023      	str	r3, [r4, #0]
}
   b61b2:	6820      	ldr	r0, [r4, #0]
   b61b4:	bd10      	pop	{r4, pc}
   b61b6:	bf00      	nop
   b61b8:	2003e618 	.word	0x2003e618

000b61bc <_ZN10nodeIDData5setupEv>:
void nodeIDData::setup() {
   b61bc:	b510      	push	{r4, lr}
    fram.begin();
   b61be:	6a40      	ldr	r0, [r0, #36]	; 0x24
   b61c0:	f000 fa0a 	bl	b65d8 <_ZN6MB85RC5beginEv>
    nodeDatabase
   b61c4:	f7ff ffe8 	bl	b6198 <_ZN10nodeIDData8instanceEv>
            saveDelayMs = value;
   b61c8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
        .load();
   b61cc:	6803      	ldr	r3, [r0, #0]
   b61ce:	61c2      	str	r2, [r0, #28]
}
   b61d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        .load();
   b61d4:	685b      	ldr	r3, [r3, #4]
   b61d6:	4718      	bx	r3

000b61d8 <_ZN10nodeIDData19nodeDataStorageSizeEv>:
}
   b61d8:	f44f 6041 	mov.w	r0, #3088	; 0xc10
   b61dc:	4770      	bx	lr
	...

000b61e0 <_ZNK10nodeIDData14get_nodeIDJsonEv>:
    nodeIDData::resetNodeIDs();
    updateHash();                                       // If you manually update fields here, be sure to update the hash
}


String nodeIDData::get_nodeIDJson() const {
   b61e0:	b538      	push	{r3, r4, r5, lr}
   b61e2:	4604      	mov	r4, r0
   b61e4:	460d      	mov	r5, r1
	String result;
   b61e6:	4906      	ldr	r1, [pc, #24]	; (b6200 <_ZNK10nodeIDData14get_nodeIDJsonEv+0x20>)
   b61e8:	f002 ffc3 	bl	b9172 <_ZN6StringC1EPK19__FlashStringHelper>
	getValueString(offsetof(NodeData, nodeIDJson), sizeof(NodeData::nodeIDJson), result);
   b61ec:	4623      	mov	r3, r4
   b61ee:	f44f 6240 	mov.w	r2, #3072	; 0xc00
   b61f2:	2110      	movs	r1, #16
   b61f4:	4628      	mov	r0, r5
   b61f6:	f000 fb3d 	bl	b6874 <_ZNK15StorageHelperRK18PersistentDataBase14getValueStringEjjR6String>
	return result;
}
   b61fa:	4620      	mov	r0, r4
   b61fc:	bd38      	pop	{r3, r4, r5, pc}
   b61fe:	bf00      	nop
   b6200:	000babc7 	.word	0x000babc7

000b6204 <_ZN10nodeIDData14set_nodeIDJsonEPKc>:

bool nodeIDData::set_nodeIDJson(const char* str) {
   b6204:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6208:	f5ad 7d21 	sub.w	sp, sp, #644	; 0x284
   b620c:	4680      	mov	r8, r0
   b620e:	460c      	mov	r4, r1
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b6210:	f000 ff6a 	bl	b70e8 <spark_cloud_flag_connected>

    if (Particle.connected()) {
   b6214:	b360      	cbz	r0, b6270 <_ZN10nodeIDData14set_nodeIDJsonEPKc+0x6c>
        const size_t maxChunkSize = 622; // max report size
        size_t messageLength = strlen(str);
   b6216:	4620      	mov	r0, r4
   b6218:	f003 fd55 	bl	b9cc6 <strlen>
            // Calculate chunk size for the current iteration
            size_t chunkSize = std::min(maxChunkSize, messageLength - offset);

            // Create a buffer for the current chunk
            char chunk[maxChunkSize + 1]; // +1 for null terminator
            snprintf(chunk, sizeof(chunk), "%.*s", static_cast<int>(chunkSize), str + offset);
   b621c:	f8df b0d0 	ldr.w	fp, [pc, #208]	; b62f0 <_ZN10nodeIDData14set_nodeIDJsonEPKc+0xec>
   b6220:	f8df a0d0 	ldr.w	sl, [pc, #208]	; b62f4 <_ZN10nodeIDData14set_nodeIDJsonEPKc+0xf0>
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b6224:	f8df 90d0 	ldr.w	r9, [pc, #208]	; b62f8 <_ZN10nodeIDData14set_nodeIDJsonEPKc+0xf4>
        size_t messageLength = strlen(str);
   b6228:	4607      	mov	r7, r0
        size_t offset = 0;
   b622a:	2500      	movs	r5, #0
        while (offset < messageLength) {
   b622c:	42bd      	cmp	r5, r7
   b622e:	d21f      	bcs.n	b6270 <_ZN10nodeIDData14set_nodeIDJsonEPKc+0x6c>
            size_t chunkSize = std::min(maxChunkSize, messageLength - offset);
   b6230:	1b7e      	subs	r6, r7, r5
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return __b < __a ? __b : __a;
      if (__b < __a)
	return __b;
      return __a;
   b6232:	f240 226d 	movw	r2, #621	; 0x26d
   b6236:	f240 236e 	movw	r3, #622	; 0x26e
   b623a:	4296      	cmp	r6, r2
   b623c:	bf88      	it	hi
   b623e:	461e      	movhi	r6, r3
            snprintf(chunk, sizeof(chunk), "%.*s", static_cast<int>(chunkSize), str + offset);
   b6240:	1963      	adds	r3, r4, r5
   b6242:	9300      	str	r3, [sp, #0]
   b6244:	465a      	mov	r2, fp
   b6246:	4633      	mov	r3, r6
   b6248:	f240 216f 	movw	r1, #623	; 0x26f
   b624c:	a804      	add	r0, sp, #16
   b624e:	f000 ffeb 	bl	b7228 <snprintf>
   b6252:	f89a 3000 	ldrb.w	r3, [sl]
   b6256:	f88d 3000 	strb.w	r3, [sp]
   b625a:	aa04      	add	r2, sp, #16
   b625c:	233c      	movs	r3, #60	; 0x3c
   b625e:	4649      	mov	r1, r9
   b6260:	a802      	add	r0, sp, #8
   b6262:	f001 f9f9 	bl	b7658 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   b6266:	a803      	add	r0, sp, #12
   b6268:	f7fd fffa 	bl	b4260 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>

            // Publish the current chunk
            Particle.publish("Node Database before set:", chunk, PRIVATE);

            // Move to the next chunk
            offset += chunkSize;
   b626c:	4435      	add	r5, r6
        while (offset < messageLength) {
   b626e:	e7dd      	b.n	b622c <_ZN10nodeIDData14set_nodeIDJsonEPKc+0x28>
    // char cleanedJson[3072];
    // strcpy(cleanedJson, str);
    // cleanJSON(cleanedJson);

    // Set the cleaned JSON value
    bool result = setValueString(offsetof(NodeData, nodeIDJson), sizeof(NodeData::nodeIDJson), str);
   b6270:	4623      	mov	r3, r4
   b6272:	f44f 6240 	mov.w	r2, #3072	; 0xc00
   b6276:	2110      	movs	r1, #16
   b6278:	4640      	mov	r0, r8
   b627a:	f000 fb79 	bl	b6970 <_ZN15StorageHelperRK18PersistentDataBase14setValueStringEjjPKc>

    if (result && Particle.connected()) {
   b627e:	4607      	mov	r7, r0
   b6280:	b380      	cbz	r0, b62e4 <_ZN10nodeIDData14set_nodeIDJsonEPKc+0xe0>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b6282:	f000 ff31 	bl	b70e8 <spark_cloud_flag_connected>
   b6286:	b368      	cbz	r0, b62e4 <_ZN10nodeIDData14set_nodeIDJsonEPKc+0xe0>
        const size_t maxChunkSize = 622; // max report size
        size_t messageLength = strlen(str);
   b6288:	4620      	mov	r0, r4
   b628a:	f003 fd1c 	bl	b9cc6 <strlen>
            // Calculate chunk size for the current iteration
            size_t chunkSize = std::min(maxChunkSize, messageLength - offset);

            // Create a buffer for the current chunk
            char chunk[maxChunkSize + 1]; // +1 for null terminator
            snprintf(chunk, sizeof(chunk), "%.*s", static_cast<int>(chunkSize), str + offset);
   b628e:	f8df b060 	ldr.w	fp, [pc, #96]	; b62f0 <_ZN10nodeIDData14set_nodeIDJsonEPKc+0xec>
   b6292:	f8df a060 	ldr.w	sl, [pc, #96]	; b62f4 <_ZN10nodeIDData14set_nodeIDJsonEPKc+0xf0>
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b6296:	f8df 9064 	ldr.w	r9, [pc, #100]	; b62fc <_ZN10nodeIDData14set_nodeIDJsonEPKc+0xf8>
        size_t messageLength = strlen(str);
   b629a:	4680      	mov	r8, r0
        size_t offset = 0;
   b629c:	2500      	movs	r5, #0
        while (offset < messageLength) {
   b629e:	4545      	cmp	r5, r8
   b62a0:	d220      	bcs.n	b62e4 <_ZN10nodeIDData14set_nodeIDJsonEPKc+0xe0>
            size_t chunkSize = std::min(maxChunkSize, messageLength - offset);
   b62a2:	eba8 0605 	sub.w	r6, r8, r5
   b62a6:	f240 226d 	movw	r2, #621	; 0x26d
   b62aa:	f240 236e 	movw	r3, #622	; 0x26e
   b62ae:	4296      	cmp	r6, r2
   b62b0:	bf88      	it	hi
   b62b2:	461e      	movhi	r6, r3
            snprintf(chunk, sizeof(chunk), "%.*s", static_cast<int>(chunkSize), str + offset);
   b62b4:	1963      	adds	r3, r4, r5
   b62b6:	9300      	str	r3, [sp, #0]
   b62b8:	465a      	mov	r2, fp
   b62ba:	4633      	mov	r3, r6
   b62bc:	f240 216f 	movw	r1, #623	; 0x26f
   b62c0:	a804      	add	r0, sp, #16
   b62c2:	f000 ffb1 	bl	b7228 <snprintf>
   b62c6:	f89a 3000 	ldrb.w	r3, [sl]
   b62ca:	f88d 3000 	strb.w	r3, [sp]
   b62ce:	aa04      	add	r2, sp, #16
   b62d0:	233c      	movs	r3, #60	; 0x3c
   b62d2:	4649      	mov	r1, r9
   b62d4:	a802      	add	r0, sp, #8
   b62d6:	f001 f9bf 	bl	b7658 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   b62da:	a803      	add	r0, sp, #12
   b62dc:	f7fd ffc0 	bl	b4260 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>

            // Publish the current chunk
            Particle.publish("Node Database after set:", chunk, PRIVATE);

            // Move to the next chunk
            offset += chunkSize;
   b62e0:	4435      	add	r5, r6
        while (offset < messageLength) {
   b62e2:	e7dc      	b.n	b629e <_ZN10nodeIDData14set_nodeIDJsonEPKc+0x9a>
        }
    }

    return result;
}
   b62e4:	4638      	mov	r0, r7
   b62e6:	f50d 7d21 	add.w	sp, sp, #644	; 0x284
   b62ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b62ee:	bf00      	nop
   b62f0:	000ba868 	.word	0x000ba868
   b62f4:	2003e614 	.word	0x2003e614
   b62f8:	000ba86d 	.word	0x000ba86d
   b62fc:	000ba887 	.word	0x000ba887

000b6300 <_ZN10nodeIDData12resetNodeIDsEv>:
void nodeIDData::resetNodeIDs() {
   b6300:	b510      	push	{r4, lr}
    Log.info("Resettig NodeID config to: %s", blank.c_str());
   b6302:	4c14      	ldr	r4, [pc, #80]	; (b6354 <_ZN10nodeIDData12resetNodeIDsEv+0x54>)
    String blank = "{\"nodes\":[]}";
   b6304:	4914      	ldr	r1, [pc, #80]	; (b6358 <_ZN10nodeIDData12resetNodeIDsEv+0x58>)
void nodeIDData::resetNodeIDs() {
   b6306:	b088      	sub	sp, #32
    String blank = "{\"nodes\":[]}";
   b6308:	4668      	mov	r0, sp
   b630a:	f002 ff32 	bl	b9172 <_ZN6StringC1EPK19__FlashStringHelper>
    Log.info("Resettig NodeID config to: %s", blank.c_str());
   b630e:	9a00      	ldr	r2, [sp, #0]
   b6310:	4912      	ldr	r1, [pc, #72]	; (b635c <_ZN10nodeIDData12resetNodeIDsEv+0x5c>)
   b6312:	4620      	mov	r0, r4
   b6314:	f7fd ff2a 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
    nodeDatabase.set_nodeIDJson(blank);
   b6318:	f7ff ff3e 	bl	b6198 <_ZN10nodeIDData8instanceEv>
   b631c:	9900      	ldr	r1, [sp, #0]
   b631e:	f7ff ff71 	bl	b6204 <_ZN10nodeIDData14set_nodeIDJsonEPKc>
    nodeDatabase.flush(true);
   b6322:	f7ff ff39 	bl	b6198 <_ZN10nodeIDData8instanceEv>
   b6326:	6803      	ldr	r3, [r0, #0]
   b6328:	2101      	movs	r1, #1
   b632a:	68db      	ldr	r3, [r3, #12]
   b632c:	4798      	blx	r3
    Log.info("NodeID data is now %s", nodeDatabase.get_nodeIDJson().c_str());
   b632e:	f7ff ff33 	bl	b6198 <_ZN10nodeIDData8instanceEv>
   b6332:	4601      	mov	r1, r0
   b6334:	a804      	add	r0, sp, #16
   b6336:	f7ff ff53 	bl	b61e0 <_ZNK10nodeIDData14get_nodeIDJsonEv>
   b633a:	9a04      	ldr	r2, [sp, #16]
   b633c:	4908      	ldr	r1, [pc, #32]	; (b6360 <_ZN10nodeIDData12resetNodeIDsEv+0x60>)
   b633e:	4620      	mov	r0, r4
   b6340:	f7fd ff14 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
   b6344:	a804      	add	r0, sp, #16
   b6346:	f002 fec9 	bl	b90dc <_ZN6StringD1Ev>
    String blank = "{\"nodes\":[]}";
   b634a:	4668      	mov	r0, sp
   b634c:	f002 fec6 	bl	b90dc <_ZN6StringD1Ev>
}
   b6350:	b008      	add	sp, #32
   b6352:	bd10      	pop	{r4, pc}
   b6354:	2003e6b0 	.word	0x2003e6b0
   b6358:	000ba8a0 	.word	0x000ba8a0
   b635c:	000ba8ad 	.word	0x000ba8ad
   b6360:	000ba8cb 	.word	0x000ba8cb

000b6364 <_ZN10nodeIDData10initializeEv>:
void nodeIDData::initialize() {
   b6364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    Log.info("Erasing FRAM region");
   b6366:	4910      	ldr	r1, [pc, #64]	; (b63a8 <_ZN10nodeIDData10initializeEv+0x44>)
void nodeIDData::initialize() {
   b6368:	4604      	mov	r4, r0
    Log.info("Erasing FRAM region");
   b636a:	4810      	ldr	r0, [pc, #64]	; (b63ac <_ZN10nodeIDData10initializeEv+0x48>)
   b636c:	f7fd fefe 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
   b6370:	25c8      	movs	r5, #200	; 0xc8
    for (unsigned int i=0; i < sizeof(NodeData); i++) {
   b6372:	f640 46d8 	movw	r6, #3288	; 0xcd8
        fram.writeData(i+200,(uint8_t *)0xFF,2);
   b6376:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b6378:	6803      	ldr	r3, [r0, #0]
   b637a:	4629      	mov	r1, r5
   b637c:	68df      	ldr	r7, [r3, #12]
   b637e:	22ff      	movs	r2, #255	; 0xff
   b6380:	2302      	movs	r3, #2
    for (unsigned int i=0; i < sizeof(NodeData); i++) {
   b6382:	3501      	adds	r5, #1
        fram.writeData(i+200,(uint8_t *)0xFF,2);
   b6384:	47b8      	blx	r7
    for (unsigned int i=0; i < sizeof(NodeData); i++) {
   b6386:	42b5      	cmp	r5, r6
   b6388:	d1f5      	bne.n	b6376 <_ZN10nodeIDData10initializeEv+0x12>
    Log.info("Initializing data");
   b638a:	4909      	ldr	r1, [pc, #36]	; (b63b0 <_ZN10nodeIDData10initializeEv+0x4c>)
   b638c:	4807      	ldr	r0, [pc, #28]	; (b63ac <_ZN10nodeIDData10initializeEv+0x48>)
   b638e:	f7fd feed 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
    PersistentDataFRAM::initialize();
   b6392:	4620      	mov	r0, r4
   b6394:	f000 fb88 	bl	b6aa8 <_ZN15StorageHelperRK18PersistentDataBase10initializeEv>
    nodeIDData::resetNodeIDs();
   b6398:	4620      	mov	r0, r4
   b639a:	f7ff ffb1 	bl	b6300 <_ZN10nodeIDData12resetNodeIDsEv>
    updateHash();                                       // If you manually update fields here, be sure to update the hash
   b639e:	4620      	mov	r0, r4
}
   b63a0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    updateHash();                                       // If you manually update fields here, be sure to update the hash
   b63a4:	f000 bad8 	b.w	b6958 <_ZN15StorageHelperRK18PersistentDataBase10updateHashEv>
   b63a8:	000ba8e1 	.word	0x000ba8e1
   b63ac:	2003e6b0 	.word	0x2003e6b0
   b63b0:	000ba8f5 	.word	0x000ba8f5

000b63b4 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>:
        T getValue(size_t offset) const {
   b63b4:	b538      	push	{r3, r4, r5, lr}
   b63b6:	4604      	mov	r4, r0
   b63b8:	3004      	adds	r0, #4
   b63ba:	460d      	mov	r5, r1
   b63bc:	f7ff fdda 	bl	b5f74 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b63c0:	68e3      	ldr	r3, [r4, #12]
            os_mutex_recursive_unlock(handle_); 
   b63c2:	6860      	ldr	r0, [r4, #4]
                if (offset <= (savedDataSize - sizeof(T))) {
   b63c4:	3b01      	subs	r3, #1
   b63c6:	42ab      	cmp	r3, r5
                    const uint8_t *p = (uint8_t *)savedDataHeader;
   b63c8:	bf26      	itte	cs
   b63ca:	68a3      	ldrcs	r3, [r4, #8]
                    result = *(const T *)p;
   b63cc:	5d5d      	ldrbcs	r5, [r3, r5]
            T result = 0;
   b63ce:	2500      	movcc	r5, #0
            os_mutex_recursive_unlock(handle_); 
   b63d0:	f000 fcde 	bl	b6d90 <os_mutex_recursive_unlock>
        }
   b63d4:	4628      	mov	r0, r5
   b63d6:	bd38      	pop	{r3, r4, r5, pc}

000b63d8 <_ZNK17currentStatusData14get_nodeNumberEv>:
uint8_t currentStatusData::get_nodeNumber() const {
   b63d8:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(CurrentData, nodeNumber));
   b63da:	2110      	movs	r1, #16
   b63dc:	f7ff ffea 	bl	b63b4 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b63e0:	bd08      	pop	{r3, pc}

000b63e2 <_ZNK17currentStatusData14get_sensorTypeEv>:
uint8_t currentStatusData::get_sensorType() const {
   b63e2:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(CurrentData, sensorType));
   b63e4:	2114      	movs	r1, #20
   b63e6:	f7ff ffe5 	bl	b63b4 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b63ea:	bd08      	pop	{r3, pc}

000b63ec <_ZNK17currentStatusData12get_payload1Ev>:
uint8_t currentStatusData::get_payload1() const {
   b63ec:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(CurrentData, payload1));
   b63ee:	211c      	movs	r1, #28
   b63f0:	f7ff ffe0 	bl	b63b4 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b63f4:	bd08      	pop	{r3, pc}

000b63f6 <_ZNK17currentStatusData12get_payload2Ev>:
uint8_t currentStatusData::get_payload2() const {
   b63f6:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(CurrentData, payload2));
   b63f8:	211d      	movs	r1, #29
   b63fa:	f7ff ffdb 	bl	b63b4 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b63fe:	bd08      	pop	{r3, pc}

000b6400 <_ZNK17currentStatusData12get_payload3Ev>:
uint8_t currentStatusData::get_payload3() const {
   b6400:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(CurrentData, payload3));
   b6402:	211e      	movs	r1, #30
   b6404:	f7ff ffd6 	bl	b63b4 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b6408:	bd08      	pop	{r3, pc}

000b640a <_ZNK17currentStatusData12get_payload4Ev>:
uint8_t currentStatusData::get_payload4() const {
   b640a:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(CurrentData, payload4));
   b640c:	211f      	movs	r1, #31
   b640e:	f7ff ffd1 	bl	b63b4 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b6412:	bd08      	pop	{r3, pc}

000b6414 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>:
        void setValue(size_t offset, T value)  {
   b6414:	b570      	push	{r4, r5, r6, lr}
   b6416:	4604      	mov	r4, r0
   b6418:	3004      	adds	r0, #4
   b641a:	460d      	mov	r5, r1
   b641c:	4616      	mov	r6, r2
   b641e:	f7ff fda9 	bl	b5f74 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b6422:	68e3      	ldr	r3, [r4, #12]
   b6424:	3b01      	subs	r3, #1
   b6426:	42ab      	cmp	r3, r5
   b6428:	d307      	bcc.n	b643a <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_+0x26>
                    uint8_t *p = (uint8_t *)savedDataHeader;
   b642a:	68a3      	ldr	r3, [r4, #8]
                    if (oldValue != value) {
   b642c:	5d5a      	ldrb	r2, [r3, r5]
   b642e:	42b2      	cmp	r2, r6
   b6430:	d003      	beq.n	b643a <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_+0x26>
                        *(T *)p = value;
   b6432:	555e      	strb	r6, [r3, r5]
                        updateHash();
   b6434:	4620      	mov	r0, r4
   b6436:	f000 fa8f 	bl	b6958 <_ZN15StorageHelperRK18PersistentDataBase10updateHashEv>
            os_mutex_recursive_unlock(handle_); 
   b643a:	6860      	ldr	r0, [r4, #4]
        }
   b643c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            os_mutex_recursive_unlock(handle_); 
   b6440:	f000 bca6 	b.w	b6d90 <os_mutex_recursive_unlock>

000b6444 <_ZN17currentStatusData14set_sensorTypeEh>:
void currentStatusData::set_sensorType(uint8_t value) {
   b6444:	b508      	push	{r3, lr}
   b6446:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(CurrentData, sensorType), value);
   b6448:	2114      	movs	r1, #20
   b644a:	f7ff ffe3 	bl	b6414 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b644e:	bd08      	pop	{r3, pc}

000b6450 <_ZN17currentStatusData12set_payload1Eh>:
void currentStatusData::set_payload1(uint8_t value) {
   b6450:	b508      	push	{r3, lr}
   b6452:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(CurrentData, payload1), value);
   b6454:	211c      	movs	r1, #28
   b6456:	f7ff ffdd 	bl	b6414 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}   
   b645a:	bd08      	pop	{r3, pc}

000b645c <_ZN17currentStatusData12set_payload2Eh>:
void currentStatusData::set_payload2(uint8_t value) {
   b645c:	b508      	push	{r3, lr}
   b645e:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(CurrentData, payload2), value);
   b6460:	211d      	movs	r1, #29
   b6462:	f7ff ffd7 	bl	b6414 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}   
   b6466:	bd08      	pop	{r3, pc}

000b6468 <_ZN17currentStatusData12set_payload3Eh>:
void currentStatusData::set_payload3(uint8_t value) {
   b6468:	b508      	push	{r3, lr}
   b646a:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(CurrentData, payload3), value);
   b646c:	211e      	movs	r1, #30
   b646e:	f7ff ffd1 	bl	b6414 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b6472:	bd08      	pop	{r3, pc}

000b6474 <_ZN17currentStatusData12set_payload4Eh>:
void currentStatusData::set_payload4(uint8_t value) {
   b6474:	b508      	push	{r3, lr}
   b6476:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(CurrentData, payload4), value);
   b6478:	211f      	movs	r1, #31
   b647a:	f7ff ffcb 	bl	b6414 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}   
   b647e:	bd08      	pop	{r3, pc}

000b6480 <_ZN17currentStatusData12set_payload5Eh>:
void currentStatusData::set_payload5(uint8_t value) {
   b6480:	b508      	push	{r3, lr}
   b6482:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(CurrentData, payload5), value);
   b6484:	2120      	movs	r1, #32
   b6486:	f7ff ffc5 	bl	b6414 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b648a:	bd08      	pop	{r3, pc}

000b648c <_ZN17currentStatusData12set_payload6Eh>:
void currentStatusData::set_payload6(uint8_t value) {
   b648c:	b508      	push	{r3, lr}
   b648e:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(CurrentData, payload6), value);
   b6490:	2121      	movs	r1, #33	; 0x21
   b6492:	f7ff ffbf 	bl	b6414 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b6496:	bd08      	pop	{r3, pc}

000b6498 <_ZN17currentStatusData12set_payload7Eh>:
void currentStatusData::set_payload7(uint8_t value) {
   b6498:	b508      	push	{r3, lr}
   b649a:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(CurrentData, payload7), value);
   b649c:	2122      	movs	r1, #34	; 0x22
   b649e:	f7ff ffb9 	bl	b6414 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b64a2:	bd08      	pop	{r3, pc}

000b64a4 <_ZN17currentStatusData12set_payload8Eh>:
void currentStatusData::set_payload8(uint8_t value) {
   b64a4:	b508      	push	{r3, lr}
   b64a6:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(CurrentData, payload8), value);
   b64a8:	2123      	movs	r1, #35	; 0x23
   b64aa:	f7ff ffb3 	bl	b6414 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b64ae:	bd08      	pop	{r3, pc}

000b64b0 <_ZN17currentStatusData17set_internalTempCEh>:
void currentStatusData::set_internalTempC(uint8_t value) {
   b64b0:	b508      	push	{r3, lr}
   b64b2:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(CurrentData, internalTempC), value);
   b64b4:	2124      	movs	r1, #36	; 0x24
   b64b6:	f7ff ffad 	bl	b6414 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b64ba:	bd08      	pop	{r3, pc}

000b64bc <_ZN17currentStatusData16set_batteryStateEh>:
void currentStatusData::set_batteryState(uint8_t value) {
   b64bc:	b508      	push	{r3, lr}
   b64be:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(CurrentData, batteryState), value);
   b64c0:	2126      	movs	r1, #38	; 0x26
   b64c2:	f7ff ffa7 	bl	b6414 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b64c6:	bd08      	pop	{r3, pc}

000b64c8 <_ZN17currentStatusData14set_resetCountEh>:
void currentStatusData::set_resetCount(uint8_t value) {
   b64c8:	b508      	push	{r3, lr}
   b64ca:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(CurrentData, resetCount), value);
   b64cc:	2127      	movs	r1, #39	; 0x27
   b64ce:	f7ff ffa1 	bl	b6414 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b64d2:	bd08      	pop	{r3, pc}

000b64d4 <_ZN17currentStatusData17set_alertCodeNodeEh>:
void currentStatusData::set_alertCodeNode(uint8_t value) {
   b64d4:	b508      	push	{r3, lr}
   b64d6:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(CurrentData, alertCodeNode), value);
   b64d8:	212c      	movs	r1, #44	; 0x2c
   b64da:	f7ff ff9b 	bl	b6414 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b64de:	bd08      	pop	{r3, pc}

000b64e0 <_ZN17currentStatusData14set_retryCountEh>:
void currentStatusData::set_retryCount(uint8_t value) {
   b64e0:	b508      	push	{r3, lr}
   b64e2:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(CurrentData, retryCount), value);
   b64e4:	2130      	movs	r1, #48	; 0x30
   b64e6:	f7ff ff95 	bl	b6414 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b64ea:	bd08      	pop	{r3, pc}

000b64ec <_ZN17currentStatusData23set_retransmissionDelayEh>:
void currentStatusData::set_retransmissionDelay(uint8_t value) {
   b64ec:	b508      	push	{r3, lr}
   b64ee:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(CurrentData, retransmissionDelay), value);
   b64f0:	2131      	movs	r1, #49	; 0x31
   b64f2:	f7ff ff8f 	bl	b6414 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b64f6:	bd08      	pop	{r3, pc}

000b64f8 <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_>:
        void setValue(size_t offset, T value)  {
   b64f8:	b570      	push	{r4, r5, r6, lr}
   b64fa:	4604      	mov	r4, r0
   b64fc:	3004      	adds	r0, #4
   b64fe:	460d      	mov	r5, r1
   b6500:	4616      	mov	r6, r2
   b6502:	f7ff fd37 	bl	b5f74 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b6506:	68e3      	ldr	r3, [r4, #12]
   b6508:	3b02      	subs	r3, #2
   b650a:	42ab      	cmp	r3, r5
   b650c:	d307      	bcc.n	b651e <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_+0x26>
                    uint8_t *p = (uint8_t *)savedDataHeader;
   b650e:	68a3      	ldr	r3, [r4, #8]
                    if (oldValue != value) {
   b6510:	5b5a      	ldrh	r2, [r3, r5]
   b6512:	42b2      	cmp	r2, r6
   b6514:	d003      	beq.n	b651e <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_+0x26>
                        *(T *)p = value;
   b6516:	535e      	strh	r6, [r3, r5]
                        updateHash();
   b6518:	4620      	mov	r0, r4
   b651a:	f000 fa1d 	bl	b6958 <_ZN15StorageHelperRK18PersistentDataBase10updateHashEv>
            os_mutex_recursive_unlock(handle_); 
   b651e:	6860      	ldr	r0, [r4, #4]
        }
   b6520:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            os_mutex_recursive_unlock(handle_); 
   b6524:	f000 bc34 	b.w	b6d90 <os_mutex_recursive_unlock>

000b6528 <_ZN17currentStatusData9set_tokenEt>:
void currentStatusData::set_token(uint16_t value) {
   b6528:	b508      	push	{r3, lr}
   b652a:	460a      	mov	r2, r1
    setValue<uint16_t>(offsetof(CurrentData, token), value);
   b652c:	2112      	movs	r1, #18
   b652e:	f7ff ffe3 	bl	b64f8 <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_>
}
   b6532:	bd08      	pop	{r3, pc}

000b6534 <_ZN15StorageHelperRK18PersistentDataBase8setValueIsEEvjT_>:
        void setValue(size_t offset, T value)  {
   b6534:	b570      	push	{r4, r5, r6, lr}
   b6536:	4604      	mov	r4, r0
   b6538:	3004      	adds	r0, #4
   b653a:	460d      	mov	r5, r1
   b653c:	4616      	mov	r6, r2
   b653e:	f7ff fd19 	bl	b5f74 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b6542:	68e3      	ldr	r3, [r4, #12]
   b6544:	3b02      	subs	r3, #2
   b6546:	42ab      	cmp	r3, r5
   b6548:	d307      	bcc.n	b655a <_ZN15StorageHelperRK18PersistentDataBase8setValueIsEEvjT_+0x26>
                    uint8_t *p = (uint8_t *)savedDataHeader;
   b654a:	68a3      	ldr	r3, [r4, #8]
                    if (oldValue != value) {
   b654c:	5f5a      	ldrsh	r2, [r3, r5]
   b654e:	42b2      	cmp	r2, r6
   b6550:	d003      	beq.n	b655a <_ZN15StorageHelperRK18PersistentDataBase8setValueIsEEvjT_+0x26>
                        *(T *)p = value;
   b6552:	535e      	strh	r6, [r3, r5]
                        updateHash();
   b6554:	4620      	mov	r0, r4
   b6556:	f000 f9ff 	bl	b6958 <_ZN15StorageHelperRK18PersistentDataBase10updateHashEv>
            os_mutex_recursive_unlock(handle_); 
   b655a:	6860      	ldr	r0, [r4, #4]
        }
   b655c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            os_mutex_recursive_unlock(handle_); 
   b6560:	f000 bc16 	b.w	b6d90 <os_mutex_recursive_unlock>

000b6564 <_ZN17currentStatusData8set_RSSIEs>:
void currentStatusData::set_RSSI(int16_t value) {
   b6564:	b508      	push	{r3, lr}
   b6566:	460a      	mov	r2, r1
    setValue<int16_t>(offsetof(CurrentData, RSSI), value);
   b6568:	2128      	movs	r1, #40	; 0x28
   b656a:	f7ff ffe3 	bl	b6534 <_ZN15StorageHelperRK18PersistentDataBase8setValueIsEEvjT_>
}
   b656e:	bd08      	pop	{r3, pc}

000b6570 <_ZN17currentStatusData7set_SNREs>:
void currentStatusData::set_SNR(int16_t value) {
   b6570:	b508      	push	{r3, lr}
   b6572:	460a      	mov	r2, r1
    setValue<int16_t>(offsetof(CurrentData, SNR), value);
   b6574:	212a      	movs	r1, #42	; 0x2a
   b6576:	f7ff ffdd 	bl	b6534 <_ZN15StorageHelperRK18PersistentDataBase8setValueIsEEvjT_>
}
   b657a:	bd08      	pop	{r3, pc}

000b657c <_GLOBAL__sub_I_fram>:
        val_(val) {
   b657c:	4b08      	ldr	r3, [pc, #32]	; (b65a0 <_GLOBAL__sub_I_fram+0x24>)
   b657e:	2201      	movs	r2, #1
    // Null-terminate the withoutDoubleCommas array
    withoutDoubleCommas[j] = '\0';

    // Copy the cleaned JSON back to the original string
    strcpy(jsonString, withoutDoubleCommas);
   b6580:	b510      	push	{r4, lr}
   b6582:	701a      	strb	r2, [r3, #0]
MB85RC64 fram(Wire, 0);
   b6584:	f003 f886 	bl	b9694 <_Z19__fetch_global_Wirev>
	 *
	 * @param addr The address 0-7 based on the setting of A0, A1 and A2.
	 *
	 * You typically create one of these objects as a global variable.
	 */
	MB85RC64(TwoWire &wire, int addr = 0) : MB85RC(wire, 8192, addr) {};
   b6588:	4c06      	ldr	r4, [pc, #24]	; (b65a4 <_GLOBAL__sub_I_fram+0x28>)
   b658a:	4601      	mov	r1, r0
   b658c:	2300      	movs	r3, #0
   b658e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   b6592:	4620      	mov	r0, r4
   b6594:	f000 f816 	bl	b65c4 <_ZN6MB85RCC1ER7TwoWireji>
   b6598:	4b03      	ldr	r3, [pc, #12]	; (b65a8 <_GLOBAL__sub_I_fram+0x2c>)
   b659a:	6023      	str	r3, [r4, #0]
   b659c:	bd10      	pop	{r4, pc}
   b659e:	bf00      	nop
   b65a0:	2003e614 	.word	0x2003e614
   b65a4:	2003e620 	.word	0x2003e620
   b65a8:	000ba910 	.word	0x000ba910

000b65ac <_ZN6MB85RCD1Ev>:
MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
	wire(wire), memorySize(memorySize), addr(addr) {
}

MB85RC::~MB85RC() {
}
   b65ac:	4770      	bx	lr

000b65ae <_ZN6MB85RCD0Ev>:
MB85RC::~MB85RC() {
   b65ae:	b510      	push	{r4, lr}
}
   b65b0:	2110      	movs	r1, #16
MB85RC::~MB85RC() {
   b65b2:	4604      	mov	r4, r0
}
   b65b4:	f7fd fd71 	bl	b409a <_ZdlPvj>
   b65b8:	4620      	mov	r0, r4
   b65ba:	bd10      	pop	{r4, pc}

000b65bc <_ZN7TwoWire5writeEj>:
  bool lock();
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
   b65bc:	6803      	ldr	r3, [r0, #0]
   b65be:	b2c9      	uxtb	r1, r1
   b65c0:	689b      	ldr	r3, [r3, #8]
   b65c2:	4718      	bx	r3

000b65c4 <_ZN6MB85RCC1ER7TwoWireji>:
MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
   b65c4:	b530      	push	{r4, r5, lr}
	wire(wire), memorySize(memorySize), addr(addr) {
   b65c6:	4d03      	ldr	r5, [pc, #12]	; (b65d4 <_ZN6MB85RCC1ER7TwoWireji+0x10>)
   b65c8:	e9c0 2302 	strd	r2, r3, [r0, #8]
   b65cc:	e9c0 5100 	strd	r5, r1, [r0]
}
   b65d0:	bd30      	pop	{r4, r5, pc}
   b65d2:	bf00      	nop
   b65d4:	000ba984 	.word	0x000ba984

000b65d8 <_ZN6MB85RC5beginEv>:

void MB85RC::begin() {
	wire.begin();
   b65d8:	6840      	ldr	r0, [r0, #4]
   b65da:	f001 ba31 	b.w	b7a40 <_ZN7TwoWire5beginEv>

000b65de <_ZNSt10lock_guardIR7TwoWireED1Ev>:

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   b65de:	b510      	push	{r4, lr}
   b65e0:	4604      	mov	r4, r0
      { _M_device.unlock(); }
   b65e2:	6800      	ldr	r0, [r0, #0]
   b65e4:	f001 fa6f 	bl	b7ac6 <_ZN7TwoWire6unlockEv>
   b65e8:	4620      	mov	r0, r4
   b65ea:	bd10      	pop	{r4, pc}

000b65ec <_ZN6MB85RC8readDataEjPhj>:

	return true;
}


bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
   b65ec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b65f0:	4604      	mov	r4, r0
	bool result = true;

	WITH_LOCK(wire) {
   b65f2:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b65f4:	9001      	str	r0, [sp, #4]
bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
   b65f6:	460d      	mov	r5, r1
   b65f8:	4616      	mov	r6, r2
   b65fa:	461f      	mov	r7, r3
      { _M_device.lock(); }
   b65fc:	f001 fa5a 	bl	b7ab4 <_ZN7TwoWire4lockEv>

		while(dataLen > 0) {
   b6600:	b1a7      	cbz	r7, b662c <_ZN6MB85RC8readDataEjPhj+0x40>
			wire.beginTransmission(addr | DEVICE_ADDR);
   b6602:	68e1      	ldr	r1, [r4, #12]
   b6604:	6860      	ldr	r0, [r4, #4]
   b6606:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   b660a:	f001 fa4c 	bl	b7aa6 <_ZN7TwoWire17beginTransmissionEi>
			wire.write(framAddr >> 8);
   b660e:	0a29      	lsrs	r1, r5, #8
   b6610:	6860      	ldr	r0, [r4, #4]
   b6612:	f7ff ffd3 	bl	b65bc <_ZN7TwoWire5writeEj>
			wire.write(framAddr);
   b6616:	4629      	mov	r1, r5
   b6618:	6860      	ldr	r0, [r4, #4]
   b661a:	f7ff ffcf 	bl	b65bc <_ZN7TwoWire5writeEj>
			int stat = wire.endTransmission(false);
   b661e:	6860      	ldr	r0, [r4, #4]
   b6620:	2100      	movs	r1, #0
   b6622:	f001 fa43 	bl	b7aac <_ZN7TwoWire15endTransmissionEh>
			if (stat != 0) {
   b6626:	b148      	cbz	r0, b663c <_ZN6MB85RC8readDataEjPhj+0x50>
				//Serial.printlnf("read set address failed %d", stat);
				result = false;
   b6628:	2400      	movs	r4, #0
   b662a:	e000      	b.n	b662e <_ZN6MB85RC8readDataEjPhj+0x42>
   b662c:	2401      	movs	r4, #1
	WITH_LOCK(wire) {
   b662e:	a801      	add	r0, sp, #4
   b6630:	f7ff ffd5 	bl	b65de <_ZNSt10lock_guardIR7TwoWireED1Ev>
				dataLen--;
			}
		}
	}
	return result;
}
   b6634:	4620      	mov	r0, r4
   b6636:	b003      	add	sp, #12
   b6638:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			if (bytesToRead > 32) {
   b663c:	2f20      	cmp	r7, #32
			wire.requestFrom((uint8_t)(addr | DEVICE_ADDR), bytesToRead, (uint8_t) true);
   b663e:	7b21      	ldrb	r1, [r4, #12]
   b6640:	6860      	ldr	r0, [r4, #4]
   b6642:	46b8      	mov	r8, r7
   b6644:	bf28      	it	cs
   b6646:	f04f 0820 	movcs.w	r8, #32
   b664a:	2301      	movs	r3, #1
   b664c:	4642      	mov	r2, r8
   b664e:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   b6652:	f001 fa12 	bl	b7a7a <_ZN7TwoWire11requestFromEhjh>
			if (Wire.available() < (int) bytesToRead) {
   b6656:	f003 f81d 	bl	b9694 <_Z19__fetch_global_Wirev>
   b665a:	6803      	ldr	r3, [r0, #0]
   b665c:	691b      	ldr	r3, [r3, #16]
   b665e:	4798      	blx	r3
   b6660:	4540      	cmp	r0, r8
   b6662:	dbe1      	blt.n	b6628 <_ZN6MB85RC8readDataEjPhj+0x3c>
   b6664:	eb06 0908 	add.w	r9, r6, r8
				*data++ = Wire.read();    // receive a byte as character
   b6668:	f003 f814 	bl	b9694 <_Z19__fetch_global_Wirev>
   b666c:	6803      	ldr	r3, [r0, #0]
   b666e:	695b      	ldr	r3, [r3, #20]
   b6670:	4798      	blx	r3
   b6672:	f806 0b01 	strb.w	r0, [r6], #1
			for(size_t ii = 0; ii < bytesToRead; ii++) {
   b6676:	454e      	cmp	r6, r9
   b6678:	d1f6      	bne.n	b6668 <_ZN6MB85RC8readDataEjPhj+0x7c>
				framAddr++;
   b667a:	4445      	add	r5, r8
				dataLen--;
   b667c:	eba7 0708 	sub.w	r7, r7, r8
   b6680:	e7be      	b.n	b6600 <_ZN6MB85RC8readDataEjPhj+0x14>

000b6682 <_ZN6MB85RC9writeDataEjPKhj>:


bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
   b6682:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6686:	4604      	mov	r4, r0
	bool result = true;

	WITH_LOCK(wire) {
   b6688:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b668a:	9001      	str	r0, [sp, #4]
bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
   b668c:	460e      	mov	r6, r1
   b668e:	4690      	mov	r8, r2
   b6690:	461d      	mov	r5, r3
      { _M_device.lock(); }
   b6692:	f001 fa0f 	bl	b7ab4 <_ZN7TwoWire4lockEv>
   b6696:	f04f 0901 	mov.w	r9, #1
	WITH_LOCK(wire) {
   b669a:	f1b9 0f00 	cmp.w	r9, #0
   b669e:	d02a      	beq.n	b66f6 <_ZN6MB85RC9writeDataEjPKhj+0x74>
		while(dataLen > 0) {
   b66a0:	b34d      	cbz	r5, b66f6 <_ZN6MB85RC9writeDataEjPKhj+0x74>
			wire.beginTransmission(addr | DEVICE_ADDR);
   b66a2:	68e1      	ldr	r1, [r4, #12]
   b66a4:	6860      	ldr	r0, [r4, #4]
   b66a6:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   b66aa:	f001 f9fc 	bl	b7aa6 <_ZN7TwoWire17beginTransmissionEi>
			wire.write(framAddr >> 8);
   b66ae:	0a31      	lsrs	r1, r6, #8
   b66b0:	6860      	ldr	r0, [r4, #4]
   b66b2:	f7ff ff83 	bl	b65bc <_ZN7TwoWire5writeEj>
			wire.write(framAddr);
   b66b6:	6860      	ldr	r0, [r4, #4]
   b66b8:	4631      	mov	r1, r6
   b66ba:	f7ff ff7f 	bl	b65bc <_ZN7TwoWire5writeEj>

			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   b66be:	f1a5 0a1e 	sub.w	sl, r5, #30
			wire.write(framAddr);
   b66c2:	4647      	mov	r7, r8
   b66c4:	eba6 0b08 	sub.w	fp, r6, r8
				wire.write(*data);
   b66c8:	6860      	ldr	r0, [r4, #4]
   b66ca:	f817 1b01 	ldrb.w	r1, [r7], #1
   b66ce:	6803      	ldr	r3, [r0, #0]
				framAddr++;
				data++;
				dataLen--;
   b66d0:	3d01      	subs	r5, #1
				wire.write(*data);
   b66d2:	689b      	ldr	r3, [r3, #8]
   b66d4:	4798      	blx	r3
			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   b66d6:	4555      	cmp	r5, sl
   b66d8:	eb0b 0607 	add.w	r6, fp, r7
				data++;
   b66dc:	46b8      	mov	r8, r7
			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   b66de:	d001      	beq.n	b66e4 <_ZN6MB85RC9writeDataEjPKhj+0x62>
   b66e0:	2d00      	cmp	r5, #0
   b66e2:	d1f1      	bne.n	b66c8 <_ZN6MB85RC9writeDataEjPKhj+0x46>
			}

			int stat = wire.endTransmission(true);
   b66e4:	6860      	ldr	r0, [r4, #4]
   b66e6:	2101      	movs	r1, #1
   b66e8:	f001 f9e0 	bl	b7aac <_ZN7TwoWire15endTransmissionEh>
			if (stat != 0) {
   b66ec:	2800      	cmp	r0, #0
   b66ee:	d0d7      	beq.n	b66a0 <_ZN6MB85RC9writeDataEjPKhj+0x1e>
				//Serial.printlnf("write failed %d", stat);
				result = false;
   b66f0:	f04f 0900 	mov.w	r9, #0
   b66f4:	e7d1      	b.n	b669a <_ZN6MB85RC9writeDataEjPKhj+0x18>
	WITH_LOCK(wire) {
   b66f6:	a801      	add	r0, sp, #4
   b66f8:	f7ff ff71 	bl	b65de <_ZNSt10lock_guardIR7TwoWireED1Ev>
				break;
			}
		}
	}
	return result;
}
   b66fc:	4648      	mov	r0, r9
   b66fe:	b003      	add	sp, #12
   b6700:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b6704 <_ZN6MB85RC8moveDataEjjj>:


bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   b6704:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b6708:	b08b      	sub	sp, #44	; 0x2c
   b670a:	460e      	mov	r6, r1
   b670c:	4615      	mov	r5, r2
   b670e:	4680      	mov	r8, r0
	bool result = true;

	// Maximum number of bytes we can write is 30
	uint8_t buf[30];

	WITH_LOCK(wire) {
   b6710:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b6712:	9001      	str	r0, [sp, #4]
bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   b6714:	461c      	mov	r4, r3
      { _M_device.lock(); }
   b6716:	f001 f9cd 	bl	b7ab4 <_ZN7TwoWire4lockEv>
		if (framAddrFrom < framAddrTo) {
   b671a:	42ae      	cmp	r6, r5
   b671c:	d229      	bcs.n	b6772 <_ZN6MB85RC8moveDataEjjj+0x6e>
			// Moving to a higher address - copy from the end of the from buffer
			framAddrFrom += numBytes;
   b671e:	4426      	add	r6, r4
			framAddrTo += numBytes;
   b6720:	4425      	add	r5, r4
			while(numBytes > 0) {
   b6722:	b18c      	cbz	r4, b6748 <_ZN6MB85RC8moveDataEjjj+0x44>
				size_t count = numBytes;
				if (count > sizeof(buf)) {
   b6724:	2c1e      	cmp	r4, #30
   b6726:	4627      	mov	r7, r4
					count = sizeof(buf);
				}
				framAddrFrom -= count;
				framAddrTo -= count;

				result = readData(framAddrFrom, buf, count);
   b6728:	f8d8 3000 	ldr.w	r3, [r8]
   b672c:	bf28      	it	cs
   b672e:	271e      	movcs	r7, #30
				framAddrFrom -= count;
   b6730:	1bf6      	subs	r6, r6, r7
				result = readData(framAddrFrom, buf, count);
   b6732:	f8d3 9008 	ldr.w	r9, [r3, #8]
   b6736:	aa02      	add	r2, sp, #8
   b6738:	463b      	mov	r3, r7
   b673a:	4631      	mov	r1, r6
   b673c:	4640      	mov	r0, r8
				framAddrTo -= count;
   b673e:	1bed      	subs	r5, r5, r7
				result = readData(framAddrFrom, buf, count);
   b6740:	47c8      	blx	r9
				if (!result) {
   b6742:	b948      	cbnz	r0, b6758 <_ZN6MB85RC8moveDataEjjj+0x54>
bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   b6744:	2400      	movs	r4, #0
   b6746:	e000      	b.n	b674a <_ZN6MB85RC8moveDataEjjj+0x46>
   b6748:	2401      	movs	r4, #1
	WITH_LOCK(wire) {
   b674a:	a801      	add	r0, sp, #4
   b674c:	f7ff ff47 	bl	b65de <_ZNSt10lock_guardIR7TwoWireED1Ev>
				numBytes -= count;
			}
		}
	}
	return result;
}
   b6750:	4620      	mov	r0, r4
   b6752:	b00b      	add	sp, #44	; 0x2c
   b6754:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				result = writeData(framAddrTo, buf, count);
   b6758:	f8d8 3000 	ldr.w	r3, [r8]
   b675c:	aa02      	add	r2, sp, #8
   b675e:	f8d3 900c 	ldr.w	r9, [r3, #12]
   b6762:	4629      	mov	r1, r5
   b6764:	463b      	mov	r3, r7
   b6766:	4640      	mov	r0, r8
   b6768:	47c8      	blx	r9
				if (!result) {
   b676a:	2800      	cmp	r0, #0
   b676c:	d0ea      	beq.n	b6744 <_ZN6MB85RC8moveDataEjjj+0x40>
				numBytes -= count;
   b676e:	1be4      	subs	r4, r4, r7
			while(numBytes > 0) {
   b6770:	e7d7      	b.n	b6722 <_ZN6MB85RC8moveDataEjjj+0x1e>
		if (framAddrFrom > framAddrTo) {
   b6772:	d9e9      	bls.n	b6748 <_ZN6MB85RC8moveDataEjjj+0x44>
			while(numBytes > 0) {
   b6774:	2c00      	cmp	r4, #0
   b6776:	d0e7      	beq.n	b6748 <_ZN6MB85RC8moveDataEjjj+0x44>
				result = readData(framAddrFrom, buf, count);
   b6778:	f8d8 3000 	ldr.w	r3, [r8]
   b677c:	2c1e      	cmp	r4, #30
   b677e:	4627      	mov	r7, r4
   b6780:	bf28      	it	cs
   b6782:	271e      	movcs	r7, #30
   b6784:	f8d3 9008 	ldr.w	r9, [r3, #8]
   b6788:	aa02      	add	r2, sp, #8
   b678a:	463b      	mov	r3, r7
   b678c:	4631      	mov	r1, r6
   b678e:	4640      	mov	r0, r8
   b6790:	47c8      	blx	r9
				if (!result) {
   b6792:	2800      	cmp	r0, #0
   b6794:	d0d6      	beq.n	b6744 <_ZN6MB85RC8moveDataEjjj+0x40>
				result = writeData(framAddrTo, buf, count);
   b6796:	f8d8 3000 	ldr.w	r3, [r8]
   b679a:	aa02      	add	r2, sp, #8
   b679c:	f8d3 900c 	ldr.w	r9, [r3, #12]
   b67a0:	4629      	mov	r1, r5
   b67a2:	463b      	mov	r3, r7
   b67a4:	4640      	mov	r0, r8
   b67a6:	47c8      	blx	r9
				if (!result) {
   b67a8:	2800      	cmp	r0, #0
   b67aa:	d0cb      	beq.n	b6744 <_ZN6MB85RC8moveDataEjjj+0x40>
				framAddrFrom += count;
   b67ac:	443e      	add	r6, r7
				framAddrTo += count;
   b67ae:	443d      	add	r5, r7
				numBytes -= count;
   b67b0:	1be4      	subs	r4, r4, r7
			while(numBytes > 0) {
   b67b2:	e7df      	b.n	b6774 <_ZN6MB85RC8moveDataEjjj+0x70>

000b67b4 <_ZN15StorageHelperRK18PersistentDataBase5setupEv>:
// PersistentDataBase
//

void StorageHelperRK::PersistentDataBase::setup() {
    // Load data at boot
    load();
   b67b4:	6803      	ldr	r3, [r0, #0]
   b67b6:	685b      	ldr	r3, [r3, #4]
   b67b8:	4718      	bx	r3

000b67ba <_ZN15StorageHelperRK18PersistentDataBase5flushEb>:

    return true;
}


void StorageHelperRK::PersistentDataBase::flush(bool force) {
   b67ba:	b510      	push	{r4, lr}
    if (lastUpdate) {
   b67bc:	6983      	ldr	r3, [r0, #24]
void StorageHelperRK::PersistentDataBase::flush(bool force) {
   b67be:	4604      	mov	r4, r0
    if (lastUpdate) {
   b67c0:	b133      	cbz	r3, b67d0 <_ZN15StorageHelperRK18PersistentDataBase5flushEb+0x16>
        if (force || (millis() - lastUpdate >= saveDelayMs)) {
   b67c2:	b131      	cbz	r1, b67d2 <_ZN15StorageHelperRK18PersistentDataBase5flushEb+0x18>
            save();
   b67c4:	6823      	ldr	r3, [r4, #0]
   b67c6:	4620      	mov	r0, r4
   b67c8:	689b      	ldr	r3, [r3, #8]
   b67ca:	4798      	blx	r3
            lastUpdate = 0;
   b67cc:	2300      	movs	r3, #0
   b67ce:	61a3      	str	r3, [r4, #24]
        }
    }
}
   b67d0:	bd10      	pop	{r4, pc}

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b67d2:	f000 faf5 	bl	b6dc0 <HAL_Timer_Get_Milli_Seconds>
        if (force || (millis() - lastUpdate >= saveDelayMs)) {
   b67d6:	69a3      	ldr	r3, [r4, #24]
   b67d8:	1ac0      	subs	r0, r0, r3
   b67da:	69e3      	ldr	r3, [r4, #28]
   b67dc:	4298      	cmp	r0, r3
   b67de:	d2f1      	bcs.n	b67c4 <_ZN15StorageHelperRK18PersistentDataBase5flushEb+0xa>
   b67e0:	e7f6      	b.n	b67d0 <_ZN15StorageHelperRK18PersistentDataBase5flushEb+0x16>

000b67e2 <_ZN15StorageHelperRK18PersistentDataBase11saveOrDeferEv>:

void StorageHelperRK::PersistentDataBase::saveOrDefer() {
   b67e2:	b510      	push	{r4, lr}
    if (saveDelayMs) {
   b67e4:	69c3      	ldr	r3, [r0, #28]
void StorageHelperRK::PersistentDataBase::saveOrDefer() {
   b67e6:	4604      	mov	r4, r0
    if (saveDelayMs) {
   b67e8:	b11b      	cbz	r3, b67f2 <_ZN15StorageHelperRK18PersistentDataBase11saveOrDeferEv+0x10>
   b67ea:	f000 fae9 	bl	b6dc0 <HAL_Timer_Get_Milli_Seconds>
        lastUpdate = millis();
   b67ee:	61a0      	str	r0, [r4, #24]
    }
    else {
        save();
    }
}
   b67f0:	bd10      	pop	{r4, pc}
        save();
   b67f2:	6803      	ldr	r3, [r0, #0]
}
   b67f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        save();
   b67f8:	689b      	ldr	r3, [r3, #8]
   b67fa:	4718      	bx	r3

000b67fc <_ZNK15StorageHelperRK20CustomRecursiveMutex6unlockEv.isra.0>:
   b67fc:	f000 bac8 	b.w	b6d90 <os_mutex_recursive_unlock>

000b6800 <_ZNK5spark6Logger5traceEPKcz>:
inline void spark::Logger::trace(const char *fmt, ...) const {
   b6800:	b40e      	push	{r1, r2, r3}
   b6802:	b500      	push	{lr}
   b6804:	b08c      	sub	sp, #48	; 0x30
   b6806:	aa0d      	add	r2, sp, #52	; 0x34
    attr.flags = 0;
   b6808:	f04f 0c20 	mov.w	ip, #32
inline void spark::Logger::trace(const char *fmt, ...) const {
   b680c:	f852 1b04 	ldr.w	r1, [r2], #4
    va_start(args, fmt);
   b6810:	9203      	str	r2, [sp, #12]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b6812:	e9cd 1200 	strd	r1, r2, [sp]
    attr.flags = 0;
   b6816:	2300      	movs	r3, #0
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b6818:	6801      	ldr	r1, [r0, #0]
   b681a:	aa04      	add	r2, sp, #16
   b681c:	2001      	movs	r0, #1
    attr.flags = 0;
   b681e:	e9cd c304 	strd	ip, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b6822:	f000 fbed 	bl	b7000 <log_message_v>
}
   b6826:	b00c      	add	sp, #48	; 0x30
   b6828:	f85d eb04 	ldr.w	lr, [sp], #4
   b682c:	b003      	add	sp, #12
   b682e:	4770      	bx	lr

000b6830 <_ZNK5spark6Logger4dumpEPKvj>:
inline void spark::Logger::dump(const void *data, size_t size) const {
   b6830:	b507      	push	{r0, r1, r2, lr}
   b6832:	4613      	mov	r3, r2
    if (data) {
   b6834:	b139      	cbz	r1, b6846 <_ZNK5spark6Logger4dumpEPKvj+0x16>
        log_dump(level, name_, data, size, 0, nullptr);
   b6836:	2200      	movs	r2, #0
   b6838:	e9cd 2200 	strd	r2, r2, [sp]
   b683c:	460a      	mov	r2, r1
   b683e:	6801      	ldr	r1, [r0, #0]
   b6840:	201e      	movs	r0, #30
   b6842:	f000 fbed 	bl	b7020 <log_dump>
}
   b6846:	b003      	add	sp, #12
   b6848:	f85d fb04 	ldr.w	pc, [sp], #4

000b684c <_ZN15StorageHelperRK18PersistentDataBase4loadEv>:
bool StorageHelperRK::PersistentDataBase::load() {
   b684c:	b510      	push	{r4, lr}
   b684e:	4604      	mov	r4, r0
   b6850:	3004      	adds	r0, #4
   b6852:	f7ff fb8f 	bl	b5f74 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
        if (!validate(savedDataSize)) {
   b6856:	6823      	ldr	r3, [r4, #0]
   b6858:	68e1      	ldr	r1, [r4, #12]
   b685a:	695b      	ldr	r3, [r3, #20]
   b685c:	4620      	mov	r0, r4
   b685e:	4798      	blx	r3
   b6860:	b918      	cbnz	r0, b686a <_ZN15StorageHelperRK18PersistentDataBase4loadEv+0x1e>
            initialize();
   b6862:	6823      	ldr	r3, [r4, #0]
   b6864:	4620      	mov	r0, r4
   b6866:	699b      	ldr	r3, [r3, #24]
   b6868:	4798      	blx	r3
      { _M_device.unlock(); }
   b686a:	6860      	ldr	r0, [r4, #4]
   b686c:	f7ff ffc6 	bl	b67fc <_ZNK15StorageHelperRK20CustomRecursiveMutex6unlockEv.isra.0>
}
   b6870:	2001      	movs	r0, #1
   b6872:	bd10      	pop	{r4, pc}

000b6874 <_ZNK15StorageHelperRK18PersistentDataBase14getValueStringEjjR6String>:



bool StorageHelperRK::PersistentDataBase::getValueString(size_t offset, size_t size, String &value) const {
   b6874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6876:	4605      	mov	r5, r0
      { _M_device.lock(); }
   b6878:	3004      	adds	r0, #4
   b687a:	4614      	mov	r4, r2
   b687c:	460e      	mov	r6, r1
   b687e:	461f      	mov	r7, r3
   b6880:	f7ff fb78 	bl	b5f74 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
    bool result = false;

    WITH_LOCK(*this) {
        if (offset <= (savedDataSize - (size - 1))) {
   b6884:	68ea      	ldr	r2, [r5, #12]
   b6886:	f1c4 0401 	rsb	r4, r4, #1
   b688a:	4414      	add	r4, r2
   b688c:	42b4      	cmp	r4, r6
   b688e:	d30a      	bcc.n	b68a6 <_ZNK15StorageHelperRK18PersistentDataBase14getValueStringEjjR6String+0x32>
            const char *p = (const char *)savedDataHeader;
   b6890:	68a9      	ldr	r1, [r5, #8]
            p += offset;
            value = p; // copies string
   b6892:	4638      	mov	r0, r7
   b6894:	4431      	add	r1, r6
   b6896:	f002 fcc3 	bl	b9220 <_ZN6StringaSEPKc>
            result = true;
   b689a:	2401      	movs	r4, #1
      { _M_device.unlock(); }
   b689c:	6868      	ldr	r0, [r5, #4]
   b689e:	f7ff ffad 	bl	b67fc <_ZNK15StorageHelperRK20CustomRecursiveMutex6unlockEv.isra.0>
        }
    }
    return result;
}
   b68a2:	4620      	mov	r0, r4
   b68a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bool result = false;
   b68a6:	2400      	movs	r4, #0
   b68a8:	e7f8      	b.n	b689c <_ZNK15StorageHelperRK18PersistentDataBase14getValueStringEjjR6String+0x28>
	...

000b68ac <_ZN15StorageHelperRK10murmur3_32EPKhjm>:
    }
    PersistentDataBase::save();
}


uint32_t StorageHelperRK::murmur3_32(const uint8_t* key, size_t len, uint32_t seed) {
   b68ac:	b5f0      	push	{r4, r5, r6, r7, lr}
   b68ae:	f021 0403 	bic.w	r4, r1, #3
     * 
     * @param k 
     * @return uint32_t 
     */
    static inline uint32_t murmur_32_scramble(uint32_t k) {
        k *= 0xcc9e2d51;
   b68b2:	4f18      	ldr	r7, [pc, #96]	; (b6914 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x68>)
        k = (k << 15) | (k >> 17);
        k *= 0x1b873593;
   b68b4:	4e18      	ldr	r6, [pc, #96]	; (b6918 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x6c>)
        // A swap here has no effects on hash properties though.
        memcpy(&k, key, sizeof(uint32_t));
        key += sizeof(uint32_t);
        h ^= murmur_32_scramble(k);
        h = (h << 13) | (h >> 19);
        h = h * 5 + 0xe6546b64;
   b68b6:	4d19      	ldr	r5, [pc, #100]	; (b691c <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x70>)
   b68b8:	4404      	add	r4, r0
    for (size_t i = len >> 2; i; i--) {
   b68ba:	42a0      	cmp	r0, r4
   b68bc:	d00c      	beq.n	b68d8 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x2c>
        memcpy(&k, key, sizeof(uint32_t));
   b68be:	f850 3b04 	ldr.w	r3, [r0], #4
        k *= 0xcc9e2d51;
   b68c2:	437b      	muls	r3, r7
        k = (k << 15) | (k >> 17);
   b68c4:	ea4f 4373 	mov.w	r3, r3, ror #17
        k *= 0x1b873593;
   b68c8:	4373      	muls	r3, r6
        h ^= murmur_32_scramble(k);
   b68ca:	405a      	eors	r2, r3
        h = (h << 13) | (h >> 19);
   b68cc:	ea4f 42f2 	mov.w	r2, r2, ror #19
        h = h * 5 + 0xe6546b64;
   b68d0:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   b68d4:	442a      	add	r2, r5
    for (size_t i = len >> 2; i; i--) {
   b68d6:	e7f0      	b.n	b68ba <_ZN15StorageHelperRK10murmur3_32EPKhjm+0xe>
    }
    /* Read the rest. */
    k = 0;
    for (size_t i = len & 3; i; i--) {
   b68d8:	f001 0403 	and.w	r4, r1, #3
   b68dc:	4404      	add	r4, r0
    k = 0;
   b68de:	2300      	movs	r3, #0
    for (size_t i = len & 3; i; i--) {
   b68e0:	42a0      	cmp	r0, r4
   b68e2:	d004      	beq.n	b68ee <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x42>
        k <<= 8;
        k |= key[i - 1];
   b68e4:	f814 5d01 	ldrb.w	r5, [r4, #-1]!
   b68e8:	ea45 2303 	orr.w	r3, r5, r3, lsl #8
    for (size_t i = len & 3; i; i--) {
   b68ec:	e7f8      	b.n	b68e0 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x34>
        k *= 0xcc9e2d51;
   b68ee:	4809      	ldr	r0, [pc, #36]	; (b6914 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x68>)
   b68f0:	4343      	muls	r3, r0
        k *= 0x1b873593;
   b68f2:	4809      	ldr	r0, [pc, #36]	; (b6918 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x6c>)
        k = (k << 15) | (k >> 17);
   b68f4:	ea4f 4373 	mov.w	r3, r3, ror #17
        return k;
   b68f8:	404a      	eors	r2, r1
        k *= 0x1b873593;
   b68fa:	4358      	muls	r0, r3
    // A swap is *not* necessary here because the preceding loop already
    // places the low bytes in the low places according to whatever endianness
    // we use. Swaps only apply when the memory is copied in a chunk.
    h ^= murmur_32_scramble(k);
    /* Finalize. */
	h ^= len;
   b68fc:	4050      	eors	r0, r2
	h ^= h >> 16;
	h *= 0x85ebca6b;
   b68fe:	4b08      	ldr	r3, [pc, #32]	; (b6920 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x74>)
	h ^= h >> 16;
   b6900:	ea80 4010 	eor.w	r0, r0, r0, lsr #16
	h *= 0x85ebca6b;
   b6904:	4358      	muls	r0, r3
	h ^= h >> 13;
	h *= 0xc2b2ae35;
   b6906:	4b07      	ldr	r3, [pc, #28]	; (b6924 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x78>)
	h ^= h >> 13;
   b6908:	ea80 3050 	eor.w	r0, r0, r0, lsr #13
	h *= 0xc2b2ae35;
   b690c:	4358      	muls	r0, r3
	h ^= h >> 16;
	return h;
}
   b690e:	ea80 4010 	eor.w	r0, r0, r0, lsr #16
   b6912:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b6914:	cc9e2d51 	.word	0xcc9e2d51
   b6918:	1b873593 	.word	0x1b873593
   b691c:	e6546b64 	.word	0xe6546b64
   b6920:	85ebca6b 	.word	0x85ebca6b
   b6924:	c2b2ae35 	.word	0xc2b2ae35

000b6928 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>:
uint32_t StorageHelperRK::PersistentDataBase::getHash() const {
   b6928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b692a:	4604      	mov	r4, r0
      { _M_device.lock(); }
   b692c:	3004      	adds	r0, #4
   b692e:	f7ff fb21 	bl	b5f74 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
        uint32_t savedHash = savedDataHeader->hash;
   b6932:	68a3      	ldr	r3, [r4, #8]
        savedDataHeader->hash = 0;
   b6934:	2200      	movs	r2, #0
        uint32_t savedHash = savedDataHeader->hash;
   b6936:	689f      	ldr	r7, [r3, #8]
        savedDataHeader->hash = 0;
   b6938:	609a      	str	r2, [r3, #8]
        hash = StorageHelperRK::murmur3_32((const uint8_t *)savedDataHeader, savedDataHeader->size, HASH_SEED);
   b693a:	68a6      	ldr	r6, [r4, #8]
   b693c:	4a05      	ldr	r2, [pc, #20]	; (b6954 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv+0x2c>)
   b693e:	88f1      	ldrh	r1, [r6, #6]
   b6940:	4630      	mov	r0, r6
   b6942:	f7ff ffb3 	bl	b68ac <_ZN15StorageHelperRK10murmur3_32EPKhjm>
        savedDataHeader->hash = savedHash;
   b6946:	60b7      	str	r7, [r6, #8]
        hash = StorageHelperRK::murmur3_32((const uint8_t *)savedDataHeader, savedDataHeader->size, HASH_SEED);
   b6948:	4605      	mov	r5, r0
      { _M_device.unlock(); }
   b694a:	6860      	ldr	r0, [r4, #4]
   b694c:	f7ff ff56 	bl	b67fc <_ZNK15StorageHelperRK20CustomRecursiveMutex6unlockEv.isra.0>
}
   b6950:	4628      	mov	r0, r5
   b6952:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b6954:	851c2a3f 	.word	0x851c2a3f

000b6958 <_ZN15StorageHelperRK18PersistentDataBase10updateHashEv>:
void StorageHelperRK::PersistentDataBase::updateHash() {
   b6958:	b570      	push	{r4, r5, r6, lr}
   b695a:	4604      	mov	r4, r0
    savedDataHeader->hash = getHash();
   b695c:	6885      	ldr	r5, [r0, #8]
   b695e:	f7ff ffe3 	bl	b6928 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
   b6962:	60a8      	str	r0, [r5, #8]
    saveOrDefer();
   b6964:	6823      	ldr	r3, [r4, #0]
   b6966:	4620      	mov	r0, r4
   b6968:	691b      	ldr	r3, [r3, #16]
}
   b696a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    saveOrDefer();
   b696e:	4718      	bx	r3

000b6970 <_ZN15StorageHelperRK18PersistentDataBase14setValueStringEjjPKc>:
bool StorageHelperRK::PersistentDataBase::setValueString(size_t offset, size_t size, const char *value) {
   b6970:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b6974:	4604      	mov	r4, r0
      { _M_device.lock(); }
   b6976:	3004      	adds	r0, #4
   b6978:	4690      	mov	r8, r2
   b697a:	460d      	mov	r5, r1
   b697c:	461f      	mov	r7, r3
   b697e:	f7ff faf9 	bl	b5f74 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
        if (offset <= (savedDataSize - (size - 1)) && strlen(value) < size) {
   b6982:	68e2      	ldr	r2, [r4, #12]
   b6984:	f1c8 0301 	rsb	r3, r8, #1
   b6988:	4413      	add	r3, r2
   b698a:	42ab      	cmp	r3, r5
   b698c:	d319      	bcc.n	b69c2 <_ZN15StorageHelperRK18PersistentDataBase14setValueStringEjjPKc+0x52>
   b698e:	4638      	mov	r0, r7
   b6990:	f003 f999 	bl	b9cc6 <strlen>
   b6994:	4540      	cmp	r0, r8
   b6996:	d214      	bcs.n	b69c2 <_ZN15StorageHelperRK18PersistentDataBase14setValueStringEjjPKc+0x52>
            char *p = (char *)savedDataHeader;
   b6998:	68a6      	ldr	r6, [r4, #8]
            p += offset;
   b699a:	4435      	add	r5, r6
            if (strcmp(value, p) != 0) {
   b699c:	4629      	mov	r1, r5
   b699e:	4638      	mov	r0, r7
   b69a0:	f003 f961 	bl	b9c66 <strcmp>
   b69a4:	b158      	cbz	r0, b69be <_ZN15StorageHelperRK18PersistentDataBase14setValueStringEjjPKc+0x4e>
                memset(p, 0, size);
   b69a6:	4642      	mov	r2, r8
   b69a8:	2100      	movs	r1, #0
   b69aa:	4628      	mov	r0, r5
   b69ac:	f003 f8d0 	bl	b9b50 <memset>
                strcpy(p, value);
   b69b0:	4639      	mov	r1, r7
   b69b2:	4628      	mov	r0, r5
   b69b4:	f003 f961 	bl	b9c7a <strcpy>
                updateHash();
   b69b8:	4620      	mov	r0, r4
   b69ba:	f7ff ffcd 	bl	b6958 <_ZN15StorageHelperRK18PersistentDataBase10updateHashEv>
            result = true;
   b69be:	2501      	movs	r5, #1
   b69c0:	e000      	b.n	b69c4 <_ZN15StorageHelperRK18PersistentDataBase14setValueStringEjjPKc+0x54>
    bool result = false;
   b69c2:	2500      	movs	r5, #0
      { _M_device.unlock(); }
   b69c4:	6860      	ldr	r0, [r4, #4]
   b69c6:	f7ff ff19 	bl	b67fc <_ZNK15StorageHelperRK20CustomRecursiveMutex6unlockEv.isra.0>
}
   b69ca:	4628      	mov	r0, r5
   b69cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b69d0 <_ZN15StorageHelperRK18PersistentDataBase8validateEj>:
bool StorageHelperRK::PersistentDataBase::validate(size_t dataSize) {
   b69d0:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if (logData && dataSize < 4096) {
   b69d2:	f890 3020 	ldrb.w	r3, [r0, #32]
bool StorageHelperRK::PersistentDataBase::validate(size_t dataSize) {
   b69d6:	4604      	mov	r4, r0
   b69d8:	460d      	mov	r5, r1
    if (logData && dataSize < 4096) {
   b69da:	b1ab      	cbz	r3, b6a08 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x38>
   b69dc:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
   b69e0:	d217      	bcs.n	b6a12 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x42>
        Log.info("validating data size=%d", (int)dataSize);
   b69e2:	4e2c      	ldr	r6, [pc, #176]	; (b6a94 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0xc4>)
   b69e4:	460a      	mov	r2, r1
   b69e6:	4630      	mov	r0, r6
   b69e8:	492b      	ldr	r1, [pc, #172]	; (b6a98 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0xc8>)
   b69ea:	f7fd fbbf 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
        Log.dump((const uint8_t *)savedDataHeader, dataSize);
   b69ee:	68a1      	ldr	r1, [r4, #8]
   b69f0:	462a      	mov	r2, r5
   b69f2:	4630      	mov	r0, r6
   b69f4:	f7ff ff1c 	bl	b6830 <_ZNK5spark6Logger4dumpEPKvj>
        log_write(level, name_, data, size, nullptr);
   b69f8:	2300      	movs	r3, #0
   b69fa:	9300      	str	r3, [sp, #0]
   b69fc:	4a27      	ldr	r2, [pc, #156]	; (b6a9c <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0xcc>)
   b69fe:	6831      	ldr	r1, [r6, #0]
   b6a00:	2301      	movs	r3, #1
   b6a02:	201e      	movs	r0, #30
   b6a04:	f000 fb04 	bl	b7010 <log_write>
    if (dataSize >= 12 && 
   b6a08:	2d0b      	cmp	r5, #11
   b6a0a:	d802      	bhi.n	b6a12 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x42>
    if (!isValid && dataSize != 0 && savedDataHeader->magic != 0) {
   b6a0c:	bb55      	cbnz	r5, b6a64 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x94>
   b6a0e:	2000      	movs	r0, #0
   b6a10:	e026      	b.n	b6a60 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x90>
        savedDataHeader->magic == savedDataMagic && 
   b6a12:	68a3      	ldr	r3, [r4, #8]
    if (dataSize >= 12 && 
   b6a14:	6922      	ldr	r2, [r4, #16]
   b6a16:	6819      	ldr	r1, [r3, #0]
   b6a18:	4291      	cmp	r1, r2
   b6a1a:	d123      	bne.n	b6a64 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x94>
        savedDataHeader->magic == savedDataMagic && 
   b6a1c:	8899      	ldrh	r1, [r3, #4]
   b6a1e:	8aa2      	ldrh	r2, [r4, #20]
   b6a20:	4291      	cmp	r1, r2
   b6a22:	d11f      	bne.n	b6a64 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x94>
        savedDataHeader->version == savedDataVersion &&
   b6a24:	88da      	ldrh	r2, [r3, #6]
   b6a26:	b2ab      	uxth	r3, r5
   b6a28:	429a      	cmp	r2, r3
   b6a2a:	d81b      	bhi.n	b6a64 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x94>
        hash = getHash();
   b6a2c:	4620      	mov	r0, r4
   b6a2e:	f7ff ff7b 	bl	b6928 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
        if (savedDataHeader->hash == hash) {                
   b6a32:	68a3      	ldr	r3, [r4, #8]
   b6a34:	689a      	ldr	r2, [r3, #8]
   b6a36:	4282      	cmp	r2, r0
        hash = getHash();
   b6a38:	4606      	mov	r6, r0
        if (savedDataHeader->hash == hash) {                
   b6a3a:	d114      	bne.n	b6a66 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x96>
            if ((size_t)dataSize < savedDataSize) {
   b6a3c:	68e2      	ldr	r2, [r4, #12]
   b6a3e:	42aa      	cmp	r2, r5
   b6a40:	d905      	bls.n	b6a4e <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x7e>
                    p[ii] = 0;
   b6a42:	2100      	movs	r1, #0
   b6a44:	5559      	strb	r1, [r3, r5]
                for(size_t ii = (size_t)dataSize; ii < savedDataSize; ii++) {
   b6a46:	68e2      	ldr	r2, [r4, #12]
   b6a48:	3501      	adds	r5, #1
   b6a4a:	42aa      	cmp	r2, r5
   b6a4c:	d8fa      	bhi.n	b6a44 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x74>
            savedDataHeader->size = (uint16_t) savedDataSize;
   b6a4e:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
            savedDataHeader->hash = getHash();
   b6a52:	4620      	mov	r0, r4
            savedDataHeader->size = (uint16_t) savedDataSize;
   b6a54:	80da      	strh	r2, [r3, #6]
            savedDataHeader->hash = getHash();
   b6a56:	68a5      	ldr	r5, [r4, #8]
   b6a58:	f7ff ff66 	bl	b6928 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
   b6a5c:	60a8      	str	r0, [r5, #8]
            isValid = true;
   b6a5e:	2001      	movs	r0, #1
}
   b6a60:	b002      	add	sp, #8
   b6a62:	bd70      	pop	{r4, r5, r6, pc}
    uint32_t hash = 0;
   b6a64:	2600      	movs	r6, #0
    if (!isValid && dataSize != 0 && savedDataHeader->magic != 0) {
   b6a66:	68a1      	ldr	r1, [r4, #8]
   b6a68:	680a      	ldr	r2, [r1, #0]
   b6a6a:	2a00      	cmp	r2, #0
   b6a6c:	d0cf      	beq.n	b6a0e <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x3e>
        Log.trace("got: magic=%08x version=%04x size=%04x hash=%08x", (int)savedDataHeader->magic, (int)savedDataHeader->version, (int)savedDataHeader->size, (int)savedDataHeader->hash);
   b6a6e:	6888      	ldr	r0, [r1, #8]
   b6a70:	888b      	ldrh	r3, [r1, #4]
   b6a72:	9001      	str	r0, [sp, #4]
   b6a74:	88c9      	ldrh	r1, [r1, #6]
   b6a76:	9100      	str	r1, [sp, #0]
   b6a78:	4806      	ldr	r0, [pc, #24]	; (b6a94 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0xc4>)
   b6a7a:	4909      	ldr	r1, [pc, #36]	; (b6aa0 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0xd0>)
   b6a7c:	f7ff fec0 	bl	b6800 <_ZNK5spark6Logger5traceEPKcz>
        Log.trace("exp: magic=%08x version=%04x size=%04x hash=%08x", (int)savedDataMagic, (int)savedDataVersion, (int)dataSize, (int)hash);
   b6a80:	e9cd 5600 	strd	r5, r6, [sp]
   b6a84:	8aa3      	ldrh	r3, [r4, #20]
   b6a86:	6922      	ldr	r2, [r4, #16]
   b6a88:	4906      	ldr	r1, [pc, #24]	; (b6aa4 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0xd4>)
   b6a8a:	4802      	ldr	r0, [pc, #8]	; (b6a94 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0xc4>)
   b6a8c:	f7ff feb8 	bl	b6800 <_ZNK5spark6Logger5traceEPKcz>
   b6a90:	e7bd      	b.n	b6a0e <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x3e>
   b6a92:	bf00      	nop
   b6a94:	2003e6b0 	.word	0x2003e6b0
   b6a98:	000ba998 	.word	0x000ba998
   b6a9c:	000babc6 	.word	0x000babc6
   b6aa0:	000ba9b0 	.word	0x000ba9b0
   b6aa4:	000ba9e1 	.word	0x000ba9e1

000b6aa8 <_ZN15StorageHelperRK18PersistentDataBase10initializeEv>:
void StorageHelperRK::PersistentDataBase::initialize() {
   b6aa8:	b538      	push	{r3, r4, r5, lr}
   b6aaa:	4604      	mov	r4, r0
    memset(savedDataHeader, 0, savedDataSize);
   b6aac:	68c2      	ldr	r2, [r0, #12]
   b6aae:	6880      	ldr	r0, [r0, #8]
   b6ab0:	2100      	movs	r1, #0
   b6ab2:	f003 f84d 	bl	b9b50 <memset>
    savedDataHeader->magic = savedDataMagic;
   b6ab6:	68a3      	ldr	r3, [r4, #8]
   b6ab8:	6922      	ldr	r2, [r4, #16]
   b6aba:	601a      	str	r2, [r3, #0]
    savedDataHeader->version = savedDataVersion;
   b6abc:	68a3      	ldr	r3, [r4, #8]
   b6abe:	8aa2      	ldrh	r2, [r4, #20]
   b6ac0:	809a      	strh	r2, [r3, #4]
    savedDataHeader->size = (uint16_t) savedDataSize;
   b6ac2:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    savedDataHeader->hash = getHash();
   b6ac6:	4620      	mov	r0, r4
    savedDataHeader->size = (uint16_t) savedDataSize;
   b6ac8:	80da      	strh	r2, [r3, #6]
    savedDataHeader->hash = getHash();
   b6aca:	68a5      	ldr	r5, [r4, #8]
   b6acc:	f7ff ff2c 	bl	b6928 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
   b6ad0:	60a8      	str	r0, [r5, #8]
}
   b6ad2:	bd38      	pop	{r3, r4, r5, pc}

000b6ad4 <_ZN15StorageHelperRK18PersistentDataBase4saveEv>:
void StorageHelperRK::PersistentDataBase::save() {
   b6ad4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b6ad6:	4604      	mov	r4, r0
    savedDataHeader->hash = getHash();
   b6ad8:	6885      	ldr	r5, [r0, #8]
   b6ada:	f7ff ff25 	bl	b6928 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
   b6ade:	60a8      	str	r0, [r5, #8]
    if (logData) {
   b6ae0:	f894 3020 	ldrb.w	r3, [r4, #32]
   b6ae4:	b19b      	cbz	r3, b6b0e <_ZN15StorageHelperRK18PersistentDataBase4saveEv+0x3a>
        Log.info("saving data size=%d", (int)savedDataHeader->size);
   b6ae6:	68a3      	ldr	r3, [r4, #8]
   b6ae8:	4d0a      	ldr	r5, [pc, #40]	; (b6b14 <_ZN15StorageHelperRK18PersistentDataBase4saveEv+0x40>)
   b6aea:	88da      	ldrh	r2, [r3, #6]
   b6aec:	490a      	ldr	r1, [pc, #40]	; (b6b18 <_ZN15StorageHelperRK18PersistentDataBase4saveEv+0x44>)
   b6aee:	4628      	mov	r0, r5
   b6af0:	f7fd fb3c 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
        Log.dump((const uint8_t *)savedDataHeader, savedDataHeader->size);
   b6af4:	68a1      	ldr	r1, [r4, #8]
   b6af6:	4628      	mov	r0, r5
   b6af8:	88ca      	ldrh	r2, [r1, #6]
   b6afa:	f7ff fe99 	bl	b6830 <_ZNK5spark6Logger4dumpEPKvj>
   b6afe:	2300      	movs	r3, #0
   b6b00:	9300      	str	r3, [sp, #0]
   b6b02:	4a06      	ldr	r2, [pc, #24]	; (b6b1c <_ZN15StorageHelperRK18PersistentDataBase4saveEv+0x48>)
   b6b04:	6829      	ldr	r1, [r5, #0]
   b6b06:	2301      	movs	r3, #1
   b6b08:	201e      	movs	r0, #30
   b6b0a:	f000 fa81 	bl	b7010 <log_write>
}
   b6b0e:	b003      	add	sp, #12
   b6b10:	bd30      	pop	{r4, r5, pc}
   b6b12:	bf00      	nop
   b6b14:	2003e6b0 	.word	0x2003e6b0
   b6b18:	000baa12 	.word	0x000baa12
   b6b1c:	000babc6 	.word	0x000babc6

000b6b20 <_ZN10DataReportC1Em>:
#include "DataReport.h"

// Constructor with default initialization to 0
DataReport::DataReport(uint32_t uniqueID) : 
   b6b20:	b510      	push	{r4, lr}
                            batteryState(0),
                            resetCount(0), 
                            RSSI(0), 
                            SNR(0),
                            retransmissions(0), 
                            retransmissionDelays(0) {}
   b6b22:	2200      	movs	r2, #0
   b6b24:	f243 0439 	movw	r4, #12345	; 0x3039
   b6b28:	e9c0 1209 	strd	r1, r2, [r0, #36]	; 0x24
   b6b2c:	e9c0 220b 	strd	r2, r2, [r0, #44]	; 0x2c
   b6b30:	8382      	strh	r2, [r0, #28]
   b6b32:	7782      	strb	r2, [r0, #30]
   b6b34:	8404      	strh	r4, [r0, #32]
   b6b36:	f880 2022 	strb.w	r2, [r0, #34]	; 0x22
   b6b3a:	6342      	str	r2, [r0, #52]	; 0x34
   b6b3c:	8702      	strh	r2, [r0, #56]	; 0x38
   b6b3e:	bd10      	pop	{r4, pc}

000b6b40 <_ZN10DataReport13setNodeNumberEh>:
void DataReport::setMagicNumber(uint16_t magicNumber) {
    this->magicNumber = magicNumber;
}

void DataReport::setNodeNumber(uint8_t nodeNumber) {
    this->nodeNumber = nodeNumber;
   b6b40:	7781      	strb	r1, [r0, #30]
}
   b6b42:	4770      	bx	lr

000b6b44 <_ZN10DataReport13setSensorTypeEh>:
void DataReport::setToken(uint16_t token) {
    this->token = token;
}

void DataReport::setSensorType(uint8_t sensorType) {
    this->sensorType = sensorType;
   b6b44:	f880 1022 	strb.w	r1, [r0, #34]	; 0x22
}
   b6b48:	4770      	bx	lr

000b6b4a <_ZN10DataReport17setOccupancyGrossEt>:

void DataReport::setOccupancyGross(uint16_t occupancyGross) {
    this->occupancyGross = occupancyGross;
   b6b4a:	8501      	strh	r1, [r0, #40]	; 0x28
}
   b6b4c:	4770      	bx	lr

000b6b4e <_ZN10DataReport15setOccupancyNetEt>:

void DataReport::setOccupancyNet(uint16_t occupancyNet) {
    this->occupancyNet = occupancyNet;
   b6b4e:	8541      	strh	r1, [r0, #42]	; 0x2a
}
   b6b50:	4770      	bx	lr

000b6b52 <_ZNK10DataReport13getReportDataEPhj>:
    this->retransmissionDelays = retransmissionDelays;
}

// Function to populate a passed-in buffer with the data
bool DataReport::getReportData(uint8_t* buf, size_t size) const {
    if (size < 28) {
   b6b52:	2a1b      	cmp	r2, #27
   b6b54:	d94c      	bls.n	b6bf0 <_ZNK10DataReport13getReportDataEPhj+0x9e>
        return false;
    }
    buf[0] = highByte(magicNumber);
   b6b56:	8b83      	ldrh	r3, [r0, #28]
   b6b58:	0a1b      	lsrs	r3, r3, #8
   b6b5a:	700b      	strb	r3, [r1, #0]
    buf[1] = lowByte(magicNumber);
   b6b5c:	8b83      	ldrh	r3, [r0, #28]
   b6b5e:	704b      	strb	r3, [r1, #1]
    buf[2] = nodeNumber;
   b6b60:	7f83      	ldrb	r3, [r0, #30]
   b6b62:	708b      	strb	r3, [r1, #2]
    buf[3] = highByte(token);
   b6b64:	8c03      	ldrh	r3, [r0, #32]
   b6b66:	0a1b      	lsrs	r3, r3, #8
   b6b68:	70cb      	strb	r3, [r1, #3]
    buf[4] = lowByte(token);
   b6b6a:	8c03      	ldrh	r3, [r0, #32]
   b6b6c:	710b      	strb	r3, [r1, #4]
    buf[5] = sensorType;
   b6b6e:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
   b6b72:	714b      	strb	r3, [r1, #5]
    buf[6] = uniqueID >> 24;
   b6b74:	f890 3027 	ldrb.w	r3, [r0, #39]	; 0x27
   b6b78:	718b      	strb	r3, [r1, #6]
    buf[7] = uniqueID >> 16;
   b6b7a:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
   b6b7c:	71cb      	strb	r3, [r1, #7]
    buf[8] = uniqueID >> 8;
   b6b7e:	6a43      	ldr	r3, [r0, #36]	; 0x24
   b6b80:	0a1b      	lsrs	r3, r3, #8
   b6b82:	720b      	strb	r3, [r1, #8]
    buf[9] = uniqueID;
   b6b84:	6a43      	ldr	r3, [r0, #36]	; 0x24
   b6b86:	724b      	strb	r3, [r1, #9]
    buf[10] = highByte(occupancyGross);
   b6b88:	8d03      	ldrh	r3, [r0, #40]	; 0x28
   b6b8a:	0a1b      	lsrs	r3, r3, #8
   b6b8c:	728b      	strb	r3, [r1, #10]
    buf[11] = lowByte(occupancyGross);
   b6b8e:	8d03      	ldrh	r3, [r0, #40]	; 0x28
   b6b90:	72cb      	strb	r3, [r1, #11]
    buf[12] = highByte(occupancyNet);
   b6b92:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
   b6b94:	0a1b      	lsrs	r3, r3, #8
   b6b96:	730b      	strb	r3, [r1, #12]
    buf[13] = lowByte(occupancyNet);
   b6b98:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
   b6b9a:	734b      	strb	r3, [r1, #13]
    buf[14] = space;
   b6b9c:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
   b6ba0:	738b      	strb	r3, [r1, #14]
    buf[15] = placement;
   b6ba2:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
   b6ba6:	73cb      	strb	r3, [r1, #15]
    buf[16] = multi;
   b6ba8:	f890 302e 	ldrb.w	r3, [r0, #46]	; 0x2e
   b6bac:	740b      	strb	r3, [r1, #16]
    buf[17] = zoneMode;
   b6bae:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
   b6bb2:	744b      	strb	r3, [r1, #17]
    buf[18] = internalTempC;
   b6bb4:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
   b6bb8:	748b      	strb	r3, [r1, #18]
    buf[19] = stateOfCharge;
   b6bba:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
   b6bbe:	74cb      	strb	r3, [r1, #19]
    buf[20] = batteryState;
   b6bc0:	f890 3032 	ldrb.w	r3, [r0, #50]	; 0x32
   b6bc4:	750b      	strb	r3, [r1, #20]
    buf[21] = resetCount;
   b6bc6:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
   b6bca:	754b      	strb	r3, [r1, #21]
    buf[22] = highByte(RSSI);
   b6bcc:	8e83      	ldrh	r3, [r0, #52]	; 0x34
   b6bce:	0a1b      	lsrs	r3, r3, #8
   b6bd0:	758b      	strb	r3, [r1, #22]
    buf[23] = lowByte(RSSI);
   b6bd2:	8e83      	ldrh	r3, [r0, #52]	; 0x34
   b6bd4:	75cb      	strb	r3, [r1, #23]
    buf[24] = highByte(SNR);
   b6bd6:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
   b6bd8:	0a1b      	lsrs	r3, r3, #8
   b6bda:	760b      	strb	r3, [r1, #24]
    buf[25] = lowByte(SNR);
   b6bdc:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
   b6bde:	764b      	strb	r3, [r1, #25]
    buf[26] = retransmissions;
   b6be0:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   b6be4:	768b      	strb	r3, [r1, #26]
    buf[27] = retransmissionDelays;
   b6be6:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
   b6bea:	76cb      	strb	r3, [r1, #27]
   b6bec:	2001      	movs	r0, #1
   b6bee:	4770      	bx	lr
        return false;
   b6bf0:	2000      	movs	r0, #0

    return true;
   b6bf2:	4770      	bx	lr

000b6bf4 <_ZN7GatewayD1Ev>:
    return *_instance;
}

Gateway::Gateway() {}

Gateway::~Gateway() {}
   b6bf4:	4770      	bx	lr

000b6bf6 <_ZN7GatewayD0Ev>:
   b6bf6:	b510      	push	{r4, lr}
   b6bf8:	2104      	movs	r1, #4
   b6bfa:	4604      	mov	r4, r0
   b6bfc:	f7fd fa4d 	bl	b409a <_ZdlPvj>
   b6c00:	4620      	mov	r0, r4
   b6c02:	bd10      	pop	{r4, pc}

000b6c04 <_ZN7Gateway8instanceEv>:
Gateway &Gateway::instance() {
   b6c04:	b510      	push	{r4, lr}
    if (!_instance) {
   b6c06:	4c06      	ldr	r4, [pc, #24]	; (b6c20 <_ZN7Gateway8instanceEv+0x1c>)
   b6c08:	6823      	ldr	r3, [r4, #0]
   b6c0a:	b933      	cbnz	r3, b6c1a <_ZN7Gateway8instanceEv+0x16>
        _instance = new Gateway();
   b6c0c:	2004      	movs	r0, #4
   b6c0e:	f7fd fa40 	bl	b4092 <_Znwj>
   b6c12:	b108      	cbz	r0, b6c18 <_ZN7Gateway8instanceEv+0x14>
Gateway::Gateway() {}
   b6c14:	4b03      	ldr	r3, [pc, #12]	; (b6c24 <_ZN7Gateway8instanceEv+0x20>)
   b6c16:	6003      	str	r3, [r0, #0]
        _instance = new Gateway();
   b6c18:	6020      	str	r0, [r4, #0]
}
   b6c1a:	6820      	ldr	r0, [r4, #0]
   b6c1c:	bd10      	pop	{r4, pc}
   b6c1e:	bf00      	nop
   b6c20:	2003e630 	.word	0x2003e630
   b6c24:	000baa8c 	.word	0x000baa8c

000b6c28 <_ZN7Gateway18decipherDataReportEv>:
    Log.info("Node %d with uniqueID %lu sent a data report message", current.get_nodeNumber(), current.get_uniqueID());

    Gateway::instance().decipherDataReport();
}

void Gateway::decipherDataReport() {
   b6c28:	b510      	push	{r4, lr}
    // buf[2] - nodeNumber processed above
    // buf[3] - buf[4] is token - processed above
    // buf[5] - Sensor type - processed above
    // buf[6] - buf[9] is the unique ID of the node - processed above
    current.set_payload1(buf[10]);
   b6c2a:	4c2b      	ldr	r4, [pc, #172]	; (b6cd8 <_ZN7Gateway18decipherDataReportEv+0xb0>)
   b6c2c:	f7ff fa34 	bl	b6098 <_ZN17currentStatusData8instanceEv>
   b6c30:	7aa1      	ldrb	r1, [r4, #10]
   b6c32:	f7ff fc0d 	bl	b6450 <_ZN17currentStatusData12set_payload1Eh>
    current.set_payload2(buf[11]);
   b6c36:	f7ff fa2f 	bl	b6098 <_ZN17currentStatusData8instanceEv>
   b6c3a:	7ae1      	ldrb	r1, [r4, #11]
   b6c3c:	f7ff fc0e 	bl	b645c <_ZN17currentStatusData12set_payload2Eh>
    current.set_payload3(buf[12]);
   b6c40:	f7ff fa2a 	bl	b6098 <_ZN17currentStatusData8instanceEv>
   b6c44:	7b21      	ldrb	r1, [r4, #12]
   b6c46:	f7ff fc0f 	bl	b6468 <_ZN17currentStatusData12set_payload3Eh>
    current.set_payload4(buf[13]);
   b6c4a:	f7ff fa25 	bl	b6098 <_ZN17currentStatusData8instanceEv>
   b6c4e:	7b61      	ldrb	r1, [r4, #13]
   b6c50:	f7ff fc10 	bl	b6474 <_ZN17currentStatusData12set_payload4Eh>
    current.set_payload5(buf[14]);
   b6c54:	f7ff fa20 	bl	b6098 <_ZN17currentStatusData8instanceEv>
   b6c58:	7ba1      	ldrb	r1, [r4, #14]
   b6c5a:	f7ff fc11 	bl	b6480 <_ZN17currentStatusData12set_payload5Eh>
    current.set_payload6(buf[15]);
   b6c5e:	f7ff fa1b 	bl	b6098 <_ZN17currentStatusData8instanceEv>
   b6c62:	7be1      	ldrb	r1, [r4, #15]
   b6c64:	f7ff fc12 	bl	b648c <_ZN17currentStatusData12set_payload6Eh>
    current.set_payload7(buf[16]);
   b6c68:	f7ff fa16 	bl	b6098 <_ZN17currentStatusData8instanceEv>
   b6c6c:	7c21      	ldrb	r1, [r4, #16]
   b6c6e:	f7ff fc13 	bl	b6498 <_ZN17currentStatusData12set_payload7Eh>
    current.set_payload8(buf[17]);
   b6c72:	f7ff fa11 	bl	b6098 <_ZN17currentStatusData8instanceEv>
   b6c76:	7c61      	ldrb	r1, [r4, #17]
   b6c78:	f7ff fc14 	bl	b64a4 <_ZN17currentStatusData12set_payload8Eh>
    // Then, we will get the rest of the data from the report
    current.set_internalTempC(buf[18]);
   b6c7c:	f7ff fa0c 	bl	b6098 <_ZN17currentStatusData8instanceEv>
   b6c80:	7ca1      	ldrb	r1, [r4, #18]
   b6c82:	f7ff fc15 	bl	b64b0 <_ZN17currentStatusData17set_internalTempCEh>
    current.set_stateOfCharge(buf[19]);
   b6c86:	f7ff fa07 	bl	b6098 <_ZN17currentStatusData8instanceEv>
   b6c8a:	f994 1013 	ldrsb.w	r1, [r4, #19]
   b6c8e:	f7ff fa49 	bl	b6124 <_ZN17currentStatusData17set_stateOfChargeEa>
    current.set_batteryState(buf[20]);
   b6c92:	f7ff fa01 	bl	b6098 <_ZN17currentStatusData8instanceEv>
   b6c96:	7d21      	ldrb	r1, [r4, #20]
   b6c98:	f7ff fc10 	bl	b64bc <_ZN17currentStatusData16set_batteryStateEh>
    current.set_resetCount(buf[21]);
   b6c9c:	f7ff f9fc 	bl	b6098 <_ZN17currentStatusData8instanceEv>
   b6ca0:	7d61      	ldrb	r1, [r4, #21]
   b6ca2:	f7ff fc11 	bl	b64c8 <_ZN17currentStatusData14set_resetCountEh>
    current.set_RSSI(buf[22] << 8 | buf[23]);
   b6ca6:	f7ff f9f7 	bl	b6098 <_ZN17currentStatusData8instanceEv>
   b6caa:	8ae1      	ldrh	r1, [r4, #22]
   b6cac:	bac9      	revsh	r1, r1
   b6cae:	f7ff fc59 	bl	b6564 <_ZN17currentStatusData8set_RSSIEs>
    current.set_SNR(buf[24] << 8 | buf[25]);
   b6cb2:	f7ff f9f1 	bl	b6098 <_ZN17currentStatusData8instanceEv>
   b6cb6:	8b21      	ldrh	r1, [r4, #24]
   b6cb8:	bac9      	revsh	r1, r1
   b6cba:	f7ff fc59 	bl	b6570 <_ZN17currentStatusData7set_SNREs>
    current.set_retryCount(buf[26]);
   b6cbe:	f7ff f9eb 	bl	b6098 <_ZN17currentStatusData8instanceEv>
   b6cc2:	7ea1      	ldrb	r1, [r4, #26]
   b6cc4:	f7ff fc0c 	bl	b64e0 <_ZN17currentStatusData14set_retryCountEh>
    current.set_retransmissionDelay(buf[27]);
   b6cc8:	f7ff f9e6 	bl	b6098 <_ZN17currentStatusData8instanceEv>
   b6ccc:	7ee1      	ldrb	r1, [r4, #27]
}
   b6cce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    current.set_retransmissionDelay(buf[27]);
   b6cd2:	f7ff bc0b 	b.w	b64ec <_ZN17currentStatusData23set_retransmissionDelayEh>
   b6cd6:	bf00      	nop
   b6cd8:	2003e634 	.word	0x2003e634

000b6cdc <_ZN7Gateway17processDataReportE10DataReport>:
void Gateway::processDataReport(DataReport report) {
   b6cdc:	b084      	sub	sp, #16
   b6cde:	b513      	push	{r0, r1, r4, lr}
    report.getReportData(buf, sizeof(buf));
   b6ce0:	4c1c      	ldr	r4, [pc, #112]	; (b6d54 <_ZN7Gateway17processDataReportE10DataReport+0x78>)
void Gateway::processDataReport(DataReport report) {
   b6ce2:	a805      	add	r0, sp, #20
   b6ce4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    report.getReportData(buf, sizeof(buf));
   b6ce8:	2232      	movs	r2, #50	; 0x32
   b6cea:	4621      	mov	r1, r4
   b6cec:	f7ff ff31 	bl	b6b52 <_ZNK10DataReport13getReportDataEPhj>
    current.set_alertCodeNode(0);			// reset data report							
   b6cf0:	f7ff f9d2 	bl	b6098 <_ZN17currentStatusData8instanceEv>
   b6cf4:	2100      	movs	r1, #0
   b6cf6:	f7ff fbed 	bl	b64d4 <_ZN17currentStatusData17set_alertCodeNodeEh>
    current.set_token(buf[3] << 8 | buf[4]);									
   b6cfa:	f7ff f9cd 	bl	b6098 <_ZN17currentStatusData8instanceEv>
   b6cfe:	f8b4 1003 	ldrh.w	r1, [r4, #3]
   b6d02:	ba49      	rev16	r1, r1
   b6d04:	b289      	uxth	r1, r1
   b6d06:	f7ff fc0f 	bl	b6528 <_ZN17currentStatusData9set_tokenEt>
    current.set_sensorType(buf[5]);												
   b6d0a:	f7ff f9c5 	bl	b6098 <_ZN17currentStatusData8instanceEv>
   b6d0e:	7961      	ldrb	r1, [r4, #5]
   b6d10:	f7ff fb98 	bl	b6444 <_ZN17currentStatusData14set_sensorTypeEh>
    current.set_uniqueID(buf[6] << 24 | buf[7] << 16 | buf[8] << 8 | buf[9]);	
   b6d14:	f7ff f9c0 	bl	b6098 <_ZN17currentStatusData8instanceEv>
   b6d18:	f8d4 1006 	ldr.w	r1, [r4, #6]
   b6d1c:	ba09      	rev	r1, r1
   b6d1e:	f7ff f9ea 	bl	b60f6 <_ZN17currentStatusData12set_uniqueIDEm>
    Log.info("Node %d with uniqueID %lu sent a data report message", current.get_nodeNumber(), current.get_uniqueID());
   b6d22:	f7ff f9b9 	bl	b6098 <_ZN17currentStatusData8instanceEv>
   b6d26:	f7ff fb57 	bl	b63d8 <_ZNK17currentStatusData14get_nodeNumberEv>
   b6d2a:	9001      	str	r0, [sp, #4]
   b6d2c:	f7ff f9b4 	bl	b6098 <_ZN17currentStatusData8instanceEv>
   b6d30:	f7ff f9d0 	bl	b60d4 <_ZNK17currentStatusData12get_uniqueIDEv>
   b6d34:	9a01      	ldr	r2, [sp, #4]
   b6d36:	4908      	ldr	r1, [pc, #32]	; (b6d58 <_ZN7Gateway17processDataReportE10DataReport+0x7c>)
   b6d38:	4603      	mov	r3, r0
   b6d3a:	4808      	ldr	r0, [pc, #32]	; (b6d5c <_ZN7Gateway17processDataReportE10DataReport+0x80>)
   b6d3c:	f7fd fa16 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
    Gateway::instance().decipherDataReport();
   b6d40:	f7ff ff60 	bl	b6c04 <_ZN7Gateway8instanceEv>
   b6d44:	f7ff ff70 	bl	b6c28 <_ZN7Gateway18decipherDataReportEv>
}
   b6d48:	b002      	add	sp, #8
   b6d4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b6d4e:	b004      	add	sp, #16
   b6d50:	4770      	bx	lr
   b6d52:	bf00      	nop
   b6d54:	2003e634 	.word	0x2003e634
   b6d58:	000baa4c 	.word	0x000baa4c
   b6d5c:	2003e6b0 	.word	0x2003e6b0

000b6d60 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b6d60:	b508      	push	{r3, lr}
   b6d62:	4b02      	ldr	r3, [pc, #8]	; (b6d6c <os_mutex_recursive_create+0xc>)
   b6d64:	681b      	ldr	r3, [r3, #0]
   b6d66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b6d68:	9301      	str	r3, [sp, #4]
   b6d6a:	bd08      	pop	{r3, pc}
   b6d6c:	00030248 	.word	0x00030248

000b6d70 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   b6d70:	b508      	push	{r3, lr}
   b6d72:	4b02      	ldr	r3, [pc, #8]	; (b6d7c <os_mutex_recursive_destroy+0xc>)
   b6d74:	681b      	ldr	r3, [r3, #0]
   b6d76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   b6d78:	9301      	str	r3, [sp, #4]
   b6d7a:	bd08      	pop	{r3, pc}
   b6d7c:	00030248 	.word	0x00030248

000b6d80 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   b6d80:	b508      	push	{r3, lr}
   b6d82:	4b02      	ldr	r3, [pc, #8]	; (b6d8c <os_mutex_recursive_lock+0xc>)
   b6d84:	681b      	ldr	r3, [r3, #0]
   b6d86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b6d88:	9301      	str	r3, [sp, #4]
   b6d8a:	bd08      	pop	{r3, pc}
   b6d8c:	00030248 	.word	0x00030248

000b6d90 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   b6d90:	b508      	push	{r3, lr}
   b6d92:	4b02      	ldr	r3, [pc, #8]	; (b6d9c <os_mutex_recursive_unlock+0xc>)
   b6d94:	681b      	ldr	r3, [r3, #0]
   b6d96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b6d98:	9301      	str	r3, [sp, #4]
   b6d9a:	bd08      	pop	{r3, pc}
   b6d9c:	00030248 	.word	0x00030248

000b6da0 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b6da0:	b508      	push	{r3, lr}
   b6da2:	4b02      	ldr	r3, [pc, #8]	; (b6dac <HAL_RNG_GetRandomNumber+0xc>)
   b6da4:	681b      	ldr	r3, [r3, #0]
   b6da6:	685b      	ldr	r3, [r3, #4]
   b6da8:	9301      	str	r3, [sp, #4]
   b6daa:	bd08      	pop	{r3, pc}
   b6dac:	00030218 	.word	0x00030218

000b6db0 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b6db0:	b508      	push	{r3, lr}
   b6db2:	4b02      	ldr	r3, [pc, #8]	; (b6dbc <HAL_Delay_Microseconds+0xc>)
   b6db4:	681b      	ldr	r3, [r3, #0]
   b6db6:	68db      	ldr	r3, [r3, #12]
   b6db8:	9301      	str	r3, [sp, #4]
   b6dba:	bd08      	pop	{r3, pc}
   b6dbc:	00030218 	.word	0x00030218

000b6dc0 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b6dc0:	b508      	push	{r3, lr}
   b6dc2:	4b02      	ldr	r3, [pc, #8]	; (b6dcc <HAL_Timer_Get_Milli_Seconds+0xc>)
   b6dc4:	681b      	ldr	r3, [r3, #0]
   b6dc6:	695b      	ldr	r3, [r3, #20]
   b6dc8:	9301      	str	r3, [sp, #4]
   b6dca:	bd08      	pop	{r3, pc}
   b6dcc:	00030218 	.word	0x00030218

000b6dd0 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   b6dd0:	b508      	push	{r3, lr}
   b6dd2:	4b02      	ldr	r3, [pc, #8]	; (b6ddc <hal_rtc_time_is_valid+0xc>)
   b6dd4:	681b      	ldr	r3, [r3, #0]
   b6dd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b6dd8:	9301      	str	r3, [sp, #4]
   b6dda:	bd08      	pop	{r3, pc}
   b6ddc:	00030218 	.word	0x00030218

000b6de0 <hal_rtc_get_time>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   b6de0:	b508      	push	{r3, lr}
   b6de2:	4b02      	ldr	r3, [pc, #8]	; (b6dec <hal_rtc_get_time+0xc>)
   b6de4:	681b      	ldr	r3, [r3, #0]
   b6de6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   b6de8:	9301      	str	r3, [sp, #4]
   b6dea:	bd08      	pop	{r3, pc}
   b6dec:	00030218 	.word	0x00030218

000b6df0 <hal_i2c_begin>:
DYNALIB_BEGIN(hal_i2c)

DYNALIB_FN(0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b6df0:	b508      	push	{r3, lr}
   b6df2:	4b02      	ldr	r3, [pc, #8]	; (b6dfc <hal_i2c_begin+0xc>)
   b6df4:	681b      	ldr	r3, [r3, #0]
   b6df6:	68db      	ldr	r3, [r3, #12]
   b6df8:	9301      	str	r3, [sp, #4]
   b6dfa:	bd08      	pop	{r3, pc}
   b6dfc:	00030228 	.word	0x00030228

000b6e00 <hal_i2c_begin_transmission>:
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b6e00:	b508      	push	{r3, lr}
   b6e02:	4b02      	ldr	r3, [pc, #8]	; (b6e0c <hal_i2c_begin_transmission+0xc>)
   b6e04:	681b      	ldr	r3, [r3, #0]
   b6e06:	699b      	ldr	r3, [r3, #24]
   b6e08:	9301      	str	r3, [sp, #4]
   b6e0a:	bd08      	pop	{r3, pc}
   b6e0c:	00030228 	.word	0x00030228

000b6e10 <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b6e10:	b508      	push	{r3, lr}
   b6e12:	4b02      	ldr	r3, [pc, #8]	; (b6e1c <hal_i2c_end_transmission+0xc>)
   b6e14:	681b      	ldr	r3, [r3, #0]
   b6e16:	69db      	ldr	r3, [r3, #28]
   b6e18:	9301      	str	r3, [sp, #4]
   b6e1a:	bd08      	pop	{r3, pc}
   b6e1c:	00030228 	.word	0x00030228

000b6e20 <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b6e20:	b508      	push	{r3, lr}
   b6e22:	4b02      	ldr	r3, [pc, #8]	; (b6e2c <hal_i2c_write+0xc>)
   b6e24:	681b      	ldr	r3, [r3, #0]
   b6e26:	6a1b      	ldr	r3, [r3, #32]
   b6e28:	9301      	str	r3, [sp, #4]
   b6e2a:	bd08      	pop	{r3, pc}
   b6e2c:	00030228 	.word	0x00030228

000b6e30 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b6e30:	b508      	push	{r3, lr}
   b6e32:	4b02      	ldr	r3, [pc, #8]	; (b6e3c <hal_i2c_available+0xc>)
   b6e34:	681b      	ldr	r3, [r3, #0]
   b6e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b6e38:	9301      	str	r3, [sp, #4]
   b6e3a:	bd08      	pop	{r3, pc}
   b6e3c:	00030228 	.word	0x00030228

000b6e40 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b6e40:	b508      	push	{r3, lr}
   b6e42:	4b02      	ldr	r3, [pc, #8]	; (b6e4c <hal_i2c_read+0xc>)
   b6e44:	681b      	ldr	r3, [r3, #0]
   b6e46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b6e48:	9301      	str	r3, [sp, #4]
   b6e4a:	bd08      	pop	{r3, pc}
   b6e4c:	00030228 	.word	0x00030228

000b6e50 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b6e50:	b508      	push	{r3, lr}
   b6e52:	4b02      	ldr	r3, [pc, #8]	; (b6e5c <hal_i2c_peek+0xc>)
   b6e54:	681b      	ldr	r3, [r3, #0]
   b6e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6e58:	9301      	str	r3, [sp, #4]
   b6e5a:	bd08      	pop	{r3, pc}
   b6e5c:	00030228 	.word	0x00030228

000b6e60 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b6e60:	b508      	push	{r3, lr}
   b6e62:	4b02      	ldr	r3, [pc, #8]	; (b6e6c <hal_i2c_flush+0xc>)
   b6e64:	681b      	ldr	r3, [r3, #0]
   b6e66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6e68:	9301      	str	r3, [sp, #4]
   b6e6a:	bd08      	pop	{r3, pc}
   b6e6c:	00030228 	.word	0x00030228

000b6e70 <hal_i2c_init>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b6e70:	b508      	push	{r3, lr}
   b6e72:	4b02      	ldr	r3, [pc, #8]	; (b6e7c <hal_i2c_init+0xc>)
   b6e74:	681b      	ldr	r3, [r3, #0]
   b6e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6e78:	9301      	str	r3, [sp, #4]
   b6e7a:	bd08      	pop	{r3, pc}
   b6e7c:	00030228 	.word	0x00030228

000b6e80 <hal_i2c_lock>:
DYNALIB_FN(17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
   b6e80:	b508      	push	{r3, lr}
   b6e82:	4b02      	ldr	r3, [pc, #8]	; (b6e8c <hal_i2c_lock+0xc>)
   b6e84:	681b      	ldr	r3, [r3, #0]
   b6e86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   b6e88:	9301      	str	r3, [sp, #4]
   b6e8a:	bd08      	pop	{r3, pc}
   b6e8c:	00030228 	.word	0x00030228

000b6e90 <hal_i2c_unlock>:
DYNALIB_FN(19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
   b6e90:	b508      	push	{r3, lr}
   b6e92:	4b02      	ldr	r3, [pc, #8]	; (b6e9c <hal_i2c_unlock+0xc>)
   b6e94:	681b      	ldr	r3, [r3, #0]
   b6e96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b6e98:	9301      	str	r3, [sp, #4]
   b6e9a:	bd08      	pop	{r3, pc}
   b6e9c:	00030228 	.word	0x00030228

000b6ea0 <hal_i2c_request_ex>:
DYNALIB_FN(20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   b6ea0:	b508      	push	{r3, lr}
   b6ea2:	4b02      	ldr	r3, [pc, #8]	; (b6eac <hal_i2c_request_ex+0xc>)
   b6ea4:	681b      	ldr	r3, [r3, #0]
   b6ea6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b6ea8:	9301      	str	r3, [sp, #4]
   b6eaa:	bd08      	pop	{r3, pc}
   b6eac:	00030228 	.word	0x00030228

000b6eb0 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b6eb0:	b508      	push	{r3, lr}
   b6eb2:	4b02      	ldr	r3, [pc, #8]	; (b6ebc <inet_inet_ntop+0xc>)
   b6eb4:	681b      	ldr	r3, [r3, #0]
   b6eb6:	695b      	ldr	r3, [r3, #20]
   b6eb8:	9301      	str	r3, [sp, #4]
   b6eba:	bd08      	pop	{r3, pc}
   b6ebc:	00030264 	.word	0x00030264

000b6ec0 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b6ec0:	b508      	push	{r3, lr}
   b6ec2:	4b02      	ldr	r3, [pc, #8]	; (b6ecc <netdb_freeaddrinfo+0xc>)
   b6ec4:	681b      	ldr	r3, [r3, #0]
   b6ec6:	689b      	ldr	r3, [r3, #8]
   b6ec8:	9301      	str	r3, [sp, #4]
   b6eca:	bd08      	pop	{r3, pc}
   b6ecc:	00030268 	.word	0x00030268

000b6ed0 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b6ed0:	b508      	push	{r3, lr}
   b6ed2:	4b02      	ldr	r3, [pc, #8]	; (b6edc <netdb_getaddrinfo+0xc>)
   b6ed4:	681b      	ldr	r3, [r3, #0]
   b6ed6:	68db      	ldr	r3, [r3, #12]
   b6ed8:	9301      	str	r3, [sp, #4]
   b6eda:	bd08      	pop	{r3, pc}
   b6edc:	00030268 	.word	0x00030268

000b6ee0 <hal_usart_end>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
   b6ee0:	b508      	push	{r3, lr}
   b6ee2:	4b02      	ldr	r3, [pc, #8]	; (b6eec <hal_usart_end+0xc>)
   b6ee4:	681b      	ldr	r3, [r3, #0]
   b6ee6:	689b      	ldr	r3, [r3, #8]
   b6ee8:	9301      	str	r3, [sp, #4]
   b6eea:	bd08      	pop	{r3, pc}
   b6eec:	0003023c 	.word	0x0003023c

000b6ef0 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b6ef0:	b508      	push	{r3, lr}
   b6ef2:	4b02      	ldr	r3, [pc, #8]	; (b6efc <hal_usart_write+0xc>)
   b6ef4:	681b      	ldr	r3, [r3, #0]
   b6ef6:	68db      	ldr	r3, [r3, #12]
   b6ef8:	9301      	str	r3, [sp, #4]
   b6efa:	bd08      	pop	{r3, pc}
   b6efc:	0003023c 	.word	0x0003023c

000b6f00 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b6f00:	b508      	push	{r3, lr}
   b6f02:	4b02      	ldr	r3, [pc, #8]	; (b6f0c <hal_usart_available+0xc>)
   b6f04:	681b      	ldr	r3, [r3, #0]
   b6f06:	691b      	ldr	r3, [r3, #16]
   b6f08:	9301      	str	r3, [sp, #4]
   b6f0a:	bd08      	pop	{r3, pc}
   b6f0c:	0003023c 	.word	0x0003023c

000b6f10 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b6f10:	b508      	push	{r3, lr}
   b6f12:	4b02      	ldr	r3, [pc, #8]	; (b6f1c <hal_usart_read+0xc>)
   b6f14:	681b      	ldr	r3, [r3, #0]
   b6f16:	695b      	ldr	r3, [r3, #20]
   b6f18:	9301      	str	r3, [sp, #4]
   b6f1a:	bd08      	pop	{r3, pc}
   b6f1c:	0003023c 	.word	0x0003023c

000b6f20 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b6f20:	b508      	push	{r3, lr}
   b6f22:	4b02      	ldr	r3, [pc, #8]	; (b6f2c <hal_usart_peek+0xc>)
   b6f24:	681b      	ldr	r3, [r3, #0]
   b6f26:	699b      	ldr	r3, [r3, #24]
   b6f28:	9301      	str	r3, [sp, #4]
   b6f2a:	bd08      	pop	{r3, pc}
   b6f2c:	0003023c 	.word	0x0003023c

000b6f30 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b6f30:	b508      	push	{r3, lr}
   b6f32:	4b02      	ldr	r3, [pc, #8]	; (b6f3c <hal_usart_flush+0xc>)
   b6f34:	681b      	ldr	r3, [r3, #0]
   b6f36:	69db      	ldr	r3, [r3, #28]
   b6f38:	9301      	str	r3, [sp, #4]
   b6f3a:	bd08      	pop	{r3, pc}
   b6f3c:	0003023c 	.word	0x0003023c

000b6f40 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b6f40:	b508      	push	{r3, lr}
   b6f42:	4b02      	ldr	r3, [pc, #8]	; (b6f4c <hal_usart_available_data_for_write+0xc>)
   b6f44:	681b      	ldr	r3, [r3, #0]
   b6f46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b6f48:	9301      	str	r3, [sp, #4]
   b6f4a:	bd08      	pop	{r3, pc}
   b6f4c:	0003023c 	.word	0x0003023c

000b6f50 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
   b6f50:	b508      	push	{r3, lr}
   b6f52:	4b02      	ldr	r3, [pc, #8]	; (b6f5c <hal_usart_begin_config+0xc>)
   b6f54:	681b      	ldr	r3, [r3, #0]
   b6f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6f58:	9301      	str	r3, [sp, #4]
   b6f5a:	bd08      	pop	{r3, pc}
   b6f5c:	0003023c 	.word	0x0003023c

000b6f60 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b6f60:	b508      	push	{r3, lr}
   b6f62:	4b02      	ldr	r3, [pc, #8]	; (b6f6c <hal_usart_init_ex+0xc>)
   b6f64:	681b      	ldr	r3, [r3, #0]
   b6f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6f68:	9301      	str	r3, [sp, #4]
   b6f6a:	bd08      	pop	{r3, pc}
   b6f6c:	0003023c 	.word	0x0003023c

000b6f70 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b6f70:	b508      	push	{r3, lr}
   b6f72:	4b02      	ldr	r3, [pc, #8]	; (b6f7c <HAL_USB_USART_Init+0xc>)
   b6f74:	681b      	ldr	r3, [r3, #0]
   b6f76:	681b      	ldr	r3, [r3, #0]
   b6f78:	9301      	str	r3, [sp, #4]
   b6f7a:	bd08      	pop	{r3, pc}
   b6f7c:	0003024c 	.word	0x0003024c

000b6f80 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b6f80:	b508      	push	{r3, lr}
   b6f82:	4b02      	ldr	r3, [pc, #8]	; (b6f8c <HAL_USB_USART_Begin+0xc>)
   b6f84:	681b      	ldr	r3, [r3, #0]
   b6f86:	685b      	ldr	r3, [r3, #4]
   b6f88:	9301      	str	r3, [sp, #4]
   b6f8a:	bd08      	pop	{r3, pc}
   b6f8c:	0003024c 	.word	0x0003024c

000b6f90 <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
   b6f90:	b508      	push	{r3, lr}
   b6f92:	4b02      	ldr	r3, [pc, #8]	; (b6f9c <HAL_USB_USART_End+0xc>)
   b6f94:	681b      	ldr	r3, [r3, #0]
   b6f96:	689b      	ldr	r3, [r3, #8]
   b6f98:	9301      	str	r3, [sp, #4]
   b6f9a:	bd08      	pop	{r3, pc}
   b6f9c:	0003024c 	.word	0x0003024c

000b6fa0 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b6fa0:	b508      	push	{r3, lr}
   b6fa2:	4b02      	ldr	r3, [pc, #8]	; (b6fac <HAL_USB_USART_Available_Data+0xc>)
   b6fa4:	681b      	ldr	r3, [r3, #0]
   b6fa6:	691b      	ldr	r3, [r3, #16]
   b6fa8:	9301      	str	r3, [sp, #4]
   b6faa:	bd08      	pop	{r3, pc}
   b6fac:	0003024c 	.word	0x0003024c

000b6fb0 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b6fb0:	b508      	push	{r3, lr}
   b6fb2:	4b02      	ldr	r3, [pc, #8]	; (b6fbc <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b6fb4:	681b      	ldr	r3, [r3, #0]
   b6fb6:	695b      	ldr	r3, [r3, #20]
   b6fb8:	9301      	str	r3, [sp, #4]
   b6fba:	bd08      	pop	{r3, pc}
   b6fbc:	0003024c 	.word	0x0003024c

000b6fc0 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b6fc0:	b508      	push	{r3, lr}
   b6fc2:	4b02      	ldr	r3, [pc, #8]	; (b6fcc <HAL_USB_USART_Receive_Data+0xc>)
   b6fc4:	681b      	ldr	r3, [r3, #0]
   b6fc6:	699b      	ldr	r3, [r3, #24]
   b6fc8:	9301      	str	r3, [sp, #4]
   b6fca:	bd08      	pop	{r3, pc}
   b6fcc:	0003024c 	.word	0x0003024c

000b6fd0 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b6fd0:	b508      	push	{r3, lr}
   b6fd2:	4b02      	ldr	r3, [pc, #8]	; (b6fdc <HAL_USB_USART_Send_Data+0xc>)
   b6fd4:	681b      	ldr	r3, [r3, #0]
   b6fd6:	69db      	ldr	r3, [r3, #28]
   b6fd8:	9301      	str	r3, [sp, #4]
   b6fda:	bd08      	pop	{r3, pc}
   b6fdc:	0003024c 	.word	0x0003024c

000b6fe0 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b6fe0:	b508      	push	{r3, lr}
   b6fe2:	4b02      	ldr	r3, [pc, #8]	; (b6fec <HAL_USB_USART_Flush_Data+0xc>)
   b6fe4:	681b      	ldr	r3, [r3, #0]
   b6fe6:	6a1b      	ldr	r3, [r3, #32]
   b6fe8:	9301      	str	r3, [sp, #4]
   b6fea:	bd08      	pop	{r3, pc}
   b6fec:	0003024c 	.word	0x0003024c

000b6ff0 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b6ff0:	b508      	push	{r3, lr}
   b6ff2:	4b02      	ldr	r3, [pc, #8]	; (b6ffc <panic_+0xc>)
   b6ff4:	681b      	ldr	r3, [r3, #0]
   b6ff6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b6ff8:	9301      	str	r3, [sp, #4]
   b6ffa:	bd08      	pop	{r3, pc}
   b6ffc:	00030260 	.word	0x00030260

000b7000 <log_message_v>:
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
   b7000:	b508      	push	{r3, lr}
   b7002:	4b02      	ldr	r3, [pc, #8]	; (b700c <log_message_v+0xc>)
   b7004:	681b      	ldr	r3, [r3, #0]
   b7006:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b7008:	9301      	str	r3, [sp, #4]
   b700a:	bd08      	pop	{r3, pc}
   b700c:	00030260 	.word	0x00030260

000b7010 <log_write>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
   b7010:	b508      	push	{r3, lr}
   b7012:	4b02      	ldr	r3, [pc, #8]	; (b701c <log_write+0xc>)
   b7014:	681b      	ldr	r3, [r3, #0]
   b7016:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b7018:	9301      	str	r3, [sp, #4]
   b701a:	bd08      	pop	{r3, pc}
   b701c:	00030260 	.word	0x00030260

000b7020 <log_dump>:
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
   b7020:	b508      	push	{r3, lr}
   b7022:	4b02      	ldr	r3, [pc, #8]	; (b702c <log_dump+0xc>)
   b7024:	681b      	ldr	r3, [r3, #0]
   b7026:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   b7028:	9301      	str	r3, [sp, #4]
   b702a:	bd08      	pop	{r3, pc}
   b702c:	00030260 	.word	0x00030260

000b7030 <log_level_name>:
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
   b7030:	b508      	push	{r3, lr}
   b7032:	4b02      	ldr	r3, [pc, #8]	; (b703c <log_level_name+0xc>)
   b7034:	681b      	ldr	r3, [r3, #0]
   b7036:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   b7038:	9301      	str	r3, [sp, #4]
   b703a:	bd08      	pop	{r3, pc}
   b703c:	00030260 	.word	0x00030260

000b7040 <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
   b7040:	b508      	push	{r3, lr}
   b7042:	4b02      	ldr	r3, [pc, #8]	; (b704c <log_set_callbacks+0xc>)
   b7044:	681b      	ldr	r3, [r3, #0]
   b7046:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   b7048:	9301      	str	r3, [sp, #4]
   b704a:	bd08      	pop	{r3, pc}
   b704c:	00030260 	.word	0x00030260

000b7050 <system_mode>:
#include "system_ble_prov.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   b7050:	b508      	push	{r3, lr}
   b7052:	4b02      	ldr	r3, [pc, #8]	; (b705c <system_mode+0xc>)
   b7054:	681b      	ldr	r3, [r3, #0]
   b7056:	681b      	ldr	r3, [r3, #0]
   b7058:	9301      	str	r3, [sp, #4]
   b705a:	bd08      	pop	{r3, pc}
   b705c:	00030220 	.word	0x00030220

000b7060 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b7060:	b508      	push	{r3, lr}
   b7062:	4b02      	ldr	r3, [pc, #8]	; (b706c <set_system_mode+0xc>)
   b7064:	681b      	ldr	r3, [r3, #0]
   b7066:	685b      	ldr	r3, [r3, #4]
   b7068:	9301      	str	r3, [sp, #4]
   b706a:	bd08      	pop	{r3, pc}
   b706c:	00030220 	.word	0x00030220

000b7070 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b7070:	b508      	push	{r3, lr}
   b7072:	4b02      	ldr	r3, [pc, #8]	; (b707c <system_delay_ms+0xc>)
   b7074:	681b      	ldr	r3, [r3, #0]
   b7076:	695b      	ldr	r3, [r3, #20]
   b7078:	9301      	str	r3, [sp, #4]
   b707a:	bd08      	pop	{r3, pc}
   b707c:	00030220 	.word	0x00030220

000b7080 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   b7080:	b508      	push	{r3, lr}
   b7082:	4b02      	ldr	r3, [pc, #8]	; (b708c <application_thread_current+0xc>)
   b7084:	681b      	ldr	r3, [r3, #0]
   b7086:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b7088:	9301      	str	r3, [sp, #4]
   b708a:	bd08      	pop	{r3, pc}
   b708c:	00030220 	.word	0x00030220

000b7090 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   b7090:	b508      	push	{r3, lr}
   b7092:	4b02      	ldr	r3, [pc, #8]	; (b709c <application_thread_invoke+0xc>)
   b7094:	681b      	ldr	r3, [r3, #0]
   b7096:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b7098:	9301      	str	r3, [sp, #4]
   b709a:	bd08      	pop	{r3, pc}
   b709c:	00030220 	.word	0x00030220

000b70a0 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   b70a0:	b508      	push	{r3, lr}
   b70a2:	4b02      	ldr	r3, [pc, #8]	; (b70ac <system_thread_get_state+0xc>)
   b70a4:	681b      	ldr	r3, [r3, #0]
   b70a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b70a8:	9301      	str	r3, [sp, #4]
   b70aa:	bd08      	pop	{r3, pc}
   b70ac:	00030220 	.word	0x00030220

000b70b0 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b70b0:	b508      	push	{r3, lr}
   b70b2:	4b03      	ldr	r3, [pc, #12]	; (b70c0 <system_ctrl_set_app_request_handler+0x10>)
   b70b4:	681b      	ldr	r3, [r3, #0]
   b70b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b70ba:	9301      	str	r3, [sp, #4]
   b70bc:	bd08      	pop	{r3, pc}
   b70be:	0000      	.short	0x0000
   b70c0:	00030220 	.word	0x00030220

000b70c4 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b70c4:	b508      	push	{r3, lr}
   b70c6:	4b03      	ldr	r3, [pc, #12]	; (b70d4 <system_ctrl_set_result+0x10>)
   b70c8:	681b      	ldr	r3, [r3, #0]
   b70ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b70ce:	9301      	str	r3, [sp, #4]
   b70d0:	bd08      	pop	{r3, pc}
   b70d2:	0000      	.short	0x0000
   b70d4:	00030220 	.word	0x00030220

000b70d8 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, bool(void))
   b70d8:	b508      	push	{r3, lr}
   b70da:	4b02      	ldr	r3, [pc, #8]	; (b70e4 <spark_process+0xc>)
   b70dc:	681b      	ldr	r3, [r3, #0]
   b70de:	689b      	ldr	r3, [r3, #8]
   b70e0:	9301      	str	r3, [sp, #4]
   b70e2:	bd08      	pop	{r3, pc}
   b70e4:	00030244 	.word	0x00030244

000b70e8 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   b70e8:	b508      	push	{r3, lr}
   b70ea:	4b02      	ldr	r3, [pc, #8]	; (b70f4 <spark_cloud_flag_connected+0xc>)
   b70ec:	681b      	ldr	r3, [r3, #0]
   b70ee:	695b      	ldr	r3, [r3, #20]
   b70f0:	9301      	str	r3, [sp, #4]
   b70f2:	bd08      	pop	{r3, pc}
   b70f4:	00030244 	.word	0x00030244

000b70f8 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   b70f8:	b508      	push	{r3, lr}
   b70fa:	4b02      	ldr	r3, [pc, #8]	; (b7104 <spark_send_event+0xc>)
   b70fc:	681b      	ldr	r3, [r3, #0]
   b70fe:	6a1b      	ldr	r3, [r3, #32]
   b7100:	9301      	str	r3, [sp, #4]
   b7102:	bd08      	pop	{r3, pc}
   b7104:	00030244 	.word	0x00030244

000b7108 <spark_sync_time_pending>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   b7108:	b508      	push	{r3, lr}
   b710a:	4b02      	ldr	r3, [pc, #8]	; (b7114 <spark_sync_time_pending+0xc>)
   b710c:	681b      	ldr	r3, [r3, #0]
   b710e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b7110:	9301      	str	r3, [sp, #4]
   b7112:	bd08      	pop	{r3, pc}
   b7114:	00030244 	.word	0x00030244

000b7118 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b7118:	b508      	push	{r3, lr}
   b711a:	4b02      	ldr	r3, [pc, #8]	; (b7124 <spark_set_random_seed_from_cloud_handler+0xc>)
   b711c:	681b      	ldr	r3, [r3, #0]
   b711e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b7120:	9301      	str	r3, [sp, #4]
   b7122:	bd08      	pop	{r3, pc}
   b7124:	00030244 	.word	0x00030244

000b7128 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b7128:	b508      	push	{r3, lr}
   b712a:	4b02      	ldr	r3, [pc, #8]	; (b7134 <network_connect+0xc>)
   b712c:	681b      	ldr	r3, [r3, #0]
   b712e:	685b      	ldr	r3, [r3, #4]
   b7130:	9301      	str	r3, [sp, #4]
   b7132:	bd08      	pop	{r3, pc}
   b7134:	00030240 	.word	0x00030240

000b7138 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b7138:	b508      	push	{r3, lr}
   b713a:	4b02      	ldr	r3, [pc, #8]	; (b7144 <network_connecting+0xc>)
   b713c:	681b      	ldr	r3, [r3, #0]
   b713e:	689b      	ldr	r3, [r3, #8]
   b7140:	9301      	str	r3, [sp, #4]
   b7142:	bd08      	pop	{r3, pc}
   b7144:	00030240 	.word	0x00030240

000b7148 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b7148:	b508      	push	{r3, lr}
   b714a:	4b02      	ldr	r3, [pc, #8]	; (b7154 <network_disconnect+0xc>)
   b714c:	681b      	ldr	r3, [r3, #0]
   b714e:	68db      	ldr	r3, [r3, #12]
   b7150:	9301      	str	r3, [sp, #4]
   b7152:	bd08      	pop	{r3, pc}
   b7154:	00030240 	.word	0x00030240

000b7158 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b7158:	b508      	push	{r3, lr}
   b715a:	4b02      	ldr	r3, [pc, #8]	; (b7164 <network_ready+0xc>)
   b715c:	681b      	ldr	r3, [r3, #0]
   b715e:	691b      	ldr	r3, [r3, #16]
   b7160:	9301      	str	r3, [sp, #4]
   b7162:	bd08      	pop	{r3, pc}
   b7164:	00030240 	.word	0x00030240

000b7168 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b7168:	b508      	push	{r3, lr}
   b716a:	4b02      	ldr	r3, [pc, #8]	; (b7174 <network_on+0xc>)
   b716c:	681b      	ldr	r3, [r3, #0]
   b716e:	695b      	ldr	r3, [r3, #20]
   b7170:	9301      	str	r3, [sp, #4]
   b7172:	bd08      	pop	{r3, pc}
   b7174:	00030240 	.word	0x00030240

000b7178 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b7178:	b508      	push	{r3, lr}
   b717a:	4b02      	ldr	r3, [pc, #8]	; (b7184 <network_off+0xc>)
   b717c:	681b      	ldr	r3, [r3, #0]
   b717e:	699b      	ldr	r3, [r3, #24]
   b7180:	9301      	str	r3, [sp, #4]
   b7182:	bd08      	pop	{r3, pc}
   b7184:	00030240 	.word	0x00030240

000b7188 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b7188:	b508      	push	{r3, lr}
   b718a:	4b02      	ldr	r3, [pc, #8]	; (b7194 <network_listen+0xc>)
   b718c:	681b      	ldr	r3, [r3, #0]
   b718e:	69db      	ldr	r3, [r3, #28]
   b7190:	9301      	str	r3, [sp, #4]
   b7192:	bd08      	pop	{r3, pc}
   b7194:	00030240 	.word	0x00030240

000b7198 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b7198:	b508      	push	{r3, lr}
   b719a:	4b02      	ldr	r3, [pc, #8]	; (b71a4 <network_listening+0xc>)
   b719c:	681b      	ldr	r3, [r3, #0]
   b719e:	6a1b      	ldr	r3, [r3, #32]
   b71a0:	9301      	str	r3, [sp, #4]
   b71a2:	bd08      	pop	{r3, pc}
   b71a4:	00030240 	.word	0x00030240

000b71a8 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b71a8:	b508      	push	{r3, lr}
   b71aa:	4b02      	ldr	r3, [pc, #8]	; (b71b4 <network_set_listen_timeout+0xc>)
   b71ac:	681b      	ldr	r3, [r3, #0]
   b71ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b71b0:	9301      	str	r3, [sp, #4]
   b71b2:	bd08      	pop	{r3, pc}
   b71b4:	00030240 	.word	0x00030240

000b71b8 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b71b8:	b508      	push	{r3, lr}
   b71ba:	4b02      	ldr	r3, [pc, #8]	; (b71c4 <network_get_listen_timeout+0xc>)
   b71bc:	681b      	ldr	r3, [r3, #0]
   b71be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b71c0:	9301      	str	r3, [sp, #4]
   b71c2:	bd08      	pop	{r3, pc}
   b71c4:	00030240 	.word	0x00030240

000b71c8 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b71c8:	b508      	push	{r3, lr}
   b71ca:	4b02      	ldr	r3, [pc, #8]	; (b71d4 <network_is_on+0xc>)
   b71cc:	681b      	ldr	r3, [r3, #0]
   b71ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b71d0:	9301      	str	r3, [sp, #4]
   b71d2:	bd08      	pop	{r3, pc}
   b71d4:	00030240 	.word	0x00030240

000b71d8 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b71d8:	b508      	push	{r3, lr}
   b71da:	4b02      	ldr	r3, [pc, #8]	; (b71e4 <network_is_off+0xc>)
   b71dc:	681b      	ldr	r3, [r3, #0]
   b71de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b71e0:	9301      	str	r3, [sp, #4]
   b71e2:	bd08      	pop	{r3, pc}
   b71e4:	00030240 	.word	0x00030240

000b71e8 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b71e8:	b508      	push	{r3, lr}
   b71ea:	4b02      	ldr	r3, [pc, #8]	; (b71f4 <malloc+0xc>)
   b71ec:	681b      	ldr	r3, [r3, #0]
   b71ee:	681b      	ldr	r3, [r3, #0]
   b71f0:	9301      	str	r3, [sp, #4]
   b71f2:	bd08      	pop	{r3, pc}
   b71f4:	0003021c 	.word	0x0003021c

000b71f8 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b71f8:	b508      	push	{r3, lr}
   b71fa:	4b02      	ldr	r3, [pc, #8]	; (b7204 <free+0xc>)
   b71fc:	681b      	ldr	r3, [r3, #0]
   b71fe:	685b      	ldr	r3, [r3, #4]
   b7200:	9301      	str	r3, [sp, #4]
   b7202:	bd08      	pop	{r3, pc}
   b7204:	0003021c 	.word	0x0003021c

000b7208 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b7208:	b508      	push	{r3, lr}
   b720a:	4b02      	ldr	r3, [pc, #8]	; (b7214 <realloc+0xc>)
   b720c:	681b      	ldr	r3, [r3, #0]
   b720e:	689b      	ldr	r3, [r3, #8]
   b7210:	9301      	str	r3, [sp, #4]
   b7212:	bd08      	pop	{r3, pc}
   b7214:	0003021c 	.word	0x0003021c

000b7218 <sscanf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
   b7218:	b508      	push	{r3, lr}
   b721a:	4b02      	ldr	r3, [pc, #8]	; (b7224 <sscanf+0xc>)
   b721c:	681b      	ldr	r3, [r3, #0]
   b721e:	695b      	ldr	r3, [r3, #20]
   b7220:	9301      	str	r3, [sp, #4]
   b7222:	bd08      	pop	{r3, pc}
   b7224:	0003021c 	.word	0x0003021c

000b7228 <snprintf>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   b7228:	b508      	push	{r3, lr}
   b722a:	4b02      	ldr	r3, [pc, #8]	; (b7234 <snprintf+0xc>)
   b722c:	681b      	ldr	r3, [r3, #0]
   b722e:	69db      	ldr	r3, [r3, #28]
   b7230:	9301      	str	r3, [sp, #4]
   b7232:	bd08      	pop	{r3, pc}
   b7234:	0003021c 	.word	0x0003021c

000b7238 <sniprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
   b7238:	b508      	push	{r3, lr}
   b723a:	4b02      	ldr	r3, [pc, #8]	; (b7244 <sniprintf+0xc>)
   b723c:	681b      	ldr	r3, [r3, #0]
   b723e:	6a1b      	ldr	r3, [r3, #32]
   b7240:	9301      	str	r3, [sp, #4]
   b7242:	bd08      	pop	{r3, pc}
   b7244:	0003021c 	.word	0x0003021c

000b7248 <vsnprintf>:
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b7248:	b508      	push	{r3, lr}
   b724a:	4b02      	ldr	r3, [pc, #8]	; (b7254 <vsnprintf+0xc>)
   b724c:	681b      	ldr	r3, [r3, #0]
   b724e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b7250:	9301      	str	r3, [sp, #4]
   b7252:	bd08      	pop	{r3, pc}
   b7254:	0003021c 	.word	0x0003021c

000b7258 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b7258:	b508      	push	{r3, lr}
   b725a:	4b02      	ldr	r3, [pc, #8]	; (b7264 <abort+0xc>)
   b725c:	681b      	ldr	r3, [r3, #0]
   b725e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b7260:	9301      	str	r3, [sp, #4]
   b7262:	bd08      	pop	{r3, pc}
   b7264:	0003021c 	.word	0x0003021c

000b7268 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   b7268:	b508      	push	{r3, lr}
   b726a:	4b02      	ldr	r3, [pc, #8]	; (b7274 <_malloc_r+0xc>)
   b726c:	681b      	ldr	r3, [r3, #0]
   b726e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b7270:	9301      	str	r3, [sp, #4]
   b7272:	bd08      	pop	{r3, pc}
   b7274:	0003021c 	.word	0x0003021c

000b7278 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b7278:	b508      	push	{r3, lr}
   b727a:	4b02      	ldr	r3, [pc, #8]	; (b7284 <__errno+0xc>)
   b727c:	681b      	ldr	r3, [r3, #0]
   b727e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b7280:	9301      	str	r3, [sp, #4]
   b7282:	bd08      	pop	{r3, pc}
   b7284:	0003021c 	.word	0x0003021c

000b7288 <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b7288:	b508      	push	{r3, lr}
   b728a:	4b02      	ldr	r3, [pc, #8]	; (b7294 <__assert_func+0xc>)
   b728c:	681b      	ldr	r3, [r3, #0]
   b728e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b7290:	9301      	str	r3, [sp, #4]
   b7292:	bd08      	pop	{r3, pc}
   b7294:	0003021c 	.word	0x0003021c

000b7298 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b7298:	b508      	push	{r3, lr}
   b729a:	4b02      	ldr	r3, [pc, #8]	; (b72a4 <newlib_impure_ptr_callback+0xc>)
   b729c:	681b      	ldr	r3, [r3, #0]
   b729e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b72a0:	9301      	str	r3, [sp, #4]
   b72a2:	bd08      	pop	{r3, pc}
   b72a4:	0003021c 	.word	0x0003021c

000b72a8 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b72a8:	2100      	movs	r1, #0
   b72aa:	f7ff bee1 	b.w	b7070 <system_delay_ms>

000b72ae <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   b72ae:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   b72b0:	6883      	ldr	r3, [r0, #8]
   b72b2:	4604      	mov	r4, r0
   b72b4:	b90b      	cbnz	r3, b72ba <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   b72b6:	f002 fa55 	bl	b9764 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b72ba:	68c3      	ldr	r3, [r0, #12]
   b72bc:	4798      	blx	r3
      if (_M_manager)
   b72be:	68a3      	ldr	r3, [r4, #8]
   b72c0:	b11b      	cbz	r3, b72ca <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b72c2:	2203      	movs	r2, #3
   b72c4:	4621      	mov	r1, r4
   b72c6:	4620      	mov	r0, r4
   b72c8:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   b72ca:	4620      	mov	r0, r4
   b72cc:	2110      	movs	r1, #16
}
   b72ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   b72d2:	f7fc bee2 	b.w	b409a <_ZdlPvj>

000b72d6 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   b72d6:	b510      	push	{r4, lr}
      if (_M_manager)
   b72d8:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b72da:	4604      	mov	r4, r0
      if (_M_manager)
   b72dc:	b113      	cbz	r3, b72e4 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b72de:	2203      	movs	r2, #3
   b72e0:	4601      	mov	r1, r0
   b72e2:	4798      	blx	r3
    }
   b72e4:	4620      	mov	r0, r4
   b72e6:	bd10      	pop	{r4, pc}

000b72e8 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    {
   b72e8:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   b72ea:	6843      	ldr	r3, [r0, #4]
   b72ec:	3b01      	subs	r3, #1
    {
   b72ee:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   b72f0:	6043      	str	r3, [r0, #4]
   b72f2:	b963      	cbnz	r3, b730e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
          _M_dispose();
   b72f4:	6803      	ldr	r3, [r0, #0]
   b72f6:	689b      	ldr	r3, [r3, #8]
   b72f8:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b72fa:	68a3      	ldr	r3, [r4, #8]
   b72fc:	3b01      	subs	r3, #1
   b72fe:	60a3      	str	r3, [r4, #8]
   b7300:	b92b      	cbnz	r3, b730e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   b7302:	6823      	ldr	r3, [r4, #0]
   b7304:	4620      	mov	r0, r4
   b7306:	68db      	ldr	r3, [r3, #12]
    }
   b7308:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   b730c:	4718      	bx	r3
    }
   b730e:	bd10      	pop	{r4, pc}

000b7310 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   b7310:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b7312:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b7316:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b7318:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
   b731c:	42ae      	cmp	r6, r5
   b731e:	d004      	beq.n	b732a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
   b7320:	4628      	mov	r0, r5
   b7322:	f001 fedb 	bl	b90dc <_ZN6StringD1Ev>
        for (; p != end; ++p) {
   b7326:	3510      	adds	r5, #16
   b7328:	e7f8      	b.n	b731c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b732a:	6820      	ldr	r0, [r4, #0]
   b732c:	f7ff ff64 	bl	b71f8 <free>
    AllocatorT::free(data_);
}
   b7330:	4620      	mov	r0, r4
   b7332:	bd70      	pop	{r4, r5, r6, pc}

000b7334 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
   b7334:	b513      	push	{r0, r1, r4, lr}
   b7336:	460b      	mov	r3, r1
   b7338:	4602      	mov	r2, r0
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b733a:	e9d0 0100 	ldrd	r0, r1, [r0]
   b733e:	466c      	mov	r4, sp
   b7340:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b7344:	e893 0003 	ldmia.w	r3, {r0, r1}
   b7348:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b734c:	e894 0003 	ldmia.w	r4, {r0, r1}
   b7350:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   b7354:	b002      	add	sp, #8
   b7356:	bd10      	pop	{r4, pc}

000b7358 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b7358:	4802      	ldr	r0, [pc, #8]	; (b7364 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b735a:	2300      	movs	r3, #0
   b735c:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b735e:	f7ff bcff 	b.w	b6d60 <os_mutex_recursive_create>
   b7362:	bf00      	nop
   b7364:	2003e668 	.word	0x2003e668

000b7368 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   b7368:	2200      	movs	r2, #0
   b736a:	6840      	ldr	r0, [r0, #4]
   b736c:	4611      	mov	r1, r2
   b736e:	f7ff bef3 	b.w	b7158 <network_ready>

000b7372 <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   b7372:	2200      	movs	r2, #0
   b7374:	6840      	ldr	r0, [r0, #4]
   b7376:	4611      	mov	r1, r2
   b7378:	f7ff bf0e 	b.w	b7198 <network_listening>

000b737c <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b737c:	2200      	movs	r2, #0
   b737e:	6840      	ldr	r0, [r0, #4]
   b7380:	4611      	mov	r1, r2
   b7382:	f7ff bf19 	b.w	b71b8 <network_get_listen_timeout>

000b7386 <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b7386:	6840      	ldr	r0, [r0, #4]
   b7388:	2200      	movs	r2, #0
   b738a:	f7ff bf0d 	b.w	b71a8 <network_set_listen_timeout>

000b738e <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b738e:	6840      	ldr	r0, [r0, #4]
   b7390:	2200      	movs	r2, #0
   b7392:	f081 0101 	eor.w	r1, r1, #1
   b7396:	f7ff bef7 	b.w	b7188 <network_listen>

000b739a <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b739a:	2300      	movs	r3, #0
   b739c:	6840      	ldr	r0, [r0, #4]
   b739e:	461a      	mov	r2, r3
   b73a0:	4619      	mov	r1, r3
   b73a2:	f7ff bee9 	b.w	b7178 <network_off>

000b73a6 <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b73a6:	2300      	movs	r3, #0
   b73a8:	6840      	ldr	r0, [r0, #4]
   b73aa:	461a      	mov	r2, r3
   b73ac:	4619      	mov	r1, r3
   b73ae:	f7ff bedb 	b.w	b7168 <network_on>

000b73b2 <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b73b2:	2200      	movs	r2, #0
   b73b4:	6840      	ldr	r0, [r0, #4]
   b73b6:	4611      	mov	r1, r2
   b73b8:	f7ff bebe 	b.w	b7138 <network_connecting>

000b73bc <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b73bc:	6840      	ldr	r0, [r0, #4]
   b73be:	2200      	movs	r2, #0
   b73c0:	2102      	movs	r1, #2
   b73c2:	f7ff bec1 	b.w	b7148 <network_disconnect>

000b73c6 <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b73c6:	2300      	movs	r3, #0
   b73c8:	6840      	ldr	r0, [r0, #4]
   b73ca:	461a      	mov	r2, r3
   b73cc:	f7ff beac 	b.w	b7128 <network_connect>

000b73d0 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   b73d0:	4b08      	ldr	r3, [pc, #32]	; (b73f4 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   b73d2:	b510      	push	{r4, lr}
   b73d4:	2428      	movs	r4, #40	; 0x28
   b73d6:	4622      	mov	r2, r4
   b73d8:	4618      	mov	r0, r3
   b73da:	2100      	movs	r1, #0
   b73dc:	f002 fbb8 	bl	b9b50 <memset>
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b73e0:	4b05      	ldr	r3, [pc, #20]	; (b73f8 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   b73e2:	8004      	strh	r4, [r0, #0]
        cid = -1;
   b73e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b73e8:	6042      	str	r2, [r0, #4]
   b73ea:	2204      	movs	r2, #4
   b73ec:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   b73ee:	4a03      	ldr	r2, [pc, #12]	; (b73fc <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   b73f0:	601a      	str	r2, [r3, #0]
   b73f2:	bd10      	pop	{r4, pc}
   b73f4:	2003e674 	.word	0x2003e674
   b73f8:	2003e66c 	.word	0x2003e66c
   b73fc:	000baa9c 	.word	0x000baa9c

000b7400 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b7400:	4770      	bx	lr

000b7402 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   b7402:	2000      	movs	r0, #0
   b7404:	4770      	bx	lr

000b7406 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b7406:	b510      	push	{r4, lr}
   b7408:	2110      	movs	r1, #16
   b740a:	4604      	mov	r4, r0
   b740c:	f7fc fe45 	bl	b409a <_ZdlPvj>
   b7410:	4620      	mov	r0, r4
   b7412:	bd10      	pop	{r4, pc}

000b7414 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   b7414:	b508      	push	{r3, lr}
      { delete this; }
   b7416:	f7ff fff6 	bl	b7406 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   b741a:	bd08      	pop	{r3, pc}

000b741c <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   b741c:	b530      	push	{r4, r5, lr}
        type_(type) {
   b741e:	2200      	movs	r2, #0
   b7420:	f64f 749c 	movw	r4, #65436	; 0xff9c
   b7424:	6002      	str	r2, [r0, #0]
   b7426:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   b7428:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   b742a:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   b742c:	680c      	ldr	r4, [r1, #0]
   b742e:	8085      	strh	r5, [r0, #4]
   b7430:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b7432:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   b7434:	bd30      	pop	{r4, r5, pc}

000b7436 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   b7436:	b510      	push	{r4, lr}
   b7438:	4604      	mov	r4, r0
    free((void*)msg_);
   b743a:	6800      	ldr	r0, [r0, #0]
   b743c:	f7ff fedc 	bl	b71f8 <free>
}
   b7440:	4620      	mov	r0, r4
   b7442:	bd10      	pop	{r4, pc}

000b7444 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b7444:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   b7446:	68c4      	ldr	r4, [r0, #12]
   b7448:	b1f4      	cbz	r4, b7488 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   b744a:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   b744c:	2b02      	cmp	r3, #2
   b744e:	d103      	bne.n	b7458 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   b7450:	f104 000c 	add.w	r0, r4, #12
   b7454:	f7ff ffef 	bl	b7436 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   b7458:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   b745a:	b135      	cbz	r5, b746a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   b745c:	4628      	mov	r0, r5
   b745e:	f7ff ff3a 	bl	b72d6 <_ZNSt14_Function_baseD1Ev>
   b7462:	2110      	movs	r1, #16
   b7464:	4628      	mov	r0, r5
   b7466:	f7fc fe18 	bl	b409a <_ZdlPvj>
   b746a:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   b746c:	b135      	cbz	r5, b747c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   b746e:	4628      	mov	r0, r5
   b7470:	f7ff ff31 	bl	b72d6 <_ZNSt14_Function_baseD1Ev>
   b7474:	2110      	movs	r1, #16
   b7476:	4628      	mov	r0, r5
   b7478:	f7fc fe0f 	bl	b409a <_ZdlPvj>
   b747c:	4620      	mov	r0, r4
   b747e:	2114      	movs	r1, #20
   b7480:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b7484:	f7fc be09 	b.w	b409a <_ZdlPvj>
   b7488:	bd38      	pop	{r3, r4, r5, pc}

000b748a <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b748a:	680b      	ldr	r3, [r1, #0]
   b748c:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   b748e:	684b      	ldr	r3, [r1, #4]
   b7490:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   b7492:	b113      	cbz	r3, b749a <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_+0x10>
    { ++_M_use_count; }
   b7494:	685a      	ldr	r2, [r3, #4]
   b7496:	3201      	adds	r2, #1
   b7498:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b749a:	4770      	bx	lr

000b749c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   b749c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b749e:	4604      	mov	r4, r0
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b74a0:	4668      	mov	r0, sp
   b74a2:	460d      	mov	r5, r1
   b74a4:	f7ff fff1 	bl	b748a <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   b74a8:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b74aa:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b74ac:	6023      	str	r3, [r4, #0]
	_M_pi = __tmp;
   b74ae:	6062      	str	r2, [r4, #4]
	__r._M_pi = _M_pi;
   b74b0:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   b74b2:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   b74b4:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   b74b6:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   b74b8:	f7fc fed2 	bl	b4260 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   b74bc:	b135      	cbz	r5, b74cc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv+0x30>
   b74be:	1d28      	adds	r0, r5, #4
   b74c0:	f7fc fece 	bl	b4260 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b74c4:	2108      	movs	r1, #8
   b74c6:	4628      	mov	r0, r5
   b74c8:	f7fc fde7 	bl	b409a <_ZdlPvj>
        return p;
    }
   b74cc:	4620      	mov	r0, r4
   b74ce:	b003      	add	sp, #12
   b74d0:	bd30      	pop	{r4, r5, pc}

000b74d2 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   b74d2:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b74d4:	b510      	push	{r4, lr}
      if (_M_empty())
   b74d6:	b90a      	cbnz	r2, b74dc <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   b74d8:	f002 f944 	bl	b9764 <_ZSt25__throw_bad_function_callv>
    }
   b74dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b74e0:	68c3      	ldr	r3, [r0, #12]
   b74e2:	4718      	bx	r3

000b74e4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b74e4:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b74e6:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b74e8:	f100 0110 	add.w	r1, r0, #16
   b74ec:	f7ff fff1 	bl	b74d2 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   b74f0:	bd08      	pop	{r3, pc}

000b74f2 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   b74f2:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b74f4:	b510      	push	{r4, lr}
      if (_M_empty())
   b74f6:	b90a      	cbnz	r2, b74fc <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   b74f8:	f002 f934 	bl	b9764 <_ZSt25__throw_bad_function_callv>
    }
   b74fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b7500:	68c3      	ldr	r3, [r0, #12]
   b7502:	4718      	bx	r3

000b7504 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b7504:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b7506:	6800      	ldr	r0, [r0, #0]
   b7508:	f100 0110 	add.w	r1, r0, #16
   b750c:	f7ff fff1 	bl	b74f2 <_ZNKSt8functionIFvRKbEEclES1_>
      }
   b7510:	bd08      	pop	{r3, pc}
	...

000b7514 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   b7514:	b538      	push	{r3, r4, r5, lr}
   b7516:	2300      	movs	r3, #0
   b7518:	4604      	mov	r4, r0
   b751a:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b751c:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   b751e:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b7520:	f7fc fdb7 	bl	b4092 <_Znwj>
   b7524:	b128      	cbz	r0, b7532 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   b7526:	2301      	movs	r3, #1
   b7528:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   b752c:	4b02      	ldr	r3, [pc, #8]	; (b7538 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   b752e:	6003      	str	r3, [r0, #0]
   b7530:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b7532:	6020      	str	r0, [r4, #0]
	}
   b7534:	4620      	mov	r0, r4
   b7536:	bd38      	pop	{r3, r4, r5, pc}
   b7538:	000baad8 	.word	0x000baad8

000b753c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   b753c:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b753e:	2300      	movs	r3, #0
   b7540:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b7542:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b7544:	4604      	mov	r4, r0
   b7546:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b7548:	b12b      	cbz	r3, b7556 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b754a:	2202      	movs	r2, #2
   b754c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b754e:	68eb      	ldr	r3, [r5, #12]
   b7550:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b7552:	68ab      	ldr	r3, [r5, #8]
   b7554:	60a3      	str	r3, [r4, #8]
    }
   b7556:	4620      	mov	r0, r4
   b7558:	bd38      	pop	{r3, r4, r5, pc}
	...

000b755c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   b755c:	b5f0      	push	{r4, r5, r6, r7, lr}
   b755e:	b089      	sub	sp, #36	; 0x24
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b7560:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   b7562:	4668      	mov	r0, sp
   b7564:	f7ff ff5a 	bl	b741c <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b7568:	f04f 0302 	mov.w	r3, #2
   b756c:	e8d4 2f4f 	ldrexb	r2, [r4]
   b7570:	2a00      	cmp	r2, #0
   b7572:	d103      	bne.n	b757c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   b7574:	e8c4 3f41 	strexb	r1, r3, [r4]
   b7578:	2900      	cmp	r1, #0
   b757a:	d1f7      	bne.n	b756c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   b757c:	d125      	bne.n	b75ca <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   b757e:	f104 050c 	add.w	r5, r4, #12
   b7582:	4669      	mov	r1, sp
   b7584:	4628      	mov	r0, r5
   b7586:	f7ff ff49 	bl	b741c <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   b758a:	f3bf 8f5b 	dmb	ish
   b758e:	2301      	movs	r3, #1
   b7590:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b7592:	2000      	movs	r0, #0
   b7594:	f104 0308 	add.w	r3, r4, #8
   b7598:	f3bf 8f5b 	dmb	ish
   b759c:	e853 6f00 	ldrex	r6, [r3]
   b75a0:	e843 0200 	strex	r2, r0, [r3]
   b75a4:	2a00      	cmp	r2, #0
   b75a6:	d1f9      	bne.n	b759c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   b75a8:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b75ac:	b16e      	cbz	r6, b75ca <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   b75ae:	f7ff fd67 	bl	b7080 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b75b2:	b178      	cbz	r0, b75d4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b75b4:	4629      	mov	r1, r5
   b75b6:	4630      	mov	r0, r6
   b75b8:	f7ff ff8b 	bl	b74d2 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   b75bc:	4630      	mov	r0, r6
   b75be:	f7ff fe8a 	bl	b72d6 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b75c2:	2110      	movs	r1, #16
   b75c4:	4630      	mov	r0, r6
   b75c6:	f7fc fd68 	bl	b409a <_ZdlPvj>
        p_->setError(std::move(error));
   b75ca:	4668      	mov	r0, sp
   b75cc:	f7ff ff33 	bl	b7436 <_ZN8particle5ErrorD1Ev>
    }
   b75d0:	b009      	add	sp, #36	; 0x24
   b75d2:	bdf0      	pop	{r4, r5, r6, r7, pc}

     public:
      template<typename... _Args>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b75d4:	4631      	mov	r1, r6
   b75d6:	a802      	add	r0, sp, #8
   b75d8:	f7ff ffb0 	bl	b753c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b75dc:	68e0      	ldr	r0, [r4, #12]
   b75de:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b75e2:	b108      	cbz	r0, b75e8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   b75e4:	f002 fb52 	bl	b9c8c <strdup>
        type_(type) {
   b75e8:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b75ea:	2010      	movs	r0, #16
   b75ec:	f8ad 501c 	strh.w	r5, [sp, #28]
   b75f0:	f7fc fd4f 	bl	b4092 <_Znwj>
   b75f4:	4605      	mov	r5, r0
   b75f6:	b1e8      	cbz	r0, b7634 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   b75f8:	2700      	movs	r7, #0
   b75fa:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b75fc:	2018      	movs	r0, #24
   b75fe:	f7fc fd48 	bl	b4092 <_Znwj>
   b7602:	4604      	mov	r4, r0
   b7604:	b188      	cbz	r0, b762a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   b7606:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   b7608:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b760a:	a802      	add	r0, sp, #8
   b760c:	f7ff fe92 	bl	b7334 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b7610:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   b7612:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b7614:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b7616:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b7618:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b761a:	a906      	add	r1, sp, #24
   b761c:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b761e:	60e3      	str	r3, [r4, #12]
   b7620:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   b7624:	9205      	str	r2, [sp, #20]
   b7626:	f7ff fef9 	bl	b741c <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   b762a:	4b08      	ldr	r3, [pc, #32]	; (b764c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   b762c:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b762e:	4b08      	ldr	r3, [pc, #32]	; (b7650 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b7630:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b7632:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   b7634:	a806      	add	r0, sp, #24
   b7636:	f7ff fefe 	bl	b7436 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b763a:	a802      	add	r0, sp, #8
   b763c:	f7ff fe4b 	bl	b72d6 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b7640:	2200      	movs	r2, #0
   b7642:	4629      	mov	r1, r5
   b7644:	4803      	ldr	r0, [pc, #12]	; (b7654 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   b7646:	f7ff fd23 	bl	b7090 <application_thread_invoke>
   b764a:	e7b7      	b.n	b75bc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   b764c:	000b74e5 	.word	0x000b74e5
   b7650:	000b7769 	.word	0x000b7769
   b7654:	000b72af 	.word	0x000b72af

000b7658 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   b7658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b765c:	b08b      	sub	sp, #44	; 0x2c
   b765e:	4605      	mov	r5, r0
   b7660:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   b7664:	460f      	mov	r7, r1
   b7666:	4690      	mov	r8, r2
   b7668:	4699      	mov	r9, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   b766a:	f7ff fd3d 	bl	b70e8 <spark_cloud_flag_connected>
   b766e:	ae07      	add	r6, sp, #28
    if (!connected()) {
   b7670:	4683      	mov	fp, r0
   b7672:	bb38      	cbnz	r0, b76c4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   b7674:	f64f 732e 	movw	r3, #65326	; 0xff2e
   b7678:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   b767a:	a905      	add	r1, sp, #20
   b767c:	4630      	mov	r0, r6
   b767e:	f8ad 3018 	strh.w	r3, [sp, #24]
   b7682:	f7ff fecb 	bl	b741c <_ZN8particle5ErrorC1EOS0_>
   b7686:	2014      	movs	r0, #20
   b7688:	f7fc fd03 	bl	b4092 <_Znwj>
   b768c:	4604      	mov	r4, r0
   b768e:	b148      	cbz	r0, b76a4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   b7690:	2302      	movs	r3, #2
   b7692:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b7694:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   b7696:	e9c0 bb01 	strd	fp, fp, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b769a:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   b769c:	4631      	mov	r1, r6
   b769e:	300c      	adds	r0, #12
   b76a0:	f7ff febc 	bl	b741c <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b76a4:	4628      	mov	r0, r5
	: __shared_count(__p)
   b76a6:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b76a8:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   b76ac:	f7ff ff32 	bl	b7514 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   b76b0:	4630      	mov	r0, r6
   b76b2:	f7ff fec0 	bl	b7436 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   b76b6:	a805      	add	r0, sp, #20
   b76b8:	f7ff febd 	bl	b7436 <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   b76bc:	4628      	mov	r0, r5
   b76be:	b00b      	add	sp, #44	; 0x2c
   b76c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d.size = sizeof(spark_send_event_data);
   b76c4:	230c      	movs	r3, #12
    spark_send_event_data d = {};
   b76c6:	2400      	movs	r4, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   b76c8:	2014      	movs	r0, #20
   b76ca:	e9cd 4408 	strd	r4, r4, [sp, #32]
    d.size = sizeof(spark_send_event_data);
   b76ce:	9307      	str	r3, [sp, #28]
   b76d0:	f7fc fcdf 	bl	b4092 <_Znwj>
   b76d4:	4601      	mov	r1, r0
   b76d6:	b118      	cbz	r0, b76e0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x88>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   b76d8:	e9c0 4401 	strd	r4, r4, [r0, #4]
   b76dc:	7004      	strb	r4, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b76de:	7044      	strb	r4, [r0, #1]
   b76e0:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b76e2:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   b76e4:	f7ff ff16 	bl	b7514 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   b76e8:	4b1e      	ldr	r3, [pc, #120]	; (b7764 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x10c>)
   b76ea:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   b76ec:	2008      	movs	r0, #8
   b76ee:	f7fc fcd0 	bl	b4092 <_Znwj>
   b76f2:	4604      	mov	r4, r0
   b76f4:	b110      	cbz	r0, b76fc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa4>
   b76f6:	a903      	add	r1, sp, #12
   b76f8:	f7ff fec7 	bl	b748a <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   b76fc:	9600      	str	r6, [sp, #0]
   b76fe:	fa5f f38a 	uxtb.w	r3, sl
   b7702:	464a      	mov	r2, r9
   b7704:	4641      	mov	r1, r8
   b7706:	4638      	mov	r0, r7
    d.handler_data = p.dataPtr();
   b7708:	9409      	str	r4, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   b770a:	f7ff fcf5 	bl	b70f8 <spark_send_event>
   b770e:	b9b8      	cbnz	r0, b7740 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
	return __atomic_load_n(&_M_i, int(__m));
   b7710:	9b03      	ldr	r3, [sp, #12]
   b7712:	785b      	ldrb	r3, [r3, #1]
   b7714:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   b7718:	b993      	cbnz	r3, b7740 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   b771a:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   b771e:	a905      	add	r1, sp, #20
   b7720:	a803      	add	r0, sp, #12
   b7722:	9205      	str	r2, [sp, #20]
   b7724:	f8ad 3018 	strh.w	r3, [sp, #24]
   b7728:	f7ff ff18 	bl	b755c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b772c:	a805      	add	r0, sp, #20
   b772e:	f7ff fe82 	bl	b7436 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   b7732:	a805      	add	r0, sp, #20
   b7734:	9909      	ldr	r1, [sp, #36]	; 0x24
   b7736:	f7ff feb1 	bl	b749c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   b773a:	a806      	add	r0, sp, #24
   b773c:	f7fc fd90 	bl	b4260 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b7740:	a903      	add	r1, sp, #12
   b7742:	a805      	add	r0, sp, #20
   b7744:	f7ff fea1 	bl	b748a <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   b7748:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b774a:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b774c:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   b774e:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   b7750:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   b7752:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   b7754:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   b7756:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   b7758:	f7fc fd82 	bl	b4260 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b775c:	a804      	add	r0, sp, #16
   b775e:	f7fc fd7f 	bl	b4260 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   b7762:	e7ab      	b.n	b76bc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   b7764:	000b77e5 	.word	0x000b77e5

000b7768 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	switch (__op)
   b7768:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b776a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b776c:	4605      	mov	r5, r0
	switch (__op)
   b776e:	d103      	bne.n	b7778 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b7770:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b7772:	6003      	str	r3, [r0, #0]
      }
   b7774:	2000      	movs	r0, #0
   b7776:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  switch (__op)
   b7778:	2a02      	cmp	r2, #2
   b777a:	d010      	beq.n	b779e <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   b777c:	2a03      	cmp	r2, #3
   b777e:	d1f9      	bne.n	b7774 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b7780:	6804      	ldr	r4, [r0, #0]
   b7782:	2c00      	cmp	r4, #0
   b7784:	d0f6      	beq.n	b7774 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
   b7786:	f104 0010 	add.w	r0, r4, #16
   b778a:	f7ff fe54 	bl	b7436 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b778e:	4620      	mov	r0, r4
   b7790:	f7ff fda1 	bl	b72d6 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b7794:	2118      	movs	r1, #24
   b7796:	4620      	mov	r0, r4
   b7798:	f7fc fc7f 	bl	b409a <_ZdlPvj>
   b779c:	e7ea      	b.n	b7774 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b779e:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   b77a0:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b77a2:	f7fc fc76 	bl	b4092 <_Znwj>
   b77a6:	4604      	mov	r4, r0
   b77a8:	b150      	cbz	r0, b77c0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x58>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   b77aa:	4631      	mov	r1, r6
   b77ac:	f7ff fec6 	bl	b753c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b77b0:	6930      	ldr	r0, [r6, #16]
   b77b2:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b77b6:	b108      	cbz	r0, b77bc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
   b77b8:	f002 fa68 	bl	b9c8c <strdup>
        type_(type) {
   b77bc:	6120      	str	r0, [r4, #16]
   b77be:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   b77c0:	602c      	str	r4, [r5, #0]
	}
   b77c2:	e7d7      	b.n	b7774 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>

000b77c4 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   b77c4:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b77c6:	2300      	movs	r3, #0
   b77c8:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b77ca:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b77cc:	4604      	mov	r4, r0
   b77ce:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b77d0:	b12b      	cbz	r3, b77de <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b77d2:	2202      	movs	r2, #2
   b77d4:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b77d6:	68eb      	ldr	r3, [r5, #12]
   b77d8:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b77da:	68ab      	ldr	r3, [r5, #8]
   b77dc:	60a3      	str	r3, [r4, #8]
    }
   b77de:	4620      	mov	r0, r4
   b77e0:	bd38      	pop	{r3, r4, r5, pc}
	...

000b77e4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   b77e4:	b5f0      	push	{r4, r5, r6, r7, lr}
   b77e6:	b089      	sub	sp, #36	; 0x24
   b77e8:	4604      	mov	r4, r0
   b77ea:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   b77ec:	a801      	add	r0, sp, #4
   b77ee:	4611      	mov	r1, r2
   b77f0:	f7ff fe54 	bl	b749c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   b77f4:	b1a4      	cbz	r4, b7820 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   b77f6:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b77f8:	b11d      	cbz	r5, b7802 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   b77fa:	4628      	mov	r0, r5
   b77fc:	f002 fa46 	bl	b9c8c <strdup>
   b7800:	4605      	mov	r5, r0
   b7802:	a801      	add	r0, sp, #4
   b7804:	a903      	add	r1, sp, #12
        type_(type) {
   b7806:	9503      	str	r5, [sp, #12]
   b7808:	f8ad 4010 	strh.w	r4, [sp, #16]
   b780c:	f7ff fea6 	bl	b755c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b7810:	a803      	add	r0, sp, #12
   b7812:	f7ff fe10 	bl	b7436 <_ZN8particle5ErrorD1Ev>
   b7816:	a802      	add	r0, sp, #8
   b7818:	f7fc fd22 	bl	b4260 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b781c:	b009      	add	sp, #36	; 0x24
   b781e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return _M_ptr; }
   b7820:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b7822:	2301      	movs	r3, #1
   b7824:	e8d5 2f4f 	ldrexb	r2, [r5]
   b7828:	2a00      	cmp	r2, #0
   b782a:	d103      	bne.n	b7834 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   b782c:	e8c5 3f41 	strexb	r1, r3, [r5]
   b7830:	2900      	cmp	r1, #0
   b7832:	d1f7      	bne.n	b7824 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   b7834:	d1ef      	bne.n	b7816 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   b7836:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   b7838:	f3bf 8f5b 	dmb	ish
   b783c:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b783e:	1d2b      	adds	r3, r5, #4
   b7840:	f3bf 8f5b 	dmb	ish
   b7844:	e853 6f00 	ldrex	r6, [r3]
   b7848:	e843 4200 	strex	r2, r4, [r3]
   b784c:	2a00      	cmp	r2, #0
   b784e:	d1f9      	bne.n	b7844 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   b7850:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b7854:	2e00      	cmp	r6, #0
   b7856:	d0de      	beq.n	b7816 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   b7858:	4620      	mov	r0, r4
   b785a:	f7ff fc11 	bl	b7080 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b785e:	4607      	mov	r7, r0
   b7860:	b160      	cbz	r0, b787c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b7862:	f105 010c 	add.w	r1, r5, #12
   b7866:	4630      	mov	r0, r6
   b7868:	f7ff fe43 	bl	b74f2 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   b786c:	4630      	mov	r0, r6
   b786e:	f7ff fd32 	bl	b72d6 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b7872:	2110      	movs	r1, #16
   b7874:	4630      	mov	r0, r6
   b7876:	f7fc fc10 	bl	b409a <_ZdlPvj>
   b787a:	e7cc      	b.n	b7816 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b787c:	4631      	mov	r1, r6
   b787e:	a803      	add	r0, sp, #12
   b7880:	f7ff ffa0 	bl	b77c4 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b7884:	7b2b      	ldrb	r3, [r5, #12]
   b7886:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b788a:	2010      	movs	r0, #16
   b788c:	f7fc fc01 	bl	b4092 <_Znwj>
   b7890:	4605      	mov	r5, r0
   b7892:	b1d0      	cbz	r0, b78ca <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   b7894:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b7896:	2014      	movs	r0, #20
   b7898:	f7fc fbfb 	bl	b4092 <_Znwj>
   b789c:	4604      	mov	r4, r0
   b789e:	b178      	cbz	r0, b78c0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   b78a0:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b78a2:	4601      	mov	r1, r0
   b78a4:	a803      	add	r0, sp, #12
   b78a6:	f7ff fd45 	bl	b7334 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b78aa:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b78ac:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b78ae:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b78b0:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   b78b2:	9205      	str	r2, [sp, #20]
   b78b4:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b78b6:	60e3      	str	r3, [r4, #12]
   b78b8:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   b78bc:	9206      	str	r2, [sp, #24]
   b78be:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   b78c0:	4b06      	ldr	r3, [pc, #24]	; (b78dc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   b78c2:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b78c4:	4b06      	ldr	r3, [pc, #24]	; (b78e0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b78c6:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b78c8:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   b78ca:	a803      	add	r0, sp, #12
   b78cc:	f7ff fd03 	bl	b72d6 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b78d0:	2200      	movs	r2, #0
   b78d2:	4629      	mov	r1, r5
   b78d4:	4803      	ldr	r0, [pc, #12]	; (b78e4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   b78d6:	f7ff fbdb 	bl	b7090 <application_thread_invoke>
   b78da:	e7c7      	b.n	b786c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   b78dc:	000b7505 	.word	0x000b7505
   b78e0:	000b78e9 	.word	0x000b78e9
   b78e4:	000b72af 	.word	0x000b72af

000b78e8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	switch (__op)
   b78e8:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b78ea:	b570      	push	{r4, r5, r6, lr}
   b78ec:	4604      	mov	r4, r0
	switch (__op)
   b78ee:	d103      	bne.n	b78f8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b78f0:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b78f2:	6003      	str	r3, [r0, #0]
      }
   b78f4:	2000      	movs	r0, #0
   b78f6:	bd70      	pop	{r4, r5, r6, pc}
	  switch (__op)
   b78f8:	2a02      	cmp	r2, #2
   b78fa:	d00c      	beq.n	b7916 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   b78fc:	2a03      	cmp	r2, #3
   b78fe:	d1f9      	bne.n	b78f4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b7900:	6804      	ldr	r4, [r0, #0]
   b7902:	2c00      	cmp	r4, #0
   b7904:	d0f6      	beq.n	b78f4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
   b7906:	4620      	mov	r0, r4
   b7908:	f7ff fce5 	bl	b72d6 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b790c:	2114      	movs	r1, #20
   b790e:	4620      	mov	r0, r4
   b7910:	f7fc fbc3 	bl	b409a <_ZdlPvj>
   b7914:	e7ee      	b.n	b78f4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b7916:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   b7918:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b791a:	f7fc fbba 	bl	b4092 <_Znwj>
   b791e:	4605      	mov	r5, r0
   b7920:	b120      	cbz	r0, b792c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x44>
      _Bind(const _Bind&) = default;
   b7922:	4631      	mov	r1, r6
   b7924:	f7ff ff4e 	bl	b77c4 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   b7928:	7c33      	ldrb	r3, [r6, #16]
   b792a:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   b792c:	6025      	str	r5, [r4, #0]
	}
   b792e:	e7e1      	b.n	b78f4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>

000b7930 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b7930:	2200      	movs	r2, #0
   b7932:	6840      	ldr	r0, [r0, #4]
   b7934:	4611      	mov	r1, r2
   b7936:	f7ff bc2f 	b.w	b7198 <network_listening>

000b793a <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b793a:	2200      	movs	r2, #0
   b793c:	6840      	ldr	r0, [r0, #4]
   b793e:	4611      	mov	r1, r2
   b7940:	f7ff bc3a 	b.w	b71b8 <network_get_listen_timeout>

000b7944 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b7944:	6840      	ldr	r0, [r0, #4]
   b7946:	2200      	movs	r2, #0
   b7948:	f7ff bc2e 	b.w	b71a8 <network_set_listen_timeout>

000b794c <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b794c:	6840      	ldr	r0, [r0, #4]
   b794e:	2200      	movs	r2, #0
   b7950:	f081 0101 	eor.w	r1, r1, #1
   b7954:	f7ff bc18 	b.w	b7188 <network_listen>

000b7958 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b7958:	2300      	movs	r3, #0
   b795a:	6840      	ldr	r0, [r0, #4]
   b795c:	461a      	mov	r2, r3
   b795e:	4619      	mov	r1, r3
   b7960:	f7ff bc0a 	b.w	b7178 <network_off>

000b7964 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b7964:	2300      	movs	r3, #0
   b7966:	6840      	ldr	r0, [r0, #4]
   b7968:	461a      	mov	r2, r3
   b796a:	4619      	mov	r1, r3
   b796c:	f7ff bbfc 	b.w	b7168 <network_on>

000b7970 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b7970:	2200      	movs	r2, #0
   b7972:	6840      	ldr	r0, [r0, #4]
   b7974:	4611      	mov	r1, r2
   b7976:	f7ff bbef 	b.w	b7158 <network_ready>

000b797a <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b797a:	2200      	movs	r2, #0
   b797c:	6840      	ldr	r0, [r0, #4]
   b797e:	4611      	mov	r1, r2
   b7980:	f7ff bbda 	b.w	b7138 <network_connecting>

000b7984 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b7984:	6840      	ldr	r0, [r0, #4]
   b7986:	2200      	movs	r2, #0
   b7988:	2102      	movs	r1, #2
   b798a:	f7ff bbdd 	b.w	b7148 <network_disconnect>

000b798e <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b798e:	2300      	movs	r3, #0
   b7990:	6840      	ldr	r0, [r0, #4]
   b7992:	461a      	mov	r2, r3
   b7994:	f7ff bbc8 	b.w	b7128 <network_connect>

000b7998 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   b7998:	4b02      	ldr	r3, [pc, #8]	; (b79a4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b799a:	2203      	movs	r2, #3
   b799c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b799e:	4a02      	ldr	r2, [pc, #8]	; (b79a8 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b79a0:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b79a2:	4770      	bx	lr
   b79a4:	2003e69c 	.word	0x2003e69c
   b79a8:	000baaf4 	.word	0x000baaf4

000b79ac <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b79ac:	4770      	bx	lr

000b79ae <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b79ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b79b0:	4606      	mov	r6, r0
   b79b2:	4615      	mov	r5, r2
   b79b4:	460c      	mov	r4, r1
   b79b6:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b79b8:	42bc      	cmp	r4, r7
   b79ba:	d006      	beq.n	b79ca <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b79bc:	6833      	ldr	r3, [r6, #0]
   b79be:	f814 1b01 	ldrb.w	r1, [r4], #1
   b79c2:	689b      	ldr	r3, [r3, #8]
   b79c4:	4630      	mov	r0, r6
   b79c6:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b79c8:	e7f6      	b.n	b79b8 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b79ca:	4628      	mov	r0, r5
   b79cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b79ce <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b79ce:	7c00      	ldrb	r0, [r0, #16]
   b79d0:	2200      	movs	r2, #0
   b79d2:	f7ff ba25 	b.w	b6e20 <hal_i2c_write>

000b79d6 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b79d6:	7c00      	ldrb	r0, [r0, #16]
   b79d8:	2100      	movs	r1, #0
   b79da:	f7ff ba29 	b.w	b6e30 <hal_i2c_available>

000b79de <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b79de:	7c00      	ldrb	r0, [r0, #16]
   b79e0:	2100      	movs	r1, #0
   b79e2:	f7ff ba2d 	b.w	b6e40 <hal_i2c_read>

000b79e6 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b79e6:	7c00      	ldrb	r0, [r0, #16]
   b79e8:	2100      	movs	r1, #0
   b79ea:	f7ff ba31 	b.w	b6e50 <hal_i2c_peek>

000b79ee <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b79ee:	7c00      	ldrb	r0, [r0, #16]
   b79f0:	2100      	movs	r1, #0
   b79f2:	f7ff ba35 	b.w	b6e60 <hal_i2c_flush>

000b79f6 <_ZN7TwoWireD0Ev>:
   b79f6:	b510      	push	{r4, lr}
   b79f8:	2114      	movs	r1, #20
   b79fa:	4604      	mov	r4, r0
   b79fc:	f7fc fb4d 	bl	b409a <_ZdlPvj>
   b7a00:	4620      	mov	r0, r4
   b7a02:	bd10      	pop	{r4, pc}

000b7a04 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b7a04:	b538      	push	{r3, r4, r5, lr}
   b7a06:	4604      	mov	r4, r0
   b7a08:	4615      	mov	r5, r2
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b7a0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b7a0e:	2200      	movs	r2, #0
   b7a10:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b7a14:	4b09      	ldr	r3, [pc, #36]	; (b7a3c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
  _i2c = i2c;
   b7a16:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b7a18:	4608      	mov	r0, r1
   b7a1a:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
   b7a1c:	4629      	mov	r1, r5
   b7a1e:	f7ff fa27 	bl	b6e70 <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b7a22:	30bf      	adds	r0, #191	; 0xbf
   b7a24:	d108      	bne.n	b7a38 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
   b7a26:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b7a28:	07db      	lsls	r3, r3, #31
   b7a2a:	d505      	bpl.n	b7a38 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
   b7a2c:	6868      	ldr	r0, [r5, #4]
   b7a2e:	f7ff fbe3 	bl	b71f8 <free>
    free(conf.tx_buffer);
   b7a32:	68e8      	ldr	r0, [r5, #12]
   b7a34:	f7ff fbe0 	bl	b71f8 <free>
}
   b7a38:	4620      	mov	r0, r4
   b7a3a:	bd38      	pop	{r3, r4, r5, pc}
   b7a3c:	000bab30 	.word	0x000bab30

000b7a40 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   b7a40:	2300      	movs	r3, #0
   b7a42:	7c00      	ldrb	r0, [r0, #16]
   b7a44:	461a      	mov	r2, r3
   b7a46:	4619      	mov	r1, r3
   b7a48:	f7ff b9d2 	b.w	b6df0 <hal_i2c_begin>

000b7a4c <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   b7a4c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   b7a4e:	2200      	movs	r2, #0
   b7a50:	2314      	movs	r3, #20
   b7a52:	e9cd 2201 	strd	r2, r2, [sp, #4]
   b7a56:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   b7a5a:	780b      	ldrb	r3, [r1, #0]
   b7a5c:	f88d 3008 	strb.w	r3, [sp, #8]
   b7a60:	684b      	ldr	r3, [r1, #4]
   b7a62:	9303      	str	r3, [sp, #12]
   b7a64:	68cb      	ldr	r3, [r1, #12]
   b7a66:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   b7a68:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   b7a6a:	7a0b      	ldrb	r3, [r1, #8]
   b7a6c:	9305      	str	r3, [sp, #20]
   b7a6e:	a901      	add	r1, sp, #4
   b7a70:	f7ff fa16 	bl	b6ea0 <hal_i2c_request_ex>
}
   b7a74:	b007      	add	sp, #28
   b7a76:	f85d fb04 	ldr.w	pc, [sp], #4

000b7a7a <_ZN7TwoWire11requestFromEhjh>:
{
   b7a7a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   b7a7c:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   b7a7e:	f88d 1000 	strb.w	r1, [sp]
   b7a82:	f04f 0164 	mov.w	r1, #100	; 0x64
   b7a86:	9103      	str	r1, [sp, #12]
   b7a88:	bf18      	it	ne
   b7a8a:	2301      	movne	r3, #1
   b7a8c:	4669      	mov	r1, sp
    size_ = size;
   b7a8e:	9201      	str	r2, [sp, #4]
   b7a90:	f88d 3008 	strb.w	r3, [sp, #8]
   b7a94:	f7ff ffda 	bl	b7a4c <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   b7a98:	b005      	add	sp, #20
   b7a9a:	f85d fb04 	ldr.w	pc, [sp], #4

000b7a9e <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   b7a9e:	7c00      	ldrb	r0, [r0, #16]
   b7aa0:	2200      	movs	r2, #0
   b7aa2:	f7ff b9ad 	b.w	b6e00 <hal_i2c_begin_transmission>

000b7aa6 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   b7aa6:	b2c9      	uxtb	r1, r1
   b7aa8:	f7ff bff9 	b.w	b7a9e <_ZN7TwoWire17beginTransmissionEh>

000b7aac <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   b7aac:	7c00      	ldrb	r0, [r0, #16]
   b7aae:	2200      	movs	r2, #0
   b7ab0:	f7ff b9ae 	b.w	b6e10 <hal_i2c_end_transmission>

000b7ab4 <_ZN7TwoWire4lockEv>:
{
  hal_i2c_reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
   b7ab4:	b508      	push	{r3, lr}
  return hal_i2c_lock(_i2c, NULL) == 0;
   b7ab6:	2100      	movs	r1, #0
   b7ab8:	7c00      	ldrb	r0, [r0, #16]
   b7aba:	f7ff f9e1 	bl	b6e80 <hal_i2c_lock>
}
   b7abe:	fab0 f080 	clz	r0, r0
   b7ac2:	0940      	lsrs	r0, r0, #5
   b7ac4:	bd08      	pop	{r3, pc}

000b7ac6 <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
   b7ac6:	b508      	push	{r3, lr}
  return hal_i2c_unlock(_i2c, NULL) == 0;
   b7ac8:	2100      	movs	r1, #0
   b7aca:	7c00      	ldrb	r0, [r0, #16]
   b7acc:	f7ff f9e0 	bl	b6e90 <hal_i2c_unlock>
}
   b7ad0:	fab0 f080 	clz	r0, r0
   b7ad4:	0940      	lsrs	r0, r0, #5
   b7ad6:	bd08      	pop	{r3, pc}

000b7ad8 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b7ad8:	4770      	bx	lr

000b7ada <_ZN9IPAddressD0Ev>:
   b7ada:	b510      	push	{r4, lr}
   b7adc:	2118      	movs	r1, #24
   b7ade:	4604      	mov	r4, r0
   b7ae0:	f7fc fadb 	bl	b409a <_ZdlPvj>
   b7ae4:	4620      	mov	r0, r4
   b7ae6:	bd10      	pop	{r4, pc}

000b7ae8 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b7ae8:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b7aea:	7d03      	ldrb	r3, [r0, #20]
   b7aec:	2b06      	cmp	r3, #6
{
   b7aee:	b08d      	sub	sp, #52	; 0x34
   b7af0:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b7af2:	f100 0704 	add.w	r7, r0, #4
   b7af6:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b7afa:	d012      	beq.n	b7b22 <_ZNK9IPAddress7printToER5Print+0x3a>
   b7afc:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b7b00:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b7b04:	220a      	movs	r2, #10
   b7b06:	4630      	mov	r0, r6
   b7b08:	f001 fa93 	bl	b9032 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b7b0c:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b7b0e:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b7b10:	d019      	beq.n	b7b46 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b7b12:	2c00      	cmp	r4, #0
   b7b14:	d0f4      	beq.n	b7b00 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b7b16:	212e      	movs	r1, #46	; 0x2e
   b7b18:	4630      	mov	r0, r6
   b7b1a:	f001 fa7b 	bl	b9014 <_ZN5Print5printEc>
   b7b1e:	4404      	add	r4, r0
   b7b20:	e7ee      	b.n	b7b00 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b7b22:	232f      	movs	r3, #47	; 0x2f
   b7b24:	466a      	mov	r2, sp
   b7b26:	4639      	mov	r1, r7
   b7b28:	200a      	movs	r0, #10
		buf[0] = 0;
   b7b2a:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b7b2e:	f7ff f9bf 	bl	b6eb0 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b7b32:	4668      	mov	r0, sp
   b7b34:	f002 f8c7 	bl	b9cc6 <strlen>
   b7b38:	6833      	ldr	r3, [r6, #0]
   b7b3a:	4602      	mov	r2, r0
   b7b3c:	68db      	ldr	r3, [r3, #12]
   b7b3e:	4669      	mov	r1, sp
   b7b40:	4630      	mov	r0, r6
   b7b42:	4798      	blx	r3
   b7b44:	4604      	mov	r4, r0
    }
    return n;
}
   b7b46:	4620      	mov	r0, r4
   b7b48:	b00d      	add	sp, #52	; 0x34
   b7b4a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b7b4c <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b7b4c:	b510      	push	{r4, lr}
   b7b4e:	4b05      	ldr	r3, [pc, #20]	; (b7b64 <_ZN9IPAddressC1Ev+0x18>)
   b7b50:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b7b52:	2211      	movs	r2, #17
   b7b54:	f840 3b04 	str.w	r3, [r0], #4
   b7b58:	2100      	movs	r1, #0
   b7b5a:	f001 fff9 	bl	b9b50 <memset>
}
   b7b5e:	4620      	mov	r0, r4
   b7b60:	bd10      	pop	{r4, pc}
   b7b62:	bf00      	nop
   b7b64:	000bab58 	.word	0x000bab58

000b7b68 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b7b68:	4603      	mov	r3, r0
   b7b6a:	4a07      	ldr	r2, [pc, #28]	; (b7b88 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b7b6c:	b510      	push	{r4, lr}
   b7b6e:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b7b72:	f101 0210 	add.w	r2, r1, #16
   b7b76:	f851 4b04 	ldr.w	r4, [r1], #4
   b7b7a:	f843 4b04 	str.w	r4, [r3], #4
   b7b7e:	4291      	cmp	r1, r2
   b7b80:	d1f9      	bne.n	b7b76 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b7b82:	780a      	ldrb	r2, [r1, #0]
   b7b84:	701a      	strb	r2, [r3, #0]
}
   b7b86:	bd10      	pop	{r4, pc}
   b7b88:	000bab58 	.word	0x000bab58

000b7b8c <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b7b8c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b7b8e:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b7b92:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b7b96:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b7b9a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b7b9e:	2304      	movs	r3, #4
   b7ba0:	6041      	str	r1, [r0, #4]
   b7ba2:	7503      	strb	r3, [r0, #20]
}
   b7ba4:	bd10      	pop	{r4, pc}
	...

000b7ba8 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b7ba8:	b507      	push	{r0, r1, r2, lr}
   b7baa:	4b06      	ldr	r3, [pc, #24]	; (b7bc4 <_ZN9IPAddressC1EPKh+0x1c>)
   b7bac:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b7bae:	78cb      	ldrb	r3, [r1, #3]
   b7bb0:	9300      	str	r3, [sp, #0]
   b7bb2:	788b      	ldrb	r3, [r1, #2]
   b7bb4:	784a      	ldrb	r2, [r1, #1]
   b7bb6:	7809      	ldrb	r1, [r1, #0]
   b7bb8:	f7ff ffe8 	bl	b7b8c <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b7bbc:	b003      	add	sp, #12
   b7bbe:	f85d fb04 	ldr.w	pc, [sp], #4
   b7bc2:	bf00      	nop
   b7bc4:	000bab58 	.word	0x000bab58

000b7bc8 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
   b7bc8:	f100 0310 	add.w	r3, r0, #16
   b7bcc:	2201      	movs	r2, #1
    do {
        if (t->type == JSMN_OBJECT) {
   b7bce:	f813 1c10 	ldrb.w	r1, [r3, #-16]
   b7bd2:	2901      	cmp	r1, #1
   b7bd4:	4618      	mov	r0, r3
   b7bd6:	d108      	bne.n	b7bea <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
   b7bd8:	f853 1c04 	ldr.w	r1, [r3, #-4]
   b7bdc:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
   b7be0:	3a01      	subs	r2, #1
   b7be2:	f103 0310 	add.w	r3, r3, #16
   b7be6:	d1f2      	bne.n	b7bce <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
   b7be8:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
   b7bea:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
   b7bec:	bf04      	itt	eq
   b7bee:	f853 1c04 	ldreq.w	r1, [r3, #-4]
   b7bf2:	1852      	addeq	r2, r2, r1
   b7bf4:	e7f4      	b.n	b7be0 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

000b7bf6 <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
   b7bf6:	b40e      	push	{r1, r2, r3}
   b7bf8:	b5f0      	push	{r4, r5, r6, r7, lr}
   b7bfa:	b088      	sub	sp, #32
   b7bfc:	af00      	add	r7, sp, #0
   b7bfe:	f107 0534 	add.w	r5, r7, #52	; 0x34
    char buf[16];
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b7c02:	2110      	movs	r1, #16
void spark::JSONWriter::printf(const char *fmt, ...) {
   b7c04:	f855 2b04 	ldr.w	r2, [r5], #4
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b7c08:	607a      	str	r2, [r7, #4]
void spark::JSONWriter::printf(const char *fmt, ...) {
   b7c0a:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b7c0c:	462b      	mov	r3, r5
   b7c0e:	1878      	adds	r0, r7, r1
    va_start(args, fmt);
   b7c10:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b7c12:	f7ff fb19 	bl	b7248 <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
   b7c16:	280f      	cmp	r0, #15
   b7c18:	687a      	ldr	r2, [r7, #4]
   b7c1a:	d91a      	bls.n	b7c52 <_ZN5spark10JSONWriter6printfEPKcz+0x5c>
        char buf[n + 1]; // Use larger buffer
   b7c1c:	f100 0308 	add.w	r3, r0, #8
   b7c20:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
   b7c24:	466e      	mov	r6, sp
        char buf[n + 1]; // Use larger buffer
   b7c26:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   b7c2a:	1c41      	adds	r1, r0, #1
   b7c2c:	462b      	mov	r3, r5
   b7c2e:	4668      	mov	r0, sp
        va_start(args, fmt);
   b7c30:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   b7c32:	f7ff fb09 	bl	b7248 <vsnprintf>
        if (n > 0) {
   b7c36:	1e02      	subs	r2, r0, #0
   b7c38:	dd04      	ble.n	b7c44 <_ZN5spark10JSONWriter6printfEPKcz+0x4e>
            write(buf, n);
   b7c3a:	6823      	ldr	r3, [r4, #0]
   b7c3c:	4669      	mov	r1, sp
   b7c3e:	689b      	ldr	r3, [r3, #8]
   b7c40:	4620      	mov	r0, r4
   b7c42:	4798      	blx	r3
   b7c44:	46b5      	mov	sp, r6
    } else if (n > 0) {
        write(buf, n);
    }
}
   b7c46:	3720      	adds	r7, #32
   b7c48:	46bd      	mov	sp, r7
   b7c4a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b7c4e:	b003      	add	sp, #12
   b7c50:	4770      	bx	lr
    } else if (n > 0) {
   b7c52:	2800      	cmp	r0, #0
   b7c54:	d0f7      	beq.n	b7c46 <_ZN5spark10JSONWriter6printfEPKcz+0x50>
        write(buf, n);
   b7c56:	6823      	ldr	r3, [r4, #0]
   b7c58:	4602      	mov	r2, r0
   b7c5a:	689b      	ldr	r3, [r3, #8]
   b7c5c:	f107 0110 	add.w	r1, r7, #16
   b7c60:	4620      	mov	r0, r4
   b7c62:	4798      	blx	r3
}
   b7c64:	e7ef      	b.n	b7c46 <_ZN5spark10JSONWriter6printfEPKcz+0x50>

000b7c66 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>:
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b7c66:	b538      	push	{r3, r4, r5, lr}
   b7c68:	680b      	ldr	r3, [r1, #0]
   b7c6a:	6003      	str	r3, [r0, #0]
   b7c6c:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
   b7c6e:	6843      	ldr	r3, [r0, #4]
   b7c70:	429d      	cmp	r5, r3
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b7c72:	4604      	mov	r4, r0
	if (__tmp != _M_pi)
   b7c74:	d008      	beq.n	b7c88 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x22>
	    if (__tmp != 0)
   b7c76:	b115      	cbz	r5, b7c7e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x18>
    { ++_M_use_count; }
   b7c78:	686b      	ldr	r3, [r5, #4]
   b7c7a:	3301      	adds	r3, #1
   b7c7c:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
   b7c7e:	6860      	ldr	r0, [r4, #4]
   b7c80:	b108      	cbz	r0, b7c86 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x20>
	      _M_pi->_M_release();
   b7c82:	f7ff fb31 	bl	b72e8 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
   b7c86:	6065      	str	r5, [r4, #4]
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b7c88:	bd38      	pop	{r3, r4, r5, pc}

000b7c8a <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
   b7c8a:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   b7c8c:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
   b7c8e:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   b7c92:	689b      	ldr	r3, [r3, #8]
   b7c94:	2201      	movs	r2, #1
   b7c96:	f10d 0107 	add.w	r1, sp, #7
   b7c9a:	4798      	blx	r3
}
   b7c9c:	b003      	add	sp, #12
   b7c9e:	f85d fb04 	ldr.w	pc, [sp], #4

000b7ca2 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
   b7ca2:	460b      	mov	r3, r1
   b7ca4:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
   b7ca6:	2200      	movs	r2, #0
   b7ca8:	b510      	push	{r4, lr}
      constexpr __shared_count() noexcept : _M_pi(0)
   b7caa:	e9c0 2200 	strd	r2, r2, [r0]
   b7cae:	4604      	mov	r4, r0
        t_ = t;
   b7cb0:	6083      	str	r3, [r0, #8]
    if (t) {
   b7cb2:	b90b      	cbnz	r3, b7cb8 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
}
   b7cb4:	4620      	mov	r0, r4
   b7cb6:	bd10      	pop	{r4, pc}
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count() == 0 && get() == nullptr
       */
      constexpr shared_ptr(nullptr_t) noexcept : shared_ptr() { }

      shared_ptr& operator=(const shared_ptr&) noexcept = default;
   b7cb8:	f7ff ffd5 	bl	b7c66 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
   b7cbc:	e7fa      	b.n	b7cb4 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

000b7cbe <_ZNK5spark9JSONValue4typeEv>:
    if (!t_) {
   b7cbe:	6883      	ldr	r3, [r0, #8]
   b7cc0:	b1eb      	cbz	r3, b7cfe <_ZNK5spark9JSONValue4typeEv+0x40>
    switch (t_->type) {
   b7cc2:	781a      	ldrb	r2, [r3, #0]
   b7cc4:	2a03      	cmp	r2, #3
   b7cc6:	d81a      	bhi.n	b7cfe <_ZNK5spark9JSONValue4typeEv+0x40>
   b7cc8:	e8df f002 	tbb	[pc, r2]
   b7ccc:	1b021704 	.word	0x1b021704
   b7cd0:	2005      	movs	r0, #5
   b7cd2:	4770      	bx	lr
        const char c = d_->json[t_->start];
   b7cd4:	6802      	ldr	r2, [r0, #0]
   b7cd6:	685b      	ldr	r3, [r3, #4]
   b7cd8:	6852      	ldr	r2, [r2, #4]
   b7cda:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
   b7cdc:	282d      	cmp	r0, #45	; 0x2d
   b7cde:	d012      	beq.n	b7d06 <_ZNK5spark9JSONValue4typeEv+0x48>
   b7ce0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   b7ce4:	2b09      	cmp	r3, #9
   b7ce6:	d90e      	bls.n	b7d06 <_ZNK5spark9JSONValue4typeEv+0x48>
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
   b7ce8:	2874      	cmp	r0, #116	; 0x74
   b7cea:	d00e      	beq.n	b7d0a <_ZNK5spark9JSONValue4typeEv+0x4c>
   b7cec:	2866      	cmp	r0, #102	; 0x66
   b7cee:	d00c      	beq.n	b7d0a <_ZNK5spark9JSONValue4typeEv+0x4c>
        return JSON_TYPE_INVALID;
   b7cf0:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
   b7cf4:	4258      	negs	r0, r3
   b7cf6:	4158      	adcs	r0, r3
   b7cf8:	4770      	bx	lr
        return JSON_TYPE_OBJECT;
   b7cfa:	2006      	movs	r0, #6
   b7cfc:	4770      	bx	lr
        return JSON_TYPE_INVALID;
   b7cfe:	2000      	movs	r0, #0
   b7d00:	4770      	bx	lr
        return JSON_TYPE_STRING;
   b7d02:	2004      	movs	r0, #4
   b7d04:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
   b7d06:	2003      	movs	r0, #3
   b7d08:	4770      	bx	lr
            return JSON_TYPE_BOOL;
   b7d0a:	2002      	movs	r0, #2
}
   b7d0c:	4770      	bx	lr

000b7d0e <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
   b7d0e:	b510      	push	{r4, lr}
   b7d10:	4604      	mov	r4, r0
    switch (type()) {
   b7d12:	f7ff ffd4 	bl	b7cbe <_ZNK5spark9JSONValue4typeEv>
   b7d16:	2802      	cmp	r0, #2
   b7d18:	d00e      	beq.n	b7d38 <_ZNK5spark9JSONValue5toIntEv+0x2a>
   b7d1a:	1ec3      	subs	r3, r0, #3
   b7d1c:	b2db      	uxtb	r3, r3
   b7d1e:	2b01      	cmp	r3, #1
   b7d20:	d814      	bhi.n	b7d4c <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
   b7d22:	6822      	ldr	r2, [r4, #0]
   b7d24:	68a3      	ldr	r3, [r4, #8]
   b7d26:	6850      	ldr	r0, [r2, #4]
   b7d28:	685b      	ldr	r3, [r3, #4]
}
   b7d2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
   b7d2e:	220a      	movs	r2, #10
   b7d30:	2100      	movs	r1, #0
   b7d32:	4418      	add	r0, r3
   b7d34:	f002 b87a 	b.w	b9e2c <strtol>
        const char* const s = d_->json + t_->start;
   b7d38:	6822      	ldr	r2, [r4, #0]
   b7d3a:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   b7d3c:	6852      	ldr	r2, [r2, #4]
   b7d3e:	685b      	ldr	r3, [r3, #4]
   b7d40:	5cd0      	ldrb	r0, [r2, r3]
   b7d42:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
   b7d46:	4258      	negs	r0, r3
   b7d48:	4158      	adcs	r0, r3
}
   b7d4a:	bd10      	pop	{r4, pc}
    switch (type()) {
   b7d4c:	2000      	movs	r0, #0
   b7d4e:	e7fc      	b.n	b7d4a <_ZNK5spark9JSONValue5toIntEv+0x3c>

000b7d50 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
   b7d50:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   b7d52:	2300      	movs	r3, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   b7d54:	e9c0 3300 	strd	r3, r3, [r0]
   b7d58:	4604      	mov	r4, r0
        n_(0) {
   b7d5a:	480e      	ldr	r0, [pc, #56]	; (b7d94 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
   b7d5c:	e9c4 0302 	strd	r0, r3, [r4, #8]
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
   b7d60:	b1a9      	cbz	r1, b7d8e <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
   b7d62:	780b      	ldrb	r3, [r1, #0]
   b7d64:	2b03      	cmp	r3, #3
   b7d66:	d006      	beq.n	b7d76 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
   b7d68:	b98b      	cbnz	r3, b7d8e <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
   b7d6a:	6813      	ldr	r3, [r2, #0]
   b7d6c:	6858      	ldr	r0, [r3, #4]
   b7d6e:	684b      	ldr	r3, [r1, #4]
   b7d70:	5cc3      	ldrb	r3, [r0, r3]
   b7d72:	2b6e      	cmp	r3, #110	; 0x6e
   b7d74:	d007      	beq.n	b7d86 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x36>
            s_ = d->json + t->start;
   b7d76:	6813      	ldr	r3, [r2, #0]
   b7d78:	684d      	ldr	r5, [r1, #4]
   b7d7a:	6858      	ldr	r0, [r3, #4]
            n_ = t->end - t->start;
   b7d7c:	688b      	ldr	r3, [r1, #8]
            s_ = d->json + t->start;
   b7d7e:	4428      	add	r0, r5
            n_ = t->end - t->start;
   b7d80:	1b5b      	subs	r3, r3, r5
            s_ = d->json + t->start;
   b7d82:	60a0      	str	r0, [r4, #8]
            n_ = t->end - t->start;
   b7d84:	60e3      	str	r3, [r4, #12]
   b7d86:	4611      	mov	r1, r2
   b7d88:	4620      	mov	r0, r4
   b7d8a:	f7ff ff6c 	bl	b7c66 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
   b7d8e:	4620      	mov	r0, r4
   b7d90:	bd38      	pop	{r3, r4, r5, pc}
   b7d92:	bf00      	nop
   b7d94:	000babc7 	.word	0x000babc7

000b7d98 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
   b7d98:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   b7d9a:	2500      	movs	r5, #0
   b7d9c:	460b      	mov	r3, r1
      constexpr __shared_count() noexcept : _M_pi(0)
   b7d9e:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
   b7da2:	e9c0 5502 	strd	r5, r5, [r0, #8]
   b7da6:	e9c0 5504 	strd	r5, r5, [r0, #16]
   b7daa:	4604      	mov	r4, r0
   b7dac:	4611      	mov	r1, r2
    if (t && t->type == JSMN_OBJECT) {
   b7dae:	b14b      	cbz	r3, b7dc4 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
   b7db0:	781a      	ldrb	r2, [r3, #0]
   b7db2:	2a01      	cmp	r2, #1
   b7db4:	d106      	bne.n	b7dc4 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
   b7db6:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
   b7dba:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
   b7dbc:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
   b7dbe:	6143      	str	r3, [r0, #20]
   b7dc0:	f7ff ff51 	bl	b7c66 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
   b7dc4:	4620      	mov	r0, r4
   b7dc6:	bd38      	pop	{r3, r4, r5, pc}

000b7dc8 <_ZN5spark18JSONObjectIterator4nextEv>:
bool spark::JSONObjectIterator::next() {
   b7dc8:	b510      	push	{r4, lr}
    if (!n_) {
   b7dca:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
   b7dcc:	4604      	mov	r4, r0
    if (!n_) {
   b7dce:	b163      	cbz	r3, b7dea <_ZN5spark18JSONObjectIterator4nextEv+0x22>
    k_ = t_; // Name
   b7dd0:	6880      	ldr	r0, [r0, #8]
   b7dd2:	60e0      	str	r0, [r4, #12]
    --n_;
   b7dd4:	3b01      	subs	r3, #1
    ++t_;
   b7dd6:	3010      	adds	r0, #16
   b7dd8:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
   b7dda:	6120      	str	r0, [r4, #16]
    --n_;
   b7ddc:	6163      	str	r3, [r4, #20]
    if (n_) {
   b7dde:	b113      	cbz	r3, b7de6 <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
   b7de0:	f7ff fef2 	bl	b7bc8 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
   b7de4:	60a0      	str	r0, [r4, #8]
    return true;
   b7de6:	2001      	movs	r0, #1
   b7de8:	e000      	b.n	b7dec <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
   b7dea:	4618      	mov	r0, r3
}
   b7dec:	bd10      	pop	{r4, pc}

000b7dee <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
   b7dee:	b510      	push	{r4, lr}
    write('}');
   b7df0:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
   b7df2:	4604      	mov	r4, r0
    write('}');
   b7df4:	f7ff ff49 	bl	b7c8a <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
   b7df8:	2301      	movs	r3, #1
   b7dfa:	7123      	strb	r3, [r4, #4]
}
   b7dfc:	4620      	mov	r0, r4
   b7dfe:	bd10      	pop	{r4, pc}

000b7e00 <_ZN5spark10JSONWriter14writeSeparatorEv>:

void spark::JSONWriter::writeSeparator() {
   b7e00:	b508      	push	{r3, lr}
    switch (state_) {
   b7e02:	7903      	ldrb	r3, [r0, #4]
   b7e04:	2b01      	cmp	r3, #1
   b7e06:	d002      	beq.n	b7e0e <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
   b7e08:	2b02      	cmp	r3, #2
   b7e0a:	d004      	beq.n	b7e16 <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
        write(':');
        break;
    default:
        break;
    }
}
   b7e0c:	bd08      	pop	{r3, pc}
        write(',');
   b7e0e:	212c      	movs	r1, #44	; 0x2c
        write(':');
   b7e10:	f7ff ff3b 	bl	b7c8a <_ZN5spark10JSONWriter5writeEc>
}
   b7e14:	e7fa      	b.n	b7e0c <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
   b7e16:	213a      	movs	r1, #58	; 0x3a
   b7e18:	e7fa      	b.n	b7e10 <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

000b7e1a <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
   b7e1a:	b510      	push	{r4, lr}
   b7e1c:	4604      	mov	r4, r0
    writeSeparator();
   b7e1e:	f7ff ffef 	bl	b7e00 <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
   b7e22:	4620      	mov	r0, r4
   b7e24:	217b      	movs	r1, #123	; 0x7b
   b7e26:	f7ff ff30 	bl	b7c8a <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
   b7e2a:	2300      	movs	r3, #0
   b7e2c:	7123      	strb	r3, [r4, #4]
}
   b7e2e:	4620      	mov	r0, r4
   b7e30:	bd10      	pop	{r4, pc}
	...

000b7e34 <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
   b7e34:	b513      	push	{r0, r1, r4, lr}
   b7e36:	4604      	mov	r4, r0
   b7e38:	9101      	str	r1, [sp, #4]
    writeSeparator();
   b7e3a:	f7ff ffe1 	bl	b7e00 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
   b7e3e:	6823      	ldr	r3, [r4, #0]
   b7e40:	9a01      	ldr	r2, [sp, #4]
   b7e42:	68db      	ldr	r3, [r3, #12]
   b7e44:	4903      	ldr	r1, [pc, #12]	; (b7e54 <_ZN5spark10JSONWriter5valueEi+0x20>)
   b7e46:	4620      	mov	r0, r4
   b7e48:	4798      	blx	r3
    state_ = NEXT;
   b7e4a:	2301      	movs	r3, #1
}
   b7e4c:	4620      	mov	r0, r4
    state_ = NEXT;
   b7e4e:	7123      	strb	r3, [r4, #4]
}
   b7e50:	b002      	add	sp, #8
   b7e52:	bd10      	pop	{r4, pc}
   b7e54:	000ba273 	.word	0x000ba273

000b7e58 <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
   b7e58:	b513      	push	{r0, r1, r4, lr}
   b7e5a:	4604      	mov	r4, r0
   b7e5c:	9101      	str	r1, [sp, #4]
    writeSeparator();
   b7e5e:	f7ff ffcf 	bl	b7e00 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
   b7e62:	6823      	ldr	r3, [r4, #0]
   b7e64:	9a01      	ldr	r2, [sp, #4]
   b7e66:	68db      	ldr	r3, [r3, #12]
   b7e68:	4903      	ldr	r1, [pc, #12]	; (b7e78 <_ZN5spark10JSONWriter5valueEj+0x20>)
   b7e6a:	4620      	mov	r0, r4
   b7e6c:	4798      	blx	r3
    state_ = NEXT;
   b7e6e:	2301      	movs	r3, #1
}
   b7e70:	4620      	mov	r0, r4
    state_ = NEXT;
   b7e72:	7123      	strb	r3, [r4, #4]
}
   b7e74:	b002      	add	sp, #8
   b7e76:	bd10      	pop	{r4, pc}
   b7e78:	000bab64 	.word	0x000bab64

000b7e7c <_ZN5spark10JSONWriter12writeEscapedEPKcj>:

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   b7e7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b7e80:	460d      	mov	r5, r1
    write('"');
   b7e82:	2122      	movs	r1, #34	; 0x22
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   b7e84:	4690      	mov	r8, r2
   b7e86:	4604      	mov	r4, r0
    write('"');
   b7e88:	f7ff feff 	bl	b7c8a <_ZN5spark10JSONWriter5writeEc>
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
   b7e8c:	f8df 90a4 	ldr.w	r9, [pc, #164]	; b7f34 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xb8>
    const char* const end = str + size;
   b7e90:	44a8      	add	r8, r5
    const char *s = str;
   b7e92:	462f      	mov	r7, r5
    while (s != end) {
   b7e94:	4547      	cmp	r7, r8
   b7e96:	46ba      	mov	sl, r7
   b7e98:	d03d      	beq.n	b7f16 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9a>
        const char c = *s;
   b7e9a:	f817 6b01 	ldrb.w	r6, [r7], #1
        if (c == '"' || c == '\\' || !std::isprint((unsigned char)c)) {
   b7e9e:	2e22      	cmp	r6, #34	; 0x22
   b7ea0:	d006      	beq.n	b7eb0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   b7ea2:	2e5c      	cmp	r6, #92	; 0x5c
   b7ea4:	d004      	beq.n	b7eb0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   b7ea6:	4630      	mov	r0, r6
   b7ea8:	f001 fe22 	bl	b9af0 <isprint>
   b7eac:	2800      	cmp	r0, #0
   b7eae:	d1f1      	bne.n	b7e94 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
   b7eb0:	6823      	ldr	r3, [r4, #0]
   b7eb2:	ebaa 0205 	sub.w	r2, sl, r5
   b7eb6:	689b      	ldr	r3, [r3, #8]
   b7eb8:	4629      	mov	r1, r5
   b7eba:	4620      	mov	r0, r4
   b7ebc:	4798      	blx	r3
            write('\\');
   b7ebe:	215c      	movs	r1, #92	; 0x5c
   b7ec0:	4620      	mov	r0, r4
   b7ec2:	f7ff fee2 	bl	b7c8a <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
   b7ec6:	2e0d      	cmp	r6, #13
   b7ec8:	d80a      	bhi.n	b7ee0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
   b7eca:	2e07      	cmp	r6, #7
   b7ecc:	d91c      	bls.n	b7f08 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   b7ece:	f1a6 0308 	sub.w	r3, r6, #8
   b7ed2:	2b05      	cmp	r3, #5
   b7ed4:	d818      	bhi.n	b7f08 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   b7ed6:	e8df f003 	tbb	[pc, r3]
   b7eda:	0f0d      	.short	0x0f0d
   b7edc:	15131711 	.word	0x15131711
   b7ee0:	2e22      	cmp	r6, #34	; 0x22
   b7ee2:	d001      	beq.n	b7ee8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6c>
   b7ee4:	2e5c      	cmp	r6, #92	; 0x5c
   b7ee6:	d10f      	bne.n	b7f08 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
                write(c);
   b7ee8:	4631      	mov	r1, r6
                write('b');
   b7eea:	4620      	mov	r0, r4
   b7eec:	f7ff fecd 	bl	b7c8a <_ZN5spark10JSONWriter5writeEc>
                break;
            }
            str = s + 1;
   b7ef0:	463d      	mov	r5, r7
    while (s != end) {
   b7ef2:	e7cf      	b.n	b7e94 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
   b7ef4:	2162      	movs	r1, #98	; 0x62
   b7ef6:	e7f8      	b.n	b7eea <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('t');
   b7ef8:	2174      	movs	r1, #116	; 0x74
   b7efa:	e7f6      	b.n	b7eea <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('n');
   b7efc:	216e      	movs	r1, #110	; 0x6e
   b7efe:	e7f4      	b.n	b7eea <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('f');
   b7f00:	2166      	movs	r1, #102	; 0x66
   b7f02:	e7f2      	b.n	b7eea <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('r');
   b7f04:	2172      	movs	r1, #114	; 0x72
   b7f06:	e7f0      	b.n	b7eea <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                printf("u%04x", (unsigned)c);
   b7f08:	6823      	ldr	r3, [r4, #0]
   b7f0a:	4632      	mov	r2, r6
   b7f0c:	68db      	ldr	r3, [r3, #12]
   b7f0e:	4649      	mov	r1, r9
   b7f10:	4620      	mov	r0, r4
   b7f12:	4798      	blx	r3
                break;
   b7f14:	e7ec      	b.n	b7ef0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x74>
        }
        ++s;
    }
    if (s != str) {
   b7f16:	42bd      	cmp	r5, r7
   b7f18:	d005      	beq.n	b7f26 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xaa>
        write(str, s - str); // Write remaining characters
   b7f1a:	6823      	ldr	r3, [r4, #0]
   b7f1c:	1b7a      	subs	r2, r7, r5
   b7f1e:	689b      	ldr	r3, [r3, #8]
   b7f20:	4629      	mov	r1, r5
   b7f22:	4620      	mov	r0, r4
   b7f24:	4798      	blx	r3
    }
    write('"');
   b7f26:	2122      	movs	r1, #34	; 0x22
   b7f28:	4620      	mov	r0, r4
   b7f2a:	f7ff feae 	bl	b7c8a <_ZN5spark10JSONWriter5writeEc>
}
   b7f2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b7f32:	bf00      	nop
   b7f34:	000bab67 	.word	0x000bab67

000b7f38 <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
   b7f38:	b513      	push	{r0, r1, r4, lr}
   b7f3a:	4604      	mov	r4, r0
   b7f3c:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   b7f40:	f7ff ff5e 	bl	b7e00 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
   b7f44:	4620      	mov	r0, r4
   b7f46:	e9dd 2100 	ldrd	r2, r1, [sp]
   b7f4a:	f7ff ff97 	bl	b7e7c <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
   b7f4e:	2302      	movs	r3, #2
}
   b7f50:	4620      	mov	r0, r4
    state_ = VALUE;
   b7f52:	7123      	strb	r3, [r4, #4]
}
   b7f54:	b002      	add	sp, #8
   b7f56:	bd10      	pop	{r4, pc}

000b7f58 <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
   b7f58:	b513      	push	{r0, r1, r4, lr}
   b7f5a:	4604      	mov	r4, r0
   b7f5c:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   b7f60:	f7ff ff4e 	bl	b7e00 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
   b7f64:	4620      	mov	r0, r4
   b7f66:	e9dd 2100 	ldrd	r2, r1, [sp]
   b7f6a:	f7ff ff87 	bl	b7e7c <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
   b7f6e:	2301      	movs	r3, #1
}
   b7f70:	4620      	mov	r0, r4
    state_ = NEXT;
   b7f72:	7123      	strb	r3, [r4, #4]
}
   b7f74:	b002      	add	sp, #8
   b7f76:	bd10      	pop	{r4, pc}

000b7f78 <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
   b7f78:	6880      	ldr	r0, [r0, #8]
   b7f7a:	6803      	ldr	r3, [r0, #0]
   b7f7c:	68db      	ldr	r3, [r3, #12]
   b7f7e:	4718      	bx	r3

000b7f80 <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
    // This handler doesn't support direct logging
}
   b7f80:	4770      	bx	lr

000b7f82 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
   b7f82:	4608      	mov	r0, r1
   b7f84:	b111      	cbz	r1, b7f8c <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
   b7f86:	680b      	ldr	r3, [r1, #0]
   b7f88:	685b      	ldr	r3, [r3, #4]
   b7f8a:	4718      	bx	r3
}
   b7f8c:	4770      	bx	lr

000b7f8e <__tcf_0>:
    }
    return nullptr; // Unknown handler type
}

spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
    static DefaultLogHandlerFactory factory;
   b7f8e:	4770      	bx	lr

000b7f90 <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   b7f90:	4770      	bx	lr

000b7f92 <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
class DefaultLogHandlerFactory: public LogHandlerFactory {
   b7f92:	4770      	bx	lr

000b7f94 <_ZN5spark16JSONStreamWriterD1Ev>:
class JSONStreamWriter: public JSONWriter {
   b7f94:	4770      	bx	lr

000b7f96 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
const char* nextSubcategoryName(const char* &category, size_t &size) {
   b7f96:	b538      	push	{r3, r4, r5, lr}
   b7f98:	4604      	mov	r4, r0
   b7f9a:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
   b7f9c:	6800      	ldr	r0, [r0, #0]
   b7f9e:	212e      	movs	r1, #46	; 0x2e
   b7fa0:	f001 fe57 	bl	b9c52 <strchrnul>
    size = s - category;
   b7fa4:	6823      	ldr	r3, [r4, #0]
   b7fa6:	1ac3      	subs	r3, r0, r3
   b7fa8:	602b      	str	r3, [r5, #0]
    if (size) {
   b7faa:	b123      	cbz	r3, b7fb6 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
   b7fac:	7803      	ldrb	r3, [r0, #0]
   b7fae:	b103      	cbz	r3, b7fb2 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
   b7fb0:	3001      	adds	r0, #1
   b7fb2:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b7fb4:	6020      	str	r0, [r4, #0]
}
   b7fb6:	4618      	mov	r0, r3
   b7fb8:	bd38      	pop	{r3, r4, r5, pc}

000b7fba <_ZN5spark16JSONStreamWriterD0Ev>:
   b7fba:	b510      	push	{r4, lr}
   b7fbc:	210c      	movs	r1, #12
   b7fbe:	4604      	mov	r4, r0
   b7fc0:	f7fc f86b 	bl	b409a <_ZdlPvj>
   b7fc4:	4620      	mov	r0, r4
   b7fc6:	bd10      	pop	{r4, pc}

000b7fc8 <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
   b7fc8:	b510      	push	{r4, lr}
   b7fca:	2104      	movs	r1, #4
   b7fcc:	4604      	mov	r4, r0
   b7fce:	f7fc f864 	bl	b409a <_ZdlPvj>
   b7fd2:	4620      	mov	r0, r4
   b7fd4:	bd10      	pop	{r4, pc}

000b7fd6 <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   b7fd6:	b510      	push	{r4, lr}
   b7fd8:	2104      	movs	r1, #4
   b7fda:	4604      	mov	r4, r0
   b7fdc:	f7fc f85d 	bl	b409a <_ZdlPvj>
   b7fe0:	4620      	mov	r0, r4
   b7fe2:	bd10      	pop	{r4, pc}

000b7fe4 <_ZN14RecursiveMutex4lockEv.isra.0>:
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   b7fe4:	f7fe becc 	b.w	b6d80 <os_mutex_recursive_lock>

000b7fe8 <_ZNK5spark10JSONStringeqEPKc.isra.0>:
inline bool spark::JSONString::operator==(const char *str) const {
   b7fe8:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
   b7fea:	f001 fe3c 	bl	b9c66 <strcmp>
}
   b7fee:	fab0 f080 	clz	r0, r0
   b7ff2:	0940      	lsrs	r0, r0, #5
   b7ff4:	bd08      	pop	{r3, pc}

000b7ff6 <__tcf_1>:
   b7ff6:	4770      	bx	lr

000b7ff8 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
   b7ff8:	b510      	push	{r4, lr}
   b7ffa:	460c      	mov	r4, r1
#if PLATFORM_ID != PLATFORM_GCC
    if (stream == &Serial) {
   b7ffc:	f001 fa6c 	bl	b94d8 <_Z16_fetch_usbserialv>
   b8000:	4284      	cmp	r4, r0
   b8002:	d010      	beq.n	b8026 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
    if (stream == &USBSerial1) {
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
   b8004:	f001 fb86 	bl	b9714 <_Z22__fetch_global_Serial1v>
   b8008:	4284      	cmp	r4, r0
   b800a:	d105      	bne.n	b8018 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x20>
        Serial1.end();
   b800c:	f001 fb82 	bl	b9714 <_Z22__fetch_global_Serial1v>
        return;
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    OutputStreamFactory::destroyStream(stream);
}
   b8010:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial1.end();
   b8014:	f001 b9fb 	b.w	b940e <_ZN11USARTSerial3endEv>

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
   b8018:	b12c      	cbz	r4, b8026 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
   b801a:	6823      	ldr	r3, [r4, #0]
   b801c:	4620      	mov	r0, r4
   b801e:	685b      	ldr	r3, [r3, #4]
}
   b8020:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b8024:	4718      	bx	r3
   b8026:	bd10      	pop	{r4, pc}

000b8028 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b8028:	680b      	ldr	r3, [r1, #0]
   b802a:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   b802c:	684b      	ldr	r3, [r1, #4]
   b802e:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   b8030:	b113      	cbz	r3, b8038 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_+0x10>
    { ++_M_use_count; }
   b8032:	685a      	ldr	r2, [r3, #4]
   b8034:	3201      	adds	r2, #1
   b8036:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b8038:	4770      	bx	lr

000b803a <_ZN5spark10JSONWriter5valueEPKc>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   b803a:	b513      	push	{r0, r1, r4, lr}
   b803c:	4604      	mov	r4, r0
    return value(val, strlen(val));
   b803e:	4608      	mov	r0, r1
   b8040:	9101      	str	r1, [sp, #4]
   b8042:	f001 fe40 	bl	b9cc6 <strlen>
   b8046:	9901      	ldr	r1, [sp, #4]
   b8048:	4602      	mov	r2, r0
   b804a:	4620      	mov	r0, r4
}
   b804c:	b002      	add	sp, #8
   b804e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return value(val, strlen(val));
   b8052:	f7ff bf81 	b.w	b7f58 <_ZN5spark10JSONWriter5valueEPKcj>

000b8056 <_ZN5spark16StreamLogHandler5writeEPKc>:
inline void spark::StreamLogHandler::write(const char *str) {
   b8056:	b513      	push	{r0, r1, r4, lr}
   b8058:	4604      	mov	r4, r0
    write(str, strlen(str));
   b805a:	4608      	mov	r0, r1
   b805c:	9101      	str	r1, [sp, #4]
   b805e:	f001 fe32 	bl	b9cc6 <strlen>
   b8062:	6823      	ldr	r3, [r4, #0]
   b8064:	9901      	ldr	r1, [sp, #4]
   b8066:	68db      	ldr	r3, [r3, #12]
   b8068:	4602      	mov	r2, r0
   b806a:	4620      	mov	r0, r4
}
   b806c:	b002      	add	sp, #8
   b806e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    write(str, strlen(str));
   b8072:	4718      	bx	r3

000b8074 <_ZN5spark16StreamLogHandler5writeEc>:
inline void spark::StreamLogHandler::write(char c) {
   b8074:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   b8076:	6803      	ldr	r3, [r0, #0]
inline void spark::StreamLogHandler::write(char c) {
   b8078:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   b807c:	68db      	ldr	r3, [r3, #12]
   b807e:	2201      	movs	r2, #1
   b8080:	f10d 0107 	add.w	r1, sp, #7
   b8084:	4798      	blx	r3
}
   b8086:	b003      	add	sp, #12
   b8088:	f85d fb04 	ldr.w	pc, [sp], #4

000b808c <_ZN5spark16StreamLogHandler6printfEPKcz>:
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   b808c:	b40e      	push	{r1, r2, r3}
   b808e:	b503      	push	{r0, r1, lr}
   b8090:	ab03      	add	r3, sp, #12
    stream_->vprintf(false, fmt, args);
   b8092:	2100      	movs	r1, #0
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   b8094:	f853 2b04 	ldr.w	r2, [r3], #4
    stream_->vprintf(false, fmt, args);
   b8098:	6a00      	ldr	r0, [r0, #32]
    va_start(args, fmt);
   b809a:	9301      	str	r3, [sp, #4]
    stream_->vprintf(false, fmt, args);
   b809c:	f000 ffe7 	bl	b906e <_ZN5Print7vprintfEbPKcSt9__va_list>
}
   b80a0:	b002      	add	sp, #8
   b80a2:	f85d eb04 	ldr.w	lr, [sp], #4
   b80a6:	b003      	add	sp, #12
   b80a8:	4770      	bx	lr

000b80aa <_ZN5spark6detail9LogFilter4NodeC1EOS2_>:
struct spark::detail::LogFilter::Node {
   b80aa:	680a      	ldr	r2, [r1, #0]
   b80ac:	6002      	str	r2, [r0, #0]
   b80ae:	684a      	ldr	r2, [r1, #4]
   b80b0:	6042      	str	r2, [r0, #4]
        capacity_(0) {
   b80b2:	2200      	movs	r2, #0
   b80b4:	e9c0 2202 	strd	r2, r2, [r0, #8]
   b80b8:	b510      	push	{r4, lr}
   b80ba:	6102      	str	r2, [r0, #16]
      __a = _GLIBCXX_MOVE(__b);
   b80bc:	688c      	ldr	r4, [r1, #8]
   b80be:	6084      	str	r4, [r0, #8]
   b80c0:	68cc      	ldr	r4, [r1, #12]
   b80c2:	60c4      	str	r4, [r0, #12]
   b80c4:	690c      	ldr	r4, [r1, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   b80c6:	608a      	str	r2, [r1, #8]
   b80c8:	60ca      	str	r2, [r1, #12]
      __a = _GLIBCXX_MOVE(__b);
   b80ca:	6104      	str	r4, [r0, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   b80cc:	610a      	str	r2, [r1, #16]
   b80ce:	bd10      	pop	{r4, pc}

000b80d0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   b80d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return data_ + size_;
}

template<typename T, typename AllocatorT>
const T* spark::Vector<T, AllocatorT>::end() const {
    return data_ + size_;
   b80d4:	e9d0 8400 	ldrd	r8, r4, [r0]
   b80d8:	f04f 0a14 	mov.w	sl, #20
   b80dc:	9300      	str	r3, [sp, #0]
   b80de:	fb0a f404 	mul.w	r4, sl, r4
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   b80e2:	4b18      	ldr	r3, [pc, #96]	; (b8144 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
   b80e4:	10a4      	asrs	r4, r4, #2
   b80e6:	4617      	mov	r7, r2
   b80e8:	435c      	muls	r4, r3
   b80ea:	4645      	mov	r5, r8
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
   b80ec:	2c00      	cmp	r4, #0
   b80ee:	dd21      	ble.n	b8134 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x64>
	{
	  _DistanceType __half = __len >> 1;
   b80f0:	1066      	asrs	r6, r4, #1
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
   b80f2:	fb0a f006 	mul.w	r0, sl, r6
   b80f6:	eb05 0900 	add.w	r9, r5, r0
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
   b80fa:	463a      	mov	r2, r7
   b80fc:	f8b9 b004 	ldrh.w	fp, [r9, #4]
   b8100:	5828      	ldr	r0, [r5, r0]
   b8102:	9101      	str	r1, [sp, #4]
   b8104:	455f      	cmp	r7, fp
   b8106:	bf28      	it	cs
   b8108:	465a      	movcs	r2, fp
   b810a:	f001 fde4 	bl	b9cd6 <strncmp>
                if (cmp == 0) {
   b810e:	2800      	cmp	r0, #0
   b8110:	9901      	ldr	r1, [sp, #4]
   b8112:	f04f 0301 	mov.w	r3, #1
   b8116:	d10b      	bne.n	b8130 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x60>
                    if (node.size == value.second) { // Lengths are equal
   b8118:	455f      	cmp	r7, fp
   b811a:	d103      	bne.n	b8124 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x54>
                        found = true; // Allows caller code to avoid extra call to strncmp()
   b811c:	9a00      	ldr	r2, [sp, #0]
   b811e:	7013      	strb	r3, [r2, #0]
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   b8120:	4634      	mov	r4, r6
   b8122:	e7e3      	b.n	b80ec <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x1c>
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
   b8124:	d9fc      	bls.n	b8120 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
   b8126:	1ba6      	subs	r6, r4, r6
	      ++__first;
   b8128:	f109 0514 	add.w	r5, r9, #20
	      __len = __len - __half - 1;
   b812c:	3e01      	subs	r6, #1
   b812e:	e7f7      	b.n	b8120 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	  if (__comp(__middle, __val))
   b8130:	dbf9      	blt.n	b8126 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
   b8132:	e7f5      	b.n	b8120 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
      return __last - __first;
   b8134:	eba5 0508 	sub.w	r5, r5, r8
}
   b8138:	4802      	ldr	r0, [pc, #8]	; (b8144 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
   b813a:	10ad      	asrs	r5, r5, #2
   b813c:	4368      	muls	r0, r5
   b813e:	b003      	add	sp, #12
   b8140:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b8144:	cccccccd 	.word	0xcccccccd

000b8148 <_ZNK5spark6detail9LogFilter5levelEPKc>:
LogLevel spark::detail::LogFilter::level(const char *category) const {
   b8148:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (!nodes_.isEmpty() && category) {
   b814a:	6903      	ldr	r3, [r0, #16]
    LogLevel level = level_; // Default level
   b814c:	7e05      	ldrb	r5, [r0, #24]
LogLevel spark::detail::LogFilter::level(const char *category) const {
   b814e:	9101      	str	r1, [sp, #4]
    if (!nodes_.isEmpty() && category) {
   b8150:	b303      	cbz	r3, b8194 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
   b8152:	b1f9      	cbz	r1, b8194 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
        size_t size = 0; // Name length
   b8154:	2600      	movs	r6, #0
        const Vector<Node> *pNodes = &nodes_; // Root nodes
   b8156:	f100 040c 	add.w	r4, r0, #12
        size_t size = 0; // Name length
   b815a:	9603      	str	r6, [sp, #12]
        while ((name = nextSubcategoryName(category, size))) {
   b815c:	a903      	add	r1, sp, #12
   b815e:	a801      	add	r0, sp, #4
   b8160:	f7ff ff19 	bl	b7f96 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   b8164:	4601      	mov	r1, r0
   b8166:	b1a8      	cbz	r0, b8194 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
            const int index = nodeIndex(*pNodes, name, size, found);
   b8168:	f10d 030b 	add.w	r3, sp, #11
   b816c:	9a03      	ldr	r2, [sp, #12]
            bool found = false;
   b816e:	f88d 600b 	strb.w	r6, [sp, #11]
            const int index = nodeIndex(*pNodes, name, size, found);
   b8172:	4620      	mov	r0, r4
   b8174:	f7ff ffac 	bl	b80d0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
   b8178:	f89d 300b 	ldrb.w	r3, [sp, #11]
   b817c:	b153      	cbz	r3, b8194 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
    return data_[i];
   b817e:	6823      	ldr	r3, [r4, #0]
   b8180:	2414      	movs	r4, #20
   b8182:	fb04 3400 	mla	r4, r4, r0, r3
            pNodes = &node.nodes;
   b8186:	3408      	adds	r4, #8
            if (node.level >= 0) {
   b8188:	f934 3c02 	ldrsh.w	r3, [r4, #-2]
   b818c:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
   b818e:	bfa8      	it	ge
   b8190:	b2dd      	uxtbge	r5, r3
        while ((name = nextSubcategoryName(category, size))) {
   b8192:	e7e3      	b.n	b815c <_ZNK5spark6detail9LogFilter5levelEPKc+0x14>
}
   b8194:	4628      	mov	r0, r5
   b8196:	b004      	add	sp, #16
   b8198:	bd70      	pop	{r4, r5, r6, pc}
	...

000b819c <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
   b819c:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
   b819e:	4c09      	ldr	r4, [pc, #36]	; (b81c4 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x28>)
   b81a0:	7823      	ldrb	r3, [r4, #0]
   b81a2:	f3bf 8f5b 	dmb	ish
   b81a6:	07db      	lsls	r3, r3, #31
   b81a8:	d409      	bmi.n	b81be <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   b81aa:	4620      	mov	r0, r4
   b81ac:	f7fb ff84 	bl	b40b8 <__cxa_guard_acquire>
   b81b0:	b128      	cbz	r0, b81be <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   b81b2:	4620      	mov	r0, r4
   b81b4:	f7fb ff85 	bl	b40c2 <__cxa_guard_release>
   b81b8:	4803      	ldr	r0, [pc, #12]	; (b81c8 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
   b81ba:	f001 fc93 	bl	b9ae4 <atexit>
}
   b81be:	4803      	ldr	r0, [pc, #12]	; (b81cc <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x30>)
   b81c0:	bd10      	pop	{r4, pc}
   b81c2:	bf00      	nop
   b81c4:	2003e6a8 	.word	0x2003e6a8
   b81c8:	000b7f8f 	.word	0x000b7f8f
   b81cc:	2003b6cc 	.word	0x2003b6cc

000b81d0 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
   b81d0:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
   b81d2:	4c09      	ldr	r4, [pc, #36]	; (b81f8 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x28>)
   b81d4:	7823      	ldrb	r3, [r4, #0]
   b81d6:	f3bf 8f5b 	dmb	ish
   b81da:	07db      	lsls	r3, r3, #31
   b81dc:	d409      	bmi.n	b81f2 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   b81de:	4620      	mov	r0, r4
   b81e0:	f7fb ff6a 	bl	b40b8 <__cxa_guard_acquire>
   b81e4:	b128      	cbz	r0, b81f2 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   b81e6:	4620      	mov	r0, r4
   b81e8:	f7fb ff6b 	bl	b40c2 <__cxa_guard_release>
   b81ec:	4803      	ldr	r0, [pc, #12]	; (b81fc <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
   b81ee:	f001 fc79 	bl	b9ae4 <atexit>
    return &factory;
}
   b81f2:	4803      	ldr	r0, [pc, #12]	; (b8200 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x30>)
   b81f4:	bd10      	pop	{r4, pc}
   b81f6:	bf00      	nop
   b81f8:	2003e6ac 	.word	0x2003e6ac
   b81fc:	000b7ff7 	.word	0x000b7ff7
   b8200:	2003b6d0 	.word	0x2003b6d0

000b8204 <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
   b8204:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
   b8206:	2500      	movs	r5, #0
   b8208:	4604      	mov	r4, r0
   b820a:	e9c0 5500 	strd	r5, r5, [r0]
   b820e:	e9c0 5504 	strd	r5, r5, [r0, #16]
   b8212:	6085      	str	r5, [r0, #8]
   b8214:	6185      	str	r5, [r0, #24]
    RecursiveMutex() : handle_(nullptr)
   b8216:	f840 5f24 	str.w	r5, [r0, #36]!
        os_mutex_recursive_create(&handle_);
   b821a:	f7fe fda1 	bl	b6d60 <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
   b821e:	f7ff ffbd 	bl	b819c <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
   b8222:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   b8224:	f7ff ffd4 	bl	b81d0 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
   b8228:	7325      	strb	r5, [r4, #12]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   b822a:	6220      	str	r0, [r4, #32]
}
   b822c:	4620      	mov	r0, r4
   b822e:	bd38      	pop	{r3, r4, r5, pc}

000b8230 <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
   b8230:	b510      	push	{r4, lr}
    static LogManager mgr;
   b8232:	4c0a      	ldr	r4, [pc, #40]	; (b825c <_ZN5spark10LogManager8instanceEv+0x2c>)
   b8234:	7823      	ldrb	r3, [r4, #0]
   b8236:	f3bf 8f5b 	dmb	ish
   b823a:	07db      	lsls	r3, r3, #31
   b823c:	d40c      	bmi.n	b8258 <_ZN5spark10LogManager8instanceEv+0x28>
   b823e:	4620      	mov	r0, r4
   b8240:	f7fb ff3a 	bl	b40b8 <__cxa_guard_acquire>
   b8244:	b140      	cbz	r0, b8258 <_ZN5spark10LogManager8instanceEv+0x28>
   b8246:	4806      	ldr	r0, [pc, #24]	; (b8260 <_ZN5spark10LogManager8instanceEv+0x30>)
   b8248:	f7ff ffdc 	bl	b8204 <_ZN5spark10LogManagerC1Ev>
   b824c:	4620      	mov	r0, r4
   b824e:	f7fb ff38 	bl	b40c2 <__cxa_guard_release>
   b8252:	4804      	ldr	r0, [pc, #16]	; (b8264 <_ZN5spark10LogManager8instanceEv+0x34>)
   b8254:	f001 fc46 	bl	b9ae4 <atexit>
    return &mgr;
}
   b8258:	4801      	ldr	r0, [pc, #4]	; (b8260 <_ZN5spark10LogManager8instanceEv+0x30>)
   b825a:	bd10      	pop	{r4, pc}
   b825c:	2003e6a4 	.word	0x2003e6a4
   b8260:	2003e6b4 	.word	0x2003e6b4
   b8264:	000b8785 	.word	0x000b8785

000b8268 <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
   b8268:	4a02      	ldr	r2, [pc, #8]	; (b8274 <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
   b826a:	4903      	ldr	r1, [pc, #12]	; (b8278 <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
   b826c:	4803      	ldr	r0, [pc, #12]	; (b827c <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
   b826e:	2300      	movs	r3, #0
   b8270:	f7fe bee6 	b.w	b7040 <log_set_callbacks>
   b8274:	000b8569 	.word	0x000b8569
   b8278:	000b84f5 	.word	0x000b84f5
   b827c:	000b8475 	.word	0x000b8475

000b8280 <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
   b8280:	2300      	movs	r3, #0
   b8282:	461a      	mov	r2, r3
   b8284:	4619      	mov	r1, r3
   b8286:	4618      	mov	r0, r3
   b8288:	f7fe beda 	b.w	b7040 <log_set_callbacks>

000b828c <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   b828c:	b537      	push	{r0, r1, r2, r4, r5, lr}
        JSONObjectIterator(value.t_, value.d_) {
   b828e:	688d      	ldr	r5, [r1, #8]
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   b8290:	4604      	mov	r4, r0
      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b8292:	4668      	mov	r0, sp
   b8294:	f7ff fec8 	bl	b8028 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
        JSONObjectIterator(value.t_, value.d_) {
   b8298:	466a      	mov	r2, sp
   b829a:	4629      	mov	r1, r5
   b829c:	4620      	mov	r0, r4
   b829e:	f7ff fd7b 	bl	b7d98 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   b82a2:	a801      	add	r0, sp, #4
   b82a4:	f7fb ffdc 	bl	b4260 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b82a8:	4620      	mov	r0, r4
   b82aa:	b003      	add	sp, #12
   b82ac:	bd30      	pop	{r4, r5, pc}

000b82ae <_ZNK5spark18JSONObjectIterator4nameEv>:
inline spark::JSONString spark::JSONObjectIterator::name() const {
   b82ae:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONString(k_, d_);
   b82b0:	68cd      	ldr	r5, [r1, #12]
inline spark::JSONString spark::JSONObjectIterator::name() const {
   b82b2:	4604      	mov	r4, r0
   b82b4:	4668      	mov	r0, sp
   b82b6:	f7ff feb7 	bl	b8028 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONString(k_, d_);
   b82ba:	466a      	mov	r2, sp
   b82bc:	4629      	mov	r1, r5
   b82be:	4620      	mov	r0, r4
   b82c0:	f7ff fd46 	bl	b7d50 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   b82c4:	a801      	add	r0, sp, #4
   b82c6:	f7fb ffcb 	bl	b4260 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b82ca:	4620      	mov	r0, r4
   b82cc:	b003      	add	sp, #12
   b82ce:	bd30      	pop	{r4, r5, pc}

000b82d0 <_ZNK5spark18JSONObjectIterator5valueEv>:
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   b82d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONValue(v_, d_);
   b82d2:	690d      	ldr	r5, [r1, #16]
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   b82d4:	4604      	mov	r4, r0
   b82d6:	4668      	mov	r0, sp
   b82d8:	f7ff fea6 	bl	b8028 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONValue(v_, d_);
   b82dc:	466a      	mov	r2, sp
   b82de:	4629      	mov	r1, r5
   b82e0:	4620      	mov	r0, r4
   b82e2:	f7ff fcde 	bl	b7ca2 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   b82e6:	a801      	add	r0, sp, #4
   b82e8:	f7fb ffba 	bl	b4260 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b82ec:	4620      	mov	r0, r4
   b82ee:	b003      	add	sp, #12
   b82f0:	bd30      	pop	{r4, r5, pc}
	...

000b82f4 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
   b82f4:	b570      	push	{r4, r5, r6, lr}
   b82f6:	b08a      	sub	sp, #40	; 0x28
   b82f8:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
   b82fa:	4601      	mov	r1, r0
   b82fc:	a804      	add	r0, sp, #16
   b82fe:	f7ff ffc5 	bl	b828c <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
        if (it.name() == "baud" && baudRate) {
   b8302:	4e14      	ldr	r6, [pc, #80]	; (b8354 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x60>)
    while (it.next()) {
   b8304:	a804      	add	r0, sp, #16
   b8306:	f7ff fd5f 	bl	b7dc8 <_ZN5spark18JSONObjectIterator4nextEv>
   b830a:	b1e8      	cbz	r0, b8348 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x54>
        if (it.name() == "baud" && baudRate) {
   b830c:	a904      	add	r1, sp, #16
   b830e:	4668      	mov	r0, sp
   b8310:	f7ff ffcd 	bl	b82ae <_ZNK5spark18JSONObjectIterator4nameEv>
   b8314:	9802      	ldr	r0, [sp, #8]
   b8316:	4631      	mov	r1, r6
   b8318:	f7ff fe66 	bl	b7fe8 <_ZNK5spark10JSONStringeqEPKc.isra.0>
   b831c:	4604      	mov	r4, r0
   b831e:	b110      	cbz	r0, b8326 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x32>
   b8320:	1e2c      	subs	r4, r5, #0
   b8322:	bf18      	it	ne
   b8324:	2401      	movne	r4, #1
   b8326:	a801      	add	r0, sp, #4
   b8328:	f7fb ff9a 	bl	b4260 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b832c:	2c00      	cmp	r4, #0
   b832e:	d0e9      	beq.n	b8304 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
            *baudRate = it.value().toInt();
   b8330:	a904      	add	r1, sp, #16
   b8332:	4668      	mov	r0, sp
   b8334:	f7ff ffcc 	bl	b82d0 <_ZNK5spark18JSONObjectIterator5valueEv>
   b8338:	4668      	mov	r0, sp
   b833a:	f7ff fce8 	bl	b7d0e <_ZNK5spark9JSONValue5toIntEv>
   b833e:	6028      	str	r0, [r5, #0]
   b8340:	a801      	add	r0, sp, #4
   b8342:	f7fb ff8d 	bl	b4260 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b8346:	e7dd      	b.n	b8304 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
   b8348:	a805      	add	r0, sp, #20
   b834a:	f7fb ff89 	bl	b4260 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b834e:	b00a      	add	sp, #40	; 0x28
   b8350:	bd70      	pop	{r4, r5, r6, pc}
   b8352:	bf00      	nop
   b8354:	000bab6d 	.word	0x000bab6d

000b8358 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   b8358:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b835a:	460c      	mov	r4, r1
    if (strcmp(type, "Serial") == 0) {
   b835c:	4620      	mov	r0, r4
   b835e:	4913      	ldr	r1, [pc, #76]	; (b83ac <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   b8360:	4615      	mov	r5, r2
    if (strcmp(type, "Serial") == 0) {
   b8362:	f001 fc80 	bl	b9c66 <strcmp>
   b8366:	b950      	cbnz	r0, b837e <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x26>
        Serial.begin();
   b8368:	f001 f8b6 	bl	b94d8 <_Z16_fetch_usbserialv>
   b836c:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b8370:	f001 f8a2 	bl	b94b8 <_ZN9USBSerial5beginEl>
}
   b8374:	b003      	add	sp, #12
   b8376:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        return &Serial;
   b837a:	f001 b8ad 	b.w	b94d8 <_Z16_fetch_usbserialv>
    if (strcmp(type, "Serial1") == 0) {
   b837e:	490c      	ldr	r1, [pc, #48]	; (b83b0 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x58>)
   b8380:	4620      	mov	r0, r4
   b8382:	f001 fc70 	bl	b9c66 <strcmp>
   b8386:	b978      	cbnz	r0, b83a8 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x50>
        int baud = 9600;
   b8388:	f44f 5316 	mov.w	r3, #9600	; 0x2580
        getParams(params, &baud);
   b838c:	a901      	add	r1, sp, #4
   b838e:	4628      	mov	r0, r5
        int baud = 9600;
   b8390:	9301      	str	r3, [sp, #4]
        getParams(params, &baud);
   b8392:	f7ff ffaf 	bl	b82f4 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
   b8396:	f001 f9bd 	bl	b9714 <_Z22__fetch_global_Serial1v>
   b839a:	9901      	ldr	r1, [sp, #4]
   b839c:	f001 f834 	bl	b9408 <_ZN11USARTSerial5beginEm>
        return &Serial1;
   b83a0:	f001 f9b8 	bl	b9714 <_Z22__fetch_global_Serial1v>
}
   b83a4:	b003      	add	sp, #12
   b83a6:	bd30      	pop	{r4, r5, pc}
    return nullptr;
   b83a8:	2000      	movs	r0, #0
   b83aa:	e7fb      	b.n	b83a4 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
   b83ac:	000bab72 	.word	0x000bab72
   b83b0:	000bab79 	.word	0x000bab79

000b83b4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b83b4:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b83b6:	e9d0 5300 	ldrd	r5, r3, [r0]
   b83ba:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   b83bc:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b83be:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b83c2:	42ae      	cmp	r6, r5
   b83c4:	d005      	beq.n	b83d2 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
struct spark::detail::LogFilter::Node {
   b83c6:	f105 0008 	add.w	r0, r5, #8
   b83ca:	f7ff fff3 	bl	b83b4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   b83ce:	3514      	adds	r5, #20
   b83d0:	e7f7      	b.n	b83c2 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   b83d2:	6820      	ldr	r0, [r4, #0]
   b83d4:	f7fe ff10 	bl	b71f8 <free>
}
   b83d8:	4620      	mov	r0, r4
   b83da:	bd70      	pop	{r4, r5, r6, pc}

000b83dc <_ZN5spark6detail9LogFilterD1Ev>:
spark::detail::LogFilter::~LogFilter() {
   b83dc:	b510      	push	{r4, lr}
   b83de:	4604      	mov	r4, r0
   b83e0:	300c      	adds	r0, #12
   b83e2:	f7ff ffe7 	bl	b83b4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   b83e6:	4620      	mov	r0, r4
   b83e8:	f7fe ff92 	bl	b7310 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   b83ec:	4620      	mov	r0, r4
   b83ee:	bd10      	pop	{r4, pc}

000b83f0 <_ZN5spark16StreamLogHandlerD1Ev>:
class StreamLogHandler: public LogHandler {
   b83f0:	b510      	push	{r4, lr}
    virtual ~LogHandler() = default;
   b83f2:	4b04      	ldr	r3, [pc, #16]	; (b8404 <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
class StreamLogHandler: public LogHandler {
   b83f4:	4604      	mov	r4, r0
    virtual ~LogHandler() = default;
   b83f6:	f840 3b04 	str.w	r3, [r0], #4
   b83fa:	f7ff ffef 	bl	b83dc <_ZN5spark6detail9LogFilterD1Ev>
class StreamLogHandler: public LogHandler {
   b83fe:	4620      	mov	r0, r4
   b8400:	bd10      	pop	{r4, pc}
   b8402:	bf00      	nop
   b8404:	000ba768 	.word	0x000ba768

000b8408 <_ZN5spark16StreamLogHandlerD0Ev>:
   b8408:	b510      	push	{r4, lr}
   b840a:	4604      	mov	r4, r0
   b840c:	f7ff fff0 	bl	b83f0 <_ZN5spark16StreamLogHandlerD1Ev>
   b8410:	4620      	mov	r0, r4
   b8412:	2124      	movs	r1, #36	; 0x24
   b8414:	f7fb fe41 	bl	b409a <_ZdlPvj>
   b8418:	4620      	mov	r0, r4
   b841a:	bd10      	pop	{r4, pc}

000b841c <_ZN5spark20JSONStreamLogHandlerD1Ev>:
class JSONStreamLogHandler: public StreamLogHandler {
   b841c:	b510      	push	{r4, lr}
   b841e:	4b03      	ldr	r3, [pc, #12]	; (b842c <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
   b8420:	6003      	str	r3, [r0, #0]
   b8422:	4604      	mov	r4, r0
   b8424:	f7ff ffe4 	bl	b83f0 <_ZN5spark16StreamLogHandlerD1Ev>
   b8428:	4620      	mov	r0, r4
   b842a:	bd10      	pop	{r4, pc}
   b842c:	000bac14 	.word	0x000bac14

000b8430 <_ZN5spark20JSONStreamLogHandlerD0Ev>:
   b8430:	b510      	push	{r4, lr}
   b8432:	4604      	mov	r4, r0
   b8434:	f7ff fff2 	bl	b841c <_ZN5spark20JSONStreamLogHandlerD1Ev>
   b8438:	4620      	mov	r0, r4
   b843a:	2124      	movs	r1, #36	; 0x24
   b843c:	f7fb fe2d 	bl	b409a <_ZdlPvj>
   b8440:	4620      	mov	r0, r4
   b8442:	bd10      	pop	{r4, pc}

000b8444 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        capacity_(0) {
   b8444:	2200      	movs	r2, #0
   b8446:	e9c0 2200 	strd	r2, r2, [r0]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   b844a:	b510      	push	{r4, lr}
        capacity_(0) {
   b844c:	6082      	str	r2, [r0, #8]
      __a = _GLIBCXX_MOVE(__b);
   b844e:	680c      	ldr	r4, [r1, #0]
   b8450:	6004      	str	r4, [r0, #0]
   b8452:	684c      	ldr	r4, [r1, #4]
   b8454:	6044      	str	r4, [r0, #4]
   b8456:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b8458:	600a      	str	r2, [r1, #0]
   b845a:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   b845c:	6084      	str	r4, [r0, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b845e:	608a      	str	r2, [r1, #8]
}
   b8460:	bd10      	pop	{r4, pc}

000b8462 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      ~lock_guard()
   b8462:	b510      	push	{r4, lr}
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   b8464:	6803      	ldr	r3, [r0, #0]
   b8466:	4604      	mov	r4, r0
   b8468:	6818      	ldr	r0, [r3, #0]
   b846a:	f7fe fc91 	bl	b6d90 <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
   b846e:	4620      	mov	r0, r4
   b8470:	bd10      	pop	{r4, pc}
	...

000b8474 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   b8474:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b8478:	b087      	sub	sp, #28
   b847a:	4680      	mov	r8, r0
   b847c:	9303      	str	r3, [sp, #12]
#endif /* nRF52840 */

#if defined(STM32F10X_MD) || defined(STM32F10X_HD) || defined(STM32F2XX) || defined(nRF52840)
static inline bool HAL_IsISR() 
{
	return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   b847e:	4b1c      	ldr	r3, [pc, #112]	; (b84f0 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x7c>)
   b8480:	685b      	ldr	r3, [r3, #4]
   b8482:	f3c3 0308 	ubfx	r3, r3, #0, #9
   b8486:	4689      	mov	r9, r1
   b8488:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   b848a:	b96b      	cbnz	r3, b84a8 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x34>
        return;
    }
#endif
    LogManager *that = instance();
   b848c:	f7ff fed0 	bl	b8230 <_ZN5spark10LogManager8instanceEv>
   b8490:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   b8492:	f100 0324 	add.w	r3, r0, #36	; 0x24
      { _M_device.lock(); }
   b8496:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b8498:	9305      	str	r3, [sp, #20]
      { _M_device.lock(); }
   b849a:	f7ff fda3 	bl	b7fe4 <_ZN14RecursiveMutex4lockEv.isra.0>
        // prevent re-entry
        if (that->isActive()) {
   b849e:	7b23      	ldrb	r3, [r4, #12]
   b84a0:	b12b      	cbz	r3, b84ae <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x3a>
    LOG_WITH_LOCK(that->mutex_) {
   b84a2:	a805      	add	r0, sp, #20
   b84a4:	f7ff ffdd 	bl	b8462 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
   b84a8:	b007      	add	sp, #28
   b84aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   b84ae:	2301      	movs	r3, #1
   b84b0:	7323      	strb	r3, [r4, #12]
    return data_ + size_;
   b84b2:	e9d4 5300 	ldrd	r5, r3, [r4]
            handler->message(msg, (LogLevel)level, category, *attr);
   b84b6:	fa5f f989 	uxtb.w	r9, r9
   b84ba:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   b84be:	45aa      	cmp	sl, r5
   b84c0:	d012      	beq.n	b84e8 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>
   b84c2:	f855 7b04 	ldr.w	r7, [r5], #4
    if (level >= filter_.level(category)) {
   b84c6:	4631      	mov	r1, r6
   b84c8:	1d38      	adds	r0, r7, #4
   b84ca:	f7ff fe3d 	bl	b8148 <_ZNK5spark6detail9LogFilter5levelEPKc>
   b84ce:	4581      	cmp	r9, r0
   b84d0:	d3f5      	bcc.n	b84be <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
        logMessage(msg, level, category, attr);
   b84d2:	683b      	ldr	r3, [r7, #0]
   b84d4:	9a03      	ldr	r2, [sp, #12]
   b84d6:	9200      	str	r2, [sp, #0]
   b84d8:	f8d3 b008 	ldr.w	fp, [r3, #8]
   b84dc:	464a      	mov	r2, r9
   b84de:	4633      	mov	r3, r6
   b84e0:	4641      	mov	r1, r8
   b84e2:	4638      	mov	r0, r7
   b84e4:	47d8      	blx	fp
   b84e6:	e7ea      	b.n	b84be <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
    outputActive_ = outputActive;
   b84e8:	2300      	movs	r3, #0
   b84ea:	7323      	strb	r3, [r4, #12]
   b84ec:	e7d9      	b.n	b84a2 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x2e>
   b84ee:	bf00      	nop
   b84f0:	e000ed00 	.word	0xe000ed00

000b84f4 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:
void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   b84f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b84f8:	469b      	mov	fp, r3
   b84fa:	4b1a      	ldr	r3, [pc, #104]	; (b8564 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x70>)
   b84fc:	685b      	ldr	r3, [r3, #4]
   b84fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
   b8502:	4680      	mov	r8, r0
   b8504:	4689      	mov	r9, r1
   b8506:	4616      	mov	r6, r2
    if (HAL_IsISR()) {
   b8508:	b96b      	cbnz	r3, b8526 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x32>
    LogManager *that = instance();
   b850a:	f7ff fe91 	bl	b8230 <_ZN5spark10LogManager8instanceEv>
   b850e:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   b8510:	f100 0324 	add.w	r3, r0, #36	; 0x24
   b8514:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b8516:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   b8518:	f7ff fd64 	bl	b7fe4 <_ZN14RecursiveMutex4lockEv.isra.0>
        if (that->isActive()) {
   b851c:	7b23      	ldrb	r3, [r4, #12]
   b851e:	b12b      	cbz	r3, b852c <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
    LOG_WITH_LOCK(that->mutex_) {
   b8520:	a801      	add	r0, sp, #4
   b8522:	f7ff ff9e 	bl	b8462 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   b8526:	b003      	add	sp, #12
   b8528:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outputActive_ = outputActive;
   b852c:	2301      	movs	r3, #1
   b852e:	7323      	strb	r3, [r4, #12]
   b8530:	e9d4 5300 	ldrd	r5, r3, [r4]
    if (level >= filter_.level(category)) {
   b8534:	b2f6      	uxtb	r6, r6
   b8536:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   b853a:	4555      	cmp	r5, sl
   b853c:	d00e      	beq.n	b855c <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x68>
   b853e:	f855 7b04 	ldr.w	r7, [r5], #4
   b8542:	4659      	mov	r1, fp
   b8544:	1d38      	adds	r0, r7, #4
   b8546:	f7ff fdff 	bl	b8148 <_ZNK5spark6detail9LogFilter5levelEPKc>
   b854a:	4286      	cmp	r6, r0
   b854c:	d3f5      	bcc.n	b853a <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
        write(data, size);
   b854e:	683b      	ldr	r3, [r7, #0]
   b8550:	464a      	mov	r2, r9
   b8552:	68db      	ldr	r3, [r3, #12]
   b8554:	4641      	mov	r1, r8
   b8556:	4638      	mov	r0, r7
   b8558:	4798      	blx	r3
   b855a:	e7ee      	b.n	b853a <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
    outputActive_ = outputActive;
   b855c:	2300      	movs	r3, #0
   b855e:	7323      	strb	r3, [r4, #12]
   b8560:	e7de      	b.n	b8520 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x2c>
   b8562:	bf00      	nop
   b8564:	e000ed00 	.word	0xe000ed00

000b8568 <_ZN5spark10LogManager10logEnabledEiPKcPv>:
int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   b8568:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b856c:	4b16      	ldr	r3, [pc, #88]	; (b85c8 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x60>)
   b856e:	685b      	ldr	r3, [r3, #4]
   b8570:	f3c3 0308 	ubfx	r3, r3, #0, #9
   b8574:	4605      	mov	r5, r0
   b8576:	460f      	mov	r7, r1
    if (HAL_IsISR()) {
   b8578:	bb1b      	cbnz	r3, b85c2 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5a>
    LogManager *that = instance();
   b857a:	f7ff fe59 	bl	b8230 <_ZN5spark10LogManager8instanceEv>
    LOG_WITH_LOCK(that->mutex_) {
   b857e:	f100 0324 	add.w	r3, r0, #36	; 0x24
    LogManager *that = instance();
   b8582:	4604      	mov	r4, r0
   b8584:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b8586:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   b8588:	f7ff fd2c 	bl	b7fe4 <_ZN14RecursiveMutex4lockEv.isra.0>
   b858c:	e9d4 6300 	ldrd	r6, r3, [r4]
    int minLevel = LOG_LEVEL_NONE;
   b8590:	2446      	movs	r4, #70	; 0x46
   b8592:	eb06 0883 	add.w	r8, r6, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   b8596:	45b0      	cmp	r8, r6
   b8598:	d109      	bne.n	b85ae <_ZN5spark10LogManager10logEnabledEiPKcPv+0x46>
    LOG_WITH_LOCK(that->mutex_) {
   b859a:	a801      	add	r0, sp, #4
   b859c:	f7ff ff61 	bl	b8462 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    return (level >= minLevel);
   b85a0:	42a5      	cmp	r5, r4
   b85a2:	bfb4      	ite	lt
   b85a4:	2000      	movlt	r0, #0
   b85a6:	2001      	movge	r0, #1
}
   b85a8:	b002      	add	sp, #8
   b85aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return filter_.level(category);
   b85ae:	f856 0b04 	ldr.w	r0, [r6], #4
   b85b2:	4639      	mov	r1, r7
   b85b4:	3004      	adds	r0, #4
   b85b6:	f7ff fdc7 	bl	b8148 <_ZNK5spark6detail9LogFilter5levelEPKc>
            if (level < minLevel) {
   b85ba:	4284      	cmp	r4, r0
   b85bc:	bfa8      	it	ge
   b85be:	4604      	movge	r4, r0
        for (LogHandler *handler: that->activeHandlers_) {
   b85c0:	e7e9      	b.n	b8596 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2e>
        return 0;
   b85c2:	2000      	movs	r0, #0
   b85c4:	e7f0      	b.n	b85a8 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x40>
   b85c6:	bf00      	nop
   b85c8:	e000ed00 	.word	0xe000ed00

000b85cc <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b85cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b85ce:	e9d0 5301 	ldrd	r5, r3, [r0, #4]
   b85d2:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b85d4:	4604      	mov	r4, r0
   b85d6:	460e      	mov	r6, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b85d8:	db0d      	blt.n	b85f6 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x2a>
   b85da:	1c6f      	adds	r7, r5, #1
        if (n > 0) {
   b85dc:	2f00      	cmp	r7, #0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   b85de:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   b85e0:	dd04      	ble.n	b85ec <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x20>
    return ::realloc(ptr, size);
   b85e2:	00b9      	lsls	r1, r7, #2
   b85e4:	f7fe fe10 	bl	b7208 <realloc>
            if (!d) {
   b85e8:	b918      	cbnz	r0, b85f2 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x26>
}
   b85ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ::free(ptr);
   b85ec:	f7fe fe04 	bl	b71f8 <free>
        T* d = nullptr;
   b85f0:	2000      	movs	r0, #0
        data_ = d;
   b85f2:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   b85f4:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   b85f6:	6827      	ldr	r7, [r4, #0]
    move(p + 1, p, data_ + size_);
   b85f8:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b85fa:	eb07 0185 	add.w	r1, r7, r5, lsl #2
    move(p + 1, p, data_ + size_);
   b85fe:	0092      	lsls	r2, r2, #2
        ::memmove(dest, p, (end - p) * sizeof(T));
   b8600:	eba2 0285 	sub.w	r2, r2, r5, lsl #2
   b8604:	1d08      	adds	r0, r1, #4
   b8606:	f001 fa89 	bl	b9b1c <memmove>
    new(p) T(std::move(value));
   b860a:	f847 6025 	str.w	r6, [r7, r5, lsl #2]
    ++size_;
   b860e:	6863      	ldr	r3, [r4, #4]
   b8610:	3301      	adds	r3, #1
   b8612:	6063      	str	r3, [r4, #4]
    return true;
   b8614:	2001      	movs	r0, #1
   b8616:	e7e8      	b.n	b85ea <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x1e>

000b8618 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
bool spark::LogManager::addHandler(LogHandler *handler) {
   b8618:	b537      	push	{r0, r1, r2, r4, r5, lr}
    LOG_WITH_LOCK(mutex_) {
   b861a:	f100 0324 	add.w	r3, r0, #36	; 0x24
bool spark::LogManager::addHandler(LogHandler *handler) {
   b861e:	4604      	mov	r4, r0
   b8620:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b8622:	9301      	str	r3, [sp, #4]
   b8624:	460d      	mov	r5, r1
      { _M_device.lock(); }
   b8626:	f7ff fcdd 	bl	b7fe4 <_ZN14RecursiveMutex4lockEv.isra.0>
    return find(data_, data_ + size_, value);
   b862a:	e9d4 3200 	ldrd	r3, r2, [r4]
   b862e:	eb03 0282 	add.w	r2, r3, r2, lsl #2
        for (; p != end; ++p) {
   b8632:	4293      	cmp	r3, r2
   b8634:	4619      	mov	r1, r3
   b8636:	d00b      	beq.n	b8650 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x38>
            if (*p == value) {
   b8638:	6809      	ldr	r1, [r1, #0]
   b863a:	42a9      	cmp	r1, r5
   b863c:	f103 0304 	add.w	r3, r3, #4
   b8640:	d1f7      	bne.n	b8632 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x1a>
            return false;
   b8642:	a801      	add	r0, sp, #4
   b8644:	f7ff ff0d 	bl	b8462 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   b8648:	2500      	movs	r5, #0
}
   b864a:	4628      	mov	r0, r5
   b864c:	b003      	add	sp, #12
   b864e:	bd30      	pop	{r4, r5, pc}
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
   b8650:	4629      	mov	r1, r5
   b8652:	4620      	mov	r0, r4
   b8654:	f7ff ffba 	bl	b85cc <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>
   b8658:	4605      	mov	r5, r0
   b865a:	2800      	cmp	r0, #0
   b865c:	d0f1      	beq.n	b8642 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x2a>
        if (activeHandlers_.size() == 1) {
   b865e:	6863      	ldr	r3, [r4, #4]
   b8660:	2b01      	cmp	r3, #1
   b8662:	d101      	bne.n	b8668 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x50>
            setSystemCallbacks();
   b8664:	f7ff fe00 	bl	b8268 <_ZN5spark10LogManager18setSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   b8668:	a801      	add	r0, sp, #4
   b866a:	f7ff fefa 	bl	b8462 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   b866e:	e7ec      	b.n	b864a <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x32>

000b8670 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b8670:	b570      	push	{r4, r5, r6, lr}
   b8672:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
   b8674:	e9d0 0200 	ldrd	r0, r2, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b8678:	460b      	mov	r3, r1
    T* const p = find(data_, data_ + size_, value);
   b867a:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        for (; p != end; ++p) {
   b867e:	4282      	cmp	r2, r0
   b8680:	d00f      	beq.n	b86a2 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x32>
    move(p, p + 1, data_ + size_);
   b8682:	4601      	mov	r1, r0
            if (*p == value) {
   b8684:	681d      	ldr	r5, [r3, #0]
   b8686:	f851 6b04 	ldr.w	r6, [r1], #4
   b868a:	42ae      	cmp	r6, r5
   b868c:	d107      	bne.n	b869e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2e>
        ::memmove(dest, p, (end - p) * sizeof(T));
   b868e:	1a52      	subs	r2, r2, r1
   b8690:	f001 fa44 	bl	b9b1c <memmove>
    --size_;
   b8694:	6863      	ldr	r3, [r4, #4]
   b8696:	3b01      	subs	r3, #1
   b8698:	6063      	str	r3, [r4, #4]
    return true;
   b869a:	2001      	movs	r0, #1
}
   b869c:	bd70      	pop	{r4, r5, r6, pc}
    move(p, p + 1, data_ + size_);
   b869e:	4608      	mov	r0, r1
   b86a0:	e7ed      	b.n	b867e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xe>
        return false;
   b86a2:	2000      	movs	r0, #0
   b86a4:	e7fa      	b.n	b869c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2c>

000b86a6 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
void spark::LogManager::removeHandler(LogHandler *handler) {
   b86a6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    LOG_WITH_LOCK(mutex_) {
   b86a8:	f100 0324 	add.w	r3, r0, #36	; 0x24
void spark::LogManager::removeHandler(LogHandler *handler) {
   b86ac:	4604      	mov	r4, r0
   b86ae:	6a40      	ldr	r0, [r0, #36]	; 0x24
   b86b0:	9101      	str	r1, [sp, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b86b2:	9303      	str	r3, [sp, #12]
      { _M_device.lock(); }
   b86b4:	f7ff fc96 	bl	b7fe4 <_ZN14RecursiveMutex4lockEv.isra.0>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   b86b8:	a901      	add	r1, sp, #4
   b86ba:	4620      	mov	r0, r4
   b86bc:	f7ff ffd8 	bl	b8670 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
   b86c0:	b118      	cbz	r0, b86ca <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
   b86c2:	6863      	ldr	r3, [r4, #4]
   b86c4:	b90b      	cbnz	r3, b86ca <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
            resetSystemCallbacks();
   b86c6:	f7ff fddb 	bl	b8280 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   b86ca:	a803      	add	r0, sp, #12
   b86cc:	f7ff fec9 	bl	b8462 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   b86d0:	b004      	add	sp, #16
   b86d2:	bd10      	pop	{r4, pc}

000b86d4 <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
void spark::LogManager::destroyFactoryHandlers() {
   b86d4:	b570      	push	{r4, r5, r6, lr}
    return data_ + size_;
   b86d6:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
   b86da:	2318      	movs	r3, #24
   b86dc:	4604      	mov	r4, r0
   b86de:	fb03 5606 	mla	r6, r3, r6, r5
    for (const FactoryHandler &h: factoryHandlers_) {
   b86e2:	42ae      	cmp	r6, r5
   b86e4:	d015      	beq.n	b8712 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
   b86e6:	f105 0110 	add.w	r1, r5, #16
   b86ea:	4620      	mov	r0, r4
   b86ec:	f7ff ffc0 	bl	b8670 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
   b86f0:	6863      	ldr	r3, [r4, #4]
   b86f2:	b90b      	cbnz	r3, b86f8 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
   b86f4:	f7ff fdc4 	bl	b8280 <_ZN5spark10LogManager20resetSystemCallbacksEv>
        handlerFactory_->destroyHandler(h.handler);
   b86f8:	69e0      	ldr	r0, [r4, #28]
   b86fa:	6929      	ldr	r1, [r5, #16]
   b86fc:	6803      	ldr	r3, [r0, #0]
   b86fe:	68db      	ldr	r3, [r3, #12]
   b8700:	4798      	blx	r3
        if (h.stream) {
   b8702:	6969      	ldr	r1, [r5, #20]
   b8704:	b119      	cbz	r1, b870e <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
   b8706:	6a20      	ldr	r0, [r4, #32]
   b8708:	6803      	ldr	r3, [r0, #0]
   b870a:	68db      	ldr	r3, [r3, #12]
   b870c:	4798      	blx	r3
    for (const FactoryHandler &h: factoryHandlers_) {
   b870e:	3518      	adds	r5, #24
   b8710:	e7e7      	b.n	b86e2 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    destruct(data_, data_ + size_);
   b8712:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   b8716:	2618      	movs	r6, #24
   b8718:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b871c:	42ae      	cmp	r6, r5
   b871e:	d004      	beq.n	b872a <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
struct spark::LogManager::FactoryHandler {
   b8720:	4628      	mov	r0, r5
   b8722:	f000 fcdb 	bl	b90dc <_ZN6StringD1Ev>
   b8726:	3518      	adds	r5, #24
   b8728:	e7f8      	b.n	b871c <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
    size_ = 0;
   b872a:	2300      	movs	r3, #0
   b872c:	6163      	str	r3, [r4, #20]
}
   b872e:	bd70      	pop	{r4, r5, r6, pc}

000b8730 <_ZN5spark10LogManagerD1Ev>:
spark::LogManager::~LogManager() {
   b8730:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b8732:	4604      	mov	r4, r0
    resetSystemCallbacks();
   b8734:	f7ff fda4 	bl	b8280 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   b8738:	f104 0324 	add.w	r3, r4, #36	; 0x24
   b873c:	6a60      	ldr	r0, [r4, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b873e:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   b8740:	f7ff fc50 	bl	b7fe4 <_ZN14RecursiveMutex4lockEv.isra.0>
         destroyFactoryHandlers();
   b8744:	4620      	mov	r0, r4
   b8746:	f7ff ffc5 	bl	b86d4 <_ZN5spark10LogManager22destroyFactoryHandlersEv>
    LOG_WITH_LOCK(mutex_) {
   b874a:	a801      	add	r0, sp, #4
   b874c:	f7ff fe89 	bl	b8462 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (handle_) {
   b8750:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b8752:	b108      	cbz	r0, b8758 <_ZN5spark10LogManagerD1Ev+0x28>
            os_mutex_recursive_destroy(handle_);
   b8754:	f7fe fb0c 	bl	b6d70 <os_mutex_recursive_destroy>
    destruct(data_, data_ + size_);
   b8758:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   b875c:	2618      	movs	r6, #24
   b875e:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b8762:	42ae      	cmp	r6, r5
   b8764:	d004      	beq.n	b8770 <_ZN5spark10LogManagerD1Ev+0x40>
struct spark::LogManager::FactoryHandler {
   b8766:	4628      	mov	r0, r5
   b8768:	f000 fcb8 	bl	b90dc <_ZN6StringD1Ev>
   b876c:	3518      	adds	r5, #24
   b876e:	e7f8      	b.n	b8762 <_ZN5spark10LogManagerD1Ev+0x32>
    ::free(ptr);
   b8770:	6920      	ldr	r0, [r4, #16]
   b8772:	f7fe fd41 	bl	b71f8 <free>
   b8776:	6820      	ldr	r0, [r4, #0]
   b8778:	f7fe fd3e 	bl	b71f8 <free>
}
   b877c:	4620      	mov	r0, r4
   b877e:	b002      	add	sp, #8
   b8780:	bd70      	pop	{r4, r5, r6, pc}
	...

000b8784 <__tcf_2>:
    static LogManager mgr;
   b8784:	4801      	ldr	r0, [pc, #4]	; (b878c <__tcf_2+0x8>)
   b8786:	f7ff bfd3 	b.w	b8730 <_ZN5spark10LogManagerD1Ev>
   b878a:	bf00      	nop
   b878c:	2003e6b4 	.word	0x2003e6b4

000b8790 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        if (dest > p && dest < end) {
   b8790:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b8792:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b8794:	4604      	mov	r4, r0
   b8796:	460d      	mov	r5, r1
   b8798:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b879a:	d915      	bls.n	b87c8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x38>
   b879c:	4290      	cmp	r0, r2
   b879e:	d214      	bcs.n	b87ca <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
            --end;
   b87a0:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   b87a4:	1a75      	subs	r5, r6, r1
   b87a6:	f1a1 0714 	sub.w	r7, r1, #20
   b87aa:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b87ac:	42b7      	cmp	r7, r6
   b87ae:	d01a      	beq.n	b87e6 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*end));
   b87b0:	b11c      	cbz	r4, b87ba <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x2a>
   b87b2:	4631      	mov	r1, r6
   b87b4:	4620      	mov	r0, r4
   b87b6:	f7ff fc78 	bl	b80aa <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
struct spark::detail::LogFilter::Node {
   b87ba:	f106 0008 	add.w	r0, r6, #8
   b87be:	f7ff fdf9 	bl	b83b4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
   b87c2:	3e14      	subs	r6, #20
   b87c4:	3c14      	subs	r4, #20
   b87c6:	e7f1      	b.n	b87ac <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1c>
        } else if (dest != p) {
   b87c8:	d00d      	beq.n	b87e6 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
            for (; p != end; ++p, ++dest) {
   b87ca:	42b5      	cmp	r5, r6
   b87cc:	d00b      	beq.n	b87e6 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*p));
   b87ce:	b11c      	cbz	r4, b87d8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x48>
   b87d0:	4629      	mov	r1, r5
   b87d2:	4620      	mov	r0, r4
   b87d4:	f7ff fc69 	bl	b80aa <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
   b87d8:	f105 0008 	add.w	r0, r5, #8
   b87dc:	f7ff fdea 	bl	b83b4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; p != end; ++p, ++dest) {
   b87e0:	3514      	adds	r5, #20
   b87e2:	3414      	adds	r4, #20
   b87e4:	e7f1      	b.n	b87ca <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
    }
   b87e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b87e8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   b87e8:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b87ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b87ec:	4604      	mov	r4, r0
   b87ee:	460d      	mov	r5, r1
   b87f0:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b87f2:	d914      	bls.n	b881e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
   b87f4:	4290      	cmp	r0, r2
   b87f6:	d213      	bcs.n	b8820 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            --end;
   b87f8:	f1a2 0610 	sub.w	r6, r2, #16
            dest += end - p - 1;
   b87fc:	1a75      	subs	r5, r6, r1
   b87fe:	f1a1 0710 	sub.w	r7, r1, #16
   b8802:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b8804:	42b7      	cmp	r7, r6
   b8806:	d018      	beq.n	b883a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
   b8808:	b11c      	cbz	r4, b8812 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
   b880a:	4631      	mov	r1, r6
   b880c:	4620      	mov	r0, r4
   b880e:	f000 fce2 	bl	b91d6 <_ZN6StringC1EOS_>
                end->~T();
   b8812:	4630      	mov	r0, r6
   b8814:	f000 fc62 	bl	b90dc <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   b8818:	3e10      	subs	r6, #16
   b881a:	3c10      	subs	r4, #16
   b881c:	e7f2      	b.n	b8804 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   b881e:	d00c      	beq.n	b883a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
   b8820:	42b5      	cmp	r5, r6
   b8822:	d00a      	beq.n	b883a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
   b8824:	b11c      	cbz	r4, b882e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
   b8826:	4629      	mov	r1, r5
   b8828:	4620      	mov	r0, r4
   b882a:	f000 fcd4 	bl	b91d6 <_ZN6StringC1EOS_>
                p->~T();
   b882e:	4628      	mov	r0, r5
   b8830:	f000 fc54 	bl	b90dc <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   b8834:	3510      	adds	r5, #16
   b8836:	3410      	adds	r4, #16
   b8838:	e7f2      	b.n	b8820 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
    }
   b883a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b883c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
   b883c:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b883e:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b8840:	4605      	mov	r5, r0
        if (n > 0) {
   b8842:	dd11      	ble.n	b8868 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2c>
    return ::malloc(size);
   b8844:	0130      	lsls	r0, r6, #4
   b8846:	f7fe fccf 	bl	b71e8 <malloc>
            if (!d) {
   b884a:	4604      	mov	r4, r0
   b884c:	b158      	cbz	r0, b8866 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b884e:	e9d5 1200 	ldrd	r1, r2, [r5]
   b8852:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   b8856:	f7ff ffc7 	bl	b87e8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   b885a:	6828      	ldr	r0, [r5, #0]
   b885c:	f7fe fccc 	bl	b71f8 <free>
        data_ = d;
   b8860:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b8862:	60ae      	str	r6, [r5, #8]
        return true;
   b8864:	2001      	movs	r0, #1
    }
   b8866:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b8868:	2400      	movs	r4, #0
   b886a:	e7f6      	b.n	b885a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x1e>

000b886c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   b886c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b8870:	4690      	mov	r8, r2
   b8872:	b095      	sub	sp, #84	; 0x54
        capacity_(0) {
   b8874:	2300      	movs	r3, #0
   b8876:	9103      	str	r1, [sp, #12]
    return size_;
   b8878:	f8d8 1004 	ldr.w	r1, [r8, #4]
        capacity_(0) {
   b887c:	930a      	str	r3, [sp, #40]	; 0x28
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   b887e:	2246      	movs	r2, #70	; 0x46
    if (n > capacity_ && !realloc(n)) {
   b8880:	4299      	cmp	r1, r3
        capacity_(0) {
   b8882:	e9c0 3300 	strd	r3, r3, [r0]
   b8886:	e9c0 3302 	strd	r3, r3, [r0, #8]
   b888a:	e9c0 3304 	strd	r3, r3, [r0, #16]
   b888e:	e9cd 3308 	strd	r3, r3, [sp, #32]
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   b8892:	4604      	mov	r4, r0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   b8894:	7602      	strb	r2, [r0, #24]
    if (n > capacity_ && !realloc(n)) {
   b8896:	dc23      	bgt.n	b88e0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_ + size_;
   b8898:	e9d8 5700 	ldrd	r5, r7, [r8]
   b889c:	2314      	movs	r3, #20
   b889e:	fb03 5707 	mla	r7, r3, r7, r5
    for (LogCategoryFilter &filter: filters) {
   b88a2:	42af      	cmp	r7, r5
   b88a4:	d03b      	beq.n	b891e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xb2>
        cats.append(std::move(filter.cat_));
   b88a6:	4629      	mov	r1, r5
   b88a8:	a80b      	add	r0, sp, #44	; 0x2c
   b88aa:	f000 fc94 	bl	b91d6 <_ZN6StringC1EOS_>
    return insert(size_, std::move(value));
   b88ae:	a90b      	add	r1, sp, #44	; 0x2c
   b88b0:	a80f      	add	r0, sp, #60	; 0x3c
   b88b2:	9e09      	ldr	r6, [sp, #36]	; 0x24
   b88b4:	f000 fc8f 	bl	b91d6 <_ZN6StringC1EOS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b88b8:	e9dd 1309 	ldrd	r1, r3, [sp, #36]	; 0x24
   b88bc:	4299      	cmp	r1, r3
   b88be:	da1b      	bge.n	b88f8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x8c>
    T* const p = data_ + i;
   b88c0:	9b08      	ldr	r3, [sp, #32]
    move(p + 1, p, data_ + size_);
   b88c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
    T* const p = data_ + i;
   b88c4:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
   b88c8:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   b88cc:	4631      	mov	r1, r6
   b88ce:	f106 0010 	add.w	r0, r6, #16
   b88d2:	f7ff ff89 	bl	b87e8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
   b88d6:	b9ee      	cbnz	r6, b8914 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa8>
    ++size_;
   b88d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b88da:	3301      	adds	r3, #1
   b88dc:	9309      	str	r3, [sp, #36]	; 0x24
    return true;
   b88de:	e011      	b.n	b8904 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x98>
    if (n > capacity_ && !realloc(n)) {
   b88e0:	a808      	add	r0, sp, #32
   b88e2:	f7ff ffab 	bl	b883c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   b88e6:	2800      	cmp	r0, #0
   b88e8:	d1d6      	bne.n	b8898 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>
        return;
   b88ea:	a808      	add	r0, sp, #32
   b88ec:	f7fe fd10 	bl	b7310 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   b88f0:	4620      	mov	r0, r4
   b88f2:	b015      	add	sp, #84	; 0x54
   b88f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b88f8:	3101      	adds	r1, #1
   b88fa:	a808      	add	r0, sp, #32
   b88fc:	f7ff ff9e 	bl	b883c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   b8900:	2800      	cmp	r0, #0
   b8902:	d1dd      	bne.n	b88c0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x54>
    return insert(size_, std::move(value));
   b8904:	a80f      	add	r0, sp, #60	; 0x3c
   b8906:	f000 fbe9 	bl	b90dc <_ZN6StringD1Ev>
        cats.append(std::move(filter.cat_));
   b890a:	a80b      	add	r0, sp, #44	; 0x2c
   b890c:	f000 fbe6 	bl	b90dc <_ZN6StringD1Ev>
    for (LogCategoryFilter &filter: filters) {
   b8910:	3514      	adds	r5, #20
   b8912:	e7c6      	b.n	b88a2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x36>
    new(p) T(std::move(value));
   b8914:	a90f      	add	r1, sp, #60	; 0x3c
   b8916:	4630      	mov	r0, r6
   b8918:	f000 fc5d 	bl	b91d6 <_ZN6StringC1EOS_>
   b891c:	e7dc      	b.n	b88d8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x6c>
        capacity_(0) {
   b891e:	2600      	movs	r6, #0
   b8920:	e9cd 660b 	strd	r6, r6, [sp, #44]	; 0x2c
   b8924:	960d      	str	r6, [sp, #52]	; 0x34
    for (int i = 0; i < cats.size(); ++i) {
   b8926:	f04f 0914 	mov.w	r9, #20
    return data_[i];
   b892a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   b892e:	429e      	cmp	r6, r3
   b8930:	da7c      	bge.n	b8a2c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1c0>
    char operator [] (unsigned int index) const;
    char& operator [] (unsigned int index);
    void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
    void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
        {getBytes((unsigned char *)buf, bufsize, index);}
    const char * c_str() const { return buffer; }
   b8932:	0133      	lsls	r3, r6, #4
   b8934:	58d3      	ldr	r3, [r2, r3]
        const char *category = cats.at(i).c_str();
   b8936:	9306      	str	r3, [sp, #24]
        if (!category) {
   b8938:	b90b      	cbnz	r3, b893e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd2>
    for (int i = 0; i < cats.size(); ++i) {
   b893a:	3601      	adds	r6, #1
   b893c:	e7f5      	b.n	b892a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xbe>
        size_t size = 0; // Name length
   b893e:	2300      	movs	r3, #0
   b8940:	9307      	str	r3, [sp, #28]
   b8942:	fb09 f306 	mul.w	r3, r9, r6
   b8946:	9302      	str	r3, [sp, #8]
        Vector<Node> *pNodes = &nodes; // Root nodes
   b8948:	ad0b      	add	r5, sp, #44	; 0x2c
        while ((name = nextSubcategoryName(category, size))) {
   b894a:	a907      	add	r1, sp, #28
   b894c:	a806      	add	r0, sp, #24
   b894e:	f7ff fb22 	bl	b7f96 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   b8952:	4682      	mov	sl, r0
   b8954:	2800      	cmp	r0, #0
   b8956:	d0f0      	beq.n	b893a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xce>
            bool found = false;
   b8958:	f04f 0300 	mov.w	r3, #0
   b895c:	f88d 3017 	strb.w	r3, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
   b8960:	4601      	mov	r1, r0
   b8962:	9a07      	ldr	r2, [sp, #28]
   b8964:	f10d 0317 	add.w	r3, sp, #23
   b8968:	4628      	mov	r0, r5
   b896a:	f7ff fbb1 	bl	b80d0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   b896e:	f89d 7017 	ldrb.w	r7, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
   b8972:	9001      	str	r0, [sp, #4]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   b8974:	2f00      	cmp	r7, #0
   b8976:	d14a      	bne.n	b8a0e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
   b8978:	f8bd 301c 	ldrh.w	r3, [sp, #28]
            level(-1) {
   b897c:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
        capacity_(0) {
   b8980:	e9cd 7711 	strd	r7, r7, [sp, #68]	; 0x44
   b8984:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b8988:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
   b898c:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
   b8990:	9713      	str	r7, [sp, #76]	; 0x4c
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b8992:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
   b8996:	4293      	cmp	r3, r2
   b8998:	db17      	blt.n	b89ca <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x15e>
   b899a:	f103 0a01 	add.w	sl, r3, #1
        if (n > 0) {
   b899e:	f1ba 0f00 	cmp.w	sl, #0
   b89a2:	dd30      	ble.n	b8a06 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19a>
    return ::malloc(size);
   b89a4:	fb09 f00a 	mul.w	r0, r9, sl
   b89a8:	f7fe fc1e 	bl	b71e8 <malloc>
            if (!d) {
   b89ac:	4683      	mov	fp, r0
   b89ae:	b360      	cbz	r0, b8a0a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19e>
            move(d, data_, data_ + size_);
   b89b0:	e9d5 1200 	ldrd	r1, r2, [r5]
   b89b4:	fb09 1202 	mla	r2, r9, r2, r1
   b89b8:	f7ff feea 	bl	b8790 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    ::free(ptr);
   b89bc:	6828      	ldr	r0, [r5, #0]
   b89be:	f7fe fc1b 	bl	b71f8 <free>
        data_ = d;
   b89c2:	f8c5 b000 	str.w	fp, [r5]
        capacity_ = n;
   b89c6:	f8c5 a008 	str.w	sl, [r5, #8]
    T* const p = data_ + i;
   b89ca:	682b      	ldr	r3, [r5, #0]
   b89cc:	9a01      	ldr	r2, [sp, #4]
   b89ce:	fb09 3a02 	mla	sl, r9, r2, r3
    move(p + 1, p, data_ + size_);
   b89d2:	686a      	ldr	r2, [r5, #4]
   b89d4:	4651      	mov	r1, sl
   b89d6:	fb09 3202 	mla	r2, r9, r2, r3
   b89da:	f10a 0014 	add.w	r0, sl, #20
   b89de:	f7ff fed7 	bl	b8790 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
   b89e2:	f1ba 0f00 	cmp.w	sl, #0
   b89e6:	d003      	beq.n	b89f0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x184>
   b89e8:	a90f      	add	r1, sp, #60	; 0x3c
   b89ea:	4650      	mov	r0, sl
   b89ec:	f7ff fb5d 	bl	b80aa <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
    ++size_;
   b89f0:	686b      	ldr	r3, [r5, #4]
   b89f2:	3301      	adds	r3, #1
   b89f4:	606b      	str	r3, [r5, #4]
struct spark::detail::LogFilter::Node {
   b89f6:	a811      	add	r0, sp, #68	; 0x44
   b89f8:	f7ff fcdc 	bl	b83b4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   b89fc:	b13f      	cbz	r7, b8a0e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
    Vector<Node> nodes;
   b89fe:	a80b      	add	r0, sp, #44	; 0x2c
   b8a00:	f7ff fcd8 	bl	b83b4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   b8a04:	e771      	b.n	b88ea <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x7e>
        T* d = nullptr;
   b8a06:	46bb      	mov	fp, r7
   b8a08:	e7d8      	b.n	b89bc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x150>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   b8a0a:	2701      	movs	r7, #1
   b8a0c:	e7f3      	b.n	b89f6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x18a>
    return data_[i];
   b8a0e:	9b01      	ldr	r3, [sp, #4]
   b8a10:	682d      	ldr	r5, [r5, #0]
   b8a12:	fb09 5503 	mla	r5, r9, r3, r5
            if (!*category) { // Check if it's last subcategory
   b8a16:	9b06      	ldr	r3, [sp, #24]
   b8a18:	781b      	ldrb	r3, [r3, #0]
   b8a1a:	b92b      	cbnz	r3, b8a28 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>
                node.level = filters.at(i).level_;
   b8a1c:	f8d8 3000 	ldr.w	r3, [r8]
   b8a20:	9a02      	ldr	r2, [sp, #8]
   b8a22:	4413      	add	r3, r2
   b8a24:	7c1b      	ldrb	r3, [r3, #16]
   b8a26:	80eb      	strh	r3, [r5, #6]
            pNodes = &node.nodes;
   b8a28:	3508      	adds	r5, #8
        while ((name = nextSubcategoryName(category, size))) {
   b8a2a:	e78e      	b.n	b894a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xde>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b8a2c:	6821      	ldr	r1, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   b8a2e:	6022      	str	r2, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b8a30:	6862      	ldr	r2, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
   b8a32:	6063      	str	r3, [r4, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b8a34:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b8a36:	9209      	str	r2, [sp, #36]	; 0x24
      __a = _GLIBCXX_MOVE(__b);
   b8a38:	9a0a      	ldr	r2, [sp, #40]	; 0x28
      __b = _GLIBCXX_MOVE(__tmp);
   b8a3a:	930a      	str	r3, [sp, #40]	; 0x28
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b8a3c:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   b8a3e:	60a2      	str	r2, [r4, #8]
   b8a40:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
      __b = _GLIBCXX_MOVE(__tmp);
   b8a42:	930b      	str	r3, [sp, #44]	; 0x2c
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b8a44:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   b8a46:	60e2      	str	r2, [r4, #12]
   b8a48:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
   b8a4a:	930c      	str	r3, [sp, #48]	; 0x30
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b8a4c:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
   b8a4e:	6122      	str	r2, [r4, #16]
   b8a50:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
   b8a52:	930d      	str	r3, [sp, #52]	; 0x34
    level_ = level;
   b8a54:	9b03      	ldr	r3, [sp, #12]
   b8a56:	9108      	str	r1, [sp, #32]
      __a = _GLIBCXX_MOVE(__b);
   b8a58:	6162      	str	r2, [r4, #20]
   b8a5a:	7623      	strb	r3, [r4, #24]
   b8a5c:	e7cf      	b.n	b89fe <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x192>
	...

000b8a60 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
   b8a60:	b5f0      	push	{r4, r5, r6, r7, lr}
   b8a62:	4604      	mov	r4, r0
   b8a64:	b087      	sub	sp, #28
   b8a66:	460d      	mov	r5, r1
        filter_(level, filters) {
   b8a68:	4626      	mov	r6, r4
        stream_(&stream) {
   b8a6a:	4619      	mov	r1, r3
   b8a6c:	4668      	mov	r0, sp
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
   b8a6e:	4617      	mov	r7, r2
        stream_(&stream) {
   b8a70:	f7fb fe98 	bl	b47a4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   b8a74:	4b0b      	ldr	r3, [pc, #44]	; (b8aa4 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x44>)
   b8a76:	f846 3b04 	str.w	r3, [r6], #4
   b8a7a:	4669      	mov	r1, sp
   b8a7c:	a803      	add	r0, sp, #12
   b8a7e:	f7fb fe91 	bl	b47a4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b8a82:	aa03      	add	r2, sp, #12
   b8a84:	4639      	mov	r1, r7
   b8a86:	4630      	mov	r0, r6
   b8a88:	f7ff fef0 	bl	b886c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b8a8c:	a803      	add	r0, sp, #12
   b8a8e:	f7fb fced 	bl	b446c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   b8a92:	4668      	mov	r0, sp
   b8a94:	f7fb fcea 	bl	b446c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b8a98:	4b03      	ldr	r3, [pc, #12]	; (b8aa8 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x48>)
   b8a9a:	6023      	str	r3, [r4, #0]
}
   b8a9c:	4620      	mov	r0, r4
        stream_(&stream) {
   b8a9e:	6225      	str	r5, [r4, #32]
}
   b8aa0:	b007      	add	sp, #28
   b8aa2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b8aa4:	000ba768 	.word	0x000ba768
   b8aa8:	000babfc 	.word	0x000babfc

000b8aac <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:
            Print *stream, const JSONValue &params) {
   b8aac:	b5f0      	push	{r4, r5, r6, r7, lr}
   b8aae:	460f      	mov	r7, r1
   b8ab0:	b085      	sub	sp, #20
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   b8ab2:	491d      	ldr	r1, [pc, #116]	; (b8b28 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x7c>)
            Print *stream, const JSONValue &params) {
   b8ab4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   b8ab6:	4638      	mov	r0, r7
            Print *stream, const JSONValue &params) {
   b8ab8:	4616      	mov	r6, r2
   b8aba:	461d      	mov	r5, r3
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   b8abc:	f001 f8d3 	bl	b9c66 <strcmp>
   b8ac0:	b9c0      	cbnz	r0, b8af4 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x48>
        if (!stream) {
   b8ac2:	b1a4      	cbz	r4, b8aee <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
   b8ac4:	4629      	mov	r1, r5
   b8ac6:	a801      	add	r0, sp, #4
   b8ac8:	f7ff fcbc 	bl	b8444 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   b8acc:	4917      	ldr	r1, [pc, #92]	; (b8b2c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
   b8ace:	2024      	movs	r0, #36	; 0x24
   b8ad0:	f000 fe44 	bl	b975c <_ZnwjRKSt9nothrow_t>
   b8ad4:	4605      	mov	r5, r0
   b8ad6:	b130      	cbz	r0, b8ae6 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
    using StreamLogHandler::StreamLogHandler;
   b8ad8:	ab01      	add	r3, sp, #4
   b8ada:	4632      	mov	r2, r6
   b8adc:	4621      	mov	r1, r4
   b8ade:	f7ff ffbf 	bl	b8a60 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b8ae2:	4b13      	ldr	r3, [pc, #76]	; (b8b30 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x84>)
   b8ae4:	602b      	str	r3, [r5, #0]
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   b8ae6:	a801      	add	r0, sp, #4
   b8ae8:	f7fb fcc0 	bl	b446c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b8aec:	462c      	mov	r4, r5
}
   b8aee:	4620      	mov	r0, r4
   b8af0:	b005      	add	sp, #20
   b8af2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (strcmp(type, "StreamLogHandler") == 0) {
   b8af4:	490f      	ldr	r1, [pc, #60]	; (b8b34 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x88>)
   b8af6:	4638      	mov	r0, r7
   b8af8:	f001 f8b5 	bl	b9c66 <strcmp>
   b8afc:	b990      	cbnz	r0, b8b24 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x78>
        if (!stream) {
   b8afe:	2c00      	cmp	r4, #0
   b8b00:	d0f5      	beq.n	b8aee <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   b8b02:	4629      	mov	r1, r5
   b8b04:	a801      	add	r0, sp, #4
   b8b06:	f7ff fc9d 	bl	b8444 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   b8b0a:	4908      	ldr	r1, [pc, #32]	; (b8b2c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
   b8b0c:	2024      	movs	r0, #36	; 0x24
   b8b0e:	f000 fe25 	bl	b975c <_ZnwjRKSt9nothrow_t>
   b8b12:	4605      	mov	r5, r0
   b8b14:	2800      	cmp	r0, #0
   b8b16:	d0e6      	beq.n	b8ae6 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
   b8b18:	ab01      	add	r3, sp, #4
   b8b1a:	4632      	mov	r2, r6
   b8b1c:	4621      	mov	r1, r4
   b8b1e:	f7ff ff9f 	bl	b8a60 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b8b22:	e7e0      	b.n	b8ae6 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
            return nullptr; // Output stream is not specified
   b8b24:	2400      	movs	r4, #0
   b8b26:	e7e2      	b.n	b8aee <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
   b8b28:	000bab81 	.word	0x000bab81
   b8b2c:	000bad0c 	.word	0x000bad0c
   b8b30:	000bac14 	.word	0x000bac14
   b8b34:	000bab85 	.word	0x000bab85

000b8b38 <_GLOBAL__sub_I__ZN5spark3LogE>:
        name_(name) {
   b8b38:	4b01      	ldr	r3, [pc, #4]	; (b8b40 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b8b3a:	4a02      	ldr	r2, [pc, #8]	; (b8b44 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b8b3c:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b8b3e:	4770      	bx	lr
   b8b40:	2003e6b0 	.word	0x2003e6b0
   b8b44:	000bab96 	.word	0x000bab96

000b8b48 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   b8b48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b8b4c:	9d08      	ldr	r5, [sp, #32]
    if (stream_ == &Serial && Network.listening()) {
   b8b4e:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   b8b52:	4604      	mov	r4, r0
   b8b54:	460e      	mov	r6, r1
   b8b56:	4617      	mov	r7, r2
   b8b58:	4698      	mov	r8, r3
    if (stream_ == &Serial && Network.listening()) {
   b8b5a:	f000 fcbd 	bl	b94d8 <_Z16_fetch_usbserialv>
   b8b5e:	4581      	cmp	r9, r0
   b8b60:	d04c      	beq.n	b8bfc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb4>
    if (attr.has_time) {
   b8b62:	792b      	ldrb	r3, [r5, #4]
   b8b64:	0719      	lsls	r1, r3, #28
   b8b66:	d504      	bpl.n	b8b72 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x2a>
        printf("%010u ", (unsigned)attr.time);
   b8b68:	696a      	ldr	r2, [r5, #20]
   b8b6a:	4954      	ldr	r1, [pc, #336]	; (b8cbc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x174>)
   b8b6c:	4620      	mov	r0, r4
   b8b6e:	f7ff fa8d 	bl	b808c <_ZN5spark16StreamLogHandler6printfEPKcz>
    if (category) {
   b8b72:	f1b8 0f00 	cmp.w	r8, #0
   b8b76:	d00d      	beq.n	b8b94 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x4c>
        write('[');
   b8b78:	215b      	movs	r1, #91	; 0x5b
   b8b7a:	4620      	mov	r0, r4
   b8b7c:	f7ff fa7a 	bl	b8074 <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
   b8b80:	4641      	mov	r1, r8
   b8b82:	4620      	mov	r0, r4
   b8b84:	f7ff fa67 	bl	b8056 <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
   b8b88:	6823      	ldr	r3, [r4, #0]
   b8b8a:	494d      	ldr	r1, [pc, #308]	; (b8cc0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
   b8b8c:	68db      	ldr	r3, [r3, #12]
   b8b8e:	2202      	movs	r2, #2
   b8b90:	4620      	mov	r0, r4
   b8b92:	4798      	blx	r3
    if (attr.has_file) {
   b8b94:	792b      	ldrb	r3, [r5, #4]
   b8b96:	07da      	lsls	r2, r3, #31
   b8b98:	d523      	bpl.n	b8be2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9a>
        s = extractFileName(attr.file); // Strip directory path
   b8b9a:	f8d5 8008 	ldr.w	r8, [r5, #8]
    const char *s1 = strrchr(s, '/');
   b8b9e:	212f      	movs	r1, #47	; 0x2f
   b8ba0:	4640      	mov	r0, r8
   b8ba2:	f001 f8ac 	bl	b9cfe <strrchr>
    if (s1) {
   b8ba6:	b108      	cbz	r0, b8bac <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x64>
        return s1 + 1;
   b8ba8:	f100 0801 	add.w	r8, r0, #1
        write(s); // File name
   b8bac:	4641      	mov	r1, r8
   b8bae:	4620      	mov	r0, r4
   b8bb0:	f7ff fa51 	bl	b8056 <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
   b8bb4:	792b      	ldrb	r3, [r5, #4]
   b8bb6:	079b      	lsls	r3, r3, #30
   b8bb8:	d508      	bpl.n	b8bcc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x84>
            write(':');
   b8bba:	213a      	movs	r1, #58	; 0x3a
   b8bbc:	4620      	mov	r0, r4
   b8bbe:	f7ff fa59 	bl	b8074 <_ZN5spark16StreamLogHandler5writeEc>
            printf("%d", (int)attr.line); // Line number
   b8bc2:	68ea      	ldr	r2, [r5, #12]
   b8bc4:	493f      	ldr	r1, [pc, #252]	; (b8cc4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17c>)
   b8bc6:	4620      	mov	r0, r4
   b8bc8:	f7ff fa60 	bl	b808c <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_function) {
   b8bcc:	792a      	ldrb	r2, [r5, #4]
            write(", ", 2);
   b8bce:	6823      	ldr	r3, [r4, #0]
        if (attr.has_function) {
   b8bd0:	f012 0f04 	tst.w	r2, #4
            write(", ", 2);
   b8bd4:	68db      	ldr	r3, [r3, #12]
   b8bd6:	bf14      	ite	ne
   b8bd8:	493b      	ldrne	r1, [pc, #236]	; (b8cc8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
            write(": ", 2);
   b8bda:	493c      	ldreq	r1, [pc, #240]	; (b8ccc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
            write(", ", 2);
   b8bdc:	2202      	movs	r2, #2
            write(": ", 2);
   b8bde:	4620      	mov	r0, r4
   b8be0:	4798      	blx	r3
    if (attr.has_function) {
   b8be2:	792b      	ldrb	r3, [r5, #4]
   b8be4:	0758      	lsls	r0, r3, #29
   b8be6:	d51d      	bpl.n	b8c24 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xdc>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   b8be8:	6929      	ldr	r1, [r5, #16]
const char* extractFuncName(const char *s, size_t *size) {
   b8bea:	460b      	mov	r3, r1
   b8bec:	461a      	mov	r2, r3
    for (; *s; ++s) {
   b8bee:	f813 0b01 	ldrb.w	r0, [r3], #1
   b8bf2:	b160      	cbz	r0, b8c0e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc6>
        if (*s == ' ') {
   b8bf4:	2820      	cmp	r0, #32
   b8bf6:	d108      	bne.n	b8c0a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc2>
            s1 = s + 1; // Skip return type
   b8bf8:	4619      	mov	r1, r3
   b8bfa:	e7f7      	b.n	b8bec <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
    if (stream_ == &Serial && Network.listening()) {
   b8bfc:	4834      	ldr	r0, [pc, #208]	; (b8cd0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
   b8bfe:	f000 f966 	bl	b8ece <_ZN5spark12NetworkClass9listeningEv>
   b8c02:	2800      	cmp	r0, #0
   b8c04:	d0ad      	beq.n	b8b62 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a>
}
   b8c06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        } else if (*s == '(') {
   b8c0a:	2828      	cmp	r0, #40	; 0x28
   b8c0c:	d1ee      	bne.n	b8bec <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
        write(s, n);
   b8c0e:	6823      	ldr	r3, [r4, #0]
   b8c10:	1a52      	subs	r2, r2, r1
   b8c12:	68db      	ldr	r3, [r3, #12]
   b8c14:	4620      	mov	r0, r4
   b8c16:	4798      	blx	r3
        write("(): ", 4);
   b8c18:	6823      	ldr	r3, [r4, #0]
   b8c1a:	492e      	ldr	r1, [pc, #184]	; (b8cd4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
   b8c1c:	68db      	ldr	r3, [r3, #12]
   b8c1e:	2204      	movs	r2, #4
   b8c20:	4620      	mov	r0, r4
   b8c22:	4798      	blx	r3
    return log_level_name(level, nullptr);
   b8c24:	2100      	movs	r1, #0
   b8c26:	4638      	mov	r0, r7
   b8c28:	f7fe fa02 	bl	b7030 <log_level_name>
   b8c2c:	4601      	mov	r1, r0
    write(s);
   b8c2e:	4620      	mov	r0, r4
   b8c30:	f7ff fa11 	bl	b8056 <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
   b8c34:	6823      	ldr	r3, [r4, #0]
   b8c36:	4925      	ldr	r1, [pc, #148]	; (b8ccc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
   b8c38:	68db      	ldr	r3, [r3, #12]
   b8c3a:	2202      	movs	r2, #2
   b8c3c:	4620      	mov	r0, r4
   b8c3e:	4798      	blx	r3
    if (msg) {
   b8c40:	b11e      	cbz	r6, b8c4a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x102>
        write(msg);
   b8c42:	4631      	mov	r1, r6
   b8c44:	4620      	mov	r0, r4
   b8c46:	f7ff fa06 	bl	b8056 <_ZN5spark16StreamLogHandler5writeEPKc>
    if (attr.has_code || attr.has_details) {
   b8c4a:	792b      	ldrb	r3, [r5, #4]
   b8c4c:	f013 0f30 	tst.w	r3, #48	; 0x30
   b8c50:	d02c      	beq.n	b8cac <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>
        write(" [", 2);
   b8c52:	6823      	ldr	r3, [r4, #0]
   b8c54:	4920      	ldr	r1, [pc, #128]	; (b8cd8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
   b8c56:	68db      	ldr	r3, [r3, #12]
   b8c58:	2202      	movs	r2, #2
   b8c5a:	4620      	mov	r0, r4
   b8c5c:	4798      	blx	r3
        if (attr.has_code) {
   b8c5e:	792b      	ldrb	r3, [r5, #4]
   b8c60:	06d9      	lsls	r1, r3, #27
   b8c62:	d50a      	bpl.n	b8c7a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x132>
            write("code = ", 7);
   b8c64:	6823      	ldr	r3, [r4, #0]
   b8c66:	491d      	ldr	r1, [pc, #116]	; (b8cdc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
   b8c68:	68db      	ldr	r3, [r3, #12]
   b8c6a:	2207      	movs	r2, #7
   b8c6c:	4620      	mov	r0, r4
   b8c6e:	4798      	blx	r3
            printf("%" PRIiPTR, (intptr_t)attr.code);
   b8c70:	69aa      	ldr	r2, [r5, #24]
   b8c72:	491b      	ldr	r1, [pc, #108]	; (b8ce0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
   b8c74:	4620      	mov	r0, r4
   b8c76:	f7ff fa09 	bl	b808c <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_details) {
   b8c7a:	792b      	ldrb	r3, [r5, #4]
   b8c7c:	069a      	lsls	r2, r3, #26
   b8c7e:	d511      	bpl.n	b8ca4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>
            if (attr.has_code) {
   b8c80:	06db      	lsls	r3, r3, #27
   b8c82:	d505      	bpl.n	b8c90 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>
                write(", ", 2);
   b8c84:	6823      	ldr	r3, [r4, #0]
   b8c86:	4910      	ldr	r1, [pc, #64]	; (b8cc8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
   b8c88:	68db      	ldr	r3, [r3, #12]
   b8c8a:	2202      	movs	r2, #2
   b8c8c:	4620      	mov	r0, r4
   b8c8e:	4798      	blx	r3
            write("details = ", 10);
   b8c90:	6823      	ldr	r3, [r4, #0]
   b8c92:	4914      	ldr	r1, [pc, #80]	; (b8ce4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
   b8c94:	68db      	ldr	r3, [r3, #12]
   b8c96:	4620      	mov	r0, r4
   b8c98:	220a      	movs	r2, #10
   b8c9a:	4798      	blx	r3
            write(attr.details);
   b8c9c:	69e9      	ldr	r1, [r5, #28]
   b8c9e:	4620      	mov	r0, r4
   b8ca0:	f7ff f9d9 	bl	b8056 <_ZN5spark16StreamLogHandler5writeEPKc>
        write(']');
   b8ca4:	215d      	movs	r1, #93	; 0x5d
   b8ca6:	4620      	mov	r0, r4
   b8ca8:	f7ff f9e4 	bl	b8074 <_ZN5spark16StreamLogHandler5writeEc>
    write("\r\n", 2);
   b8cac:	6823      	ldr	r3, [r4, #0]
   b8cae:	490e      	ldr	r1, [pc, #56]	; (b8ce8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
   b8cb0:	68db      	ldr	r3, [r3, #12]
   b8cb2:	4620      	mov	r0, r4
   b8cb4:	2202      	movs	r2, #2
}
   b8cb6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    write("\r\n", 2);
   b8cba:	4718      	bx	r3
   b8cbc:	000bab9a 	.word	0x000bab9a
   b8cc0:	000baba1 	.word	0x000baba1
   b8cc4:	000ba273 	.word	0x000ba273
   b8cc8:	000baba4 	.word	0x000baba4
   b8ccc:	000baba9 	.word	0x000baba9
   b8cd0:	2003e6dc 	.word	0x2003e6dc
   b8cd4:	000baba7 	.word	0x000baba7
   b8cd8:	000babac 	.word	0x000babac
   b8cdc:	000babaf 	.word	0x000babaf
   b8ce0:	000babb7 	.word	0x000babb7
   b8ce4:	000babba 	.word	0x000babba
   b8ce8:	000babc5 	.word	0x000babc5

000b8cec <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   b8cec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b8cf0:	b085      	sub	sp, #20
    return stream_;
   b8cf2:	f8d0 9020 	ldr.w	r9, [r0, #32]
   b8cf6:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   b8cf8:	4605      	mov	r5, r0
   b8cfa:	460f      	mov	r7, r1
   b8cfc:	4690      	mov	r8, r2
   b8cfe:	461e      	mov	r6, r3
    if (this->stream() == &Serial && Network.listening()) {
   b8d00:	f000 fbea 	bl	b94d8 <_Z16_fetch_usbserialv>
   b8d04:	4581      	cmp	r9, r0
   b8d06:	d105      	bne.n	b8d14 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
   b8d08:	4849      	ldr	r0, [pc, #292]	; (b8e30 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x144>)
   b8d0a:	f000 f8e0 	bl	b8ece <_ZN5spark12NetworkClass9listeningEv>
   b8d0e:	2800      	cmp	r0, #0
   b8d10:	f040 808a 	bne.w	b8e28 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
   b8d14:	6a2b      	ldr	r3, [r5, #32]
        strm_(stream) {
   b8d16:	4a47      	ldr	r2, [pc, #284]	; (b8e34 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
   b8d18:	9201      	str	r2, [sp, #4]
        state_(BEGIN) {
   b8d1a:	f04f 0900 	mov.w	r9, #0
    json.beginObject();
   b8d1e:	a801      	add	r0, sp, #4
        strm_(stream) {
   b8d20:	9303      	str	r3, [sp, #12]
        state_(BEGIN) {
   b8d22:	f88d 9008 	strb.w	r9, [sp, #8]
   b8d26:	f7ff f878 	bl	b7e1a <_ZN5spark10JSONWriter11beginObjectEv>
    return log_level_name(level, nullptr);
   b8d2a:	4649      	mov	r1, r9
   b8d2c:	4640      	mov	r0, r8
   b8d2e:	f7fe f97f 	bl	b7030 <log_level_name>
    json.name("l", 1).value(s);
   b8d32:	4941      	ldr	r1, [pc, #260]	; (b8e38 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
   b8d34:	4680      	mov	r8, r0
   b8d36:	2201      	movs	r2, #1
   b8d38:	a801      	add	r0, sp, #4
   b8d3a:	f7ff f8fd 	bl	b7f38 <_ZN5spark10JSONWriter4nameEPKcj>
   b8d3e:	4641      	mov	r1, r8
   b8d40:	f7ff f97b 	bl	b803a <_ZN5spark10JSONWriter5valueEPKc>
    if (msg) {
   b8d44:	b13f      	cbz	r7, b8d56 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
   b8d46:	493d      	ldr	r1, [pc, #244]	; (b8e3c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
   b8d48:	2201      	movs	r2, #1
   b8d4a:	a801      	add	r0, sp, #4
   b8d4c:	f7ff f8f4 	bl	b7f38 <_ZN5spark10JSONWriter4nameEPKcj>
   b8d50:	4639      	mov	r1, r7
   b8d52:	f7ff f972 	bl	b803a <_ZN5spark10JSONWriter5valueEPKc>
    if (category) {
   b8d56:	b13e      	cbz	r6, b8d68 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
   b8d58:	4939      	ldr	r1, [pc, #228]	; (b8e40 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
   b8d5a:	2201      	movs	r2, #1
   b8d5c:	a801      	add	r0, sp, #4
   b8d5e:	f7ff f8eb 	bl	b7f38 <_ZN5spark10JSONWriter4nameEPKcj>
   b8d62:	4631      	mov	r1, r6
   b8d64:	f7ff f969 	bl	b803a <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_file) {
   b8d68:	7923      	ldrb	r3, [r4, #4]
   b8d6a:	07df      	lsls	r7, r3, #31
   b8d6c:	d50e      	bpl.n	b8d8c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
   b8d6e:	68a6      	ldr	r6, [r4, #8]
    const char *s1 = strrchr(s, '/');
   b8d70:	212f      	movs	r1, #47	; 0x2f
   b8d72:	4630      	mov	r0, r6
   b8d74:	f000 ffc3 	bl	b9cfe <strrchr>
    if (s1) {
   b8d78:	b100      	cbz	r0, b8d7c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
   b8d7a:	1c46      	adds	r6, r0, #1
        json.name("f", 1).value(s);
   b8d7c:	4931      	ldr	r1, [pc, #196]	; (b8e44 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
   b8d7e:	2201      	movs	r2, #1
   b8d80:	a801      	add	r0, sp, #4
   b8d82:	f7ff f8d9 	bl	b7f38 <_ZN5spark10JSONWriter4nameEPKcj>
   b8d86:	4631      	mov	r1, r6
   b8d88:	f7ff f957 	bl	b803a <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_line) {
   b8d8c:	7923      	ldrb	r3, [r4, #4]
   b8d8e:	079e      	lsls	r6, r3, #30
   b8d90:	d507      	bpl.n	b8da2 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
   b8d92:	492d      	ldr	r1, [pc, #180]	; (b8e48 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
   b8d94:	2202      	movs	r2, #2
   b8d96:	a801      	add	r0, sp, #4
   b8d98:	f7ff f8ce 	bl	b7f38 <_ZN5spark10JSONWriter4nameEPKcj>
   b8d9c:	68e1      	ldr	r1, [r4, #12]
   b8d9e:	f7ff f849 	bl	b7e34 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_function) {
   b8da2:	7923      	ldrb	r3, [r4, #4]
   b8da4:	0758      	lsls	r0, r3, #29
   b8da6:	d514      	bpl.n	b8dd2 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe6>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   b8da8:	6926      	ldr	r6, [r4, #16]
const char* extractFuncName(const char *s, size_t *size) {
   b8daa:	4633      	mov	r3, r6
   b8dac:	461f      	mov	r7, r3
    for (; *s; ++s) {
   b8dae:	f813 2b01 	ldrb.w	r2, [r3], #1
   b8db2:	b12a      	cbz	r2, b8dc0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        if (*s == ' ') {
   b8db4:	2a20      	cmp	r2, #32
   b8db6:	d101      	bne.n	b8dbc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
   b8db8:	461e      	mov	r6, r3
   b8dba:	e7f7      	b.n	b8dac <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        } else if (*s == '(') {
   b8dbc:	2a28      	cmp	r2, #40	; 0x28
   b8dbe:	d1f5      	bne.n	b8dac <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        json.name("fn", 2).value(s, n);
   b8dc0:	4922      	ldr	r1, [pc, #136]	; (b8e4c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
   b8dc2:	2202      	movs	r2, #2
   b8dc4:	a801      	add	r0, sp, #4
   b8dc6:	f7ff f8b7 	bl	b7f38 <_ZN5spark10JSONWriter4nameEPKcj>
   b8dca:	1bba      	subs	r2, r7, r6
   b8dcc:	4631      	mov	r1, r6
   b8dce:	f7ff f8c3 	bl	b7f58 <_ZN5spark10JSONWriter5valueEPKcj>
    if (attr.has_time) {
   b8dd2:	7923      	ldrb	r3, [r4, #4]
   b8dd4:	0719      	lsls	r1, r3, #28
   b8dd6:	d507      	bpl.n	b8de8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xfc>
        json.name("t", 1).value((unsigned)attr.time);
   b8dd8:	491d      	ldr	r1, [pc, #116]	; (b8e50 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
   b8dda:	2201      	movs	r2, #1
   b8ddc:	a801      	add	r0, sp, #4
   b8dde:	f7ff f8ab 	bl	b7f38 <_ZN5spark10JSONWriter4nameEPKcj>
   b8de2:	6961      	ldr	r1, [r4, #20]
   b8de4:	f7ff f838 	bl	b7e58 <_ZN5spark10JSONWriter5valueEj>
    if (attr.has_code) {
   b8de8:	7923      	ldrb	r3, [r4, #4]
   b8dea:	06da      	lsls	r2, r3, #27
   b8dec:	d508      	bpl.n	b8e00 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x114>
        json.name("code", 4).value((int)attr.code);
   b8dee:	2204      	movs	r2, #4
   b8df0:	4918      	ldr	r1, [pc, #96]	; (b8e54 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
   b8df2:	eb0d 0002 	add.w	r0, sp, r2
   b8df6:	f7ff f89f 	bl	b7f38 <_ZN5spark10JSONWriter4nameEPKcj>
   b8dfa:	69a1      	ldr	r1, [r4, #24]
   b8dfc:	f7ff f81a 	bl	b7e34 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_details) {
   b8e00:	7923      	ldrb	r3, [r4, #4]
   b8e02:	069b      	lsls	r3, r3, #26
   b8e04:	d507      	bpl.n	b8e16 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12a>
        json.name("detail", 6).value(attr.details);
   b8e06:	4914      	ldr	r1, [pc, #80]	; (b8e58 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
   b8e08:	2206      	movs	r2, #6
   b8e0a:	a801      	add	r0, sp, #4
   b8e0c:	f7ff f894 	bl	b7f38 <_ZN5spark10JSONWriter4nameEPKcj>
   b8e10:	69e1      	ldr	r1, [r4, #28]
   b8e12:	f7ff f912 	bl	b803a <_ZN5spark10JSONWriter5valueEPKc>
    json.endObject();
   b8e16:	a801      	add	r0, sp, #4
   b8e18:	f7fe ffe9 	bl	b7dee <_ZN5spark10JSONWriter9endObjectEv>
    return stream_;
   b8e1c:	6a28      	ldr	r0, [r5, #32]
    this->stream()->write((const uint8_t*)"\r\n", 2);
   b8e1e:	490f      	ldr	r1, [pc, #60]	; (b8e5c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
   b8e20:	6803      	ldr	r3, [r0, #0]
   b8e22:	2202      	movs	r2, #2
   b8e24:	68db      	ldr	r3, [r3, #12]
   b8e26:	4798      	blx	r3
}
   b8e28:	b005      	add	sp, #20
   b8e2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b8e2e:	bf00      	nop
   b8e30:	2003e6dc 	.word	0x2003e6dc
   b8e34:	000babe4 	.word	0x000babe4
   b8e38:	000bab77 	.word	0x000bab77
   b8e3c:	000babc8 	.word	0x000babc8
   b8e40:	000bad7b 	.word	0x000bad7b
   b8e44:	000babca 	.word	0x000babca
   b8e48:	000babcc 	.word	0x000babcc
   b8e4c:	000babcf 	.word	0x000babcf
   b8e50:	000ba2fa 	.word	0x000ba2fa
   b8e54:	000ba6ae 	.word	0x000ba6ae
   b8e58:	000babd2 	.word	0x000babd2
   b8e5c:	000babc5 	.word	0x000babc5

000b8e60 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b8e60:	2300      	movs	r3, #0
   b8e62:	6840      	ldr	r0, [r0, #4]
   b8e64:	461a      	mov	r2, r3
   b8e66:	f7fe b95f 	b.w	b7128 <network_connect>

000b8e6a <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b8e6a:	6840      	ldr	r0, [r0, #4]
   b8e6c:	2200      	movs	r2, #0
   b8e6e:	2102      	movs	r1, #2
   b8e70:	f7fe b96a 	b.w	b7148 <network_disconnect>

000b8e74 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b8e74:	2200      	movs	r2, #0
   b8e76:	6840      	ldr	r0, [r0, #4]
   b8e78:	4611      	mov	r1, r2
   b8e7a:	f7fe b95d 	b.w	b7138 <network_connecting>

000b8e7e <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b8e7e:	2200      	movs	r2, #0
   b8e80:	6840      	ldr	r0, [r0, #4]
   b8e82:	4611      	mov	r1, r2
   b8e84:	f7fe b968 	b.w	b7158 <network_ready>

000b8e88 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b8e88:	2300      	movs	r3, #0
   b8e8a:	6840      	ldr	r0, [r0, #4]
   b8e8c:	461a      	mov	r2, r3
   b8e8e:	4619      	mov	r1, r3
   b8e90:	f7fe b96a 	b.w	b7168 <network_on>

000b8e94 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b8e94:	2300      	movs	r3, #0
   b8e96:	6840      	ldr	r0, [r0, #4]
   b8e98:	461a      	mov	r2, r3
   b8e9a:	4619      	mov	r1, r3
   b8e9c:	f7fe b96c 	b.w	b7178 <network_off>

000b8ea0 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b8ea0:	6840      	ldr	r0, [r0, #4]
   b8ea2:	2100      	movs	r1, #0
   b8ea4:	f7fe b990 	b.w	b71c8 <network_is_on>

000b8ea8 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b8ea8:	6840      	ldr	r0, [r0, #4]
   b8eaa:	2100      	movs	r1, #0
   b8eac:	f7fe b994 	b.w	b71d8 <network_is_off>

000b8eb0 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b8eb0:	6840      	ldr	r0, [r0, #4]
   b8eb2:	2200      	movs	r2, #0
   b8eb4:	f081 0101 	eor.w	r1, r1, #1
   b8eb8:	f7fe b966 	b.w	b7188 <network_listen>

000b8ebc <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b8ebc:	6840      	ldr	r0, [r0, #4]
   b8ebe:	2200      	movs	r2, #0
   b8ec0:	f7fe b972 	b.w	b71a8 <network_set_listen_timeout>

000b8ec4 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b8ec4:	2200      	movs	r2, #0
   b8ec6:	6840      	ldr	r0, [r0, #4]
   b8ec8:	4611      	mov	r1, r2
   b8eca:	f7fe b975 	b.w	b71b8 <network_get_listen_timeout>

000b8ece <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b8ece:	2200      	movs	r2, #0
   b8ed0:	6840      	ldr	r0, [r0, #4]
   b8ed2:	4611      	mov	r1, r2
   b8ed4:	f7fe b960 	b.w	b7198 <network_listening>

000b8ed8 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b8ed8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b8edc:	b095      	sub	sp, #84	; 0x54
   b8ede:	4614      	mov	r4, r2
   b8ee0:	460d      	mov	r5, r1
   b8ee2:	4607      	mov	r7, r0
    IPAddress addr;
   b8ee4:	f7fe fe32 	bl	b7b4c <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b8ee8:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b8eea:	221c      	movs	r2, #28
   b8eec:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b8eee:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b8ef0:	f000 fe2e 	bl	b9b50 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b8ef4:	2340      	movs	r3, #64	; 0x40
   b8ef6:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b8ef8:	4620      	mov	r0, r4
   b8efa:	466b      	mov	r3, sp
   b8efc:	aa0c      	add	r2, sp, #48	; 0x30
   b8efe:	2100      	movs	r1, #0
   b8f00:	f7fd ffe6 	bl	b6ed0 <netdb_getaddrinfo>
    if (!r) {
   b8f04:	4604      	mov	r4, r0
   b8f06:	2800      	cmp	r0, #0
   b8f08:	d14b      	bne.n	b8fa2 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b8f0a:	4602      	mov	r2, r0
   b8f0c:	2101      	movs	r1, #1
   b8f0e:	6868      	ldr	r0, [r5, #4]
   b8f10:	f7fe f922 	bl	b7158 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b8f14:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b8f16:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b8f18:	4622      	mov	r2, r4
   b8f1a:	6868      	ldr	r0, [r5, #4]
   b8f1c:	f7fe f91c 	bl	b7158 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b8f20:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b8f22:	4681      	mov	r9, r0
        bool ok = false;
   b8f24:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b8f26:	2e00      	cmp	r6, #0
   b8f28:	d03b      	beq.n	b8fa2 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b8f2a:	2900      	cmp	r1, #0
   b8f2c:	d139      	bne.n	b8fa2 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b8f2e:	6873      	ldr	r3, [r6, #4]
   b8f30:	2b02      	cmp	r3, #2
   b8f32:	d003      	beq.n	b8f3c <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b8f34:	2b0a      	cmp	r3, #10
   b8f36:	d011      	beq.n	b8f5c <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b8f38:	69f6      	ldr	r6, [r6, #28]
   b8f3a:	e7f4      	b.n	b8f26 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b8f3c:	f1b8 0f00 	cmp.w	r8, #0
   b8f40:	d0fa      	beq.n	b8f38 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b8f42:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b8f44:	a806      	add	r0, sp, #24
   b8f46:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b8f48:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b8f4a:	f7fe fe2d 	bl	b7ba8 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b8f4e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b8f50:	1d3c      	adds	r4, r7, #4
   b8f52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b8f54:	682b      	ldr	r3, [r5, #0]
   b8f56:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b8f58:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b8f5a:	e7ed      	b.n	b8f38 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b8f5c:	f1b9 0f00 	cmp.w	r9, #0
   b8f60:	d0ea      	beq.n	b8f38 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b8f62:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b8f64:	2210      	movs	r2, #16
   b8f66:	a801      	add	r0, sp, #4
   b8f68:	f000 fdf2 	bl	b9b50 <memset>
                    a.v = 6;
   b8f6c:	2306      	movs	r3, #6
   b8f6e:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b8f72:	ad01      	add	r5, sp, #4
   b8f74:	f104 0308 	add.w	r3, r4, #8
   b8f78:	3418      	adds	r4, #24
   b8f7a:	6818      	ldr	r0, [r3, #0]
   b8f7c:	6859      	ldr	r1, [r3, #4]
   b8f7e:	462a      	mov	r2, r5
   b8f80:	c203      	stmia	r2!, {r0, r1}
   b8f82:	3308      	adds	r3, #8
   b8f84:	42a3      	cmp	r3, r4
   b8f86:	4615      	mov	r5, r2
   b8f88:	d1f7      	bne.n	b8f7a <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b8f8a:	a901      	add	r1, sp, #4
   b8f8c:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b8f8e:	ad07      	add	r5, sp, #28
   b8f90:	f7fe fdea 	bl	b7b68 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b8f94:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b8f96:	1d3c      	adds	r4, r7, #4
   b8f98:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b8f9a:	682b      	ldr	r3, [r5, #0]
   b8f9c:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b8f9e:	4649      	mov	r1, r9
   b8fa0:	e7ca      	b.n	b8f38 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b8fa2:	9800      	ldr	r0, [sp, #0]
   b8fa4:	f7fd ff8c 	bl	b6ec0 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b8fa8:	4638      	mov	r0, r7
   b8faa:	b015      	add	sp, #84	; 0x54
   b8fac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b8fb0 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b8fb0:	4b02      	ldr	r3, [pc, #8]	; (b8fbc <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b8fb2:	4a03      	ldr	r2, [pc, #12]	; (b8fc0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b8fb4:	601a      	str	r2, [r3, #0]
   b8fb6:	2200      	movs	r2, #0
   b8fb8:	605a      	str	r2, [r3, #4]

} // spark
   b8fba:	4770      	bx	lr
   b8fbc:	2003e6dc 	.word	0x2003e6dc
   b8fc0:	000bac5c 	.word	0x000bac5c

000b8fc4 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b8fc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b8fc6:	4606      	mov	r6, r0
   b8fc8:	460d      	mov	r5, r1
  size_t n = 0;
   b8fca:	188f      	adds	r7, r1, r2
   b8fcc:	2400      	movs	r4, #0
  while (size--) {
   b8fce:	42bd      	cmp	r5, r7
   b8fd0:	d00c      	beq.n	b8fec <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b8fd2:	6833      	ldr	r3, [r6, #0]
   b8fd4:	f815 1b01 	ldrb.w	r1, [r5], #1
   b8fd8:	689b      	ldr	r3, [r3, #8]
   b8fda:	4630      	mov	r0, r6
   b8fdc:	4798      	blx	r3
     if (chunk>=0)
   b8fde:	1e03      	subs	r3, r0, #0
   b8fe0:	db01      	blt.n	b8fe6 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b8fe2:	441c      	add	r4, r3
  while (size--) {
   b8fe4:	e7f3      	b.n	b8fce <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b8fe6:	2c00      	cmp	r4, #0
   b8fe8:	bf08      	it	eq
   b8fea:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b8fec:	4620      	mov	r0, r4
   b8fee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b8ff0 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b8ff0:	b513      	push	{r0, r1, r4, lr}
   b8ff2:	4604      	mov	r4, r0
    }
   b8ff4:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b8ff6:	b159      	cbz	r1, b9010 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b8ff8:	9101      	str	r1, [sp, #4]
   b8ffa:	f000 fe64 	bl	b9cc6 <strlen>
   b8ffe:	6823      	ldr	r3, [r4, #0]
   b9000:	9901      	ldr	r1, [sp, #4]
   b9002:	68db      	ldr	r3, [r3, #12]
   b9004:	4602      	mov	r2, r0
   b9006:	4620      	mov	r0, r4
    }
   b9008:	b002      	add	sp, #8
   b900a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b900e:	4718      	bx	r3
    }
   b9010:	b002      	add	sp, #8
   b9012:	bd10      	pop	{r4, pc}

000b9014 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   b9014:	6803      	ldr	r3, [r0, #0]
   b9016:	689b      	ldr	r3, [r3, #8]
   b9018:	4718      	bx	r3

000b901a <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b901a:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b901c:	210d      	movs	r1, #13
{
   b901e:	4605      	mov	r5, r0
  size_t n = print('\r');
   b9020:	f7ff fff8 	bl	b9014 <_ZN5Print5printEc>
  n += print('\n');
   b9024:	210a      	movs	r1, #10
  size_t n = print('\r');
   b9026:	4604      	mov	r4, r0
  n += print('\n');
   b9028:	4628      	mov	r0, r5
   b902a:	f7ff fff3 	bl	b9014 <_ZN5Print5printEc>
  return n;
}
   b902e:	4420      	add	r0, r4
   b9030:	bd38      	pop	{r3, r4, r5, pc}

000b9032 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b9032:	b530      	push	{r4, r5, lr}
   b9034:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b9036:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b9038:	2a01      	cmp	r2, #1
  *str = '\0';
   b903a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b903e:	bf98      	it	ls
   b9040:	220a      	movls	r2, #10
   b9042:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b9044:	460d      	mov	r5, r1
   b9046:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b904a:	fb01 5312 	mls	r3, r1, r2, r5
   b904e:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b9052:	2b09      	cmp	r3, #9
   b9054:	bf94      	ite	ls
   b9056:	3330      	addls	r3, #48	; 0x30
   b9058:	3337      	addhi	r3, #55	; 0x37
   b905a:	b2db      	uxtb	r3, r3
  } while(n);
   b905c:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b905e:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b9062:	d9ef      	bls.n	b9044 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b9064:	4621      	mov	r1, r4
   b9066:	f7ff ffc3 	bl	b8ff0 <_ZN5Print5writeEPKc>
}
   b906a:	b00b      	add	sp, #44	; 0x2c
   b906c:	bd30      	pop	{r4, r5, pc}

000b906e <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b906e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b9072:	b086      	sub	sp, #24
   b9074:	af00      	add	r7, sp, #0
   b9076:	4605      	mov	r5, r0
   b9078:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b907a:	1d38      	adds	r0, r7, #4
   b907c:	2114      	movs	r1, #20
{
   b907e:	4614      	mov	r4, r2
    va_copy(args2, args);
   b9080:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b9082:	f7fe f8e1 	bl	b7248 <vsnprintf>

    if (n<bufsize)
   b9086:	2813      	cmp	r0, #19
   b9088:	d80e      	bhi.n	b90a8 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b908a:	1d39      	adds	r1, r7, #4
   b908c:	4628      	mov	r0, r5
   b908e:	f7ff ffaf 	bl	b8ff0 <_ZN5Print5writeEPKc>
   b9092:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b9094:	b11e      	cbz	r6, b909e <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b9096:	4628      	mov	r0, r5
   b9098:	f7ff ffbf 	bl	b901a <_ZN5Print7printlnEv>
   b909c:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b909e:	4620      	mov	r0, r4
   b90a0:	3718      	adds	r7, #24
   b90a2:	46bd      	mov	sp, r7
   b90a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b90a8:	f100 0308 	add.w	r3, r0, #8
   b90ac:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b90b0:	46e8      	mov	r8, sp
        char bigger[n+1];
   b90b2:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b90b6:	4622      	mov	r2, r4
   b90b8:	1c41      	adds	r1, r0, #1
   b90ba:	683b      	ldr	r3, [r7, #0]
   b90bc:	4668      	mov	r0, sp
   b90be:	f7fe f8c3 	bl	b7248 <vsnprintf>
  return write(str);
   b90c2:	4669      	mov	r1, sp
   b90c4:	4628      	mov	r0, r5
   b90c6:	f7ff ff93 	bl	b8ff0 <_ZN5Print5writeEPKc>
   b90ca:	4604      	mov	r4, r0
   b90cc:	46c5      	mov	sp, r8
   b90ce:	e7e1      	b.n	b9094 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b90d0 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   b90d0:	4b01      	ldr	r3, [pc, #4]	; (b90d8 <_GLOBAL__sub_I_RGB+0x8>)
   b90d2:	2200      	movs	r2, #0
   b90d4:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b90d6:	4770      	bx	lr
   b90d8:	2003e6e4 	.word	0x2003e6e4

000b90dc <_ZN6StringD1Ev>:
    init();
    char buf[33] = {};
    dtoa(value, decimalPlaces, buf);
  *this = buf;
}
String::~String()
   b90dc:	b510      	push	{r4, lr}
   b90de:	4604      	mov	r4, r0
{
    free(buffer);
   b90e0:	6800      	ldr	r0, [r0, #0]
   b90e2:	f7fe f889 	bl	b71f8 <free>
}
   b90e6:	4620      	mov	r0, r4
   b90e8:	bd10      	pop	{r4, pc}

000b90ea <_ZN6String10invalidateEv>:
    len = 0;
    flags = 0;
}

void String::invalidate(void)
{
   b90ea:	b510      	push	{r4, lr}
   b90ec:	4604      	mov	r4, r0
    if (buffer) {
   b90ee:	6800      	ldr	r0, [r0, #0]
   b90f0:	b108      	cbz	r0, b90f6 <_ZN6String10invalidateEv+0xc>
        free(buffer);
   b90f2:	f7fe f881 	bl	b71f8 <free>
    }
    buffer = nullptr;
   b90f6:	2300      	movs	r3, #0
    capacity = len = 0;
   b90f8:	e9c4 3301 	strd	r3, r3, [r4, #4]
    buffer = nullptr;
   b90fc:	6023      	str	r3, [r4, #0]
}
   b90fe:	bd10      	pop	{r4, pc}

000b9100 <_ZN6String12changeBufferEj>:
    }
    return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b9100:	b538      	push	{r3, r4, r5, lr}
   b9102:	4604      	mov	r4, r0
   b9104:	460d      	mov	r5, r1
    char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b9106:	6800      	ldr	r0, [r0, #0]
   b9108:	3101      	adds	r1, #1
   b910a:	f7fe f87d 	bl	b7208 <realloc>
    if (newbuffer) {
   b910e:	b110      	cbz	r0, b9116 <_ZN6String12changeBufferEj+0x16>
        buffer = newbuffer;
        capacity = maxStrLen;
   b9110:	e9c4 0500 	strd	r0, r5, [r4]
        return 1;
   b9114:	2001      	movs	r0, #1
    }
    return 0;
}
   b9116:	bd38      	pop	{r3, r4, r5, pc}

000b9118 <_ZN6String7reserveEj>:
{
   b9118:	b510      	push	{r4, lr}
    if (buffer && capacity >= size) {
   b911a:	6803      	ldr	r3, [r0, #0]
{
   b911c:	4604      	mov	r4, r0
    if (buffer && capacity >= size) {
   b911e:	b123      	cbz	r3, b912a <_ZN6String7reserveEj+0x12>
   b9120:	6843      	ldr	r3, [r0, #4]
   b9122:	428b      	cmp	r3, r1
   b9124:	d301      	bcc.n	b912a <_ZN6String7reserveEj+0x12>
   b9126:	2001      	movs	r0, #1
}
   b9128:	bd10      	pop	{r4, pc}
    if (changeBuffer(size)) {
   b912a:	4620      	mov	r0, r4
   b912c:	f7ff ffe8 	bl	b9100 <_ZN6String12changeBufferEj>
   b9130:	2800      	cmp	r0, #0
   b9132:	d0f9      	beq.n	b9128 <_ZN6String7reserveEj+0x10>
        if (len == 0) {
   b9134:	68a3      	ldr	r3, [r4, #8]
   b9136:	2b00      	cmp	r3, #0
   b9138:	d1f5      	bne.n	b9126 <_ZN6String7reserveEj+0xe>
            buffer[0] = 0;
   b913a:	6822      	ldr	r2, [r4, #0]
   b913c:	7013      	strb	r3, [r2, #0]
   b913e:	e7f2      	b.n	b9126 <_ZN6String7reserveEj+0xe>

000b9140 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b9140:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b9142:	460d      	mov	r5, r1
    if (!reserve(length)) {
   b9144:	4611      	mov	r1, r2
   b9146:	9201      	str	r2, [sp, #4]
{
   b9148:	4604      	mov	r4, r0
    if (!reserve(length)) {
   b914a:	f7ff ffe5 	bl	b9118 <_ZN6String7reserveEj>
   b914e:	9a01      	ldr	r2, [sp, #4]
   b9150:	b928      	cbnz	r0, b915e <_ZN6String4copyEPKcj+0x1e>
        invalidate();
   b9152:	4620      	mov	r0, r4
   b9154:	f7ff ffc9 	bl	b90ea <_ZN6String10invalidateEv>
    }
    len = length;
    memcpy(buffer, cstr, length);
    buffer[len] = 0;
    return *this;
}
   b9158:	4620      	mov	r0, r4
   b915a:	b003      	add	sp, #12
   b915c:	bd30      	pop	{r4, r5, pc}
    len = length;
   b915e:	60a2      	str	r2, [r4, #8]
    memcpy(buffer, cstr, length);
   b9160:	4629      	mov	r1, r5
   b9162:	6820      	ldr	r0, [r4, #0]
   b9164:	f000 fccc 	bl	b9b00 <memcpy>
    buffer[len] = 0;
   b9168:	6822      	ldr	r2, [r4, #0]
   b916a:	68a3      	ldr	r3, [r4, #8]
   b916c:	2100      	movs	r1, #0
   b916e:	54d1      	strb	r1, [r2, r3]
    return *this;
   b9170:	e7f2      	b.n	b9158 <_ZN6String4copyEPKcj+0x18>

000b9172 <_ZN6StringC1EPK19__FlashStringHelper>:
    buffer = nullptr;
   b9172:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b9174:	b513      	push	{r0, r1, r4, lr}
    capacity = 0;
   b9176:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b917a:	4604      	mov	r4, r0
    len = 0;
   b917c:	6083      	str	r3, [r0, #8]
    flags = 0;
   b917e:	7303      	strb	r3, [r0, #12]
    if (cstr) {
   b9180:	b141      	cbz	r1, b9194 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
        copy(cstr, strlen(cstr));
   b9182:	4608      	mov	r0, r1
   b9184:	9101      	str	r1, [sp, #4]
   b9186:	f000 fd9e 	bl	b9cc6 <strlen>
   b918a:	9901      	ldr	r1, [sp, #4]
   b918c:	4602      	mov	r2, r0
   b918e:	4620      	mov	r0, r4
   b9190:	f7ff ffd6 	bl	b9140 <_ZN6String4copyEPKcj>
}
   b9194:	4620      	mov	r0, r4
   b9196:	b002      	add	sp, #8
   b9198:	bd10      	pop	{r4, pc}

000b919a <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   b919a:	b538      	push	{r3, r4, r5, lr}
   b919c:	4605      	mov	r5, r0
    if (buffer) {
   b919e:	6800      	ldr	r0, [r0, #0]
{
   b91a0:	460c      	mov	r4, r1
    if (buffer) {
   b91a2:	b170      	cbz	r0, b91c2 <_ZN6String4moveERS_+0x28>
        if (capacity >= rhs.len && rhs.buffer) {
   b91a4:	686a      	ldr	r2, [r5, #4]
   b91a6:	688b      	ldr	r3, [r1, #8]
   b91a8:	429a      	cmp	r2, r3
   b91aa:	d308      	bcc.n	b91be <_ZN6String4moveERS_+0x24>
   b91ac:	6809      	ldr	r1, [r1, #0]
   b91ae:	b131      	cbz	r1, b91be <_ZN6String4moveERS_+0x24>
            strcpy(buffer, rhs.buffer);
   b91b0:	f000 fd63 	bl	b9c7a <strcpy>
            len = rhs.len;
   b91b4:	68a3      	ldr	r3, [r4, #8]
   b91b6:	60ab      	str	r3, [r5, #8]
            rhs.len = 0;
   b91b8:	2300      	movs	r3, #0
    buffer = rhs.buffer;
    capacity = rhs.capacity;
    len = rhs.len;
    rhs.buffer = nullptr;
    rhs.capacity = 0;
    rhs.len = 0;
   b91ba:	60a3      	str	r3, [r4, #8]
}
   b91bc:	bd38      	pop	{r3, r4, r5, pc}
            free(buffer);
   b91be:	f7fe f81b 	bl	b71f8 <free>
    buffer = rhs.buffer;
   b91c2:	6823      	ldr	r3, [r4, #0]
   b91c4:	602b      	str	r3, [r5, #0]
    capacity = rhs.capacity;
   b91c6:	6863      	ldr	r3, [r4, #4]
   b91c8:	606b      	str	r3, [r5, #4]
    len = rhs.len;
   b91ca:	68a3      	ldr	r3, [r4, #8]
   b91cc:	60ab      	str	r3, [r5, #8]
    rhs.buffer = nullptr;
   b91ce:	2300      	movs	r3, #0
    rhs.capacity = 0;
   b91d0:	e9c4 3300 	strd	r3, r3, [r4]
   b91d4:	e7f1      	b.n	b91ba <_ZN6String4moveERS_+0x20>

000b91d6 <_ZN6StringC1EOS_>:
String::String(String &&rval)
   b91d6:	b510      	push	{r4, lr}
    buffer = nullptr;
   b91d8:	2300      	movs	r3, #0
    capacity = 0;
   b91da:	e9c0 3300 	strd	r3, r3, [r0]
String::String(String &&rval)
   b91de:	4604      	mov	r4, r0
    len = 0;
   b91e0:	6083      	str	r3, [r0, #8]
    flags = 0;
   b91e2:	7303      	strb	r3, [r0, #12]
    move(rval);
   b91e4:	f7ff ffd9 	bl	b919a <_ZN6String4moveERS_>
}
   b91e8:	4620      	mov	r0, r4
   b91ea:	bd10      	pop	{r4, pc}

000b91ec <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
    if (this == &rhs) {
   b91ec:	4288      	cmp	r0, r1
{
   b91ee:	b510      	push	{r4, lr}
   b91f0:	4604      	mov	r4, r0
    if (this == &rhs) {
   b91f2:	d005      	beq.n	b9200 <_ZN6StringaSERKS_+0x14>
        return *this;
    }

    if (rhs.buffer) {
   b91f4:	680b      	ldr	r3, [r1, #0]
   b91f6:	b12b      	cbz	r3, b9204 <_ZN6StringaSERKS_+0x18>
        copy(rhs.buffer, rhs.len);
   b91f8:	688a      	ldr	r2, [r1, #8]
   b91fa:	4619      	mov	r1, r3
   b91fc:	f7ff ffa0 	bl	b9140 <_ZN6String4copyEPKcj>
    else {
        invalidate();
    }

    return *this;
}
   b9200:	4620      	mov	r0, r4
   b9202:	bd10      	pop	{r4, pc}
        invalidate();
   b9204:	f7ff ff71 	bl	b90ea <_ZN6String10invalidateEv>
   b9208:	e7fa      	b.n	b9200 <_ZN6StringaSERKS_+0x14>

000b920a <_ZN6StringC1ERKS_>:
String::String(const String &value)
   b920a:	b510      	push	{r4, lr}
    buffer = nullptr;
   b920c:	2300      	movs	r3, #0
String::String(const String &value)
   b920e:	4604      	mov	r4, r0
    capacity = 0;
   b9210:	e9c0 3300 	strd	r3, r3, [r0]
    len = 0;
   b9214:	6083      	str	r3, [r0, #8]
    flags = 0;
   b9216:	7303      	strb	r3, [r0, #12]
    *this = value;
   b9218:	f7ff ffe8 	bl	b91ec <_ZN6StringaSERKS_>
}
   b921c:	4620      	mov	r0, r4
   b921e:	bd10      	pop	{r4, pc}

000b9220 <_ZN6StringaSEPKc>:
    return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   b9220:	b513      	push	{r0, r1, r4, lr}
   b9222:	4604      	mov	r4, r0
    if (cstr) {
   b9224:	b159      	cbz	r1, b923e <_ZN6StringaSEPKc+0x1e>
        copy(cstr, strlen(cstr));
   b9226:	4608      	mov	r0, r1
   b9228:	9101      	str	r1, [sp, #4]
   b922a:	f000 fd4c 	bl	b9cc6 <strlen>
   b922e:	9901      	ldr	r1, [sp, #4]
   b9230:	4602      	mov	r2, r0
   b9232:	4620      	mov	r0, r4
   b9234:	f7ff ff84 	bl	b9140 <_ZN6String4copyEPKcj>
    else {
        invalidate();
    }

    return *this;
}
   b9238:	4620      	mov	r0, r4
   b923a:	b002      	add	sp, #8
   b923c:	bd10      	pop	{r4, pc}
        invalidate();
   b923e:	f7ff ff54 	bl	b90ea <_ZN6String10invalidateEv>
   b9242:	e7f9      	b.n	b9238 <_ZN6StringaSEPKc+0x18>

000b9244 <_ZN6String6concatEPKcj>:
{
    return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   b9244:	b570      	push	{r4, r5, r6, lr}
   b9246:	4605      	mov	r5, r0
    unsigned int newlen = len + length;
    if (!cstr) {
   b9248:	460e      	mov	r6, r1
   b924a:	b909      	cbnz	r1, b9250 <_ZN6String6concatEPKcj+0xc>
        return 0;
   b924c:	2000      	movs	r0, #0
        return 0;
    }
    strcpy(buffer + len, cstr);
    len = newlen;
    return 1;
}
   b924e:	bd70      	pop	{r4, r5, r6, pc}
    if (length == 0) {
   b9250:	b16a      	cbz	r2, b926e <_ZN6String6concatEPKcj+0x2a>
    unsigned int newlen = len + length;
   b9252:	6884      	ldr	r4, [r0, #8]
   b9254:	4414      	add	r4, r2
    if (!reserve(newlen)) {
   b9256:	4621      	mov	r1, r4
   b9258:	f7ff ff5e 	bl	b9118 <_ZN6String7reserveEj>
   b925c:	2800      	cmp	r0, #0
   b925e:	d0f5      	beq.n	b924c <_ZN6String6concatEPKcj+0x8>
    strcpy(buffer + len, cstr);
   b9260:	6828      	ldr	r0, [r5, #0]
   b9262:	68ab      	ldr	r3, [r5, #8]
   b9264:	4631      	mov	r1, r6
   b9266:	4418      	add	r0, r3
   b9268:	f000 fd07 	bl	b9c7a <strcpy>
    len = newlen;
   b926c:	60ac      	str	r4, [r5, #8]
        return 1;
   b926e:	2001      	movs	r0, #1
   b9270:	e7ed      	b.n	b924e <_ZN6String6concatEPKcj+0xa>

000b9272 <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
    return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
   b9272:	b507      	push	{r0, r1, r2, lr}
    char buf[2] = {};
   b9274:	2300      	movs	r3, #0
   b9276:	f8ad 3004 	strh.w	r3, [sp, #4]
    buf[0] = c;
    buf[1] = 0;
    return concat(buf, 1);
   b927a:	2201      	movs	r2, #1
    buf[0] = c;
   b927c:	f88d 1004 	strb.w	r1, [sp, #4]
    return concat(buf, 1);
   b9280:	a901      	add	r1, sp, #4
   b9282:	f7ff ffdf 	bl	b9244 <_ZN6String6concatEPKcj>
}
   b9286:	b003      	add	sp, #12
   b9288:	f85d fb04 	ldr.w	pc, [sp], #4

000b928c <_ZNK6String6equalsEPKc>:
{
    return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   b928c:	b508      	push	{r3, lr}
    if (len == 0) {
   b928e:	6882      	ldr	r2, [r0, #8]
   b9290:	b93a      	cbnz	r2, b92a2 <_ZNK6String6equalsEPKc+0x16>
        return (cstr == nullptr || *cstr == 0);
   b9292:	b121      	cbz	r1, b929e <_ZNK6String6equalsEPKc+0x12>
   b9294:	7808      	ldrb	r0, [r1, #0]
    }
    if (cstr == nullptr) {
        return buffer[0] == 0;
    }
    return strcmp(buffer, cstr) == 0;
   b9296:	fab0 f080 	clz	r0, r0
   b929a:	0940      	lsrs	r0, r0, #5
   b929c:	e000      	b.n	b92a0 <_ZNK6String6equalsEPKc+0x14>
        return (cstr == nullptr || *cstr == 0);
   b929e:	2001      	movs	r0, #1
}
   b92a0:	bd08      	pop	{r3, pc}
        return buffer[0] == 0;
   b92a2:	6800      	ldr	r0, [r0, #0]
    if (cstr == nullptr) {
   b92a4:	b909      	cbnz	r1, b92aa <_ZNK6String6equalsEPKc+0x1e>
        return buffer[0] == 0;
   b92a6:	7800      	ldrb	r0, [r0, #0]
   b92a8:	e7f5      	b.n	b9296 <_ZNK6String6equalsEPKc+0xa>
    return strcmp(buffer, cstr) == 0;
   b92aa:	f000 fcdc 	bl	b9c66 <strcmp>
   b92ae:	e7f2      	b.n	b9296 <_ZNK6String6equalsEPKc+0xa>

000b92b0 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b92b0:	4b05      	ldr	r3, [pc, #20]	; (b92c8 <_GLOBAL__sub_I_System+0x18>)
   b92b2:	2202      	movs	r2, #2
   b92b4:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b92b6:	4b05      	ldr	r3, [pc, #20]	; (b92cc <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b92b8:	4a05      	ldr	r2, [pc, #20]	; (b92d0 <_GLOBAL__sub_I_System+0x20>)
   b92ba:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b92bc:	2000      	movs	r0, #0
   b92be:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b92c2:	f7fd becd 	b.w	b7060 <set_system_mode>
   b92c6:	bf00      	nop
   b92c8:	2003e700 	.word	0x2003e700
   b92cc:	2003e6f4 	.word	0x2003e6f4
   b92d0:	ffff0000 	.word	0xffff0000

000b92d4 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimeDone(void)
   b92d4:	b508      	push	{r3, lr}
        return !spark_sync_time_pending(nullptr) || disconnected();
   b92d6:	2000      	movs	r0, #0
   b92d8:	f7fd ff16 	bl	b7108 <spark_sync_time_pending>
   b92dc:	b128      	cbz	r0, b92ea <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b92de:	f7fd ff03 	bl	b70e8 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   b92e2:	f080 0001 	eor.w	r0, r0, #1
   b92e6:	b2c0      	uxtb	r0, r0
    }
   b92e8:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   b92ea:	2001      	movs	r0, #1
   b92ec:	e7fc      	b.n	b92e8 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>

000b92ee <_ZN9TimeClass7isValidEv>:
    strftime(buf, sizeof(buf), format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   b92ee:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   b92f0:	2000      	movs	r0, #0
   b92f2:	f7fd fd6d 	bl	b6dd0 <hal_rtc_time_is_valid>
    if (rtcstate)
   b92f6:	4604      	mov	r4, r0
   b92f8:	b9a0      	cbnz	r0, b9324 <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   b92fa:	f7fd fea9 	bl	b7050 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   b92fe:	2801      	cmp	r0, #1
   b9300:	d110      	bne.n	b9324 <_ZN9TimeClass7isValidEv+0x36>
   b9302:	4620      	mov	r0, r4
   b9304:	f7fd fecc 	bl	b70a0 <system_thread_get_state>
   b9308:	b960      	cbnz	r0, b9324 <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   b930a:	f7ff ffe3 	bl	b92d4 <_ZN10CloudClass12syncTimeDoneEv.isra.0>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   b930e:	b910      	cbnz	r0, b9316 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   b9310:	f7fd fee2 	bl	b70d8 <spark_process>
        while (_while() && !_condition()) {
   b9314:	e7f9      	b.n	b930a <_ZN9TimeClass7isValidEv+0x1c>
   b9316:	f7ff ffdd 	bl	b92d4 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   b931a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   b931e:	2000      	movs	r0, #0
   b9320:	f7fd bd56 	b.w	b6dd0 <hal_rtc_time_is_valid>
}
   b9324:	4620      	mov	r0, r4
   b9326:	bd10      	pop	{r4, pc}

000b9328 <_ZN9TimeClass3nowEv>:
{
   b9328:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   b932a:	f7ff ffe0 	bl	b92ee <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   b932e:	2210      	movs	r2, #16
   b9330:	2100      	movs	r1, #0
   b9332:	4668      	mov	r0, sp
   b9334:	f000 fc0c 	bl	b9b50 <memset>
    hal_rtc_get_time(&tv, nullptr);
   b9338:	2100      	movs	r1, #0
   b933a:	4668      	mov	r0, sp
   b933c:	f7fd fd50 	bl	b6de0 <hal_rtc_get_time>
}
   b9340:	9800      	ldr	r0, [sp, #0]
   b9342:	b005      	add	sp, #20
   b9344:	f85d fb04 	ldr.w	pc, [sp], #4

000b9348 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b9348:	4b02      	ldr	r3, [pc, #8]	; (b9354 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b934a:	681a      	ldr	r2, [r3, #0]
   b934c:	4b02      	ldr	r3, [pc, #8]	; (b9358 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b934e:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b9350:	4770      	bx	lr
   b9352:	bf00      	nop
   b9354:	2003b6d4 	.word	0x2003b6d4
   b9358:	2003e704 	.word	0x2003e704

000b935c <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b935c:	4770      	bx	lr

000b935e <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b935e:	7441      	strb	r1, [r0, #17]
}
   b9360:	4770      	bx	lr

000b9362 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b9362:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b9364:	7c00      	ldrb	r0, [r0, #16]
   b9366:	f7fd fdeb 	bl	b6f40 <hal_usart_available_data_for_write>
}
   b936a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b936e:	bd08      	pop	{r3, pc}

000b9370 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b9370:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b9372:	7c00      	ldrb	r0, [r0, #16]
   b9374:	f7fd fdc4 	bl	b6f00 <hal_usart_available>
}
   b9378:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b937c:	bd08      	pop	{r3, pc}

000b937e <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b937e:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b9380:	7c00      	ldrb	r0, [r0, #16]
   b9382:	f7fd fdcd 	bl	b6f20 <hal_usart_peek>
}
   b9386:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b938a:	bd08      	pop	{r3, pc}

000b938c <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b938c:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b938e:	7c00      	ldrb	r0, [r0, #16]
   b9390:	f7fd fdbe 	bl	b6f10 <hal_usart_read>
}
   b9394:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b9398:	bd08      	pop	{r3, pc}

000b939a <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b939a:	7c00      	ldrb	r0, [r0, #16]
   b939c:	f7fd bdc8 	b.w	b6f30 <hal_usart_flush>

000b93a0 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b93a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b93a2:	7c45      	ldrb	r5, [r0, #17]
{
   b93a4:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b93a6:	b12d      	cbz	r5, b93b4 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b93a8:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b93aa:	b003      	add	sp, #12
   b93ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b93b0:	f7fd bd9e 	b.w	b6ef0 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b93b4:	7c00      	ldrb	r0, [r0, #16]
   b93b6:	9101      	str	r1, [sp, #4]
   b93b8:	f7fd fdc2 	bl	b6f40 <hal_usart_available_data_for_write>
   b93bc:	2800      	cmp	r0, #0
   b93be:	9901      	ldr	r1, [sp, #4]
   b93c0:	dcf2      	bgt.n	b93a8 <_ZN11USARTSerial5writeEh+0x8>
}
   b93c2:	4628      	mov	r0, r5
   b93c4:	b003      	add	sp, #12
   b93c6:	bd30      	pop	{r4, r5, pc}

000b93c8 <_ZN11USARTSerialD0Ev>:
   b93c8:	b510      	push	{r4, lr}
   b93ca:	2114      	movs	r1, #20
   b93cc:	4604      	mov	r4, r0
   b93ce:	f7fa fe64 	bl	b409a <_ZdlPvj>
   b93d2:	4620      	mov	r0, r4
   b93d4:	bd10      	pop	{r4, pc}
	...

000b93d8 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b93d8:	b510      	push	{r4, lr}
   b93da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b93de:	4604      	mov	r4, r0
   b93e0:	4608      	mov	r0, r1
   b93e2:	4611      	mov	r1, r2
   b93e4:	2200      	movs	r2, #0
   b93e6:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b93ea:	4b04      	ldr	r3, [pc, #16]	; (b93fc <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b93ec:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b93ee:	2301      	movs	r3, #1
  _serial = serial;
   b93f0:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b93f2:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b93f4:	f7fd fdb4 	bl	b6f60 <hal_usart_init_ex>
}
   b93f8:	4620      	mov	r0, r4
   b93fa:	bd10      	pop	{r4, pc}
   b93fc:	000bacb4 	.word	0x000bacb4

000b9400 <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
   b9400:	7c00      	ldrb	r0, [r0, #16]
   b9402:	2300      	movs	r3, #0
   b9404:	f7fd bda4 	b.w	b6f50 <hal_usart_begin_config>

000b9408 <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
   b9408:	2200      	movs	r2, #0
   b940a:	f7ff bff9 	b.w	b9400 <_ZN11USARTSerial5beginEmm>

000b940e <_ZN11USARTSerial3endEv>:
  hal_usart_end(_serial);
   b940e:	7c00      	ldrb	r0, [r0, #16]
   b9410:	f7fd bd66 	b.w	b6ee0 <hal_usart_end>

000b9414 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b9414:	7441      	strb	r1, [r0, #17]
}
   b9416:	4770      	bx	lr

000b9418 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b9418:	4770      	bx	lr

000b941a <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b941a:	4770      	bx	lr

000b941c <_ZN9USBSerial4readEv>:
{
   b941c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b941e:	2100      	movs	r1, #0
   b9420:	7c00      	ldrb	r0, [r0, #16]
   b9422:	f7fd fdcd 	bl	b6fc0 <HAL_USB_USART_Receive_Data>
}
   b9426:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b942a:	bd08      	pop	{r3, pc}

000b942c <_ZN9USBSerial4peekEv>:
{
   b942c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b942e:	2101      	movs	r1, #1
   b9430:	7c00      	ldrb	r0, [r0, #16]
   b9432:	f7fd fdc5 	bl	b6fc0 <HAL_USB_USART_Receive_Data>
}
   b9436:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b943a:	bd08      	pop	{r3, pc}

000b943c <_ZN9USBSerial17availableForWriteEv>:
{
   b943c:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b943e:	7c00      	ldrb	r0, [r0, #16]
   b9440:	f7fd fdb6 	bl	b6fb0 <HAL_USB_USART_Available_Data_For_Write>
}
   b9444:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b9448:	bd08      	pop	{r3, pc}

000b944a <_ZN9USBSerial9availableEv>:
{
   b944a:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b944c:	7c00      	ldrb	r0, [r0, #16]
   b944e:	f7fd fda7 	bl	b6fa0 <HAL_USB_USART_Available_Data>
}
   b9452:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b9456:	bd08      	pop	{r3, pc}

000b9458 <_ZN9USBSerial5writeEh>:
{
   b9458:	b513      	push	{r0, r1, r4, lr}
   b945a:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b945c:	7c00      	ldrb	r0, [r0, #16]
{
   b945e:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b9460:	f7fd fda6 	bl	b6fb0 <HAL_USB_USART_Available_Data_For_Write>
   b9464:	2800      	cmp	r0, #0
   b9466:	9901      	ldr	r1, [sp, #4]
   b9468:	dc01      	bgt.n	b946e <_ZN9USBSerial5writeEh+0x16>
   b946a:	7c60      	ldrb	r0, [r4, #17]
   b946c:	b120      	cbz	r0, b9478 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b946e:	7c20      	ldrb	r0, [r4, #16]
   b9470:	f7fd fdae 	bl	b6fd0 <HAL_USB_USART_Send_Data>
   b9474:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b9478:	b002      	add	sp, #8
   b947a:	bd10      	pop	{r4, pc}

000b947c <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b947c:	7c00      	ldrb	r0, [r0, #16]
   b947e:	f7fd bdaf 	b.w	b6fe0 <HAL_USB_USART_Flush_Data>

000b9482 <_ZN9USBSerialD0Ev>:
   b9482:	b510      	push	{r4, lr}
   b9484:	2114      	movs	r1, #20
   b9486:	4604      	mov	r4, r0
   b9488:	f7fa fe07 	bl	b409a <_ZdlPvj>
   b948c:	4620      	mov	r0, r4
   b948e:	bd10      	pop	{r4, pc}

000b9490 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b9490:	b510      	push	{r4, lr}
   b9492:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b9496:	4604      	mov	r4, r0
   b9498:	4608      	mov	r0, r1
   b949a:	2100      	movs	r1, #0
   b949c:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b94a0:	4b04      	ldr	r3, [pc, #16]	; (b94b4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b94a2:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b94a4:	2301      	movs	r3, #1
  _serial = serial;
   b94a6:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b94a8:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b94aa:	4611      	mov	r1, r2
   b94ac:	f7fd fd60 	bl	b6f70 <HAL_USB_USART_Init>
}
   b94b0:	4620      	mov	r0, r4
   b94b2:	bd10      	pop	{r4, pc}
   b94b4:	000bace4 	.word	0x000bace4

000b94b8 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b94b8:	7c00      	ldrb	r0, [r0, #16]
   b94ba:	2200      	movs	r2, #0
   b94bc:	f7fd bd60 	b.w	b6f80 <HAL_USB_USART_Begin>

000b94c0 <_ZN9USBSerial3endEv>:
    HAL_USB_USART_End(_serial);
   b94c0:	7c00      	ldrb	r0, [r0, #16]
   b94c2:	f7fd bd65 	b.w	b6f90 <HAL_USB_USART_End>

000b94c6 <_Z19acquireSerialBufferv>:
{
   b94c6:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b94c8:	2214      	movs	r2, #20
{
   b94ca:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b94cc:	2100      	movs	r1, #0
   b94ce:	f000 fb3f 	bl	b9b50 <memset>
}
   b94d2:	4620      	mov	r0, r4
   b94d4:	bd10      	pop	{r4, pc}
	...

000b94d8 <_Z16_fetch_usbserialv>:
{
   b94d8:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b94da:	4c0f      	ldr	r4, [pc, #60]	; (b9518 <_Z16_fetch_usbserialv+0x40>)
{
   b94dc:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b94de:	a803      	add	r0, sp, #12
   b94e0:	f7ff fff1 	bl	b94c6 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b94e4:	7821      	ldrb	r1, [r4, #0]
   b94e6:	f3bf 8f5b 	dmb	ish
   b94ea:	f011 0101 	ands.w	r1, r1, #1
   b94ee:	d10f      	bne.n	b9510 <_Z16_fetch_usbserialv+0x38>
   b94f0:	4620      	mov	r0, r4
   b94f2:	9101      	str	r1, [sp, #4]
   b94f4:	f7fa fde0 	bl	b40b8 <__cxa_guard_acquire>
   b94f8:	9901      	ldr	r1, [sp, #4]
   b94fa:	b148      	cbz	r0, b9510 <_Z16_fetch_usbserialv+0x38>
   b94fc:	aa03      	add	r2, sp, #12
   b94fe:	4807      	ldr	r0, [pc, #28]	; (b951c <_Z16_fetch_usbserialv+0x44>)
   b9500:	f7ff ffc6 	bl	b9490 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b9504:	4620      	mov	r0, r4
   b9506:	f7fa fddc 	bl	b40c2 <__cxa_guard_release>
   b950a:	4805      	ldr	r0, [pc, #20]	; (b9520 <_Z16_fetch_usbserialv+0x48>)
   b950c:	f000 faea 	bl	b9ae4 <atexit>
	return _usbserial;
}
   b9510:	4802      	ldr	r0, [pc, #8]	; (b951c <_Z16_fetch_usbserialv+0x44>)
   b9512:	b008      	add	sp, #32
   b9514:	bd10      	pop	{r4, pc}
   b9516:	bf00      	nop
   b9518:	2003e708 	.word	0x2003e708
   b951c:	2003e70c 	.word	0x2003e70c
   b9520:	000b9419 	.word	0x000b9419

000b9524 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b9524:	4b01      	ldr	r3, [pc, #4]	; (b952c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b9526:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b9528:	4770      	bx	lr
   b952a:	bf00      	nop
   b952c:	2003b6d8 	.word	0x2003b6d8

000b9530 <serialEventRun>:
{
   b9530:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b9532:	4b0b      	ldr	r3, [pc, #44]	; (b9560 <serialEventRun+0x30>)
   b9534:	b143      	cbz	r3, b9548 <serialEventRun+0x18>
   b9536:	f7ff ffcf 	bl	b94d8 <_Z16_fetch_usbserialv>
   b953a:	6803      	ldr	r3, [r0, #0]
   b953c:	691b      	ldr	r3, [r3, #16]
   b953e:	4798      	blx	r3
   b9540:	2800      	cmp	r0, #0
   b9542:	dd01      	ble.n	b9548 <serialEventRun+0x18>
        serialEvent();
   b9544:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b9548:	4b06      	ldr	r3, [pc, #24]	; (b9564 <serialEventRun+0x34>)
   b954a:	b143      	cbz	r3, b955e <serialEventRun+0x2e>
   b954c:	f000 f8e2 	bl	b9714 <_Z22__fetch_global_Serial1v>
   b9550:	6803      	ldr	r3, [r0, #0]
   b9552:	691b      	ldr	r3, [r3, #16]
   b9554:	4798      	blx	r3
   b9556:	2800      	cmp	r0, #0
   b9558:	dd01      	ble.n	b955e <serialEventRun+0x2e>
        serialEvent1();
   b955a:	f3af 8000 	nop.w
}
   b955e:	bd08      	pop	{r3, pc}
	...

000b9568 <_post_loop>:
{
   b9568:	b508      	push	{r3, lr}
	serialEventRun();
   b956a:	f7ff ffe1 	bl	b9530 <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b956e:	f7fd fc27 	bl	b6dc0 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b9572:	4b01      	ldr	r3, [pc, #4]	; (b9578 <_post_loop+0x10>)
   b9574:	6018      	str	r0, [r3, #0]
}
   b9576:	bd08      	pop	{r3, pc}
   b9578:	2003e728 	.word	0x2003e728

000b957c <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b957c:	4805      	ldr	r0, [pc, #20]	; (b9594 <_Z33system_initialize_user_backup_ramv+0x18>)
   b957e:	4a06      	ldr	r2, [pc, #24]	; (b9598 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b9580:	4906      	ldr	r1, [pc, #24]	; (b959c <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b9582:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b9584:	1a12      	subs	r2, r2, r0
   b9586:	f000 fabb 	bl	b9b00 <memcpy>
    __backup_sram_signature = signature;
   b958a:	4b05      	ldr	r3, [pc, #20]	; (b95a0 <_Z33system_initialize_user_backup_ramv+0x24>)
   b958c:	4a05      	ldr	r2, [pc, #20]	; (b95a4 <_Z33system_initialize_user_backup_ramv+0x28>)
   b958e:	601a      	str	r2, [r3, #0]
}
   b9590:	bd08      	pop	{r3, pc}
   b9592:	bf00      	nop
   b9594:	2003f400 	.word	0x2003f400
   b9598:	2003f404 	.word	0x2003f404
   b959c:	000baed4 	.word	0x000baed4
   b95a0:	2003f400 	.word	0x2003f400
   b95a4:	9a271c1e 	.word	0x9a271c1e

000b95a8 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b95a8:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b95aa:	2300      	movs	r3, #0
   b95ac:	9300      	str	r3, [sp, #0]
   b95ae:	461a      	mov	r2, r3
   b95b0:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b95b4:	f7fd fd86 	bl	b70c4 <system_ctrl_set_result>
}
   b95b8:	b003      	add	sp, #12
   b95ba:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b95c0 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b95c0:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b95c2:	8843      	ldrh	r3, [r0, #2]
   b95c4:	2b0a      	cmp	r3, #10
   b95c6:	d008      	beq.n	b95da <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b95c8:	2b50      	cmp	r3, #80	; 0x50
   b95ca:	d10b      	bne.n	b95e4 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b95cc:	4b09      	ldr	r3, [pc, #36]	; (b95f4 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b95ce:	681b      	ldr	r3, [r3, #0]
   b95d0:	b14b      	cbz	r3, b95e6 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b95d2:	b003      	add	sp, #12
   b95d4:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b95d8:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b95da:	f7ff ffe5 	bl	b95a8 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b95de:	b003      	add	sp, #12
   b95e0:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b95e4:	2300      	movs	r3, #0
   b95e6:	9300      	str	r3, [sp, #0]
   b95e8:	461a      	mov	r2, r3
   b95ea:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b95ee:	f7fd fd69 	bl	b70c4 <system_ctrl_set_result>
}
   b95f2:	e7f4      	b.n	b95de <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b95f4:	2003e724 	.word	0x2003e724

000b95f8 <module_user_init_hook>:
{
   b95f8:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b95fa:	4812      	ldr	r0, [pc, #72]	; (b9644 <module_user_init_hook+0x4c>)
   b95fc:	2100      	movs	r1, #0
   b95fe:	f7fd fe4b 	bl	b7298 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b9602:	4b11      	ldr	r3, [pc, #68]	; (b9648 <module_user_init_hook+0x50>)
   b9604:	681a      	ldr	r2, [r3, #0]
   b9606:	4b11      	ldr	r3, [pc, #68]	; (b964c <module_user_init_hook+0x54>)
   b9608:	429a      	cmp	r2, r3
   b960a:	4b11      	ldr	r3, [pc, #68]	; (b9650 <module_user_init_hook+0x58>)
   b960c:	bf0c      	ite	eq
   b960e:	2201      	moveq	r2, #1
   b9610:	2200      	movne	r2, #0
   b9612:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b9614:	d001      	beq.n	b961a <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b9616:	f7ff ffb1 	bl	b957c <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b961a:	f7fd fbc1 	bl	b6da0 <HAL_RNG_GetRandomNumber>
   b961e:	4604      	mov	r4, r0
    srand(seed);
   b9620:	f000 fa9e 	bl	b9b60 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b9624:	4b0b      	ldr	r3, [pc, #44]	; (b9654 <module_user_init_hook+0x5c>)
   b9626:	b113      	cbz	r3, b962e <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b9628:	4620      	mov	r0, r4
   b962a:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b962e:	2100      	movs	r1, #0
   b9630:	4808      	ldr	r0, [pc, #32]	; (b9654 <module_user_init_hook+0x5c>)
   b9632:	f7fd fd71 	bl	b7118 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b9636:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b963a:	4807      	ldr	r0, [pc, #28]	; (b9658 <module_user_init_hook+0x60>)
   b963c:	2100      	movs	r1, #0
   b963e:	f7fd bd37 	b.w	b70b0 <system_ctrl_set_app_request_handler>
   b9642:	bf00      	nop
   b9644:	000b9525 	.word	0x000b9525
   b9648:	2003f400 	.word	0x2003f400
   b964c:	9a271c1e 	.word	0x9a271c1e
   b9650:	2003e720 	.word	0x2003e720
   b9654:	00000000 	.word	0x00000000
   b9658:	000b95c1 	.word	0x000b95c1

000b965c <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b965c:	4770      	bx	lr
	...

000b9660 <_Z17acquireWireBufferv>:
{
   b9660:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b9662:	4b0a      	ldr	r3, [pc, #40]	; (b968c <_Z17acquireWireBufferv+0x2c>)
   b9664:	6003      	str	r3, [r0, #0]
   b9666:	2301      	movs	r3, #1
{
   b9668:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b966a:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b966c:	4908      	ldr	r1, [pc, #32]	; (b9690 <_Z17acquireWireBufferv+0x30>)
   b966e:	2020      	movs	r0, #32
   b9670:	f000 f876 	bl	b9760 <_ZnajRKSt9nothrow_t>
	};
   b9674:	2520      	movs	r5, #32
   b9676:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b9678:	4905      	ldr	r1, [pc, #20]	; (b9690 <_Z17acquireWireBufferv+0x30>)
	};
   b967a:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b967c:	4628      	mov	r0, r5
   b967e:	f000 f86f 	bl	b9760 <_ZnajRKSt9nothrow_t>
	};
   b9682:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   b9686:	4620      	mov	r0, r4
   b9688:	bd38      	pop	{r3, r4, r5, pc}
   b968a:	bf00      	nop
   b968c:	00010018 	.word	0x00010018
   b9690:	000bad0c 	.word	0x000bad0c

000b9694 <_Z19__fetch_global_Wirev>:
{
   b9694:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b9696:	4d0e      	ldr	r5, [pc, #56]	; (b96d0 <_Z19__fetch_global_Wirev+0x3c>)
   b9698:	7829      	ldrb	r1, [r5, #0]
   b969a:	f3bf 8f5b 	dmb	ish
   b969e:	f011 0401 	ands.w	r4, r1, #1
{
   b96a2:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b96a4:	d111      	bne.n	b96ca <_Z19__fetch_global_Wirev+0x36>
   b96a6:	4628      	mov	r0, r5
   b96a8:	f7fa fd06 	bl	b40b8 <__cxa_guard_acquire>
   b96ac:	b168      	cbz	r0, b96ca <_Z19__fetch_global_Wirev+0x36>
   b96ae:	4668      	mov	r0, sp
   b96b0:	f7ff ffd6 	bl	b9660 <_Z17acquireWireBufferv>
   b96b4:	466a      	mov	r2, sp
   b96b6:	4621      	mov	r1, r4
   b96b8:	4806      	ldr	r0, [pc, #24]	; (b96d4 <_Z19__fetch_global_Wirev+0x40>)
   b96ba:	f7fe f9a3 	bl	b7a04 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b96be:	4628      	mov	r0, r5
   b96c0:	f7fa fcff 	bl	b40c2 <__cxa_guard_release>
   b96c4:	4804      	ldr	r0, [pc, #16]	; (b96d8 <_Z19__fetch_global_Wirev+0x44>)
   b96c6:	f000 fa0d 	bl	b9ae4 <atexit>
	return wire;
}
   b96ca:	4802      	ldr	r0, [pc, #8]	; (b96d4 <_Z19__fetch_global_Wirev+0x40>)
   b96cc:	b007      	add	sp, #28
   b96ce:	bd30      	pop	{r4, r5, pc}
   b96d0:	2003e72c 	.word	0x2003e72c
   b96d4:	2003e730 	.word	0x2003e730
   b96d8:	000b965d 	.word	0x000b965d

000b96dc <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b96dc:	4770      	bx	lr
	...

000b96e0 <_Z20acquireSerial1Bufferv>:
{
   b96e0:	b538      	push	{r3, r4, r5, lr}
   b96e2:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b96e4:	2514      	movs	r5, #20
   b96e6:	462a      	mov	r2, r5
   b96e8:	2100      	movs	r1, #0
   b96ea:	f000 fa31 	bl	b9b50 <memset>
   b96ee:	8025      	strh	r5, [r4, #0]
   b96f0:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b96f2:	4907      	ldr	r1, [pc, #28]	; (b9710 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b96f4:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b96f6:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b96f8:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b96fa:	f000 f831 	bl	b9760 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b96fe:	4904      	ldr	r1, [pc, #16]	; (b9710 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b9700:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b9702:	4628      	mov	r0, r5
   b9704:	f000 f82c 	bl	b9760 <_ZnajRKSt9nothrow_t>
    };
   b9708:	60e0      	str	r0, [r4, #12]
}
   b970a:	4620      	mov	r0, r4
   b970c:	bd38      	pop	{r3, r4, r5, pc}
   b970e:	bf00      	nop
   b9710:	000bad0c 	.word	0x000bad0c

000b9714 <_Z22__fetch_global_Serial1v>:
{
   b9714:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b9716:	4d0e      	ldr	r5, [pc, #56]	; (b9750 <_Z22__fetch_global_Serial1v+0x3c>)
   b9718:	7829      	ldrb	r1, [r5, #0]
   b971a:	f3bf 8f5b 	dmb	ish
   b971e:	f011 0401 	ands.w	r4, r1, #1
{
   b9722:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b9724:	d111      	bne.n	b974a <_Z22__fetch_global_Serial1v+0x36>
   b9726:	4628      	mov	r0, r5
   b9728:	f7fa fcc6 	bl	b40b8 <__cxa_guard_acquire>
   b972c:	b168      	cbz	r0, b974a <_Z22__fetch_global_Serial1v+0x36>
   b972e:	a801      	add	r0, sp, #4
   b9730:	f7ff ffd6 	bl	b96e0 <_Z20acquireSerial1Bufferv>
   b9734:	aa01      	add	r2, sp, #4
   b9736:	4621      	mov	r1, r4
   b9738:	4806      	ldr	r0, [pc, #24]	; (b9754 <_Z22__fetch_global_Serial1v+0x40>)
   b973a:	f7ff fe4d 	bl	b93d8 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b973e:	4628      	mov	r0, r5
   b9740:	f7fa fcbf 	bl	b40c2 <__cxa_guard_release>
   b9744:	4804      	ldr	r0, [pc, #16]	; (b9758 <_Z22__fetch_global_Serial1v+0x44>)
   b9746:	f000 f9cd 	bl	b9ae4 <atexit>
    return serial1;
}
   b974a:	4802      	ldr	r0, [pc, #8]	; (b9754 <_Z22__fetch_global_Serial1v+0x40>)
   b974c:	b007      	add	sp, #28
   b974e:	bd30      	pop	{r4, r5, pc}
   b9750:	2003e744 	.word	0x2003e744
   b9754:	2003e748 	.word	0x2003e748
   b9758:	000b96dd 	.word	0x000b96dd

000b975c <_ZnwjRKSt9nothrow_t>:
   b975c:	f7fa bc99 	b.w	b4092 <_Znwj>

000b9760 <_ZnajRKSt9nothrow_t>:
   b9760:	f7fa bc99 	b.w	b4096 <_Znaj>

000b9764 <_ZSt25__throw_bad_function_callv>:
   b9764:	b508      	push	{r3, lr}
   b9766:	f7fd fd77 	bl	b7258 <abort>
	...

000b976c <__aeabi_drsub>:
   b976c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   b9770:	e002      	b.n	b9778 <__adddf3>
   b9772:	bf00      	nop

000b9774 <__aeabi_dsub>:
   b9774:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000b9778 <__adddf3>:
   b9778:	b530      	push	{r4, r5, lr}
   b977a:	ea4f 0441 	mov.w	r4, r1, lsl #1
   b977e:	ea4f 0543 	mov.w	r5, r3, lsl #1
   b9782:	ea94 0f05 	teq	r4, r5
   b9786:	bf08      	it	eq
   b9788:	ea90 0f02 	teqeq	r0, r2
   b978c:	bf1f      	itttt	ne
   b978e:	ea54 0c00 	orrsne.w	ip, r4, r0
   b9792:	ea55 0c02 	orrsne.w	ip, r5, r2
   b9796:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   b979a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b979e:	f000 80e2 	beq.w	b9966 <__adddf3+0x1ee>
   b97a2:	ea4f 5454 	mov.w	r4, r4, lsr #21
   b97a6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   b97aa:	bfb8      	it	lt
   b97ac:	426d      	neglt	r5, r5
   b97ae:	dd0c      	ble.n	b97ca <__adddf3+0x52>
   b97b0:	442c      	add	r4, r5
   b97b2:	ea80 0202 	eor.w	r2, r0, r2
   b97b6:	ea81 0303 	eor.w	r3, r1, r3
   b97ba:	ea82 0000 	eor.w	r0, r2, r0
   b97be:	ea83 0101 	eor.w	r1, r3, r1
   b97c2:	ea80 0202 	eor.w	r2, r0, r2
   b97c6:	ea81 0303 	eor.w	r3, r1, r3
   b97ca:	2d36      	cmp	r5, #54	; 0x36
   b97cc:	bf88      	it	hi
   b97ce:	bd30      	pophi	{r4, r5, pc}
   b97d0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b97d4:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b97d8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   b97dc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   b97e0:	d002      	beq.n	b97e8 <__adddf3+0x70>
   b97e2:	4240      	negs	r0, r0
   b97e4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b97e8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   b97ec:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b97f0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   b97f4:	d002      	beq.n	b97fc <__adddf3+0x84>
   b97f6:	4252      	negs	r2, r2
   b97f8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b97fc:	ea94 0f05 	teq	r4, r5
   b9800:	f000 80a7 	beq.w	b9952 <__adddf3+0x1da>
   b9804:	f1a4 0401 	sub.w	r4, r4, #1
   b9808:	f1d5 0e20 	rsbs	lr, r5, #32
   b980c:	db0d      	blt.n	b982a <__adddf3+0xb2>
   b980e:	fa02 fc0e 	lsl.w	ip, r2, lr
   b9812:	fa22 f205 	lsr.w	r2, r2, r5
   b9816:	1880      	adds	r0, r0, r2
   b9818:	f141 0100 	adc.w	r1, r1, #0
   b981c:	fa03 f20e 	lsl.w	r2, r3, lr
   b9820:	1880      	adds	r0, r0, r2
   b9822:	fa43 f305 	asr.w	r3, r3, r5
   b9826:	4159      	adcs	r1, r3
   b9828:	e00e      	b.n	b9848 <__adddf3+0xd0>
   b982a:	f1a5 0520 	sub.w	r5, r5, #32
   b982e:	f10e 0e20 	add.w	lr, lr, #32
   b9832:	2a01      	cmp	r2, #1
   b9834:	fa03 fc0e 	lsl.w	ip, r3, lr
   b9838:	bf28      	it	cs
   b983a:	f04c 0c02 	orrcs.w	ip, ip, #2
   b983e:	fa43 f305 	asr.w	r3, r3, r5
   b9842:	18c0      	adds	r0, r0, r3
   b9844:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   b9848:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b984c:	d507      	bpl.n	b985e <__adddf3+0xe6>
   b984e:	f04f 0e00 	mov.w	lr, #0
   b9852:	f1dc 0c00 	rsbs	ip, ip, #0
   b9856:	eb7e 0000 	sbcs.w	r0, lr, r0
   b985a:	eb6e 0101 	sbc.w	r1, lr, r1
   b985e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   b9862:	d31b      	bcc.n	b989c <__adddf3+0x124>
   b9864:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   b9868:	d30c      	bcc.n	b9884 <__adddf3+0x10c>
   b986a:	0849      	lsrs	r1, r1, #1
   b986c:	ea5f 0030 	movs.w	r0, r0, rrx
   b9870:	ea4f 0c3c 	mov.w	ip, ip, rrx
   b9874:	f104 0401 	add.w	r4, r4, #1
   b9878:	ea4f 5244 	mov.w	r2, r4, lsl #21
   b987c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   b9880:	f080 809a 	bcs.w	b99b8 <__adddf3+0x240>
   b9884:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b9888:	bf08      	it	eq
   b988a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b988e:	f150 0000 	adcs.w	r0, r0, #0
   b9892:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b9896:	ea41 0105 	orr.w	r1, r1, r5
   b989a:	bd30      	pop	{r4, r5, pc}
   b989c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   b98a0:	4140      	adcs	r0, r0
   b98a2:	eb41 0101 	adc.w	r1, r1, r1
   b98a6:	3c01      	subs	r4, #1
   b98a8:	bf28      	it	cs
   b98aa:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   b98ae:	d2e9      	bcs.n	b9884 <__adddf3+0x10c>
   b98b0:	f091 0f00 	teq	r1, #0
   b98b4:	bf04      	itt	eq
   b98b6:	4601      	moveq	r1, r0
   b98b8:	2000      	moveq	r0, #0
   b98ba:	fab1 f381 	clz	r3, r1
   b98be:	bf08      	it	eq
   b98c0:	3320      	addeq	r3, #32
   b98c2:	f1a3 030b 	sub.w	r3, r3, #11
   b98c6:	f1b3 0220 	subs.w	r2, r3, #32
   b98ca:	da0c      	bge.n	b98e6 <__adddf3+0x16e>
   b98cc:	320c      	adds	r2, #12
   b98ce:	dd08      	ble.n	b98e2 <__adddf3+0x16a>
   b98d0:	f102 0c14 	add.w	ip, r2, #20
   b98d4:	f1c2 020c 	rsb	r2, r2, #12
   b98d8:	fa01 f00c 	lsl.w	r0, r1, ip
   b98dc:	fa21 f102 	lsr.w	r1, r1, r2
   b98e0:	e00c      	b.n	b98fc <__adddf3+0x184>
   b98e2:	f102 0214 	add.w	r2, r2, #20
   b98e6:	bfd8      	it	le
   b98e8:	f1c2 0c20 	rsble	ip, r2, #32
   b98ec:	fa01 f102 	lsl.w	r1, r1, r2
   b98f0:	fa20 fc0c 	lsr.w	ip, r0, ip
   b98f4:	bfdc      	itt	le
   b98f6:	ea41 010c 	orrle.w	r1, r1, ip
   b98fa:	4090      	lslle	r0, r2
   b98fc:	1ae4      	subs	r4, r4, r3
   b98fe:	bfa2      	ittt	ge
   b9900:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   b9904:	4329      	orrge	r1, r5
   b9906:	bd30      	popge	{r4, r5, pc}
   b9908:	ea6f 0404 	mvn.w	r4, r4
   b990c:	3c1f      	subs	r4, #31
   b990e:	da1c      	bge.n	b994a <__adddf3+0x1d2>
   b9910:	340c      	adds	r4, #12
   b9912:	dc0e      	bgt.n	b9932 <__adddf3+0x1ba>
   b9914:	f104 0414 	add.w	r4, r4, #20
   b9918:	f1c4 0220 	rsb	r2, r4, #32
   b991c:	fa20 f004 	lsr.w	r0, r0, r4
   b9920:	fa01 f302 	lsl.w	r3, r1, r2
   b9924:	ea40 0003 	orr.w	r0, r0, r3
   b9928:	fa21 f304 	lsr.w	r3, r1, r4
   b992c:	ea45 0103 	orr.w	r1, r5, r3
   b9930:	bd30      	pop	{r4, r5, pc}
   b9932:	f1c4 040c 	rsb	r4, r4, #12
   b9936:	f1c4 0220 	rsb	r2, r4, #32
   b993a:	fa20 f002 	lsr.w	r0, r0, r2
   b993e:	fa01 f304 	lsl.w	r3, r1, r4
   b9942:	ea40 0003 	orr.w	r0, r0, r3
   b9946:	4629      	mov	r1, r5
   b9948:	bd30      	pop	{r4, r5, pc}
   b994a:	fa21 f004 	lsr.w	r0, r1, r4
   b994e:	4629      	mov	r1, r5
   b9950:	bd30      	pop	{r4, r5, pc}
   b9952:	f094 0f00 	teq	r4, #0
   b9956:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   b995a:	bf06      	itte	eq
   b995c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   b9960:	3401      	addeq	r4, #1
   b9962:	3d01      	subne	r5, #1
   b9964:	e74e      	b.n	b9804 <__adddf3+0x8c>
   b9966:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b996a:	bf18      	it	ne
   b996c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b9970:	d029      	beq.n	b99c6 <__adddf3+0x24e>
   b9972:	ea94 0f05 	teq	r4, r5
   b9976:	bf08      	it	eq
   b9978:	ea90 0f02 	teqeq	r0, r2
   b997c:	d005      	beq.n	b998a <__adddf3+0x212>
   b997e:	ea54 0c00 	orrs.w	ip, r4, r0
   b9982:	bf04      	itt	eq
   b9984:	4619      	moveq	r1, r3
   b9986:	4610      	moveq	r0, r2
   b9988:	bd30      	pop	{r4, r5, pc}
   b998a:	ea91 0f03 	teq	r1, r3
   b998e:	bf1e      	ittt	ne
   b9990:	2100      	movne	r1, #0
   b9992:	2000      	movne	r0, #0
   b9994:	bd30      	popne	{r4, r5, pc}
   b9996:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   b999a:	d105      	bne.n	b99a8 <__adddf3+0x230>
   b999c:	0040      	lsls	r0, r0, #1
   b999e:	4149      	adcs	r1, r1
   b99a0:	bf28      	it	cs
   b99a2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   b99a6:	bd30      	pop	{r4, r5, pc}
   b99a8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   b99ac:	bf3c      	itt	cc
   b99ae:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   b99b2:	bd30      	popcc	{r4, r5, pc}
   b99b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b99b8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   b99bc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b99c0:	f04f 0000 	mov.w	r0, #0
   b99c4:	bd30      	pop	{r4, r5, pc}
   b99c6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b99ca:	bf1a      	itte	ne
   b99cc:	4619      	movne	r1, r3
   b99ce:	4610      	movne	r0, r2
   b99d0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   b99d4:	bf1c      	itt	ne
   b99d6:	460b      	movne	r3, r1
   b99d8:	4602      	movne	r2, r0
   b99da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b99de:	bf06      	itte	eq
   b99e0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   b99e4:	ea91 0f03 	teqeq	r1, r3
   b99e8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   b99ec:	bd30      	pop	{r4, r5, pc}
   b99ee:	bf00      	nop

000b99f0 <__aeabi_ui2d>:
   b99f0:	f090 0f00 	teq	r0, #0
   b99f4:	bf04      	itt	eq
   b99f6:	2100      	moveq	r1, #0
   b99f8:	4770      	bxeq	lr
   b99fa:	b530      	push	{r4, r5, lr}
   b99fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b9a00:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b9a04:	f04f 0500 	mov.w	r5, #0
   b9a08:	f04f 0100 	mov.w	r1, #0
   b9a0c:	e750      	b.n	b98b0 <__adddf3+0x138>
   b9a0e:	bf00      	nop

000b9a10 <__aeabi_i2d>:
   b9a10:	f090 0f00 	teq	r0, #0
   b9a14:	bf04      	itt	eq
   b9a16:	2100      	moveq	r1, #0
   b9a18:	4770      	bxeq	lr
   b9a1a:	b530      	push	{r4, r5, lr}
   b9a1c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b9a20:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b9a24:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   b9a28:	bf48      	it	mi
   b9a2a:	4240      	negmi	r0, r0
   b9a2c:	f04f 0100 	mov.w	r1, #0
   b9a30:	e73e      	b.n	b98b0 <__adddf3+0x138>
   b9a32:	bf00      	nop

000b9a34 <__aeabi_f2d>:
   b9a34:	0042      	lsls	r2, r0, #1
   b9a36:	ea4f 01e2 	mov.w	r1, r2, asr #3
   b9a3a:	ea4f 0131 	mov.w	r1, r1, rrx
   b9a3e:	ea4f 7002 	mov.w	r0, r2, lsl #28
   b9a42:	bf1f      	itttt	ne
   b9a44:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   b9a48:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   b9a4c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   b9a50:	4770      	bxne	lr
   b9a52:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   b9a56:	bf08      	it	eq
   b9a58:	4770      	bxeq	lr
   b9a5a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   b9a5e:	bf04      	itt	eq
   b9a60:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   b9a64:	4770      	bxeq	lr
   b9a66:	b530      	push	{r4, r5, lr}
   b9a68:	f44f 7460 	mov.w	r4, #896	; 0x380
   b9a6c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b9a70:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b9a74:	e71c      	b.n	b98b0 <__adddf3+0x138>
   b9a76:	bf00      	nop

000b9a78 <__aeabi_ul2d>:
   b9a78:	ea50 0201 	orrs.w	r2, r0, r1
   b9a7c:	bf08      	it	eq
   b9a7e:	4770      	bxeq	lr
   b9a80:	b530      	push	{r4, r5, lr}
   b9a82:	f04f 0500 	mov.w	r5, #0
   b9a86:	e00a      	b.n	b9a9e <__aeabi_l2d+0x16>

000b9a88 <__aeabi_l2d>:
   b9a88:	ea50 0201 	orrs.w	r2, r0, r1
   b9a8c:	bf08      	it	eq
   b9a8e:	4770      	bxeq	lr
   b9a90:	b530      	push	{r4, r5, lr}
   b9a92:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   b9a96:	d502      	bpl.n	b9a9e <__aeabi_l2d+0x16>
   b9a98:	4240      	negs	r0, r0
   b9a9a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b9a9e:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b9aa2:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b9aa6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   b9aaa:	f43f aed8 	beq.w	b985e <__adddf3+0xe6>
   b9aae:	f04f 0203 	mov.w	r2, #3
   b9ab2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b9ab6:	bf18      	it	ne
   b9ab8:	3203      	addne	r2, #3
   b9aba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b9abe:	bf18      	it	ne
   b9ac0:	3203      	addne	r2, #3
   b9ac2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   b9ac6:	f1c2 0320 	rsb	r3, r2, #32
   b9aca:	fa00 fc03 	lsl.w	ip, r0, r3
   b9ace:	fa20 f002 	lsr.w	r0, r0, r2
   b9ad2:	fa01 fe03 	lsl.w	lr, r1, r3
   b9ad6:	ea40 000e 	orr.w	r0, r0, lr
   b9ada:	fa21 f102 	lsr.w	r1, r1, r2
   b9ade:	4414      	add	r4, r2
   b9ae0:	e6bd      	b.n	b985e <__adddf3+0xe6>
   b9ae2:	bf00      	nop

000b9ae4 <atexit>:
   b9ae4:	2300      	movs	r3, #0
   b9ae6:	4601      	mov	r1, r0
   b9ae8:	461a      	mov	r2, r3
   b9aea:	4618      	mov	r0, r3
   b9aec:	f000 b9a8 	b.w	b9e40 <__register_exitproc>

000b9af0 <isprint>:
   b9af0:	4b02      	ldr	r3, [pc, #8]	; (b9afc <isprint+0xc>)
   b9af2:	4418      	add	r0, r3
   b9af4:	7840      	ldrb	r0, [r0, #1]
   b9af6:	f000 0097 	and.w	r0, r0, #151	; 0x97
   b9afa:	4770      	bx	lr
   b9afc:	000bad7d 	.word	0x000bad7d

000b9b00 <memcpy>:
   b9b00:	440a      	add	r2, r1
   b9b02:	4291      	cmp	r1, r2
   b9b04:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   b9b08:	d100      	bne.n	b9b0c <memcpy+0xc>
   b9b0a:	4770      	bx	lr
   b9b0c:	b510      	push	{r4, lr}
   b9b0e:	f811 4b01 	ldrb.w	r4, [r1], #1
   b9b12:	f803 4f01 	strb.w	r4, [r3, #1]!
   b9b16:	4291      	cmp	r1, r2
   b9b18:	d1f9      	bne.n	b9b0e <memcpy+0xe>
   b9b1a:	bd10      	pop	{r4, pc}

000b9b1c <memmove>:
   b9b1c:	4288      	cmp	r0, r1
   b9b1e:	b510      	push	{r4, lr}
   b9b20:	eb01 0402 	add.w	r4, r1, r2
   b9b24:	d902      	bls.n	b9b2c <memmove+0x10>
   b9b26:	4284      	cmp	r4, r0
   b9b28:	4623      	mov	r3, r4
   b9b2a:	d807      	bhi.n	b9b3c <memmove+0x20>
   b9b2c:	1e43      	subs	r3, r0, #1
   b9b2e:	42a1      	cmp	r1, r4
   b9b30:	d008      	beq.n	b9b44 <memmove+0x28>
   b9b32:	f811 2b01 	ldrb.w	r2, [r1], #1
   b9b36:	f803 2f01 	strb.w	r2, [r3, #1]!
   b9b3a:	e7f8      	b.n	b9b2e <memmove+0x12>
   b9b3c:	4402      	add	r2, r0
   b9b3e:	4601      	mov	r1, r0
   b9b40:	428a      	cmp	r2, r1
   b9b42:	d100      	bne.n	b9b46 <memmove+0x2a>
   b9b44:	bd10      	pop	{r4, pc}
   b9b46:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   b9b4a:	f802 4d01 	strb.w	r4, [r2, #-1]!
   b9b4e:	e7f7      	b.n	b9b40 <memmove+0x24>

000b9b50 <memset>:
   b9b50:	4402      	add	r2, r0
   b9b52:	4603      	mov	r3, r0
   b9b54:	4293      	cmp	r3, r2
   b9b56:	d100      	bne.n	b9b5a <memset+0xa>
   b9b58:	4770      	bx	lr
   b9b5a:	f803 1b01 	strb.w	r1, [r3], #1
   b9b5e:	e7f9      	b.n	b9b54 <memset+0x4>

000b9b60 <srand>:
   b9b60:	b538      	push	{r3, r4, r5, lr}
   b9b62:	4b10      	ldr	r3, [pc, #64]	; (b9ba4 <srand+0x44>)
   b9b64:	681d      	ldr	r5, [r3, #0]
   b9b66:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b9b68:	4604      	mov	r4, r0
   b9b6a:	b9b3      	cbnz	r3, b9b9a <srand+0x3a>
   b9b6c:	2018      	movs	r0, #24
   b9b6e:	f7fd fb3b 	bl	b71e8 <malloc>
   b9b72:	4602      	mov	r2, r0
   b9b74:	63a8      	str	r0, [r5, #56]	; 0x38
   b9b76:	b920      	cbnz	r0, b9b82 <srand+0x22>
   b9b78:	4b0b      	ldr	r3, [pc, #44]	; (b9ba8 <srand+0x48>)
   b9b7a:	480c      	ldr	r0, [pc, #48]	; (b9bac <srand+0x4c>)
   b9b7c:	2142      	movs	r1, #66	; 0x42
   b9b7e:	f7fd fb83 	bl	b7288 <__assert_func>
   b9b82:	490b      	ldr	r1, [pc, #44]	; (b9bb0 <srand+0x50>)
   b9b84:	4b0b      	ldr	r3, [pc, #44]	; (b9bb4 <srand+0x54>)
   b9b86:	e9c0 1300 	strd	r1, r3, [r0]
   b9b8a:	4b0b      	ldr	r3, [pc, #44]	; (b9bb8 <srand+0x58>)
   b9b8c:	6083      	str	r3, [r0, #8]
   b9b8e:	230b      	movs	r3, #11
   b9b90:	8183      	strh	r3, [r0, #12]
   b9b92:	2100      	movs	r1, #0
   b9b94:	2001      	movs	r0, #1
   b9b96:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b9b9a:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b9b9c:	2200      	movs	r2, #0
   b9b9e:	611c      	str	r4, [r3, #16]
   b9ba0:	615a      	str	r2, [r3, #20]
   b9ba2:	bd38      	pop	{r3, r4, r5, pc}
   b9ba4:	2003b6d8 	.word	0x2003b6d8
   b9ba8:	000bad0d 	.word	0x000bad0d
   b9bac:	000bad24 	.word	0x000bad24
   b9bb0:	abcd330e 	.word	0xabcd330e
   b9bb4:	e66d1234 	.word	0xe66d1234
   b9bb8:	0005deec 	.word	0x0005deec

000b9bbc <rand>:
   b9bbc:	4b16      	ldr	r3, [pc, #88]	; (b9c18 <rand+0x5c>)
   b9bbe:	b510      	push	{r4, lr}
   b9bc0:	681c      	ldr	r4, [r3, #0]
   b9bc2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   b9bc4:	b9b3      	cbnz	r3, b9bf4 <rand+0x38>
   b9bc6:	2018      	movs	r0, #24
   b9bc8:	f7fd fb0e 	bl	b71e8 <malloc>
   b9bcc:	63a0      	str	r0, [r4, #56]	; 0x38
   b9bce:	b928      	cbnz	r0, b9bdc <rand+0x20>
   b9bd0:	4602      	mov	r2, r0
   b9bd2:	4b12      	ldr	r3, [pc, #72]	; (b9c1c <rand+0x60>)
   b9bd4:	4812      	ldr	r0, [pc, #72]	; (b9c20 <rand+0x64>)
   b9bd6:	214e      	movs	r1, #78	; 0x4e
   b9bd8:	f7fd fb56 	bl	b7288 <__assert_func>
   b9bdc:	4a11      	ldr	r2, [pc, #68]	; (b9c24 <rand+0x68>)
   b9bde:	4b12      	ldr	r3, [pc, #72]	; (b9c28 <rand+0x6c>)
   b9be0:	e9c0 2300 	strd	r2, r3, [r0]
   b9be4:	4b11      	ldr	r3, [pc, #68]	; (b9c2c <rand+0x70>)
   b9be6:	6083      	str	r3, [r0, #8]
   b9be8:	230b      	movs	r3, #11
   b9bea:	8183      	strh	r3, [r0, #12]
   b9bec:	2201      	movs	r2, #1
   b9bee:	2300      	movs	r3, #0
   b9bf0:	e9c0 2304 	strd	r2, r3, [r0, #16]
   b9bf4:	6ba4      	ldr	r4, [r4, #56]	; 0x38
   b9bf6:	4a0e      	ldr	r2, [pc, #56]	; (b9c30 <rand+0x74>)
   b9bf8:	6920      	ldr	r0, [r4, #16]
   b9bfa:	6963      	ldr	r3, [r4, #20]
   b9bfc:	490d      	ldr	r1, [pc, #52]	; (b9c34 <rand+0x78>)
   b9bfe:	4342      	muls	r2, r0
   b9c00:	fb01 2203 	mla	r2, r1, r3, r2
   b9c04:	fba0 0101 	umull	r0, r1, r0, r1
   b9c08:	1c43      	adds	r3, r0, #1
   b9c0a:	eb42 0001 	adc.w	r0, r2, r1
   b9c0e:	e9c4 3004 	strd	r3, r0, [r4, #16]
   b9c12:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
   b9c16:	bd10      	pop	{r4, pc}
   b9c18:	2003b6d8 	.word	0x2003b6d8
   b9c1c:	000bad0d 	.word	0x000bad0d
   b9c20:	000bad24 	.word	0x000bad24
   b9c24:	abcd330e 	.word	0xabcd330e
   b9c28:	e66d1234 	.word	0xe66d1234
   b9c2c:	0005deec 	.word	0x0005deec
   b9c30:	5851f42d 	.word	0x5851f42d
   b9c34:	4c957f2d 	.word	0x4c957f2d

000b9c38 <strchr>:
   b9c38:	b2c9      	uxtb	r1, r1
   b9c3a:	4603      	mov	r3, r0
   b9c3c:	f810 2b01 	ldrb.w	r2, [r0], #1
   b9c40:	b11a      	cbz	r2, b9c4a <strchr+0x12>
   b9c42:	428a      	cmp	r2, r1
   b9c44:	d1f9      	bne.n	b9c3a <strchr+0x2>
   b9c46:	4618      	mov	r0, r3
   b9c48:	4770      	bx	lr
   b9c4a:	2900      	cmp	r1, #0
   b9c4c:	bf18      	it	ne
   b9c4e:	2300      	movne	r3, #0
   b9c50:	e7f9      	b.n	b9c46 <strchr+0xe>

000b9c52 <strchrnul>:
   b9c52:	b510      	push	{r4, lr}
   b9c54:	4604      	mov	r4, r0
   b9c56:	f7ff ffef 	bl	b9c38 <strchr>
   b9c5a:	b918      	cbnz	r0, b9c64 <strchrnul+0x12>
   b9c5c:	4620      	mov	r0, r4
   b9c5e:	f000 f832 	bl	b9cc6 <strlen>
   b9c62:	4420      	add	r0, r4
   b9c64:	bd10      	pop	{r4, pc}

000b9c66 <strcmp>:
   b9c66:	f810 2b01 	ldrb.w	r2, [r0], #1
   b9c6a:	f811 3b01 	ldrb.w	r3, [r1], #1
   b9c6e:	2a01      	cmp	r2, #1
   b9c70:	bf28      	it	cs
   b9c72:	429a      	cmpcs	r2, r3
   b9c74:	d0f7      	beq.n	b9c66 <strcmp>
   b9c76:	1ad0      	subs	r0, r2, r3
   b9c78:	4770      	bx	lr

000b9c7a <strcpy>:
   b9c7a:	4603      	mov	r3, r0
   b9c7c:	f811 2b01 	ldrb.w	r2, [r1], #1
   b9c80:	f803 2b01 	strb.w	r2, [r3], #1
   b9c84:	2a00      	cmp	r2, #0
   b9c86:	d1f9      	bne.n	b9c7c <strcpy+0x2>
   b9c88:	4770      	bx	lr
	...

000b9c8c <strdup>:
   b9c8c:	4b02      	ldr	r3, [pc, #8]	; (b9c98 <strdup+0xc>)
   b9c8e:	4601      	mov	r1, r0
   b9c90:	6818      	ldr	r0, [r3, #0]
   b9c92:	f000 b803 	b.w	b9c9c <_strdup_r>
   b9c96:	bf00      	nop
   b9c98:	2003b6d8 	.word	0x2003b6d8

000b9c9c <_strdup_r>:
   b9c9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b9c9e:	4604      	mov	r4, r0
   b9ca0:	4608      	mov	r0, r1
   b9ca2:	460d      	mov	r5, r1
   b9ca4:	f000 f80f 	bl	b9cc6 <strlen>
   b9ca8:	1c42      	adds	r2, r0, #1
   b9caa:	4611      	mov	r1, r2
   b9cac:	4620      	mov	r0, r4
   b9cae:	9201      	str	r2, [sp, #4]
   b9cb0:	f7fd fada 	bl	b7268 <_malloc_r>
   b9cb4:	4604      	mov	r4, r0
   b9cb6:	b118      	cbz	r0, b9cc0 <_strdup_r+0x24>
   b9cb8:	9a01      	ldr	r2, [sp, #4]
   b9cba:	4629      	mov	r1, r5
   b9cbc:	f7ff ff20 	bl	b9b00 <memcpy>
   b9cc0:	4620      	mov	r0, r4
   b9cc2:	b003      	add	sp, #12
   b9cc4:	bd30      	pop	{r4, r5, pc}

000b9cc6 <strlen>:
   b9cc6:	4603      	mov	r3, r0
   b9cc8:	f813 2b01 	ldrb.w	r2, [r3], #1
   b9ccc:	2a00      	cmp	r2, #0
   b9cce:	d1fb      	bne.n	b9cc8 <strlen+0x2>
   b9cd0:	1a18      	subs	r0, r3, r0
   b9cd2:	3801      	subs	r0, #1
   b9cd4:	4770      	bx	lr

000b9cd6 <strncmp>:
   b9cd6:	b510      	push	{r4, lr}
   b9cd8:	b17a      	cbz	r2, b9cfa <strncmp+0x24>
   b9cda:	4603      	mov	r3, r0
   b9cdc:	3901      	subs	r1, #1
   b9cde:	1884      	adds	r4, r0, r2
   b9ce0:	f813 0b01 	ldrb.w	r0, [r3], #1
   b9ce4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   b9ce8:	4290      	cmp	r0, r2
   b9cea:	d101      	bne.n	b9cf0 <strncmp+0x1a>
   b9cec:	42a3      	cmp	r3, r4
   b9cee:	d101      	bne.n	b9cf4 <strncmp+0x1e>
   b9cf0:	1a80      	subs	r0, r0, r2
   b9cf2:	bd10      	pop	{r4, pc}
   b9cf4:	2800      	cmp	r0, #0
   b9cf6:	d1f3      	bne.n	b9ce0 <strncmp+0xa>
   b9cf8:	e7fa      	b.n	b9cf0 <strncmp+0x1a>
   b9cfa:	4610      	mov	r0, r2
   b9cfc:	e7f9      	b.n	b9cf2 <strncmp+0x1c>

000b9cfe <strrchr>:
   b9cfe:	b538      	push	{r3, r4, r5, lr}
   b9d00:	4603      	mov	r3, r0
   b9d02:	460c      	mov	r4, r1
   b9d04:	b969      	cbnz	r1, b9d22 <strrchr+0x24>
   b9d06:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b9d0a:	f7ff bf95 	b.w	b9c38 <strchr>
   b9d0e:	1c43      	adds	r3, r0, #1
   b9d10:	4605      	mov	r5, r0
   b9d12:	4621      	mov	r1, r4
   b9d14:	4618      	mov	r0, r3
   b9d16:	f7ff ff8f 	bl	b9c38 <strchr>
   b9d1a:	2800      	cmp	r0, #0
   b9d1c:	d1f7      	bne.n	b9d0e <strrchr+0x10>
   b9d1e:	4628      	mov	r0, r5
   b9d20:	bd38      	pop	{r3, r4, r5, pc}
   b9d22:	2500      	movs	r5, #0
   b9d24:	e7f5      	b.n	b9d12 <strrchr+0x14>
	...

000b9d28 <_strtol_l.constprop.0>:
   b9d28:	2b01      	cmp	r3, #1
   b9d2a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b9d2e:	d001      	beq.n	b9d34 <_strtol_l.constprop.0+0xc>
   b9d30:	2b24      	cmp	r3, #36	; 0x24
   b9d32:	d906      	bls.n	b9d42 <_strtol_l.constprop.0+0x1a>
   b9d34:	f7fd faa0 	bl	b7278 <__errno>
   b9d38:	2316      	movs	r3, #22
   b9d3a:	6003      	str	r3, [r0, #0]
   b9d3c:	2000      	movs	r0, #0
   b9d3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b9d42:	f8df c0e4 	ldr.w	ip, [pc, #228]	; b9e28 <_strtol_l.constprop.0+0x100>
   b9d46:	460d      	mov	r5, r1
   b9d48:	462e      	mov	r6, r5
   b9d4a:	f815 4b01 	ldrb.w	r4, [r5], #1
   b9d4e:	f814 700c 	ldrb.w	r7, [r4, ip]
   b9d52:	f017 0708 	ands.w	r7, r7, #8
   b9d56:	d1f7      	bne.n	b9d48 <_strtol_l.constprop.0+0x20>
   b9d58:	2c2d      	cmp	r4, #45	; 0x2d
   b9d5a:	d132      	bne.n	b9dc2 <_strtol_l.constprop.0+0x9a>
   b9d5c:	782c      	ldrb	r4, [r5, #0]
   b9d5e:	2701      	movs	r7, #1
   b9d60:	1cb5      	adds	r5, r6, #2
   b9d62:	2b00      	cmp	r3, #0
   b9d64:	d05b      	beq.n	b9e1e <_strtol_l.constprop.0+0xf6>
   b9d66:	2b10      	cmp	r3, #16
   b9d68:	d109      	bne.n	b9d7e <_strtol_l.constprop.0+0x56>
   b9d6a:	2c30      	cmp	r4, #48	; 0x30
   b9d6c:	d107      	bne.n	b9d7e <_strtol_l.constprop.0+0x56>
   b9d6e:	782c      	ldrb	r4, [r5, #0]
   b9d70:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   b9d74:	2c58      	cmp	r4, #88	; 0x58
   b9d76:	d14d      	bne.n	b9e14 <_strtol_l.constprop.0+0xec>
   b9d78:	786c      	ldrb	r4, [r5, #1]
   b9d7a:	2310      	movs	r3, #16
   b9d7c:	3502      	adds	r5, #2
   b9d7e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   b9d82:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   b9d86:	f04f 0c00 	mov.w	ip, #0
   b9d8a:	fbb8 f9f3 	udiv	r9, r8, r3
   b9d8e:	4666      	mov	r6, ip
   b9d90:	fb03 8a19 	mls	sl, r3, r9, r8
   b9d94:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   b9d98:	f1be 0f09 	cmp.w	lr, #9
   b9d9c:	d816      	bhi.n	b9dcc <_strtol_l.constprop.0+0xa4>
   b9d9e:	4674      	mov	r4, lr
   b9da0:	42a3      	cmp	r3, r4
   b9da2:	dd24      	ble.n	b9dee <_strtol_l.constprop.0+0xc6>
   b9da4:	f1bc 0f00 	cmp.w	ip, #0
   b9da8:	db1e      	blt.n	b9de8 <_strtol_l.constprop.0+0xc0>
   b9daa:	45b1      	cmp	r9, r6
   b9dac:	d31c      	bcc.n	b9de8 <_strtol_l.constprop.0+0xc0>
   b9dae:	d101      	bne.n	b9db4 <_strtol_l.constprop.0+0x8c>
   b9db0:	45a2      	cmp	sl, r4
   b9db2:	db19      	blt.n	b9de8 <_strtol_l.constprop.0+0xc0>
   b9db4:	fb06 4603 	mla	r6, r6, r3, r4
   b9db8:	f04f 0c01 	mov.w	ip, #1
   b9dbc:	f815 4b01 	ldrb.w	r4, [r5], #1
   b9dc0:	e7e8      	b.n	b9d94 <_strtol_l.constprop.0+0x6c>
   b9dc2:	2c2b      	cmp	r4, #43	; 0x2b
   b9dc4:	bf04      	itt	eq
   b9dc6:	782c      	ldrbeq	r4, [r5, #0]
   b9dc8:	1cb5      	addeq	r5, r6, #2
   b9dca:	e7ca      	b.n	b9d62 <_strtol_l.constprop.0+0x3a>
   b9dcc:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   b9dd0:	f1be 0f19 	cmp.w	lr, #25
   b9dd4:	d801      	bhi.n	b9dda <_strtol_l.constprop.0+0xb2>
   b9dd6:	3c37      	subs	r4, #55	; 0x37
   b9dd8:	e7e2      	b.n	b9da0 <_strtol_l.constprop.0+0x78>
   b9dda:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   b9dde:	f1be 0f19 	cmp.w	lr, #25
   b9de2:	d804      	bhi.n	b9dee <_strtol_l.constprop.0+0xc6>
   b9de4:	3c57      	subs	r4, #87	; 0x57
   b9de6:	e7db      	b.n	b9da0 <_strtol_l.constprop.0+0x78>
   b9de8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   b9dec:	e7e6      	b.n	b9dbc <_strtol_l.constprop.0+0x94>
   b9dee:	f1bc 0f00 	cmp.w	ip, #0
   b9df2:	da05      	bge.n	b9e00 <_strtol_l.constprop.0+0xd8>
   b9df4:	2322      	movs	r3, #34	; 0x22
   b9df6:	6003      	str	r3, [r0, #0]
   b9df8:	4646      	mov	r6, r8
   b9dfa:	b942      	cbnz	r2, b9e0e <_strtol_l.constprop.0+0xe6>
   b9dfc:	4630      	mov	r0, r6
   b9dfe:	e79e      	b.n	b9d3e <_strtol_l.constprop.0+0x16>
   b9e00:	b107      	cbz	r7, b9e04 <_strtol_l.constprop.0+0xdc>
   b9e02:	4276      	negs	r6, r6
   b9e04:	2a00      	cmp	r2, #0
   b9e06:	d0f9      	beq.n	b9dfc <_strtol_l.constprop.0+0xd4>
   b9e08:	f1bc 0f00 	cmp.w	ip, #0
   b9e0c:	d000      	beq.n	b9e10 <_strtol_l.constprop.0+0xe8>
   b9e0e:	1e69      	subs	r1, r5, #1
   b9e10:	6011      	str	r1, [r2, #0]
   b9e12:	e7f3      	b.n	b9dfc <_strtol_l.constprop.0+0xd4>
   b9e14:	2430      	movs	r4, #48	; 0x30
   b9e16:	2b00      	cmp	r3, #0
   b9e18:	d1b1      	bne.n	b9d7e <_strtol_l.constprop.0+0x56>
   b9e1a:	2308      	movs	r3, #8
   b9e1c:	e7af      	b.n	b9d7e <_strtol_l.constprop.0+0x56>
   b9e1e:	2c30      	cmp	r4, #48	; 0x30
   b9e20:	d0a5      	beq.n	b9d6e <_strtol_l.constprop.0+0x46>
   b9e22:	230a      	movs	r3, #10
   b9e24:	e7ab      	b.n	b9d7e <_strtol_l.constprop.0+0x56>
   b9e26:	bf00      	nop
   b9e28:	000bad7e 	.word	0x000bad7e

000b9e2c <strtol>:
   b9e2c:	4613      	mov	r3, r2
   b9e2e:	460a      	mov	r2, r1
   b9e30:	4601      	mov	r1, r0
   b9e32:	4802      	ldr	r0, [pc, #8]	; (b9e3c <strtol+0x10>)
   b9e34:	6800      	ldr	r0, [r0, #0]
   b9e36:	f7ff bf77 	b.w	b9d28 <_strtol_l.constprop.0>
   b9e3a:	bf00      	nop
   b9e3c:	2003b6d8 	.word	0x2003b6d8

000b9e40 <__register_exitproc>:
   b9e40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b9e44:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b9f00 <__register_exitproc+0xc0>
   b9e48:	4606      	mov	r6, r0
   b9e4a:	f8d8 0000 	ldr.w	r0, [r8]
   b9e4e:	461f      	mov	r7, r3
   b9e50:	460d      	mov	r5, r1
   b9e52:	4691      	mov	r9, r2
   b9e54:	f000 f856 	bl	b9f04 <__retarget_lock_acquire_recursive>
   b9e58:	4b25      	ldr	r3, [pc, #148]	; (b9ef0 <__register_exitproc+0xb0>)
   b9e5a:	681c      	ldr	r4, [r3, #0]
   b9e5c:	b934      	cbnz	r4, b9e6c <__register_exitproc+0x2c>
   b9e5e:	4c25      	ldr	r4, [pc, #148]	; (b9ef4 <__register_exitproc+0xb4>)
   b9e60:	601c      	str	r4, [r3, #0]
   b9e62:	4b25      	ldr	r3, [pc, #148]	; (b9ef8 <__register_exitproc+0xb8>)
   b9e64:	b113      	cbz	r3, b9e6c <__register_exitproc+0x2c>
   b9e66:	681b      	ldr	r3, [r3, #0]
   b9e68:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b9e6c:	6863      	ldr	r3, [r4, #4]
   b9e6e:	2b1f      	cmp	r3, #31
   b9e70:	dd07      	ble.n	b9e82 <__register_exitproc+0x42>
   b9e72:	f8d8 0000 	ldr.w	r0, [r8]
   b9e76:	f000 f847 	bl	b9f08 <__retarget_lock_release_recursive>
   b9e7a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b9e7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b9e82:	b34e      	cbz	r6, b9ed8 <__register_exitproc+0x98>
   b9e84:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b9e88:	b988      	cbnz	r0, b9eae <__register_exitproc+0x6e>
   b9e8a:	4b1c      	ldr	r3, [pc, #112]	; (b9efc <__register_exitproc+0xbc>)
   b9e8c:	b923      	cbnz	r3, b9e98 <__register_exitproc+0x58>
   b9e8e:	f8d8 0000 	ldr.w	r0, [r8]
   b9e92:	f000 f838 	bl	b9f06 <__retarget_lock_release>
   b9e96:	e7f0      	b.n	b9e7a <__register_exitproc+0x3a>
   b9e98:	f44f 7084 	mov.w	r0, #264	; 0x108
   b9e9c:	f7fd f9a4 	bl	b71e8 <malloc>
   b9ea0:	2800      	cmp	r0, #0
   b9ea2:	d0f4      	beq.n	b9e8e <__register_exitproc+0x4e>
   b9ea4:	2300      	movs	r3, #0
   b9ea6:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b9eaa:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b9eae:	6863      	ldr	r3, [r4, #4]
   b9eb0:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b9eb4:	2201      	movs	r2, #1
   b9eb6:	409a      	lsls	r2, r3
   b9eb8:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b9ebc:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b9ec0:	4313      	orrs	r3, r2
   b9ec2:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b9ec6:	2e02      	cmp	r6, #2
   b9ec8:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b9ecc:	bf02      	ittt	eq
   b9ece:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b9ed2:	4313      	orreq	r3, r2
   b9ed4:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b9ed8:	6863      	ldr	r3, [r4, #4]
   b9eda:	f8d8 0000 	ldr.w	r0, [r8]
   b9ede:	1c5a      	adds	r2, r3, #1
   b9ee0:	3302      	adds	r3, #2
   b9ee2:	6062      	str	r2, [r4, #4]
   b9ee4:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b9ee8:	f000 f80e 	bl	b9f08 <__retarget_lock_release_recursive>
   b9eec:	2000      	movs	r0, #0
   b9eee:	e7c6      	b.n	b9e7e <__register_exitproc+0x3e>
   b9ef0:	2003e7e8 	.word	0x2003e7e8
   b9ef4:	2003e75c 	.word	0x2003e75c
   b9ef8:	00000000 	.word	0x00000000
   b9efc:	000b71e9 	.word	0x000b71e9
   b9f00:	2003b73c 	.word	0x2003b73c

000b9f04 <__retarget_lock_acquire_recursive>:
   b9f04:	4770      	bx	lr

000b9f06 <__retarget_lock_release>:
   b9f06:	4770      	bx	lr

000b9f08 <__retarget_lock_release_recursive>:
   b9f08:	4770      	bx	lr

000b9f0a <link_code_end>:
	...

000b9f0c <dynalib_user>:
   b9f0c:	401d 000b 4059 000b 4081 000b 4085 000b     .@..Y@...@...@..
   b9f1c:	0000 0000 6143 6c6c 6f20 206e 7570 6572     ....Call on pure
   b9f2c:	7620 7269 7574 6c61 4f00 4a42 4345 0054      virtual.OBJECT.
   b9f3c:	7974 6570 253d 2073 7473 7261 3d74 6425     type=%s start=%d
   b9f4c:	6520 646e 253d 2064 6f74 656b 736e 253d      end=%d tokens=%
   b9f5c:	2064 202d 7325 6e00 646f 7365 7400 7079     d - %s.nodes.typ
   b9f6c:	0065 7270 6e69 6974 676e 7420 6b6f 6e65     e.printing token
   b9f7c:	0073 754f 6574 2072 626f 656a 7463 7320     s.Outer object s
   b9f8c:	6174 7472 253d 2064 6e65 3d64 6425 7420     tart=%d end=%d t
   b9f9c:	6b6f 6e65 3d73 6425 2d20 2520 0073 6574     okens=%d - %s.te
   b9fac:	7473 7400 7365 2074 7325 5400 7365 0074     st.test %s.Test.
   b9fbc:	6f54 6174 206c 6f74 656b 736e 253d 2064     Total tokens=%d 
   b9fcc:	2528 2e34 6632 2525 6620 6c75 296c 7320     (%4.2f%% full) s
   b9fdc:	6f74 6172 6567 253d 2064 2528 2e34 6632     torage=%d (%4.2f
   b9fec:	2525 6620 6c75 296c 5500 6b6e 6f6e 6e77     %% full).Unknown
   b9ffc:	7320 6e65 6f73 2072 7974 6570 6920 206e      sensor type in 
   ba00c:	6170 7372 4a65 696f 506e 7961 6f6c 6461     parseJoinPayload
   ba01c:	6156 756c 7365 2520 0064 6e55 6e6b 776f     Values %d.Unknow
   ba02c:	206e 6573 736e 726f 7420 7079 2065 6e69     n sensor type in
   ba03c:	7020 7261 6573 6f4a 6e69 6150 6c79 616f      parseJoinPayloa
   ba04c:	5664 6c61 6575 0073 6c41 7265 0074 4975     dValues.Alert.uI
   ba05c:	0044 6f6e 6564 7000 0031 3270 7000 6e65     D.node.p1.p2.pen
   ba06c:	0064 6f63 746e 4e00 646f 2065 6425 202c     d.cont.Node %d, 
   ba07c:	6e75 7169 6575 4449 2520 756c 202c 7974     uniqueID %lu, ty
   ba08c:	6570 2520 2c64 6f20 6363 7075 6e61 7963     pe %d, occupancy
   ba09c:	654e 2074 6425 202c 636f 7563 6170 636e     Net %d, occupanc
   ba0ac:	4779 6f72 7373 2520 2c64 7020 7961 6f6c     yGross %d, paylo
   ba0bc:	6461 2820 6425 252f 2f64 6425 252f 2964     ad (%d/%d/%d/%d)
   ba0cc:	7720 7469 2068 6570 646e 6e69 2067 6c61      with pending al
   ba0dc:	7265 2074 6425 6120 646e 6120 656c 7472     ert %d and alert
   ba0ec:	6320 6e6f 6574 7478 2520 0064 6f4e 6564      context %d.Node
   ba0fc:	2520 2c64 7520 696e 7571 4965 2044 6c25      %d, uniqueID %l
   ba10c:	2c75 7420 7079 2065 6425 202c 6170 6c79     u, type %d, payl
   ba11c:	616f 2064 2528 2f64 6425 252f 2f64 6425     oad (%d/%d/%d/%d
   ba12c:	2029 6977 6874 7020 6e65 6964 676e 6120     ) with pending a
   ba13c:	656c 7472 2520 2064 6e61 2064 6c61 7265     lert %d and aler
   ba14c:	2074 6f63 746e 7865 2074 6425 5500 6b6e     t context %d.Unk
   ba15c:	6f6e 6e77 7320 6e65 6f73 2072 7974 6570     nown sensor type
   ba16c:	6920 206e 7270 6e69 4e74 646f 4465 7461      in printNodeDat
   ba17c:	2061 6425 5500 6b6e 6f6e 6e77 7320 6e65     a %d.Unknown sen
   ba18c:	6f73 2072 7974 6570 6920 206e 7270 6e69     sor type in prin
   ba19c:	4e74 646f 4465 7461 0061 6f6e 6564 6144     tNodeData.nodeDa
   ba1ac:	6174 2500 756c 4600 756f 646e 7420 6568     ta.%lu.Found the
   ba1bc:	7520 696e 7571 4965 2c44 6e20 646f 2065      uniqueID, node 
   ba1cc:	666f 2520 0064 6944 2064 6f6e 2074 6966     of %d.Did not fi
   ba1dc:	646e 7420 6568 7520 696e 7571 4965 2c44     nd the uniqueID,
   ba1ec:	6e20 7765 6e20 646f 2065 666f 2520 0064      new node of %d.
   ba1fc:	6843 6e61 6967 676e 7320 6e65 6f73 2072     Changing sensor 
   ba20c:	7974 6570 6620 6f72 206d 6425 7420 206f     type from %d to 
   ba21c:	6425 5200 6d65 766f 6e69 2067 7261 6172     %d.Removing arra
   ba22c:	2079 6e69 6564 0078 7061 6570 646e 6320     y index.append c
   ba23c:	6d6f 6c70 7465 0065 6e55 6261 656c 7420     omplete.Unable t
   ba24c:	206f 7075 6164 6574 7420 206f 656e 2077     o update to new 
   ba25c:	6573 736e 726f 7954 6570 6920 206e 6573     sensorType in se
   ba26c:	5474 7079 3a65 2520 0064 6e55 6261 656c     tType: %d.Unable
   ba27c:	7420 206f 7075 6164 6574 7420 206f 656e      to update to ne
   ba28c:	2077 6573 736e 726f 7954 6570 6920 206e     w sensorType in 
   ba29c:	6573 5474 7079 0065 7453 7261 6974 676e     setType.Starting
   ba2ac:	7420 7365 7374 4600 7269 7473 5420 7365      tests.First Tes
   ba2bc:	2c74 7720 2065 6977 6c6c 6320 656c 7261     t, we will clear
   ba2cc:	7420 6568 4e20 646f 2065 6144 6174 6162      the Node Databa
   ba2dc:	6573 6120 646e 6c20 616f 2064 6874 2065     se and load the 
   ba2ec:	6173 706d 656c 6420 7461 2061 6573 0074     sample data set.
   ba2fc:	6f4e 2077 6874 7461 7420 6568 6e20 646f     Now that the nod
   ba30c:	4465 7461 6261 7361 2065 7369 6520 706d     eDatabase is emp
   ba31c:	7974 202c 6577 7720 6c69 206c 6f6c 6461     ty, we will load
   ba32c:	7420 6568 7320 6d61 6c70 2065 6164 6174      the sample data
   ba33c:	7320 7465 7b00 6e22 646f 7365 3a22 7b5b      set.{"nodes":[{
   ba34c:	6e22 646f 2265 313a 222c 4975 2244 323a     "node":1,"uID":2
   ba35c:	3136 3433 3037 3535 2c39 7422 7079 2265     613470559,"type"
   ba36c:	313a 222c 2270 303a 222c 3170 3a22 2c30     :1,"p":0,"p1":0,
   ba37c:	7022 2232 303a 222c 6570 646e 3a22 2c30     "p2":0,"pend":0,
   ba38c:	6322 6e6f 2274 313a 2c7d 227b 6f6e 6564     "cont":1},{"node
   ba39c:	3a22 2c32 7522 4449 3a22 3132 3132 3633     ":2,"uID":212136
   ba3ac:	3330 3234 222c 7974 6570 3a22 2c31 7022     0342,"type":1,"p
   ba3bc:	3a22 2c30 7022 2231 303a 222c 3270 3a22     ":0,"p1":0,"p2":
   ba3cc:	2c30 7022 6e65 2264 303a 222c 6f63 746e     0,"pend":0,"cont
   ba3dc:	3a22 7d32 7d5d 5000 7261 6573 2064 7553     ":2}]}.Parsed Su
   ba3ec:	6363 7365 6673 6c75 796c 5000 7261 6973     ccessfully.Parsi
   ba3fc:	676e 6520 7272 726f 4e00 7865 2c74 7720     ng error.Next, w
   ba40c:	2065 6977 6c6c 6c20 616f 2064 6e61 2064     e will load and 
   ba41c:	7473 726f 2065 6874 2065 6f6e 6564 6420     store the node d
   ba42c:	7461 6261 7361 2065 6e69 6f74 6d20 6d65     atabase into mem
   ba43c:	726f 0079 6f4e 6574 7420 6168 2074 756f     ory.Note that ou
   ba44c:	2072 534a 4e4f 6f20 6a62 6365 2074 6c61     r JSON object al
   ba45c:	6f6c 6163 6974 6e6f 6920 2073 3425 322e     location is %4.2
   ba46c:	2566 2025 666f 7420 6568 6d20 6d65 726f     f%% of the memor
   ba47c:	2079 6c61 6f6c 6163 6574 2064 6c28 7365     y allocated (les
   ba48c:	2073 6874 6e61 3120 3030 2525 6920 2073     s than 100%% is 
   ba49c:	4b4f 0029 6854 2065 6f6e 6564 7320 7274     OK).The node str
   ba4ac:	6e69 2067 7369 203a 7325 4600 6e69 6c61     ing is: %s.Final
   ba4bc:	796c 202c 6577 7720 6c69 206c 6461 2064     ly, we will add 
   ba4cc:	2061 656e 2077 6f6e 6564 7420 206f 6874     a new node to th
   ba4dc:	2065 6164 6174 6162 6573 6120 646e 7020     e database and p
   ba4ec:	6972 746e 7420 6568 6420 7461 6261 7361     rint the databas
   ba4fc:	0065 6854 2065 6f6e 6564 6e20 6d75 6562     e.The node numbe
   ba50c:	2072 7369 203a 6425 4e00 776f 7720 2065     r is: %d.Now we 
   ba51c:	6977 6c6c 6320 6168 676e 2065 6874 2065     will change the 
   ba52c:	7974 6570 6f20 2066 6874 2065 6f6e 6564     type of the node
   ba53c:	6120 646e 7020 6972 746e 7420 6568 6420      and print the d
   ba54c:	7461 6261 7361 0065 6854 2065 7563 7272     atabase.The curr
   ba55c:	6e65 2074 7974 6570 6620 726f 6e20 646f     ent type for nod
   ba56c:	2065 756e 626d 7265 2520 2064 7369 203a     e number %d is: 
   ba57c:	6425 5400 6568 6e20 7765 7420 7079 2065     %d.The new type 
   ba58c:	6f66 2072 6f6e 6564 6e20 6d75 6562 2072     for node number 
   ba59c:	6425 6920 3a73 2520 0064 6f4e 2077 6577     %d is: %d.Now we
   ba5ac:	7720 6c69 206c 6863 6e61 6567 7420 6568      will change the
   ba5bc:	7420 7079 2065 6877 6369 2068 6977 6c6c      type which will
   ba5cc:	6120 746c 7265 6920 7374 7320 7274 6375      alter its struc
   ba5dc:	7574 6572 6120 646e 7020 6972 746e 7420     ture and print t
   ba5ec:	6568 6420 7461 6261 7361 0065 6f4e 2077     he database.Now 
   ba5fc:	6577 7720 6c69 206c 6863 6e61 6567 7420     we will change t
   ba60c:	6568 7420 7079 2065 6e6f 6120 6e20 746f     he type on a not
   ba61c:	2065 6874 7461 6920 2073 6e69 7420 6568     e that is in the
   ba62c:	6d20 6469 6c64 2065 666f 7420 6568 7020      middle of the p
   ba63c:	6361 206b 6e61 2064 6874 6e65 6320 6168     ack and then cha
   ba64c:	676e 2065 7469 6220 6361 2e6b 0020 6f4e     nge it back. .No
   ba65c:	6974 6563 6820 776f 7420 6568 6e20 7765     tice how the new
   ba66c:	6e20 646f 2065 7369 6e20 776f 6120 2074      node is now at 
   ba67c:	6874 2065 6e65 2064 666f 7420 6568 6f20     the end of the o
   ba68c:	7475 7265 6f20 626a 6365 2074 202d 6874     uter ojbect - th
   ba69c:	7369 7720 6c69 206c 7262 6165 206b 756f     is will break ou
   ba6ac:	2072 6f63 6564 4600 6e69 7369 6568 2064     r code.Finished 
   ba6bc:	6150 7372 6e69 2067 6554 7473 202e 7552     Parsing Test. Ru
   ba6cc:	6e6e 6e69 2067 6164 6174 7220 7065 726f     nning data repor
   ba6dc:	2074 6574 7473 2073 6e69 6120 6c20 6f6f     t tests in a loo
   ba6ec:	2e70 5500 6470 7461 6e69 2067 736a 6e6f     p..Updating json
   ba6fc:	6144 6174 2031 6176 756c 2065 7266 6d6f     Data1 value from
   ba70c:	2520 2064 6f74 2520 0064 7055 6164 6974      %d to %d.Updati
   ba71c:	676e 6a20 6f73 446e 7461 3261 7620 6c61     ng jsonData2 val
   ba72c:	6575 6620 6f72 206d 6425 7420 206f 6425     ue from %d to %d
   ba73c:	4600 6961 656c 2064 6f74 7320 7465 4a20     .Failed to set J
   ba74c:	6f73 206e 6144 6174 2121 5420 6b6f 6e65     son Data!! Token
   ba75c:	3a73 0000                                   s:..

000ba760 <_ZTVN5spark10LogHandlerE>:
	...
   ba770:	40a1 000b 40c9 000b                         .@...@..

000ba778 <_ZTVN5spark16SerialLogHandlerE>:
	...
   ba780:	4125 000b 4159 000b 8b49 000b 40cb 000b     %A..YA..I....@..

000ba790 <_ZTV16JsonParserStaticILj3072ELj550EE>:
	...
   ba798:	40d5 000b 40e9 000b                         .@...@..

000ba7a0 <_ZL9uniqueIDs>:
   ba7a0:	655f 9bc6 63d6 7e71 a603 7df7 678c 8472     _e...cq~...}.gr.
   ba7b0:	763a a941 66da 05b6 6845 e39c 6b83 a853     :vA..f..Eh...kS.
   ba7c0:	68f4 98ac 6cc3 d899 5f9e 9dd1 5e82 da4d     .h...l..._...^M.
   ba7d0:	5c5d 9a1f 2102 275a 755c 3025 5834 0000     ]\...!Z'\u%04X..

000ba7e0 <_ZTV10JsonBuffer>:
	...
   ba7e8:	5191 000b 51ad 000b                         .Q...Q..

000ba7f0 <_ZTV10JsonParser>:
	...
   ba7f8:	5211 000b 5235 000b                         .R..5R..

000ba800 <_ZTV10JsonWriter>:
	...
   ba808:	51c1 000b 51d5 000b                         .Q...Q..

000ba810 <_ZTV12JsonModifier>:
	...
   ba818:	51e9 000b 51fd 000b 6f6e 2074 6176 696c     .Q...Q..not vali
   ba828:	0064 7563 7272 6e65 2074 6164 6174 6920     d.current data i
   ba838:	2073 7325 4300 7275 6572 746e 4420 7461     s %s.Current Dat
   ba848:	2061 6e49 7469 6169 696c 657a 0064 6f6e     a Initialized.no
   ba858:	6564 4449 6420 7461 2061 7369 2520 0073     deID data is %s.
   ba868:	2e25 732a 4e00 646f 2065 6144 6174 6162     %.*s.Node Databa
   ba878:	6573 6220 6665 726f 2065 6573 3a74 4e00     se before set:.N
   ba888:	646f 2065 6144 6174 6162 6573 6120 7466     ode Database aft
   ba898:	7265 7320 7465 003a 227b 6f6e 6564 2273     er set:.{"nodes"
   ba8a8:	5b3a 7d5d 5200 7365 7465 6974 2067 6f4e     :[]}.Resettig No
   ba8b8:	6564 4449 6320 6e6f 6966 2067 6f74 203a     deID config to: 
   ba8c8:	7325 4e00 646f 4965 2044 6164 6174 6920     %s.NodeID data i
   ba8d8:	2073 6f6e 2077 7325 4500 6172 6973 676e     s now %s.Erasing
   ba8e8:	4620 4152 204d 6572 6967 6e6f 4900 696e      FRAM region.Ini
   ba8f8:	6974 6c61 7a69 6e69 2067 6164 6174 0000     tializing data..

000ba908 <_ZTV8MB85RC64>:
	...
   ba910:	5ee1 000b 5ef5 000b 65ed 000b 6683 000b     .^...^...e...f..
   ba920:	6705 000b                                   .g..

000ba924 <_ZTV10nodeIDData>:
	...
   ba92c:	61bd 000b 5fb3 000b 5f8b 000b 67bb 000b     .a..._..._...g..
   ba93c:	67e3 000b 5f51 000b 6365 000b 602d 000b     .g..Q_..ec..-`..
   ba94c:	6041 000b                                   A`..

000ba950 <_ZTV17currentStatusData>:
	...
   ba958:	60b9 000b 5fb3 000b 5f8b 000b 67bb 000b     .`..._..._...g..
   ba968:	67e3 000b 5f09 000b 5f2d 000b 6005 000b     .g..._..-_...`..
   ba978:	6019 000b                                   .`..

000ba97c <_ZTV6MB85RC>:
	...
   ba984:	65ad 000b 65af 000b 65ed 000b 6683 000b     .e...e...e...f..
   ba994:	6705 000b 6176 696c 6164 6974 676e 6420     .g..validating d
   ba9a4:	7461 2061 6973 657a 253d 0064 6f67 3a74     ata size=%d.got:
   ba9b4:	6d20 6761 6369 253d 3830 2078 6576 7372      magic=%08x vers
   ba9c4:	6f69 3d6e 3025 7834 7320 7a69 3d65 3025     ion=%04x size=%0
   ba9d4:	7834 6820 7361 3d68 3025 7838 6500 7078     4x hash=%08x.exp
   ba9e4:	203a 616d 6967 3d63 3025 7838 7620 7265     : magic=%08x ver
   ba9f4:	6973 6e6f 253d 3430 2078 6973 657a 253d     sion=%04x size=%
   baa04:	3430 2078 6168 6873 253d 3830 0078 6173     04x hash=%08x.sa
   baa14:	6976 676e 6420 7461 2061 6973 657a 253d     ving data size=%
   baa24:	0064 0000                                   d...

000baa28 <_ZTVN15StorageHelperRK18PersistentDataBaseE>:
	...
   baa30:	67b5 000b 684d 000b 6ad5 000b 67bb 000b     .g..Mh...j...g..
   baa40:	67e3 000b 69d1 000b 6aa9 000b 6f4e 6564     .g...i...j..Node
   baa50:	2520 2064 6977 6874 7520 696e 7571 4965      %d with uniqueI
   baa60:	2044 6c25 2075 6573 746e 6120 6420 7461     D %lu sent a dat
   baa70:	2061 6572 6f70 7472 6d20 7365 6173 6567     a report message
   baa80:	0000 0000                                   ....

000baa84 <_ZTV7Gateway>:
	...
   baa8c:	6bf5 000b 6bf7 000b                         .k...k..

000baa94 <_ZTVN5spark13CellularClassE>:
	...
   baa9c:	73c7 000b 73bd 000b 73b3 000b 7369 000b     .s...s...s..is..
   baaac:	73a7 000b 739b 000b 8ea1 000b 8ea9 000b     .s...s..........
   baabc:	738f 000b 7387 000b 737d 000b 7373 000b     .s...s..}s..ss..
   baacc:	8ed9 000b                                   ....

000baad0 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   baad8:	7401 000b 7407 000b 7445 000b 7415 000b     .t...t..Et...t..
   baae8:	7403 000b                                   .t..

000baaec <_ZTVN5spark13EthernetClassE>:
	...
   baaf4:	798f 000b 7985 000b 797b 000b 7971 000b     .y...y..{y..qy..
   bab04:	7965 000b 7959 000b 8ea1 000b 8ea9 000b     ey..Yy..........
   bab14:	794d 000b 7945 000b 793b 000b 7931 000b     My..Ey..;y..1y..
   bab24:	8ed9 000b                                   ....

000bab28 <_ZTV7TwoWire>:
	...
   bab30:	79ad 000b 79f7 000b 79cf 000b 79af 000b     .y...y...y...y..
   bab40:	79d7 000b 79df 000b 79e7 000b 79ef 000b     .y...y...y...y..

000bab50 <_ZTV9IPAddress>:
	...
   bab58:	7ae9 000b 7ad9 000b 7adb 000b 7525 7500     .z...z...z..%u.u
   bab68:	3025 7834 6200 7561 0064 6553 6972 6c61     %04x.baud.Serial
   bab78:	5300 7265 6169 316c 4a00 4f53 534e 7274     .Serial1.JSONStr
   bab88:	6165 4c6d 676f 6148 646e 656c 0072 7061     eamLogHandler.ap
   bab98:	0070 3025 3031 2075 5d00 0020 202c 2800     p.%010u .] ., .(
   baba8:	3a29 0020 5b20 6300 646f 2065 203d 2500     ): . [.code = .%
   babb8:	0069 6564 6174 6c69 2073 203d 0d00 000a     i.details = ....
   babc8:	006d 0066 6e6c 6600 006e 6564 6174 6c69     m.f.ln.fn.detail
   babd8:	0000 0000                                   ....

000babdc <_ZTVN5spark16JSONStreamWriterE>:
	...
   babe4:	7f95 000b 7fbb 000b 7f79 000b 7bf7 000b     ........y....{..

000babf4 <_ZTVN5spark16StreamLogHandlerE>:
	...
   babfc:	83f1 000b 8409 000b 8b49 000b 40cb 000b     ........I....@..

000bac0c <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
   bac14:	841d 000b 8431 000b 8ced 000b 7f81 000b     ....1...........

000bac24 <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
   bac2c:	7f93 000b 7fc9 000b 8aad 000b 7f83 000b     ................

000bac3c <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
   bac44:	7f91 000b 7fd7 000b 8359 000b 7ff9 000b     ........Y.......

000bac54 <_ZTVN5spark12NetworkClassE>:
	...
   bac5c:	8e61 000b 8e6b 000b 8e75 000b 8e7f 000b     a...k...u.......
   bac6c:	8e89 000b 8e95 000b 8ea1 000b 8ea9 000b     ................
   bac7c:	8eb1 000b 8ebd 000b 8ec5 000b 8ecf 000b     ................
   bac8c:	8ed9 000b 5925 252d 2d6d 6425 2554 3a48     ....%Y-%m-%dT%H:
   bac9c:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

000bacac <_ZTV11USARTSerial>:
	...
   bacb4:	935d 000b 93c9 000b 93a1 000b 8fc5 000b     ]...............
   bacc4:	9371 000b 938d 000b 937f 000b 939b 000b     q...............
   bacd4:	935f 000b 9363 000b                         _...c...

000bacdc <_ZTV9USBSerial>:
	...
   bace4:	941b 000b 9483 000b 9459 000b 8fc5 000b     ........Y.......
   bacf4:	944b 000b 941d 000b 942d 000b 947d 000b     K.......-...}...
   bad04:	943d 000b 9415 000b                         =.......

000bad0c <_ZSt7nothrow>:
   bad0c:	5200 4545 544e 6d20 6c61 6f6c 2063 7573     .REENT malloc su
   bad1c:	6363 6565 6564 0064 742f 706d 6a2f 6e65     cceeded./tmp/jen
   bad2c:	696b 736e 472d 4343 312d 2d30 6970 6570     kins-GCC-10-pipe
   bad3c:	696c 656e 342d 5f38 3032 3032 3131 3432     line-48_20201124
   bad4c:	315f 3036 3136 3038 3336 2f39 7273 2f63     _1606180639/src/
   bad5c:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
   bad6c:	6362 732f 6474 696c 2f62 6172 646e 632e     bc/stdlib/rand.c
	...

000bad7d <_ctype_>:
   bad7d:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   bad8d:	2020 2020 2020 2020 2020 2020 2020 2020                     
   bad9d:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   badad:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   badbd:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   badcd:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   baddd:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   baded:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   badfd:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000bae7e <link_const_variable_data_end>:
	...

000bae80 <link_constructors_location>:
   bae80:	000b4809 	.word	0x000b4809
   bae84:	000b657d 	.word	0x000b657d
   bae88:	000b7359 	.word	0x000b7359
   bae8c:	000b73d1 	.word	0x000b73d1
   bae90:	000b7999 	.word	0x000b7999
   bae94:	000b8b39 	.word	0x000b8b39
   bae98:	000b8fb1 	.word	0x000b8fb1
   bae9c:	000b90d1 	.word	0x000b90d1
   baea0:	000b92b1 	.word	0x000b92b1
   baea4:	000b9349 	.word	0x000b9349

000baea8 <link_constructors_end>:
	...
