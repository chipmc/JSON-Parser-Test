
/Users/chipmc/Documents/Maker/Particle/Utilities/JSON-Parser-Test/target/4.2.0/boron/JSON-Parser-Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000065d4  000b401c  000b401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000ba5f0  000ba5f0  0000a5f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000ba614  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000088  2003b6f8  000ba618  0001b6f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00003070  2003b780  2003b780  0002b780  2**2
                  ALLOC
  7 .module_info_suffix 00000028  000ba6a0  000ba6a0  0002a6a0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000ba6c8  000ba6c8  0002a6c8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   0014be1c  00000000  00000000  0002a6cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00015925  00000000  00000000  001764e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    00047994  00000000  00000000  0018be0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00003350  00000000  00000000  001d37a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 0000c6d8  00000000  00000000  001d6af1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003a6b7  00000000  00000000  001e31c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00049018  00000000  00000000  0021d880  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0013ef7f  00000000  00000000  00266898  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  00009828  00000000  00000000  003a5818  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b401c:	4809      	ldr	r0, [pc, #36]	; (b4044 <module_user_pre_init+0x28>)
   b401e:	490a      	ldr	r1, [pc, #40]	; (b4048 <module_user_pre_init+0x2c>)
   b4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4024:	d005      	beq.n	b4032 <module_user_pre_init+0x16>
   b4026:	4a09      	ldr	r2, [pc, #36]	; (b404c <module_user_pre_init+0x30>)
   b4028:	4282      	cmp	r2, r0
   b402a:	d002      	beq.n	b4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b402c:	1a12      	subs	r2, r2, r0
   b402e:	f005 f89f 	bl	b9170 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4032:	4807      	ldr	r0, [pc, #28]	; (b4050 <module_user_pre_init+0x34>)
   b4034:	4a07      	ldr	r2, [pc, #28]	; (b4054 <module_user_pre_init+0x38>)
   b4036:	2100      	movs	r1, #0
   b4038:	1a12      	subs	r2, r2, r0
   b403a:	f005 f8c1 	bl	b91c0 <memset>
    return &link_global_data_start;
}
   b403e:	4801      	ldr	r0, [pc, #4]	; (b4044 <module_user_pre_init+0x28>)
   b4040:	bd08      	pop	{r3, pc}
   b4042:	bf00      	nop
   b4044:	2003b6f8 	.word	0x2003b6f8
   b4048:	000ba618 	.word	0x000ba618
   b404c:	2003b780 	.word	0x2003b780
   b4050:	2003b780 	.word	0x2003b780
   b4054:	2003e7ed 	.word	0x2003e7ed

000b4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405a:	4e07      	ldr	r6, [pc, #28]	; (b4078 <module_user_init+0x20>)
   b405c:	4c07      	ldr	r4, [pc, #28]	; (b407c <module_user_init+0x24>)
    module_user_init_hook();
   b405e:	f004 fe03 	bl	b8c68 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4062:	1ba4      	subs	r4, r4, r6
   b4064:	08a4      	lsrs	r4, r4, #2
   b4066:	2500      	movs	r5, #0
   b4068:	42ac      	cmp	r4, r5
   b406a:	d100      	bne.n	b406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b406e:	f856 3b04 	ldr.w	r3, [r6], #4
   b4072:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4074:	3501      	adds	r5, #1
   b4076:	e7f7      	b.n	b4068 <module_user_init+0x10>
   b4078:	000ba5bc 	.word	0x000ba5bc
   b407c:	000ba5e4 	.word	0x000ba5e4

000b4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4080:	f000 bdd0 	b.w	b4c24 <setup>

000b4084 <module_user_loop>:
}

void module_user_loop() {
   b4084:	b508      	push	{r3, lr}
    loop();
   b4086:	f000 f8ad 	bl	b41e4 <loop>
    _post_loop();
}
   b408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b408e:	f004 bda3 	b.w	b8bd8 <_post_loop>

000b4092 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4092:	f002 bc1b 	b.w	b68cc <malloc>

000b4096 <_Znaj>:
   b4096:	f002 bc19 	b.w	b68cc <malloc>

000b409a <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b409a:	f002 bc1f 	b.w	b68dc <free>
	...

000b40a0 <__cxa_pure_virtual>:
int __wrap_printf(const char* fmt, ...) {
    return -1;
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   b40a0:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   b40a2:	4a03      	ldr	r2, [pc, #12]	; (b40b0 <__cxa_pure_virtual+0x10>)
   b40a4:	4903      	ldr	r1, [pc, #12]	; (b40b4 <__cxa_pure_virtual+0x14>)
   b40a6:	200c      	movs	r0, #12
   b40a8:	f002 fb34 	bl	b6714 <panic_>
  while (1);
   b40ac:	e7fe      	b.n	b40ac <__cxa_pure_virtual+0xc>
   b40ae:	bf00      	nop
   b40b0:	000b64f5 	.word	0x000b64f5
   b40b4:	000b9514 	.word	0x000b9514

000b40b8 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40b8:	7800      	ldrb	r0, [r0, #0]
   b40ba:	fab0 f080 	clz	r0, r0
   b40be:	0940      	lsrs	r0, r0, #5
   b40c0:	4770      	bx	lr

000b40c2 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40c2:	2301      	movs	r3, #1
   b40c4:	7003      	strb	r3, [r0, #0]
   b40c6:	4770      	bx	lr

000b40c8 <_ZN5spark10LogHandler5writeEPKcj>:
    }
}

inline void spark::LogHandler::write(const char *data, size_t size) {
    // Default implementation does nothing
}
   b40c8:	4770      	bx	lr

000b40ca <_ZN5spark16StreamLogHandler5writeEPKcj>:
inline Print* spark::StreamLogHandler::stream() const {
    return stream_;
}

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
   b40ca:	6a00      	ldr	r0, [r0, #32]
   b40cc:	6803      	ldr	r3, [r0, #0]
   b40ce:	68db      	ldr	r3, [r3, #12]
   b40d0:	4718      	bx	r3
	...

000b40d4 <_ZN16JsonParserStaticILj3072ELj550EED1Ev>:
 *
 * @param MAX_TOKENS The maximum number of tokens you expect. Each object has a token and two for each key/value pair.
 * Each array is a token and one for each element in the array.
 */
template <size_t BUFFER_SIZE, size_t MAX_TOKENS>
class JsonParserStatic : public JsonParser {
   b40d4:	b510      	push	{r4, lr}
   b40d6:	4b03      	ldr	r3, [pc, #12]	; (b40e4 <_ZN16JsonParserStaticILj3072ELj550EED1Ev+0x10>)
   b40d8:	6003      	str	r3, [r0, #0]
   b40da:	4604      	mov	r4, r0
   b40dc:	f000 ff20 	bl	b4f20 <_ZN10JsonParserD1Ev>
   b40e0:	4620      	mov	r0, r4
   b40e2:	bd10      	pop	{r4, pc}
   b40e4:	000b9f94 	.word	0x000b9f94

000b40e8 <_ZN16JsonParserStaticILj3072ELj550EED0Ev>:
   b40e8:	b510      	push	{r4, lr}
   b40ea:	4604      	mov	r4, r0
   b40ec:	f7ff fff2 	bl	b40d4 <_ZN16JsonParserStaticILj3072ELj550EED1Ev>
   b40f0:	4620      	mov	r0, r4
   b40f2:	f642 618c 	movw	r1, #11916	; 0x2e8c
   b40f6:	f7ff ffd0 	bl	b409a <_ZdlPvj>
   b40fa:	4620      	mov	r0, r4
   b40fc:	bd10      	pop	{r4, pc}

000b40fe <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>:
	bool getValueByKey(const JsonParserGeneratorRK::jsmntok_t *container, const char *name, T &result) const {
   b40fe:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b4100:	461d      	mov	r5, r3
		if (getValueTokenByKey(container, name, value)) {
   b4102:	ab01      	add	r3, sp, #4
	bool getValueByKey(const JsonParserGeneratorRK::jsmntok_t *container, const char *name, T &result) const {
   b4104:	4604      	mov	r4, r0
		if (getValueTokenByKey(container, name, value)) {
   b4106:	f001 f8f1 	bl	b52ec <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
   b410a:	b120      	cbz	r0, b4116 <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0+0x18>
			return getTokenValue(value, result);
   b410c:	9901      	ldr	r1, [sp, #4]
   b410e:	462a      	mov	r2, r5
   b4110:	4620      	mov	r0, r4
   b4112:	f000 fffd 	bl	b5110 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tERi>
	}
   b4116:	b003      	add	sp, #12
   b4118:	bd30      	pop	{r4, r5, pc}

000b411a <_ZN10JsonWriter11startObjectEv.isra.0>:
	void init();

	/**
	 * @brief Start a new JSON object. Make sure you finish it with finishObjectOrArray()
	 */
	bool startObject() { return startObjectOrArray('{', '}'); };
   b411a:	227d      	movs	r2, #125	; 0x7d
   b411c:	217b      	movs	r1, #123	; 0x7b
   b411e:	f001 ba14 	b.w	b554a <_ZN10JsonWriter18startObjectOrArrayEcc>
	...

000b4124 <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
   b4124:	4b0a      	ldr	r3, [pc, #40]	; (b4150 <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
   b4126:	b510      	push	{r4, lr}
   b4128:	4604      	mov	r4, r0
   b412a:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
   b412c:	f003 fbf2 	bl	b7914 <_ZN5spark10LogManager8instanceEv>
   b4130:	4621      	mov	r1, r4
   b4132:	f003 fe2a 	bl	b7d8a <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
   b4136:	f004 fd07 	bl	b8b48 <_Z16_fetch_usbserialv>
   b413a:	f004 fcf9 	bl	b8b30 <_ZN9USBSerial3endEv>
    virtual ~LogHandler() = default;
   b413e:	4620      	mov	r0, r4
   b4140:	4b04      	ldr	r3, [pc, #16]	; (b4154 <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
   b4142:	f840 3b04 	str.w	r3, [r0], #4
   b4146:	f003 fcbb 	bl	b7ac0 <_ZN5spark6detail9LogFilterD1Ev>
    }
   b414a:	4620      	mov	r0, r4
   b414c:	bd10      	pop	{r4, pc}
   b414e:	bf00      	nop
   b4150:	000b9f7c 	.word	0x000b9f7c
   b4154:	000b9f64 	.word	0x000b9f64

000b4158 <_ZN5spark16SerialLogHandlerD0Ev>:
    virtual ~SerialLogHandler() {
   b4158:	b510      	push	{r4, lr}
   b415a:	4604      	mov	r4, r0
    }
   b415c:	f7ff ffe2 	bl	b4124 <_ZN5spark16SerialLogHandlerD1Ev>
   b4160:	4620      	mov	r0, r4
   b4162:	2124      	movs	r1, #36	; 0x24
   b4164:	f7ff ff99 	bl	b409a <_ZdlPvj>
   b4168:	4620      	mov	r0, r4
   b416a:	bd10      	pop	{r4, pc}

000b416c <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   b416c:	b40e      	push	{r1, r2, r3}
   b416e:	b500      	push	{lr}
   b4170:	b08c      	sub	sp, #48	; 0x30
   b4172:	aa0d      	add	r2, sp, #52	; 0x34
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   b4174:	f04f 0c20 	mov.w	ip, #32
inline void spark::Logger::info(const char *fmt, ...) const {
   b4178:	f852 1b04 	ldr.w	r1, [r2], #4
    va_start(args, fmt);
   b417c:	9203      	str	r2, [sp, #12]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b417e:	e9cd 1200 	strd	r1, r2, [sp]
    attr.flags = 0;
   b4182:	2300      	movs	r3, #0
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b4184:	6801      	ldr	r1, [r0, #0]
   b4186:	aa04      	add	r2, sp, #16
   b4188:	201e      	movs	r0, #30
    attr.flags = 0;
   b418a:	e9cd c304 	strd	ip, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b418e:	f002 fac9 	bl	b6724 <log_message_v>
}
   b4192:	b00c      	add	sp, #48	; 0x30
   b4194:	f85d eb04 	ldr.w	lr, [sp], #4
   b4198:	b003      	add	sp, #12
   b419a:	4770      	bx	lr

000b419c <_Z10printTokenR10JsonParserPKN21JsonParserGeneratorRK9jsmntok_tE.part.0>:
	}

	Log.info("Total tokens=%d (%4.2f%% full) storage=%d (%4.2f%% full)", tokenCount, (100*((float)tokenCount/(float)jp.getMaxTokens())), storageSize, (100*((float)storageSize/(float)jp.getBufferLen())));
}

void printToken(JsonParser &jp, const JsonParserGeneratorRK::jsmntok_t *tok) {
   b419c:	b5f0      	push	{r4, r5, r6, r7, lr}
		typeName = "UNDEFINED";
		break;

	case JsonParserGeneratorRK::JSMN_OBJECT:
		typeName = "OBJECT";
		memcpy(tempBuf, jp.getBuffer() + tok->start, tok->end - tok->start);
   b419e:	e9d1 5601 	ldrd	r5, r6, [r1, #4]
void printToken(JsonParser &jp, const JsonParserGeneratorRK::jsmntok_t *tok) {
   b41a2:	f2ad 4d14 	subw	sp, sp, #1044	; 0x414
   b41a6:	460c      	mov	r4, r1
		memcpy(tempBuf, jp.getBuffer() + tok->start, tok->end - tok->start);
   b41a8:	6841      	ldr	r1, [r0, #4]
   b41aa:	ab04      	add	r3, sp, #16
   b41ac:	1b77      	subs	r7, r6, r5
   b41ae:	463a      	mov	r2, r7
   b41b0:	4429      	add	r1, r5
   b41b2:	4618      	mov	r0, r3
   b41b4:	f004 ffdc 	bl	b9170 <memcpy>
		tempBuf[tok->end - tok->start] = 0;
		Log.info("type=%s start=%d end=%d tokens=%d - %s", typeName, tok->start, tok->end, tok->size, tempBuf);
   b41b8:	68e3      	ldr	r3, [r4, #12]
   b41ba:	4907      	ldr	r1, [pc, #28]	; (b41d8 <_Z10printTokenR10JsonParserPKN21JsonParserGeneratorRK9jsmntok_tE.part.0+0x3c>)
		tempBuf[tok->end - tok->start] = 0;
   b41bc:	2200      	movs	r2, #0
   b41be:	55c2      	strb	r2, [r0, r7]
		Log.info("type=%s start=%d end=%d tokens=%d - %s", typeName, tok->start, tok->end, tok->size, tempBuf);
   b41c0:	e9cd 6300 	strd	r6, r3, [sp]
   b41c4:	9002      	str	r0, [sp, #8]
   b41c6:	4a05      	ldr	r2, [pc, #20]	; (b41dc <_Z10printTokenR10JsonParserPKN21JsonParserGeneratorRK9jsmntok_tE.part.0+0x40>)
   b41c8:	4805      	ldr	r0, [pc, #20]	; (b41e0 <_Z10printTokenR10JsonParserPKN21JsonParserGeneratorRK9jsmntok_tE.part.0+0x44>)
   b41ca:	462b      	mov	r3, r5
   b41cc:	f7ff ffce 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
	case JsonParserGeneratorRK::JSMN_PRIMITIVE:
		typeName = "PRIMITIVE";
		break;
	}

}
   b41d0:	f20d 4d14 	addw	sp, sp, #1044	; 0x414
   b41d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b41d6:	bf00      	nop
   b41d8:	000b9530 	.word	0x000b9530
   b41dc:	000b9529 	.word	0x000b9529
   b41e0:	2003e6b0 	.word	0x2003e6b0

000b41e4 <loop>:
void loop() {}
   b41e4:	4770      	bx	lr
	...

000b41e8 <_Z7getTypei>:
byte getType(int nodeNumber) {
   b41e8:	b513      	push	{r0, r1, r4, lr}
   b41ea:	4604      	mov	r4, r0
	jp.getValueTokenByKey(jp.getOuterObject(), "nodes", nodesArrayContainer);
   b41ec:	480c      	ldr	r0, [pc, #48]	; (b4220 <_Z7getTypei+0x38>)
   b41ee:	f000 ff14 	bl	b501a <_ZNK10JsonParser14getOuterObjectEv>
   b41f2:	4a0c      	ldr	r2, [pc, #48]	; (b4224 <_Z7getTypei+0x3c>)
   b41f4:	4601      	mov	r1, r0
   b41f6:	ab01      	add	r3, sp, #4
   b41f8:	4809      	ldr	r0, [pc, #36]	; (b4220 <_Z7getTypei+0x38>)
   b41fa:	f001 f877 	bl	b52ec <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
	nodeObjectContainer = jp.getTokenByIndex(nodesArrayContainer, nodeNumber-1);
   b41fe:	9901      	ldr	r1, [sp, #4]
   b4200:	4807      	ldr	r0, [pc, #28]	; (b4220 <_Z7getTypei+0x38>)
   b4202:	1e62      	subs	r2, r4, #1
   b4204:	f000 ff2b 	bl	b505e <_ZNK10JsonParser15getTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj>
	if(nodeObjectContainer == NULL) return false;								// Ran out of entries
   b4208:	b138      	cbz	r0, b421a <_Z7getTypei+0x32>
	jp.getValueByKey(nodeObjectContainer, "type", type);
   b420a:	4601      	mov	r1, r0
   b420c:	4a06      	ldr	r2, [pc, #24]	; (b4228 <_Z7getTypei+0x40>)
   b420e:	4804      	ldr	r0, [pc, #16]	; (b4220 <_Z7getTypei+0x38>)
   b4210:	466b      	mov	r3, sp
   b4212:	f7ff ff74 	bl	b40fe <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
	return type;
   b4216:	f89d 0000 	ldrb.w	r0, [sp]
}
   b421a:	b002      	add	sp, #8
   b421c:	bd10      	pop	{r4, pc}
   b421e:	bf00      	nop
   b4220:	2003b7b4 	.word	0x2003b7b4
   b4224:	000b9557 	.word	0x000b9557
   b4228:	000b955d 	.word	0x000b955d

000b422c <_Z10printTokenR10JsonParserPKN21JsonParserGeneratorRK9jsmntok_tE>:
	switch(tok->type) {
   b422c:	780b      	ldrb	r3, [r1, #0]
   b422e:	2b01      	cmp	r3, #1
   b4230:	d101      	bne.n	b4236 <_Z10printTokenR10JsonParserPKN21JsonParserGeneratorRK9jsmntok_tE+0xa>
   b4232:	f7ff bfb3 	b.w	b419c <_Z10printTokenR10JsonParserPKN21JsonParserGeneratorRK9jsmntok_tE.part.0>
}
   b4236:	4770      	bx	lr

000b4238 <_Z14decompressDatahPhS_>:
        bitOffset += bitSizes[i];
    }
    return compressedData;
}

void decompressData(uint8_t compressedData, uint8_t data[], uint8_t bitSizes[]) {
   b4238:	b5f0      	push	{r4, r5, r6, r7, lr}
   b423a:	3901      	subs	r1, #1
   b423c:	1e55      	subs	r5, r2, #1
    uint8_t bitOffset = 0;
   b423e:	2400      	movs	r4, #0
   b4240:	3203      	adds	r2, #3
    for (uint8_t i = 0; i < 4; ++i) {
        data[i] = (compressedData >> bitOffset) & ((1 << bitSizes[i]) - 1);
   b4242:	2701      	movs	r7, #1
   b4244:	f815 3f01 	ldrb.w	r3, [r5, #1]!
   b4248:	fa07 f303 	lsl.w	r3, r7, r3
   b424c:	fa40 f604 	asr.w	r6, r0, r4
   b4250:	3b01      	subs	r3, #1
   b4252:	4033      	ands	r3, r6
   b4254:	f801 3f01 	strb.w	r3, [r1, #1]!
        bitOffset += bitSizes[i];
   b4258:	782b      	ldrb	r3, [r5, #0]
    for (uint8_t i = 0; i < 4; ++i) {
   b425a:	42aa      	cmp	r2, r5
        bitOffset += bitSizes[i];
   b425c:	441c      	add	r4, r3
   b425e:	b2e4      	uxtb	r4, r4
    for (uint8_t i = 0; i < 4; ++i) {
   b4260:	d1f0      	bne.n	b4244 <_Z14decompressDatahPhS_+0xc>
    }
}
   b4262:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b4264 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   b4264:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   b4266:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   b4268:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   b426a:	b17c      	cbz	r4, b428c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   b426c:	6863      	ldr	r3, [r4, #4]
   b426e:	3b01      	subs	r3, #1
   b4270:	6063      	str	r3, [r4, #4]
   b4272:	b95b      	cbnz	r3, b428c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   b4274:	6823      	ldr	r3, [r4, #0]
   b4276:	4620      	mov	r0, r4
   b4278:	689b      	ldr	r3, [r3, #8]
   b427a:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b427c:	68a3      	ldr	r3, [r4, #8]
   b427e:	3b01      	subs	r3, #1
   b4280:	60a3      	str	r3, [r4, #8]
   b4282:	b91b      	cbnz	r3, b428c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   b4284:	6823      	ldr	r3, [r4, #0]
   b4286:	4620      	mov	r0, r4
   b4288:	68db      	ldr	r3, [r3, #12]
   b428a:	4798      	blx	r3
	  _M_pi->_M_release();
      }
   b428c:	4628      	mov	r0, r5
   b428e:	bd38      	pop	{r3, r4, r5, pc}

000b4290 <_Z11printTokensR10JsonParserb>:
void printTokens(JsonParser &jp, bool verbose) {
   b4290:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b4294:	ed2d 8b02 	vpush	{d8}
   b4298:	4604      	mov	r4, r0
   b429a:	f2ad 4d24 	subw	sp, sp, #1060	; 0x424
	if (verbose) Log.info("printing tokens");
   b429e:	460e      	mov	r6, r1
   b42a0:	b119      	cbz	r1, b42aa <_Z11printTokensR10JsonParserb+0x1a>
   b42a2:	493b      	ldr	r1, [pc, #236]	; (b4390 <_Z11printTokensR10JsonParserb+0x100>)
   b42a4:	483b      	ldr	r0, [pc, #236]	; (b4394 <_Z11printTokensR10JsonParserb+0x104>)
   b42a6:	f7ff ff61 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
	JsonParserGeneratorRK::jsmntok_t *getTokens() { return tokens; };
   b42aa:	e9d4 5905 	ldrd	r5, r9, [r4, #20]
	memcpy(tempBuf, jp.getBuffer() + tok->start, tok->end - tok->start);
   b42ae:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
   b42b2:	6861      	ldr	r1, [r4, #4]
   b42b4:	1ad2      	subs	r2, r2, r3
   b42b6:	4419      	add	r1, r3
   b42b8:	a808      	add	r0, sp, #32
   b42ba:	f004 ff59 	bl	b9170 <memcpy>
	tempBuf[tok->end - tok->start] = 0;
   b42be:	e9d5 2301 	ldrd	r2, r3, [r5, #4]
   b42c2:	a908      	add	r1, sp, #32
   b42c4:	1a9b      	subs	r3, r3, r2
   b42c6:	2200      	movs	r2, #0
   b42c8:	54ca      	strb	r2, [r1, r3]
	storageSize += tok->end;
   b42ca:	f8d5 8008 	ldr.w	r8, [r5, #8]
	if (verbose) Log.info("Outer object start=%d end=%d tokens=%d - %s", tok->start, tok->end, tok->size, tempBuf);
   b42ce:	b146      	cbz	r6, b42e2 <_Z11printTokensR10JsonParserb+0x52>
   b42d0:	9101      	str	r1, [sp, #4]
   b42d2:	68eb      	ldr	r3, [r5, #12]
   b42d4:	9300      	str	r3, [sp, #0]
   b42d6:	686a      	ldr	r2, [r5, #4]
   b42d8:	492f      	ldr	r1, [pc, #188]	; (b4398 <_Z11printTokensR10JsonParserb+0x108>)
   b42da:	482e      	ldr	r0, [pc, #184]	; (b4394 <_Z11printTokensR10JsonParserb+0x104>)
   b42dc:	4643      	mov	r3, r8
   b42de:	f7ff ff45 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
	sniprintf(tempBuf, sizeof(tempBuf), "test %s", charlike);
   b42e2:	4b2e      	ldr	r3, [pc, #184]	; (b439c <_Z11printTokensR10JsonParserb+0x10c>)
   b42e4:	4a2e      	ldr	r2, [pc, #184]	; (b43a0 <_Z11printTokensR10JsonParserb+0x110>)
   b42e6:	f44f 6180 	mov.w	r1, #1024	; 0x400
   b42ea:	a808      	add	r0, sp, #32
   b42ec:	f002 fb16 	bl	b691c <sniprintf>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   b42f0:	4b2c      	ldr	r3, [pc, #176]	; (b43a4 <_Z11printTokensR10JsonParserb+0x114>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b42f2:	492d      	ldr	r1, [pc, #180]	; (b43a8 <_Z11printTokensR10JsonParserb+0x118>)
   b42f4:	781b      	ldrb	r3, [r3, #0]
   b42f6:	f88d 3000 	strb.w	r3, [sp]
   b42fa:	aa08      	add	r2, sp, #32
   b42fc:	233c      	movs	r3, #60	; 0x3c
   b42fe:	a806      	add	r0, sp, #24
   b4300:	f002 fd1c 	bl	b6d3c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   b4304:	a807      	add	r0, sp, #28
   b4306:	f7ff ffad 	bl	b4264 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b430a:	6965      	ldr	r5, [r4, #20]
	int tokenCount = 0;
   b430c:	2700      	movs	r7, #0
	for(JsonParserGeneratorRK::jsmntok_t *tok = jp.getTokens(); tok < tokensEnd; tok++) {
   b430e:	454d      	cmp	r5, r9
   b4310:	d20b      	bcs.n	b432a <_Z11printTokensR10JsonParserb+0x9a>
		if (tok->start > 0) {
   b4312:	686b      	ldr	r3, [r5, #4]
   b4314:	2b00      	cmp	r3, #0
			tokenCount += tok->size;
   b4316:	bfc4      	itt	gt
   b4318:	68eb      	ldrgt	r3, [r5, #12]
   b431a:	18ff      	addgt	r7, r7, r3
		if (verbose) {
   b431c:	b11e      	cbz	r6, b4326 <_Z11printTokensR10JsonParserb+0x96>
			printToken(jp, tok);
   b431e:	4629      	mov	r1, r5
   b4320:	4620      	mov	r0, r4
   b4322:	f7ff ff83 	bl	b422c <_Z10printTokenR10JsonParserPKN21JsonParserGeneratorRK9jsmntok_tE>
	for(JsonParserGeneratorRK::jsmntok_t *tok = jp.getTokens(); tok < tokensEnd; tok++) {
   b4326:	3510      	adds	r5, #16
   b4328:	e7f1      	b.n	b430e <_Z11printTokensR10JsonParserb+0x7e>
	Log.info("Total tokens=%d (%4.2f%% full) storage=%d (%4.2f%% full)", tokenCount, (100*((float)tokenCount/(float)jp.getMaxTokens())), storageSize, (100*((float)storageSize/(float)jp.getBufferLen())));
   b432a:	ee07 8a90 	vmov	s15, r8
   b432e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
   b4332:	edd4 7a02 	vldr	s15, [r4, #8]
   b4336:	ed9f 8a1d 	vldr	s16, [pc, #116]	; b43ac <_Z11printTokensR10JsonParserb+0x11c>
   b433a:	eef8 7a67 	vcvt.f32.u32	s15, s15
   b433e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
   b4342:	ee67 7a08 	vmul.f32	s15, s14, s16
   b4346:	ee17 0a90 	vmov	r0, s15
   b434a:	f004 feab 	bl	b90a4 <__aeabi_f2d>
   b434e:	ee07 7a90 	vmov	s15, r7
   b4352:	eef8 6ae7 	vcvt.f32.s32	s13, s15
   b4356:	edd4 7a07 	vldr	s15, [r4, #28]
   b435a:	f8cd 8008 	str.w	r8, [sp, #8]
   b435e:	eef8 7a67 	vcvt.f32.u32	s15, s15
   b4362:	e9cd 0104 	strd	r0, r1, [sp, #16]
   b4366:	ee86 7aa7 	vdiv.f32	s14, s13, s15
   b436a:	ee67 7a08 	vmul.f32	s15, s14, s16
   b436e:	ee17 0a90 	vmov	r0, s15
   b4372:	f004 fe97 	bl	b90a4 <__aeabi_f2d>
   b4376:	463a      	mov	r2, r7
   b4378:	e9cd 0100 	strd	r0, r1, [sp]
   b437c:	490c      	ldr	r1, [pc, #48]	; (b43b0 <_Z11printTokensR10JsonParserb+0x120>)
   b437e:	4805      	ldr	r0, [pc, #20]	; (b4394 <_Z11printTokensR10JsonParserb+0x104>)
   b4380:	f7ff fef4 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
}
   b4384:	f20d 4d24 	addw	sp, sp, #1060	; 0x424
   b4388:	ecbd 8b02 	vpop	{d8}
   b438c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b4390:	000b9562 	.word	0x000b9562
   b4394:	2003e6b0 	.word	0x2003e6b0
   b4398:	000b9572 	.word	0x000b9572
   b439c:	000b9f55 	.word	0x000b9f55
   b43a0:	000b959e 	.word	0x000b959e
   b43a4:	2003b7b0 	.word	0x2003b7b0
   b43a8:	000b95a6 	.word	0x000b95a6
   b43ac:	42c80000 	.word	0x42c80000
   b43b0:	000b95ab 	.word	0x000b95ab

000b43b4 <_Z22parseJoinPayloadValueshhRhS_S_S_>:
bool parseJoinPayloadValues(uint8_t sensorType, uint8_t compressedJoinPayload, uint8_t& payload1, uint8_t& payload2, uint8_t& payload3, uint8_t& payload4) {
   b43b4:	b570      	push	{r4, r5, r6, lr}
   b43b6:	4604      	mov	r4, r0
   b43b8:	b086      	sub	sp, #24
   b43ba:	461d      	mov	r5, r3
    switch (sensorType) {
   b43bc:	2c13      	cmp	r4, #19
    uint8_t data[4] = {0};
   b43be:	f04f 0300 	mov.w	r3, #0
    uint8_t bitSizes[4] = {0};
   b43c2:	e9cd 3302 	strd	r3, r3, [sp, #8]
bool parseJoinPayloadValues(uint8_t sensorType, uint8_t compressedJoinPayload, uint8_t& payload1, uint8_t& payload2, uint8_t& payload3, uint8_t& payload4) {
   b43c6:	4608      	mov	r0, r1
   b43c8:	4616      	mov	r6, r2
    switch (sensorType) {
   b43ca:	d81c      	bhi.n	b4406 <_Z22parseJoinPayloadValueshhRhS_S_S_+0x52>
   b43cc:	2c09      	cmp	r4, #9
   b43ce:	d83c      	bhi.n	b444a <_Z22parseJoinPayloadValueshhRhS_S_S_+0x96>
   b43d0:	1e63      	subs	r3, r4, #1
   b43d2:	2b08      	cmp	r3, #8
   b43d4:	d922      	bls.n	b441c <_Z22parseJoinPayloadValueshhRhS_S_S_+0x68>
            Log.info("Unknown sensor type in parseJoinPayloadValues %d", sensorType);
   b43d6:	4921      	ldr	r1, [pc, #132]	; (b445c <_Z22parseJoinPayloadValueshhRhS_S_S_+0xa8>)
   b43d8:	4821      	ldr	r0, [pc, #132]	; (b4460 <_Z22parseJoinPayloadValueshhRhS_S_S_+0xac>)
   b43da:	4622      	mov	r2, r4
   b43dc:	f7ff fec6 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   b43e0:	f002 f9fc 	bl	b67dc <spark_cloud_flag_connected>
            if (Particle.connected()) Particle.publish("Alert", "Unknown sensor type in parseJoinPayloadValues", PRIVATE);
   b43e4:	b168      	cbz	r0, b4402 <_Z22parseJoinPayloadValueshhRhS_S_S_+0x4e>
   b43e6:	4b1f      	ldr	r3, [pc, #124]	; (b4464 <_Z22parseJoinPayloadValueshhRhS_S_S_+0xb0>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b43e8:	4a1f      	ldr	r2, [pc, #124]	; (b4468 <_Z22parseJoinPayloadValueshhRhS_S_S_+0xb4>)
   b43ea:	781b      	ldrb	r3, [r3, #0]
   b43ec:	491f      	ldr	r1, [pc, #124]	; (b446c <_Z22parseJoinPayloadValueshhRhS_S_S_+0xb8>)
   b43ee:	f88d 3000 	strb.w	r3, [sp]
   b43f2:	a804      	add	r0, sp, #16
   b43f4:	233c      	movs	r3, #60	; 0x3c
   b43f6:	f002 fca1 	bl	b6d3c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   b43fa:	a805      	add	r0, sp, #20
   b43fc:	f7ff ff32 	bl	b4264 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            return false;
   b4400:	2000      	movs	r0, #0
}
   b4402:	b006      	add	sp, #24
   b4404:	bd70      	pop	{r4, r5, r6, pc}
    switch (sensorType) {
   b4406:	f1a4 0314 	sub.w	r3, r4, #20
   b440a:	2b09      	cmp	r3, #9
   b440c:	d8e3      	bhi.n	b43d6 <_Z22parseJoinPayloadValueshhRhS_S_S_+0x22>
            bitSizes[0] = 6; // space (6 bits)
   b440e:	2306      	movs	r3, #6
   b4410:	f88d 300c 	strb.w	r3, [sp, #12]
            bitSizes[1] = 1; // placement (1 bit)
   b4414:	2301      	movs	r3, #1
   b4416:	f88d 300d 	strb.w	r3, [sp, #13]
        } break;
   b441a:	e002      	b.n	b4422 <_Z22parseJoinPayloadValueshhRhS_S_S_+0x6e>
            bitSizes[0] = 1; // 2-Way (1 bit)
   b441c:	2301      	movs	r3, #1
   b441e:	f88d 300c 	strb.w	r3, [sp, #12]
    decompressData(compressedJoinPayload, data, bitSizes);
   b4422:	aa03      	add	r2, sp, #12
   b4424:	a902      	add	r1, sp, #8
   b4426:	f7ff ff07 	bl	b4238 <_Z14decompressDatahPhS_>
    payload1 = data[0];
   b442a:	f89d 3008 	ldrb.w	r3, [sp, #8]
   b442e:	7033      	strb	r3, [r6, #0]
    payload2 = data[1];
   b4430:	f89d 3009 	ldrb.w	r3, [sp, #9]
   b4434:	702b      	strb	r3, [r5, #0]
    payload3 = data[2];
   b4436:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b4438:	f89d 200a 	ldrb.w	r2, [sp, #10]
   b443c:	701a      	strb	r2, [r3, #0]
    payload4 = data[3];
   b443e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b4440:	f89d 200b 	ldrb.w	r2, [sp, #11]
   b4444:	701a      	strb	r2, [r3, #0]
    return true;
   b4446:	2001      	movs	r0, #1
   b4448:	e7db      	b.n	b4402 <_Z22parseJoinPayloadValueshhRhS_S_S_+0x4e>
            bitSizes[0] = 6; // space (6 bits)
   b444a:	2306      	movs	r3, #6
   b444c:	f88d 300c 	strb.w	r3, [sp, #12]
            bitSizes[1] = 1; // placement (1 bit)
   b4450:	2301      	movs	r3, #1
   b4452:	f88d 300d 	strb.w	r3, [sp, #13]
            bitSizes[2] = 1; // multi (1 bit)
   b4456:	f88d 300e 	strb.w	r3, [sp, #14]
        } break;
   b445a:	e7e2      	b.n	b4422 <_Z22parseJoinPayloadValueshhRhS_S_S_+0x6e>
   b445c:	000b95e4 	.word	0x000b95e4
   b4460:	2003e6b0 	.word	0x2003e6b0
   b4464:	2003b7b0 	.word	0x2003b7b0
   b4468:	000b9615 	.word	0x000b9615
   b446c:	000b9643 	.word	0x000b9643

000b4470 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   b4470:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b4472:	e9d0 5300 	ldrd	r5, r3, [r0]
   b4476:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   b4478:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b447a:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b447e:	42ae      	cmp	r6, r5
   b4480:	d004      	beq.n	b448c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
class LogCategoryFilter {
   b4482:	4628      	mov	r0, r5
   b4484:	f004 f99c 	bl	b87c0 <_ZN6StringD1Ev>
   b4488:	3514      	adds	r5, #20
   b448a:	e7f8      	b.n	b447e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   b448c:	6820      	ldr	r0, [r4, #0]
   b448e:	f002 fa25 	bl	b68dc <free>
    AllocatorT::free(data_);
}
   b4492:	4620      	mov	r0, r4
   b4494:	bd70      	pop	{r4, r5, r6, pc}

000b4496 <_ZNK10JsonParser13getValueByKeyImEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_>:
	bool getValueByKey(const JsonParserGeneratorRK::jsmntok_t *container, const char *name, T &result) const {
   b4496:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b4498:	461d      	mov	r5, r3
		if (getValueTokenByKey(container, name, value)) {
   b449a:	ab01      	add	r3, sp, #4
	bool getValueByKey(const JsonParserGeneratorRK::jsmntok_t *container, const char *name, T &result) const {
   b449c:	4604      	mov	r4, r0
		if (getValueTokenByKey(container, name, value)) {
   b449e:	f000 ff25 	bl	b52ec <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
   b44a2:	b120      	cbz	r0, b44ae <_ZNK10JsonParser13getValueByKeyImEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_+0x18>
			return getTokenValue(value, result);
   b44a4:	9901      	ldr	r1, [sp, #4]
   b44a6:	462a      	mov	r2, r5
   b44a8:	4620      	mov	r0, r4
   b44aa:	f000 fe43 	bl	b5134 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tERm>
	}
   b44ae:	b003      	add	sp, #12
   b44b0:	bd30      	pop	{r4, r5, pc}
	...

000b44b4 <_Z13printNodeDatab>:
void printNodeData(bool publish) {
   b44b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b44b8:	4607      	mov	r7, r0
   b44ba:	f5ad 7d35 	sub.w	sp, sp, #724	; 0x2d4
	jp.getValueTokenByKey(jp.getOuterObject(), "nodes", nodesArrayContainer);
   b44be:	4871      	ldr	r0, [pc, #452]	; (b4684 <_Z13printNodeDatab+0x1d0>)
		nodeObjectContainer = jp.getTokenByIndex(nodesArrayContainer, i);
   b44c0:	4d70      	ldr	r5, [pc, #448]	; (b4684 <_Z13printNodeDatab+0x1d0>)
		jp.getValueByKey(nodeObjectContainer, "uID", uniqueID);
   b44c2:	f8df a200 	ldr.w	sl, [pc, #512]	; b46c4 <_Z13printNodeDatab+0x210>
		jp.getValueByKey(nodeObjectContainer, "node", nodeNumber);
   b44c6:	f8df b200 	ldr.w	fp, [pc, #512]	; b46c8 <_Z13printNodeDatab+0x214>
	jp.getValueTokenByKey(jp.getOuterObject(), "nodes", nodesArrayContainer);
   b44ca:	f000 fda6 	bl	b501a <_ZNK10JsonParser14getOuterObjectEv>
   b44ce:	4a6e      	ldr	r2, [pc, #440]	; (b4688 <_Z13printNodeDatab+0x1d4>)
   b44d0:	4601      	mov	r1, r0
   b44d2:	ab12      	add	r3, sp, #72	; 0x48
   b44d4:	486b      	ldr	r0, [pc, #428]	; (b4684 <_Z13printNodeDatab+0x1d0>)
   b44d6:	f000 ff09 	bl	b52ec <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
	for (int i=0; i<100; i++) {												// Iterate through the array looking for a match
   b44da:	2600      	movs	r6, #0
		nodeObjectContainer = jp.getTokenByIndex(nodesArrayContainer, i);
   b44dc:	9912      	ldr	r1, [sp, #72]	; 0x48
   b44de:	4632      	mov	r2, r6
   b44e0:	4628      	mov	r0, r5
   b44e2:	f000 fdbc 	bl	b505e <_ZNK10JsonParser15getTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj>
		if(nodeObjectContainer == NULL) {
   b44e6:	4604      	mov	r4, r0
   b44e8:	2800      	cmp	r0, #0
   b44ea:	f000 809f 	beq.w	b462c <_Z13printNodeDatab+0x178>
		jp.getValueByKey(nodeObjectContainer, "uID", uniqueID);
   b44ee:	4601      	mov	r1, r0
   b44f0:	ab0d      	add	r3, sp, #52	; 0x34
   b44f2:	4652      	mov	r2, sl
   b44f4:	4628      	mov	r0, r5
   b44f6:	f7ff ffce 	bl	b4496 <_ZNK10JsonParser13getValueByKeyImEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_>
		jp.getValueByKey(nodeObjectContainer, "node", nodeNumber);
   b44fa:	ab0c      	add	r3, sp, #48	; 0x30
   b44fc:	465a      	mov	r2, fp
   b44fe:	4621      	mov	r1, r4
   b4500:	4628      	mov	r0, r5
   b4502:	f7ff fdfc 	bl	b40fe <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
		jp.getValueByKey(nodeObjectContainer, "type", sensorType);
   b4506:	4a61      	ldr	r2, [pc, #388]	; (b468c <_Z13printNodeDatab+0x1d8>)
   b4508:	ab0e      	add	r3, sp, #56	; 0x38
   b450a:	4621      	mov	r1, r4
   b450c:	4628      	mov	r0, r5
   b450e:	f7ff fdf6 	bl	b40fe <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
		jp.getValueByKey(nodeObjectContainer, "p", compressedJoinPayload);
   b4512:	4a5f      	ldr	r2, [pc, #380]	; (b4690 <_Z13printNodeDatab+0x1dc>)
   b4514:	ab0f      	add	r3, sp, #60	; 0x3c
   b4516:	4621      	mov	r1, r4
   b4518:	4628      	mov	r0, r5
   b451a:	f7ff fdf0 	bl	b40fe <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
		jp.getValueByKey(nodeObjectContainer, "pend", pendingAlertCode);
   b451e:	4a5d      	ldr	r2, [pc, #372]	; (b4694 <_Z13printNodeDatab+0x1e0>)
   b4520:	ab10      	add	r3, sp, #64	; 0x40
   b4522:	4621      	mov	r1, r4
   b4524:	4628      	mov	r0, r5
   b4526:	f7ff fdea 	bl	b40fe <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
		parseJoinPayloadValues(sensorType, compressedJoinPayload, payload1, payload2, payload3, payload4);
   b452a:	f10d 092f 	add.w	r9, sp, #47	; 0x2f
		jp.getValueByKey(nodeObjectContainer, "cont", pendingAlertContext);
   b452e:	4a5a      	ldr	r2, [pc, #360]	; (b4698 <_Z13printNodeDatab+0x1e4>)
   b4530:	ab11      	add	r3, sp, #68	; 0x44
   b4532:	4621      	mov	r1, r4
   b4534:	4628      	mov	r0, r5
		parseJoinPayloadValues(sensorType, compressedJoinPayload, payload1, payload2, payload3, payload4);
   b4536:	f10d 082e 	add.w	r8, sp, #46	; 0x2e
		jp.getValueByKey(nodeObjectContainer, "cont", pendingAlertContext);
   b453a:	f7ff fde0 	bl	b40fe <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
		parseJoinPayloadValues(sensorType, compressedJoinPayload, payload1, payload2, payload3, payload4);
   b453e:	aa0b      	add	r2, sp, #44	; 0x2c
   b4540:	f89d 103c 	ldrb.w	r1, [sp, #60]	; 0x3c
   b4544:	f89d 0038 	ldrb.w	r0, [sp, #56]	; 0x38
   b4548:	f8cd 9004 	str.w	r9, [sp, #4]
   b454c:	f8cd 8000 	str.w	r8, [sp]
   b4550:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
   b4554:	f7ff ff2e 	bl	b43b4 <_Z22parseJoinPayloadValueshhRhS_S_S_>
		switch (sensorType) {
   b4558:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   b455a:	2a13      	cmp	r2, #19
   b455c:	dc1a      	bgt.n	b4594 <_Z13printNodeDatab+0xe0>
   b455e:	2a09      	cmp	r2, #9
   b4560:	dc1c      	bgt.n	b459c <_Z13printNodeDatab+0xe8>
   b4562:	1e53      	subs	r3, r2, #1
   b4564:	2b08      	cmp	r3, #8
   b4566:	d972      	bls.n	b464e <_Z13printNodeDatab+0x19a>
				Log.info("Unknown sensor type in printNodeData %d", sensorType);
   b4568:	494c      	ldr	r1, [pc, #304]	; (b469c <_Z13printNodeDatab+0x1e8>)
   b456a:	484d      	ldr	r0, [pc, #308]	; (b46a0 <_Z13printNodeDatab+0x1ec>)
   b456c:	f7ff fdfe 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b4570:	f002 f934 	bl	b67dc <spark_cloud_flag_connected>
				if (Particle.connected()) Particle.publish("Alert", "Unknown sensor type in printNodeData", PRIVATE);
   b4574:	2800      	cmp	r0, #0
   b4576:	d03c      	beq.n	b45f2 <_Z13printNodeDatab+0x13e>
   b4578:	4b4a      	ldr	r3, [pc, #296]	; (b46a4 <_Z13printNodeDatab+0x1f0>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b457a:	4a4b      	ldr	r2, [pc, #300]	; (b46a8 <_Z13printNodeDatab+0x1f4>)
   b457c:	781b      	ldrb	r3, [r3, #0]
   b457e:	f88d 3000 	strb.w	r3, [sp]
   b4582:	a814      	add	r0, sp, #80	; 0x50
   b4584:	4949      	ldr	r1, [pc, #292]	; (b46ac <_Z13printNodeDatab+0x1f8>)
   b4586:	233c      	movs	r3, #60	; 0x3c
   b4588:	f002 fbd8 	bl	b6d3c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   b458c:	a815      	add	r0, sp, #84	; 0x54
   b458e:	f7ff fe69 	bl	b4264 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b4592:	e02e      	b.n	b45f2 <_Z13printNodeDatab+0x13e>
		switch (sensorType) {
   b4594:	f1a2 0314 	sub.w	r3, r2, #20
   b4598:	2b09      	cmp	r3, #9
   b459a:	e7e4      	b.n	b4566 <_Z13printNodeDatab+0xb2>
				jp.getValueByKey(nodeObjectContainer, "occN", occupancyNet);
   b459c:	4a44      	ldr	r2, [pc, #272]	; (b46b0 <_Z13printNodeDatab+0x1fc>)
   b459e:	ab13      	add	r3, sp, #76	; 0x4c
   b45a0:	4621      	mov	r1, r4
   b45a2:	4628      	mov	r0, r5
   b45a4:	f7ff fdab 	bl	b40fe <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
				jp.getValueByKey(nodeObjectContainer, "occG", occupancyGross);
   b45a8:	4a42      	ldr	r2, [pc, #264]	; (b46b4 <_Z13printNodeDatab+0x200>)
   b45aa:	ab14      	add	r3, sp, #80	; 0x50
   b45ac:	4621      	mov	r1, r4
   b45ae:	4628      	mov	r0, r5
   b45b0:	f7ff fda5 	bl	b40fe <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
				snprintf(data, sizeof(data), "Node %d, uniqueID %lu, type %d, occupancyNet %d, occupancyGross %d, payload (%d/%d/%d/%d) with pending alert %d and alert context %d", nodeNumber, uniqueID, sensorType, occupancyNet, occupancyGross, payload1, payload2, payload3, payload4, pendingAlertCode, pendingAlertContext);
   b45b4:	9b11      	ldr	r3, [sp, #68]	; 0x44
   b45b6:	9309      	str	r3, [sp, #36]	; 0x24
   b45b8:	9b10      	ldr	r3, [sp, #64]	; 0x40
   b45ba:	9308      	str	r3, [sp, #32]
   b45bc:	f899 3000 	ldrb.w	r3, [r9]
   b45c0:	9307      	str	r3, [sp, #28]
   b45c2:	f898 3000 	ldrb.w	r3, [r8]
   b45c6:	9306      	str	r3, [sp, #24]
   b45c8:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   b45cc:	9305      	str	r3, [sp, #20]
   b45ce:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   b45d2:	9304      	str	r3, [sp, #16]
   b45d4:	9b14      	ldr	r3, [sp, #80]	; 0x50
   b45d6:	9303      	str	r3, [sp, #12]
   b45d8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   b45da:	9302      	str	r3, [sp, #8]
   b45dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   b45de:	9301      	str	r3, [sp, #4]
   b45e0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   b45e2:	9300      	str	r3, [sp, #0]
   b45e4:	4a34      	ldr	r2, [pc, #208]	; (b46b8 <_Z13printNodeDatab+0x204>)
   b45e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b45e8:	f240 216e 	movw	r1, #622	; 0x26e
   b45ec:	a818      	add	r0, sp, #96	; 0x60
   b45ee:	f002 f98d 	bl	b690c <snprintf>
		Log.info(data);
   b45f2:	482b      	ldr	r0, [pc, #172]	; (b46a0 <_Z13printNodeDatab+0x1ec>)
   b45f4:	a918      	add	r1, sp, #96	; 0x60
   b45f6:	f7ff fdb9 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b45fa:	f002 f8ef 	bl	b67dc <spark_cloud_flag_connected>
		if (Particle.connected() && publish) {
   b45fe:	b188      	cbz	r0, b4624 <_Z13printNodeDatab+0x170>
   b4600:	b187      	cbz	r7, b4624 <_Z13printNodeDatab+0x170>
   b4602:	4b28      	ldr	r3, [pc, #160]	; (b46a4 <_Z13printNodeDatab+0x1f0>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b4604:	492d      	ldr	r1, [pc, #180]	; (b46bc <_Z13printNodeDatab+0x208>)
   b4606:	781b      	ldrb	r3, [r3, #0]
   b4608:	f88d 3000 	strb.w	r3, [sp]
   b460c:	aa18      	add	r2, sp, #96	; 0x60
   b460e:	233c      	movs	r3, #60	; 0x3c
   b4610:	a814      	add	r0, sp, #80	; 0x50
   b4612:	f002 fb93 	bl	b6d3c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   b4616:	a815      	add	r0, sp, #84	; 0x54
   b4618:	f7ff fe24 	bl	b4264 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
			delay(1000);
   b461c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b4620:	f002 f9b4 	bl	b698c <delay>
	for (int i=0; i<100; i++) {												// Iterate through the array looking for a match
   b4624:	3601      	adds	r6, #1
   b4626:	2e64      	cmp	r6, #100	; 0x64
   b4628:	f47f af58 	bne.w	b44dc <_Z13printNodeDatab+0x28>
	Log.info(nodeDatabase.get_nodeIDJson());  // See the raw JSON string
   b462c:	f001 fb5a 	bl	b5ce4 <_ZN10nodeIDData8instanceEv>
   b4630:	4601      	mov	r1, r0
   b4632:	a814      	add	r0, sp, #80	; 0x50
   b4634:	f001 fb7a 	bl	b5d2c <_ZNK10nodeIDData14get_nodeIDJsonEv>
   b4638:	9914      	ldr	r1, [sp, #80]	; 0x50
   b463a:	4819      	ldr	r0, [pc, #100]	; (b46a0 <_Z13printNodeDatab+0x1ec>)
   b463c:	f7ff fd96 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
   b4640:	a814      	add	r0, sp, #80	; 0x50
   b4642:	f004 f8bd 	bl	b87c0 <_ZN6StringD1Ev>
}
   b4646:	f50d 7d35 	add.w	sp, sp, #724	; 0x2d4
   b464a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				snprintf(data, sizeof(data), "Node %d, uniqueID %lu, type %d, payload (%d/%d/%d/%d) with pending alert %d and alert context %d", nodeNumber, uniqueID, sensorType, payload1, payload2, payload3, payload4, pendingAlertCode, pendingAlertContext);
   b464e:	9b11      	ldr	r3, [sp, #68]	; 0x44
   b4650:	9307      	str	r3, [sp, #28]
   b4652:	9b10      	ldr	r3, [sp, #64]	; 0x40
   b4654:	9306      	str	r3, [sp, #24]
   b4656:	f899 3000 	ldrb.w	r3, [r9]
   b465a:	9305      	str	r3, [sp, #20]
   b465c:	f898 3000 	ldrb.w	r3, [r8]
   b4660:	9304      	str	r3, [sp, #16]
   b4662:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   b4666:	9303      	str	r3, [sp, #12]
   b4668:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   b466c:	e9cd 2301 	strd	r2, r3, [sp, #4]
   b4670:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   b4672:	9300      	str	r3, [sp, #0]
   b4674:	4a12      	ldr	r2, [pc, #72]	; (b46c0 <_Z13printNodeDatab+0x20c>)
   b4676:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b4678:	f240 216e 	movw	r1, #622	; 0x26e
   b467c:	a818      	add	r0, sp, #96	; 0x60
   b467e:	f002 f945 	bl	b690c <snprintf>
			} break;
   b4682:	e7b6      	b.n	b45f2 <_Z13printNodeDatab+0x13e>
   b4684:	2003b7b4 	.word	0x2003b7b4
   b4688:	000b9557 	.word	0x000b9557
   b468c:	000b955d 	.word	0x000b955d
   b4690:	000ba2d0 	.word	0x000ba2d0
   b4694:	000b9652 	.word	0x000b9652
   b4698:	000b9657 	.word	0x000b9657
   b469c:	000b974c 	.word	0x000b974c
   b46a0:	2003e6b0 	.word	0x2003e6b0
   b46a4:	2003b7b0 	.word	0x2003b7b0
   b46a8:	000b9774 	.word	0x000b9774
   b46ac:	000b9643 	.word	0x000b9643
   b46b0:	000b965c 	.word	0x000b965c
   b46b4:	000b9661 	.word	0x000b9661
   b46b8:	000b9666 	.word	0x000b9666
   b46bc:	000b9799 	.word	0x000b9799
   b46c0:	000b96eb 	.word	0x000b96eb
   b46c4:	000b9649 	.word	0x000b9649
   b46c8:	000b964d 	.word	0x000b964d

000b46cc <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>:
	 *
	 * Uses templates so you can pass any type object that's supported by insertValue() overloads,
	 * for example: bool, int, float, double, const char *.
	 */
	template<class T>
	void insertKeyValue(const char *key, T value) {
   b46cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b46ce:	4604      	mov	r4, r0
   b46d0:	4615      	mov	r5, r2
   b46d2:	9101      	str	r1, [sp, #4]
		insertCheckSeparator();
   b46d4:	f000 ff2e 	bl	b5534 <_ZN10JsonWriter20insertCheckSeparatorEv>
	void insertValue(const char *value) { insertString(value, true); }
   b46d8:	9901      	ldr	r1, [sp, #4]
   b46da:	2201      	movs	r2, #1
   b46dc:	4620      	mov	r0, r4
   b46de:	f000 fe97 	bl	b5410 <_ZN10JsonWriter12insertStringEPKcb>
		insertValue(key);
		insertChar(':');
   b46e2:	4620      	mov	r0, r4
   b46e4:	213a      	movs	r1, #58	; 0x3a
   b46e6:	f000 fe47 	bl	b5378 <_ZN10JsonWriter10insertCharEc>
	void insertValue(int value) { insertsprintf("%d", value); }
   b46ea:	4904      	ldr	r1, [pc, #16]	; (b46fc <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_+0x30>)
   b46ec:	462a      	mov	r2, r5
   b46ee:	4620      	mov	r0, r4
		insertValue(value);
	}
   b46f0:	b003      	add	sp, #12
   b46f2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	void insertValue(int value) { insertsprintf("%d", value); }
   b46f6:	f000 be7e 	b.w	b53f6 <_ZN10JsonWriter13insertsprintfEPKcz>
   b46fa:	bf00      	nop
   b46fc:	000b9866 	.word	0x000b9866

000b4700 <_ZN10JsonWriter14insertKeyValueImEEvPKcT_>:
	void insertKeyValue(const char *key, T value) {
   b4700:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b4702:	4604      	mov	r4, r0
   b4704:	4615      	mov	r5, r2
   b4706:	9101      	str	r1, [sp, #4]
		insertCheckSeparator();
   b4708:	f000 ff14 	bl	b5534 <_ZN10JsonWriter20insertCheckSeparatorEv>
	void insertValue(const char *value) { insertString(value, true); }
   b470c:	9901      	ldr	r1, [sp, #4]
   b470e:	2201      	movs	r2, #1
   b4710:	4620      	mov	r0, r4
   b4712:	f000 fe7d 	bl	b5410 <_ZN10JsonWriter12insertStringEPKcb>
		insertChar(':');
   b4716:	4620      	mov	r0, r4
   b4718:	213a      	movs	r1, #58	; 0x3a
   b471a:	f000 fe2d 	bl	b5378 <_ZN10JsonWriter10insertCharEc>
	void insertValue(unsigned long value) { insertsprintf("%lu", value); }
   b471e:	4904      	ldr	r1, [pc, #16]	; (b4730 <_ZN10JsonWriter14insertKeyValueImEEvPKcT_+0x30>)
   b4720:	462a      	mov	r2, r5
   b4722:	4620      	mov	r0, r4
	}
   b4724:	b003      	add	sp, #12
   b4726:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	void insertValue(unsigned long value) { insertsprintf("%lu", value); }
   b472a:	f000 be64 	b.w	b53f6 <_ZN10JsonWriter13insertsprintfEPKcz>
   b472e:	bf00      	nop
   b4730:	000b97a2 	.word	0x000b97a2

000b4734 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   b4734:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b4736:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4738:	4604      	mov	r4, r0
   b473a:	460d      	mov	r5, r1
   b473c:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b473e:	d916      	bls.n	b476e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
   b4740:	4290      	cmp	r0, r2
   b4742:	d215      	bcs.n	b4770 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            --end;
   b4744:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   b4748:	1a75      	subs	r5, r6, r1
   b474a:	f1a1 0714 	sub.w	r7, r1, #20
   b474e:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b4750:	42b7      	cmp	r7, r6
   b4752:	d01c      	beq.n	b478e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
   b4754:	b12c      	cbz	r4, b4762 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
   b4756:	4631      	mov	r1, r6
   b4758:	4620      	mov	r0, r4
   b475a:	f004 f8ae 	bl	b88ba <_ZN6StringC1EOS_>
   b475e:	7c33      	ldrb	r3, [r6, #16]
   b4760:	7423      	strb	r3, [r4, #16]
   b4762:	4630      	mov	r0, r6
   b4764:	f004 f82c 	bl	b87c0 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   b4768:	3e14      	subs	r6, #20
   b476a:	3c14      	subs	r4, #20
   b476c:	e7f0      	b.n	b4750 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   b476e:	d00e      	beq.n	b478e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
   b4770:	42b5      	cmp	r5, r6
   b4772:	d00c      	beq.n	b478e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
   b4774:	b12c      	cbz	r4, b4782 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
   b4776:	4629      	mov	r1, r5
   b4778:	4620      	mov	r0, r4
   b477a:	f004 f89e 	bl	b88ba <_ZN6StringC1EOS_>
   b477e:	7c2b      	ldrb	r3, [r5, #16]
   b4780:	7423      	strb	r3, [r4, #16]
   b4782:	4628      	mov	r0, r5
   b4784:	f004 f81c 	bl	b87c0 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   b4788:	3514      	adds	r5, #20
   b478a:	3414      	adds	r4, #20
   b478c:	e7f0      	b.n	b4770 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
    }
   b478e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b4790 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b4790:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   b4794:	2300      	movs	r3, #0
   b4796:	e9c0 3300 	strd	r3, r3, [r0]
   b479a:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b479c:	684f      	ldr	r7, [r1, #4]
   b479e:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b47a0:	4604      	mov	r4, r0
   b47a2:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b47a4:	dd23      	ble.n	b47ee <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
   b47a6:	f04f 0814 	mov.w	r8, #20
    return ::malloc(size);
   b47aa:	fb08 f007 	mul.w	r0, r8, r7
   b47ae:	f002 f88d 	bl	b68cc <malloc>
            if (!d) {
   b47b2:	4605      	mov	r5, r0
   b47b4:	b1d8      	cbz	r0, b47ee <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            move(d, data_, data_ + size_);
   b47b6:	e9d4 1200 	ldrd	r1, r2, [r4]
   b47ba:	fb08 1202 	mla	r2, r8, r2, r1
   b47be:	f7ff ffb9 	bl	b4734 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   b47c2:	6820      	ldr	r0, [r4, #0]
   b47c4:	f002 f88a 	bl	b68dc <free>
        data_ = d;
   b47c8:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   b47ca:	60a7      	str	r7, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b47cc:	e9d6 7300 	ldrd	r7, r3, [r6]
   b47d0:	fb08 7803 	mla	r8, r8, r3, r7
        for (; it != end; ++it, ++dest) {
   b47d4:	45b8      	cmp	r8, r7
   b47d6:	d008      	beq.n	b47ea <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5a>
   b47d8:	4639      	mov	r1, r7
   b47da:	4628      	mov	r0, r5
   b47dc:	f004 f887 	bl	b88ee <_ZN6StringC1ERKS_>
   b47e0:	7c3b      	ldrb	r3, [r7, #16]
   b47e2:	742b      	strb	r3, [r5, #16]
   b47e4:	3714      	adds	r7, #20
   b47e6:	3514      	adds	r5, #20
   b47e8:	e7f4      	b.n	b47d4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>
        size_ = vector.size_;
   b47ea:	6873      	ldr	r3, [r6, #4]
   b47ec:	6063      	str	r3, [r4, #4]
}
   b47ee:	4620      	mov	r0, r4
   b47f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b47f4 <_GLOBAL__sub_I_LogHandler>:
}
   b47f4:	b5f0      	push	{r4, r5, r6, r7, lr}
        val_(val) {
   b47f6:	4b2d      	ldr	r3, [pc, #180]	; (b48ac <_GLOBAL__sub_I_LogHandler+0xb8>)
        filter_(level, filters) {
   b47f8:	4d2d      	ldr	r5, [pc, #180]	; (b48b0 <_GLOBAL__sub_I_LogHandler+0xbc>)
   b47fa:	b08f      	sub	sp, #60	; 0x3c
   b47fc:	2201      	movs	r2, #1
   b47fe:	701a      	strb	r2, [r3, #0]
        capacity_(0) {
   b4800:	2400      	movs	r4, #0
   b4802:	e9cd 4402 	strd	r4, r4, [sp, #8]
   b4806:	9404      	str	r4, [sp, #16]
            StreamLogHandler(Serial, level, filters) {
   b4808:	f004 f99e 	bl	b8b48 <_Z16_fetch_usbserialv>
   b480c:	a902      	add	r1, sp, #8
   b480e:	4606      	mov	r6, r0
   b4810:	a805      	add	r0, sp, #20
   b4812:	f7ff ffbd 	bl	b4790 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b4816:	462f      	mov	r7, r5
        stream_(&stream) {
   b4818:	a905      	add	r1, sp, #20
   b481a:	a808      	add	r0, sp, #32
   b481c:	f7ff ffb8 	bl	b4790 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   b4820:	4b24      	ldr	r3, [pc, #144]	; (b48b4 <_GLOBAL__sub_I_LogHandler+0xc0>)
   b4822:	f847 3b04 	str.w	r3, [r7], #4
   b4826:	a908      	add	r1, sp, #32
   b4828:	a80b      	add	r0, sp, #44	; 0x2c
   b482a:	f7ff ffb1 	bl	b4790 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b482e:	aa0b      	add	r2, sp, #44	; 0x2c
   b4830:	211e      	movs	r1, #30
   b4832:	4638      	mov	r0, r7
   b4834:	f003 fb8c 	bl	b7f50 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b4838:	a80b      	add	r0, sp, #44	; 0x2c
   b483a:	f7ff fe19 	bl	b4470 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   b483e:	a808      	add	r0, sp, #32
   b4840:	f7ff fe16 	bl	b4470 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b4844:	4b1c      	ldr	r3, [pc, #112]	; (b48b8 <_GLOBAL__sub_I_LogHandler+0xc4>)
   b4846:	602b      	str	r3, [r5, #0]
   b4848:	a805      	add	r0, sp, #20
   b484a:	622e      	str	r6, [r5, #32]
   b484c:	f7ff fe10 	bl	b4470 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b4850:	4b1a      	ldr	r3, [pc, #104]	; (b48bc <_GLOBAL__sub_I_LogHandler+0xc8>)
   b4852:	602b      	str	r3, [r5, #0]
        Serial.begin();
   b4854:	f004 f978 	bl	b8b48 <_Z16_fetch_usbserialv>
   b4858:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b485c:	f004 f964 	bl	b8b28 <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
   b4860:	f003 f858 	bl	b7914 <_ZN5spark10LogManager8instanceEv>
   b4864:	4629      	mov	r1, r5
   b4866:	f003 fa49 	bl	b7cfc <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
SerialLogHandler LogHandler;
   b486a:	a802      	add	r0, sp, #8
   b486c:	f7ff fe00 	bl	b4470 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b4870:	4b13      	ldr	r3, [pc, #76]	; (b48c0 <_GLOBAL__sub_I_LogHandler+0xcc>)
    SleepResult() {}
   b4872:	4a14      	ldr	r2, [pc, #80]	; (b48c4 <_GLOBAL__sub_I_LogHandler+0xd0>)
   b4874:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b4876:	e9c3 4400 	strd	r4, r4, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b487a:	2003      	movs	r0, #3
   b487c:	f001 ff7a 	bl	b6774 <set_system_mode>
	explicit JsonParserStatic() : JsonParser(staticBuffer, BUFFER_SIZE, staticTokens, MAX_TOKENS) {};
   b4880:	4b11      	ldr	r3, [pc, #68]	; (b48c8 <_GLOBAL__sub_I_LogHandler+0xd4>)
   b4882:	f240 2226 	movw	r2, #550	; 0x226
   b4886:	f6a3 442c 	subw	r4, r3, #3116	; 0xc2c
   b488a:	9200      	str	r2, [sp, #0]
   b488c:	f5a3 6140 	sub.w	r1, r3, #3072	; 0xc00
   b4890:	f44f 6240 	mov.w	r2, #3072	; 0xc00
   b4894:	4620      	mov	r0, r4
   b4896:	f000 fba5 	bl	b4fe4 <_ZN10JsonParserC1EPcjPN21JsonParserGeneratorRK9jsmntok_tEj>
   b489a:	4b0c      	ldr	r3, [pc, #48]	; (b48cc <_GLOBAL__sub_I_LogHandler+0xd8>)
String s;
   b489c:	490c      	ldr	r1, [pc, #48]	; (b48d0 <_GLOBAL__sub_I_LogHandler+0xdc>)
   b489e:	480d      	ldr	r0, [pc, #52]	; (b48d4 <_GLOBAL__sub_I_LogHandler+0xe0>)
   b48a0:	6023      	str	r3, [r4, #0]
}
   b48a2:	b00f      	add	sp, #60	; 0x3c
   b48a4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
String s;
   b48a8:	f003 bfd5 	b.w	b8856 <_ZN6StringC1EPK19__FlashStringHelper>
   b48ac:	2003b7b0 	.word	0x2003b7b0
   b48b0:	2003b780 	.word	0x2003b780
   b48b4:	000b9f64 	.word	0x000b9f64
   b48b8:	000ba338 	.word	0x000ba338
   b48bc:	000b9f7c 	.word	0x000b9f7c
   b48c0:	2003b7a4 	.word	0x2003b7a4
   b48c4:	ffff0000 	.word	0xffff0000
   b48c8:	2003c3e0 	.word	0x2003c3e0
   b48cc:	000b9f94 	.word	0x000b9f94
   b48d0:	000ba2ff 	.word	0x000ba2ff
   b48d4:	2003e640 	.word	0x2003e640

000b48d8 <_Z14findNodeNumberm>:
byte findNodeNumber(uint32_t uniqueID) {
   b48d8:	b5f0      	push	{r4, r5, r6, r7, lr}
   b48da:	b097      	sub	sp, #92	; 0x5c
	int node = 0;
   b48dc:	2300      	movs	r3, #0
byte findNodeNumber(uint32_t uniqueID) {
   b48de:	4605      	mov	r5, r0
	jp.getValueTokenByKey(jp.getOuterObject(), "nodes", nodesArrayContainer);
   b48e0:	4836      	ldr	r0, [pc, #216]	; (b49bc <_Z14findNodeNumberm+0xe4>)
	int node = 0;
   b48e2:	9304      	str	r3, [sp, #16]
	jp.getValueTokenByKey(jp.getOuterObject(), "nodes", nodesArrayContainer);
   b48e4:	f000 fb99 	bl	b501a <_ZNK10JsonParser14getOuterObjectEv>
   b48e8:	4a35      	ldr	r2, [pc, #212]	; (b49c0 <_Z14findNodeNumberm+0xe8>)
		nodeObjectContainer = jp.getTokenByIndex(nodesArrayContainer, i);
   b48ea:	4e34      	ldr	r6, [pc, #208]	; (b49bc <_Z14findNodeNumberm+0xe4>)
		jp.getValueByKey(nodeObjectContainer, "uID", nodeUniqueID);			// Get the uniqueID and compare
   b48ec:	4f35      	ldr	r7, [pc, #212]	; (b49c4 <_Z14findNodeNumberm+0xec>)
	jp.getValueTokenByKey(jp.getOuterObject(), "nodes", nodesArrayContainer);
   b48ee:	4601      	mov	r1, r0
   b48f0:	ab05      	add	r3, sp, #20
   b48f2:	4832      	ldr	r0, [pc, #200]	; (b49bc <_Z14findNodeNumberm+0xe4>)
   b48f4:	f000 fcfa 	bl	b52ec <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
	int index = 1;				// Start at one since node zero is the gateway
   b48f8:	2401      	movs	r4, #1
		nodeObjectContainer = jp.getTokenByIndex(nodesArrayContainer, i);
   b48fa:	9905      	ldr	r1, [sp, #20]
   b48fc:	1e62      	subs	r2, r4, #1
   b48fe:	4630      	mov	r0, r6
   b4900:	f000 fbad 	bl	b505e <_ZNK10JsonParser15getTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj>
		if(nodeObjectContainer == NULL) break;								// Ran out of entries - no match found
   b4904:	4601      	mov	r1, r0
   b4906:	b1d8      	cbz	r0, b4940 <_Z14findNodeNumberm+0x68>
		jp.getValueByKey(nodeObjectContainer, "uID", nodeUniqueID);			// Get the uniqueID and compare
   b4908:	ab03      	add	r3, sp, #12
   b490a:	9001      	str	r0, [sp, #4]
   b490c:	463a      	mov	r2, r7
   b490e:	4630      	mov	r0, r6
   b4910:	f7ff fdc1 	bl	b4496 <_ZNK10JsonParser13getValueByKeyImEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_>
		if (nodeUniqueID == uniqueID) {
   b4914:	9b03      	ldr	r3, [sp, #12]
   b4916:	9901      	ldr	r1, [sp, #4]
   b4918:	42ab      	cmp	r3, r5
   b491a:	d10e      	bne.n	b493a <_Z14findNodeNumberm+0x62>
			jp.getValueByKey(nodeObjectContainer, "node", node);		// A match!
   b491c:	4a2a      	ldr	r2, [pc, #168]	; (b49c8 <_Z14findNodeNumberm+0xf0>)
   b491e:	4827      	ldr	r0, [pc, #156]	; (b49bc <_Z14findNodeNumberm+0xe4>)
   b4920:	ab04      	add	r3, sp, #16
   b4922:	f7ff fbec 	bl	b40fe <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
			Log.info("Found the uniqueID, node of %d",node);
   b4926:	9a04      	ldr	r2, [sp, #16]
   b4928:	4928      	ldr	r1, [pc, #160]	; (b49cc <_Z14findNodeNumberm+0xf4>)
   b492a:	4829      	ldr	r0, [pc, #164]	; (b49d0 <_Z14findNodeNumberm+0xf8>)
   b492c:	f7ff fc1e 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
			return node;
   b4930:	f89d 4010 	ldrb.w	r4, [sp, #16]
}
   b4934:	4620      	mov	r0, r4
   b4936:	b017      	add	sp, #92	; 0x5c
   b4938:	bdf0      	pop	{r4, r5, r6, r7, pc}
		index++;															// This will be the node number for the next node if no match is found
   b493a:	3401      	adds	r4, #1
	for (int i=0; i<50; i++) {												// Iterate through the array looking for a match
   b493c:	2c33      	cmp	r4, #51	; 0x33
   b493e:	d1dc      	bne.n	b48fa <_Z14findNodeNumberm+0x22>
	JsonModifier mod(jp);
   b4940:	491e      	ldr	r1, [pc, #120]	; (b49bc <_Z14findNodeNumberm+0xe4>)
   b4942:	a806      	add	r0, sp, #24
   b4944:	f000 fe1a 	bl	b557c <_ZN12JsonModifierC1ER10JsonParser>
	Log.info("Did not find the uniqueID, new node of %d",index);
   b4948:	4622      	mov	r2, r4
   b494a:	4922      	ldr	r1, [pc, #136]	; (b49d4 <_Z14findNodeNumberm+0xfc>)
   b494c:	4820      	ldr	r0, [pc, #128]	; (b49d0 <_Z14findNodeNumberm+0xf8>)
   b494e:	f7ff fc0d 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
	mod.startAppend(jp.getOuterArray());
   b4952:	481a      	ldr	r0, [pc, #104]	; (b49bc <_Z14findNodeNumberm+0xe4>)
   b4954:	f000 fb56 	bl	b5004 <_ZNK10JsonParser13getOuterArrayEv>
   b4958:	4601      	mov	r1, r0
   b495a:	a806      	add	r0, sp, #24
   b495c:	f000 fe20 	bl	b55a0 <_ZN12JsonModifier11startAppendEPKN21JsonParserGeneratorRK9jsmntok_tE>
		mod.startObject();
   b4960:	a806      	add	r0, sp, #24
   b4962:	f7ff fbda 	bl	b411a <_ZN10JsonWriter11startObjectEv.isra.0>
		mod.insertKeyValue("node", (int)index);
   b4966:	4622      	mov	r2, r4
   b4968:	a806      	add	r0, sp, #24
   b496a:	4917      	ldr	r1, [pc, #92]	; (b49c8 <_Z14findNodeNumberm+0xf0>)
   b496c:	f7ff feae 	bl	b46cc <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>
		mod.insertKeyValue("uID", (uint32_t)uniqueID);
   b4970:	462a      	mov	r2, r5
   b4972:	a806      	add	r0, sp, #24
   b4974:	4913      	ldr	r1, [pc, #76]	; (b49c4 <_Z14findNodeNumberm+0xec>)
   b4976:	f7ff fec3 	bl	b4700 <_ZN10JsonWriter14insertKeyValueImEEvPKcT_>
		mod.insertKeyValue("type", (int)sensorType_1);
   b497a:	4b17      	ldr	r3, [pc, #92]	; (b49d8 <_Z14findNodeNumberm+0x100>)
   b497c:	4917      	ldr	r1, [pc, #92]	; (b49dc <_Z14findNodeNumberm+0x104>)
   b497e:	681a      	ldr	r2, [r3, #0]
   b4980:	a806      	add	r0, sp, #24
   b4982:	f7ff fea3 	bl	b46cc <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>
		mod.insertKeyValue("p", 0);
   b4986:	a806      	add	r0, sp, #24
   b4988:	4915      	ldr	r1, [pc, #84]	; (b49e0 <_Z14findNodeNumberm+0x108>)
   b498a:	2200      	movs	r2, #0
   b498c:	f7ff fe9e 	bl	b46cc <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>
		mod.insertKeyValue("pend", 0);	
   b4990:	a806      	add	r0, sp, #24
   b4992:	4914      	ldr	r1, [pc, #80]	; (b49e4 <_Z14findNodeNumberm+0x10c>)
   b4994:	2200      	movs	r2, #0
   b4996:	f7ff fe99 	bl	b46cc <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>
		mod.insertKeyValue("cont", 0);
   b499a:	4913      	ldr	r1, [pc, #76]	; (b49e8 <_Z14findNodeNumberm+0x110>)
   b499c:	2200      	movs	r2, #0
   b499e:	a806      	add	r0, sp, #24
   b49a0:	f7ff fe94 	bl	b46cc <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>
		mod.finishObjectOrArray();
   b49a4:	a806      	add	r0, sp, #24
   b49a6:	f000 fcf5 	bl	b5394 <_ZN10JsonWriter19finishObjectOrArrayEv>
	mod.finish();
   b49aa:	a806      	add	r0, sp, #24
   b49ac:	f001 f8d6 	bl	b5b5c <_ZN12JsonModifier6finishEv>
	JsonModifier mod(jp);
   b49b0:	a806      	add	r0, sp, #24
	return index;
   b49b2:	b2e4      	uxtb	r4, r4
	JsonModifier mod(jp);
   b49b4:	f000 faa0 	bl	b4ef8 <_ZN12JsonModifierD1Ev>
   b49b8:	e7bc      	b.n	b4934 <_Z14findNodeNumberm+0x5c>
   b49ba:	bf00      	nop
   b49bc:	2003b7b4 	.word	0x2003b7b4
   b49c0:	000b9557 	.word	0x000b9557
   b49c4:	000b9649 	.word	0x000b9649
   b49c8:	000b964d 	.word	0x000b964d
   b49cc:	000b97a6 	.word	0x000b97a6
   b49d0:	2003e6b0 	.word	0x2003e6b0
   b49d4:	000b97c5 	.word	0x000b97c5
   b49d8:	2003b6f8 	.word	0x2003b6f8
   b49dc:	000b955d 	.word	0x000b955d
   b49e0:	000ba2d0 	.word	0x000ba2d0
   b49e4:	000b9652 	.word	0x000b9652
   b49e8:	000b9657 	.word	0x000b9657

000b49ec <_Z7setTypeii>:
bool setType(int nodeNumber, int newType) {
   b49ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b49f0:	460d      	mov	r5, r1
   b49f2:	b09a      	sub	sp, #104	; 0x68
	if (nodeNumber == 0 || nodeNumber == 255) return false;
   b49f4:	4604      	mov	r4, r0
   b49f6:	2800      	cmp	r0, #0
   b49f8:	f000 80ed 	beq.w	b4bd6 <_Z7setTypeii+0x1ea>
   b49fc:	28ff      	cmp	r0, #255	; 0xff
   b49fe:	f000 80ea 	beq.w	b4bd6 <_Z7setTypeii+0x1ea>
	jp.getValueTokenByKey(jp.getOuterObject(), "nodes", nodesArrayContainer);
   b4a02:	4876      	ldr	r0, [pc, #472]	; (b4bdc <_Z7setTypeii+0x1f0>)
   b4a04:	4e75      	ldr	r6, [pc, #468]	; (b4bdc <_Z7setTypeii+0x1f0>)
   b4a06:	f000 fb08 	bl	b501a <_ZNK10JsonParser14getOuterObjectEv>
	nodeObjectContainer = jp.getTokenByIndex(nodesArrayContainer, nodeNumber-1);
   b4a0a:	f104 38ff 	add.w	r8, r4, #4294967295	; 0xffffffff
	jp.getValueTokenByKey(jp.getOuterObject(), "nodes", nodesArrayContainer);
   b4a0e:	4601      	mov	r1, r0
   b4a10:	4a73      	ldr	r2, [pc, #460]	; (b4be0 <_Z7setTypeii+0x1f4>)
   b4a12:	4872      	ldr	r0, [pc, #456]	; (b4bdc <_Z7setTypeii+0x1f0>)
   b4a14:	ab07      	add	r3, sp, #28
   b4a16:	f000 fc69 	bl	b52ec <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
	nodeObjectContainer = jp.getTokenByIndex(nodesArrayContainer, nodeNumber-1);
   b4a1a:	9907      	ldr	r1, [sp, #28]
   b4a1c:	486f      	ldr	r0, [pc, #444]	; (b4bdc <_Z7setTypeii+0x1f0>)
   b4a1e:	4642      	mov	r2, r8
   b4a20:	f000 fb1d 	bl	b505e <_ZNK10JsonParser15getTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj>
	if(nodeObjectContainer == NULL) return false;								// Ran out of entries 
   b4a24:	4607      	mov	r7, r0
   b4a26:	2800      	cmp	r0, #0
   b4a28:	f000 80d5 	beq.w	b4bd6 <_Z7setTypeii+0x1ea>
	JsonModifier mod(jp);
   b4a2c:	4631      	mov	r1, r6
   b4a2e:	a80a      	add	r0, sp, #40	; 0x28
   b4a30:	f000 fda4 	bl	b557c <_ZN12JsonModifierC1ER10JsonParser>
	jp.getValueByKey(nodeObjectContainer, "uID", uniqueID);
   b4a34:	4a6b      	ldr	r2, [pc, #428]	; (b4be4 <_Z7setTypeii+0x1f8>)
   b4a36:	ab03      	add	r3, sp, #12
   b4a38:	4639      	mov	r1, r7
   b4a3a:	4630      	mov	r0, r6
   b4a3c:	f7ff fd2b 	bl	b4496 <_ZNK10JsonParser13getValueByKeyImEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_>
	jp.getValueByKey(nodeObjectContainer, "type", type);
   b4a40:	4a69      	ldr	r2, [pc, #420]	; (b4be8 <_Z7setTypeii+0x1fc>)
   b4a42:	ab02      	add	r3, sp, #8
   b4a44:	4639      	mov	r1, r7
   b4a46:	4630      	mov	r0, r6
   b4a48:	f7ff fb59 	bl	b40fe <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
	jp.getValueByKey(nodeObjectContainer, "p", compressedJoinPayload);
   b4a4c:	4a67      	ldr	r2, [pc, #412]	; (b4bec <_Z7setTypeii+0x200>)
   b4a4e:	ab04      	add	r3, sp, #16
   b4a50:	4639      	mov	r1, r7
   b4a52:	4630      	mov	r0, r6
   b4a54:	f7ff fb53 	bl	b40fe <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
	jp.getValueByKey(nodeObjectContainer, "pend", pendingAlert);
   b4a58:	4a65      	ldr	r2, [pc, #404]	; (b4bf0 <_Z7setTypeii+0x204>)
   b4a5a:	ab05      	add	r3, sp, #20
   b4a5c:	4639      	mov	r1, r7
   b4a5e:	4630      	mov	r0, r6
   b4a60:	f7ff fb4d 	bl	b40fe <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
	jp.getValueByKey(nodeObjectContainer, "cont", pendingAlertContext);
   b4a64:	4a63      	ldr	r2, [pc, #396]	; (b4bf4 <_Z7setTypeii+0x208>)
   b4a66:	ab06      	add	r3, sp, #24
   b4a68:	4639      	mov	r1, r7
   b4a6a:	4630      	mov	r0, r6
   b4a6c:	f7ff fb47 	bl	b40fe <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
	Log.info("Changing sensor type from %d to %d", type, newType);
   b4a70:	9a02      	ldr	r2, [sp, #8]
   b4a72:	4961      	ldr	r1, [pc, #388]	; (b4bf8 <_Z7setTypeii+0x20c>)
   b4a74:	4861      	ldr	r0, [pc, #388]	; (b4bfc <_Z7setTypeii+0x210>)
   b4a76:	462b      	mov	r3, r5
   b4a78:	f7ff fb78 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
	switch (newType) {
   b4a7c:	2d13      	cmp	r5, #19
   b4a7e:	dc1b      	bgt.n	b4ab8 <_Z7setTypeii+0xcc>
   b4a80:	2d09      	cmp	r5, #9
   b4a82:	dc1d      	bgt.n	b4ac0 <_Z7setTypeii+0xd4>
   b4a84:	1e6b      	subs	r3, r5, #1
   b4a86:	2b08      	cmp	r3, #8
   b4a88:	d971      	bls.n	b4b6e <_Z7setTypeii+0x182>
			Log.info("Unable to update to new sensorType in setType: %d", newType);
   b4a8a:	495d      	ldr	r1, [pc, #372]	; (b4c00 <_Z7setTypeii+0x214>)
   b4a8c:	485b      	ldr	r0, [pc, #364]	; (b4bfc <_Z7setTypeii+0x210>)
   b4a8e:	462a      	mov	r2, r5
   b4a90:	f7ff fb6c 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b4a94:	f001 fea2 	bl	b67dc <spark_cloud_flag_connected>
			if (Particle.connected()) Particle.publish("Alert", "Unable to update to new sensorType in setType", PRIVATE);
   b4a98:	2800      	cmp	r0, #0
   b4a9a:	d056      	beq.n	b4b4a <_Z7setTypeii+0x15e>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   b4a9c:	4b59      	ldr	r3, [pc, #356]	; (b4c04 <_Z7setTypeii+0x218>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b4a9e:	4a5a      	ldr	r2, [pc, #360]	; (b4c08 <_Z7setTypeii+0x21c>)
   b4aa0:	781b      	ldrb	r3, [r3, #0]
   b4aa2:	f88d 3000 	strb.w	r3, [sp]
   b4aa6:	a808      	add	r0, sp, #32
   b4aa8:	4958      	ldr	r1, [pc, #352]	; (b4c0c <_Z7setTypeii+0x220>)
   b4aaa:	233c      	movs	r3, #60	; 0x3c
   b4aac:	f002 f946 	bl	b6d3c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   b4ab0:	a809      	add	r0, sp, #36	; 0x24
   b4ab2:	f7ff fbd7 	bl	b4264 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b4ab6:	e048      	b.n	b4b4a <_Z7setTypeii+0x15e>
	switch (newType) {
   b4ab8:	f1a5 0314 	sub.w	r3, r5, #20
   b4abc:	2b09      	cmp	r3, #9
   b4abe:	e7e3      	b.n	b4a88 <_Z7setTypeii+0x9c>
			Log.info("Removing array index");
   b4ac0:	4953      	ldr	r1, [pc, #332]	; (b4c10 <_Z7setTypeii+0x224>)
   b4ac2:	484e      	ldr	r0, [pc, #312]	; (b4bfc <_Z7setTypeii+0x210>)
   b4ac4:	f7ff fb52 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
			mod.removeArrayIndex(nodesArrayContainer, nodeNumber-1);	// remove the JSON as it was
   b4ac8:	4642      	mov	r2, r8
   b4aca:	9907      	ldr	r1, [sp, #28]
   b4acc:	a80a      	add	r0, sp, #40	; 0x28
   b4ace:	f001 f80c 	bl	b5aea <_ZN12JsonModifier16removeArrayIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj>
			mod.startAppend(jp.getOuterArray());						// insert it back, but with the type specific variables for counter
   b4ad2:	4630      	mov	r0, r6
   b4ad4:	f000 fa96 	bl	b5004 <_ZNK10JsonParser13getOuterArrayEv>
   b4ad8:	4601      	mov	r1, r0
   b4ada:	a80a      	add	r0, sp, #40	; 0x28
   b4adc:	f000 fd60 	bl	b55a0 <_ZN12JsonModifier11startAppendEPKN21JsonParserGeneratorRK9jsmntok_tE>
				mod.startObject();
   b4ae0:	a80a      	add	r0, sp, #40	; 0x28
   b4ae2:	f7ff fb1a 	bl	b411a <_ZN10JsonWriter11startObjectEv.isra.0>
					mod.insertKeyValue("node", nodeNumber);
   b4ae6:	494b      	ldr	r1, [pc, #300]	; (b4c14 <_Z7setTypeii+0x228>)
   b4ae8:	4622      	mov	r2, r4
   b4aea:	a80a      	add	r0, sp, #40	; 0x28
   b4aec:	f7ff fdee 	bl	b46cc <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>
					mod.insertKeyValue("uID", uniqueID);
   b4af0:	9a03      	ldr	r2, [sp, #12]
   b4af2:	493c      	ldr	r1, [pc, #240]	; (b4be4 <_Z7setTypeii+0x1f8>)
   b4af4:	a80a      	add	r0, sp, #40	; 0x28
   b4af6:	f7ff fe03 	bl	b4700 <_ZN10JsonWriter14insertKeyValueImEEvPKcT_>
					mod.insertKeyValue("type", newType);					
   b4afa:	493b      	ldr	r1, [pc, #236]	; (b4be8 <_Z7setTypeii+0x1fc>)
   b4afc:	462a      	mov	r2, r5
   b4afe:	a80a      	add	r0, sp, #40	; 0x28
   b4b00:	f7ff fde4 	bl	b46cc <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>
					mod.insertKeyValue("p", compressedJoinPayload);
   b4b04:	9a04      	ldr	r2, [sp, #16]
   b4b06:	4939      	ldr	r1, [pc, #228]	; (b4bec <_Z7setTypeii+0x200>)
   b4b08:	a80a      	add	r0, sp, #40	; 0x28
   b4b0a:	f7ff fddf 	bl	b46cc <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>
					mod.insertKeyValue("pend",pendingAlert);
   b4b0e:	9a05      	ldr	r2, [sp, #20]
   b4b10:	4937      	ldr	r1, [pc, #220]	; (b4bf0 <_Z7setTypeii+0x204>)
   b4b12:	a80a      	add	r0, sp, #40	; 0x28
   b4b14:	f7ff fdda 	bl	b46cc <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>
					mod.insertKeyValue("cont",pendingAlertContext);
   b4b18:	9a06      	ldr	r2, [sp, #24]
   b4b1a:	4936      	ldr	r1, [pc, #216]	; (b4bf4 <_Z7setTypeii+0x208>)
   b4b1c:	a80a      	add	r0, sp, #40	; 0x28
   b4b1e:	f7ff fdd5 	bl	b46cc <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>
					mod.insertKeyValue("occN",(int)0);
   b4b22:	493d      	ldr	r1, [pc, #244]	; (b4c18 <_Z7setTypeii+0x22c>)
   b4b24:	2200      	movs	r2, #0
   b4b26:	a80a      	add	r0, sp, #40	; 0x28
   b4b28:	f7ff fdd0 	bl	b46cc <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>
					mod.insertKeyValue("occG",(int)0);
   b4b2c:	493b      	ldr	r1, [pc, #236]	; (b4c1c <_Z7setTypeii+0x230>)
   b4b2e:	2200      	movs	r2, #0
   b4b30:	a80a      	add	r0, sp, #40	; 0x28
   b4b32:	f7ff fdcb 	bl	b46cc <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>
				mod.finishObjectOrArray();
   b4b36:	a80a      	add	r0, sp, #40	; 0x28
   b4b38:	f000 fc2c 	bl	b5394 <_ZN10JsonWriter19finishObjectOrArrayEv>
			mod.finish();
   b4b3c:	a80a      	add	r0, sp, #40	; 0x28
   b4b3e:	f001 f80d 	bl	b5b5c <_ZN12JsonModifier6finishEv>
			Log.info("append complete");
   b4b42:	4937      	ldr	r1, [pc, #220]	; (b4c20 <_Z7setTypeii+0x234>)
   b4b44:	482d      	ldr	r0, [pc, #180]	; (b4bfc <_Z7setTypeii+0x210>)
   b4b46:	f7ff fb11 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
	nodeDatabase.set_nodeIDJson(jp.getBuffer());									// This should backup the nodeID database - now updated to persistent storage
   b4b4a:	f001 f8cb 	bl	b5ce4 <_ZN10nodeIDData8instanceEv>
   b4b4e:	6871      	ldr	r1, [r6, #4]
   b4b50:	f001 f8fe 	bl	b5d50 <_ZN10nodeIDData14set_nodeIDJsonEPKc>
	nodeDatabase.flush(false);													// Store the nodeDatabase into memory
   b4b54:	f001 f8c6 	bl	b5ce4 <_ZN10nodeIDData8instanceEv>
   b4b58:	6803      	ldr	r3, [r0, #0]
   b4b5a:	2100      	movs	r1, #0
   b4b5c:	68db      	ldr	r3, [r3, #12]
   b4b5e:	4798      	blx	r3
	JsonModifier mod(jp);
   b4b60:	a80a      	add	r0, sp, #40	; 0x28
   b4b62:	f000 f9c9 	bl	b4ef8 <_ZN12JsonModifierD1Ev>
	return true;
   b4b66:	2001      	movs	r0, #1
}
   b4b68:	b01a      	add	sp, #104	; 0x68
   b4b6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			mod.removeArrayIndex(nodesArrayContainer, nodeNumber-1);	// remove the JSON as it was
   b4b6e:	4642      	mov	r2, r8
   b4b70:	9907      	ldr	r1, [sp, #28]
   b4b72:	a80a      	add	r0, sp, #40	; 0x28
   b4b74:	f000 ffb9 	bl	b5aea <_ZN12JsonModifier16removeArrayIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj>
			mod.startAppend(jp.getOuterArray());						// insert it back, but with the type specific variables for counter
   b4b78:	4630      	mov	r0, r6
   b4b7a:	f000 fa43 	bl	b5004 <_ZNK10JsonParser13getOuterArrayEv>
   b4b7e:	4601      	mov	r1, r0
   b4b80:	a80a      	add	r0, sp, #40	; 0x28
   b4b82:	f000 fd0d 	bl	b55a0 <_ZN12JsonModifier11startAppendEPKN21JsonParserGeneratorRK9jsmntok_tE>
				mod.startObject();
   b4b86:	a80a      	add	r0, sp, #40	; 0x28
   b4b88:	f7ff fac7 	bl	b411a <_ZN10JsonWriter11startObjectEv.isra.0>
					mod.insertKeyValue("node", nodeNumber);
   b4b8c:	4622      	mov	r2, r4
   b4b8e:	a80a      	add	r0, sp, #40	; 0x28
   b4b90:	4920      	ldr	r1, [pc, #128]	; (b4c14 <_Z7setTypeii+0x228>)
   b4b92:	f7ff fd9b 	bl	b46cc <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>
					mod.insertKeyValue("uID", uniqueID);
   b4b96:	9a03      	ldr	r2, [sp, #12]
   b4b98:	4912      	ldr	r1, [pc, #72]	; (b4be4 <_Z7setTypeii+0x1f8>)
   b4b9a:	a80a      	add	r0, sp, #40	; 0x28
   b4b9c:	f7ff fdb0 	bl	b4700 <_ZN10JsonWriter14insertKeyValueImEEvPKcT_>
					mod.insertKeyValue("type", newType);					
   b4ba0:	462a      	mov	r2, r5
   b4ba2:	a80a      	add	r0, sp, #40	; 0x28
   b4ba4:	4910      	ldr	r1, [pc, #64]	; (b4be8 <_Z7setTypeii+0x1fc>)
   b4ba6:	f7ff fd91 	bl	b46cc <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>
					mod.insertKeyValue("p", compressedJoinPayload);
   b4baa:	9a04      	ldr	r2, [sp, #16]
   b4bac:	490f      	ldr	r1, [pc, #60]	; (b4bec <_Z7setTypeii+0x200>)
   b4bae:	a80a      	add	r0, sp, #40	; 0x28
   b4bb0:	f7ff fd8c 	bl	b46cc <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>
					mod.insertKeyValue("pend",pendingAlert);
   b4bb4:	9a05      	ldr	r2, [sp, #20]
   b4bb6:	490e      	ldr	r1, [pc, #56]	; (b4bf0 <_Z7setTypeii+0x204>)
   b4bb8:	a80a      	add	r0, sp, #40	; 0x28
   b4bba:	f7ff fd87 	bl	b46cc <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>
					mod.insertKeyValue("cont",pendingAlertContext);
   b4bbe:	9a06      	ldr	r2, [sp, #24]
   b4bc0:	490c      	ldr	r1, [pc, #48]	; (b4bf4 <_Z7setTypeii+0x208>)
   b4bc2:	a80a      	add	r0, sp, #40	; 0x28
   b4bc4:	f7ff fd82 	bl	b46cc <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>
				mod.finishObjectOrArray();
   b4bc8:	a80a      	add	r0, sp, #40	; 0x28
   b4bca:	f000 fbe3 	bl	b5394 <_ZN10JsonWriter19finishObjectOrArrayEv>
			mod.finish();
   b4bce:	a80a      	add	r0, sp, #40	; 0x28
   b4bd0:	f000 ffc4 	bl	b5b5c <_ZN12JsonModifier6finishEv>
		} break;
   b4bd4:	e7b9      	b.n	b4b4a <_Z7setTypeii+0x15e>
	if (nodeNumber == 0 || nodeNumber == 255) return false;
   b4bd6:	2000      	movs	r0, #0
   b4bd8:	e7c6      	b.n	b4b68 <_Z7setTypeii+0x17c>
   b4bda:	bf00      	nop
   b4bdc:	2003b7b4 	.word	0x2003b7b4
   b4be0:	000b9557 	.word	0x000b9557
   b4be4:	000b9649 	.word	0x000b9649
   b4be8:	000b955d 	.word	0x000b955d
   b4bec:	000ba2d0 	.word	0x000ba2d0
   b4bf0:	000b9652 	.word	0x000b9652
   b4bf4:	000b9657 	.word	0x000b9657
   b4bf8:	000b97ef 	.word	0x000b97ef
   b4bfc:	2003e6b0 	.word	0x2003e6b0
   b4c00:	000b9837 	.word	0x000b9837
   b4c04:	2003b7b0 	.word	0x2003b7b0
   b4c08:	000b9869 	.word	0x000b9869
   b4c0c:	000b9643 	.word	0x000b9643
   b4c10:	000b9812 	.word	0x000b9812
   b4c14:	000b964d 	.word	0x000b964d
   b4c18:	000b965c 	.word	0x000b965c
   b4c1c:	000b9661 	.word	0x000b9661
   b4c20:	000b9827 	.word	0x000b9827

000b4c24 <setup>:
void setup() {
   b4c24:	b570      	push	{r4, r5, r6, lr}
   b4c26:	ed2d 8b02 	vpush	{d8}
	delay(2000);                        // Give the serial port time to connect
   b4c2a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
void setup() {
   b4c2e:	b086      	sub	sp, #24
	delay(2000);                        // Give the serial port time to connect
   b4c30:	f001 feac 	bl	b698c <delay>
	nodeIDData::instance().setup();		// Initialize the nodeDatabase
   b4c34:	f001 f856 	bl	b5ce4 <_ZN10nodeIDData8instanceEv>
   b4c38:	6803      	ldr	r3, [r0, #0]
	printTokens(jp, false);
   b4c3a:	4c81      	ldr	r4, [pc, #516]	; (b4e40 <setup+0x21c>)
	nodeIDData::instance().setup();		// Initialize the nodeDatabase
   b4c3c:	681b      	ldr	r3, [r3, #0]
   b4c3e:	4798      	blx	r3
	Log.info("Starting tests");
   b4c40:	4980      	ldr	r1, [pc, #512]	; (b4e44 <setup+0x220>)
   b4c42:	4881      	ldr	r0, [pc, #516]	; (b4e48 <setup+0x224>)
   b4c44:	f7ff fa92 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
	Log.info("First Test, we will clear the Node Database and load the sample data set");
   b4c48:	4980      	ldr	r1, [pc, #512]	; (b4e4c <setup+0x228>)
   b4c4a:	487f      	ldr	r0, [pc, #508]	; (b4e48 <setup+0x224>)
   b4c4c:	f7ff fa8e 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
	nodeDatabase.resetNodeIDs();	// Clear the Node Database
   b4c50:	f001 f848 	bl	b5ce4 <_ZN10nodeIDData8instanceEv>
   b4c54:	f001 f8fa 	bl	b5e4c <_ZN10nodeIDData12resetNodeIDsEv>
	printTokens(jp, false);
   b4c58:	2100      	movs	r1, #0
   b4c5a:	4620      	mov	r0, r4
   b4c5c:	f7ff fb18 	bl	b4290 <_Z11printTokensR10JsonParserb>
	Log.info("Now that the nodeDatabase is empty, we will load the sample data set");
   b4c60:	497b      	ldr	r1, [pc, #492]	; (b4e50 <setup+0x22c>)
   b4c62:	4879      	ldr	r0, [pc, #484]	; (b4e48 <setup+0x224>)
   b4c64:	f7ff fa82 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
	bool addString(const char *data) { return addData(data, strlen(data)); }
   b4c68:	f44f 7268 	mov.w	r2, #928	; 0x3a0
   b4c6c:	4979      	ldr	r1, [pc, #484]	; (b4e54 <setup+0x230>)
   b4c6e:	4620      	mov	r0, r4
   b4c70:	f000 f991 	bl	b4f96 <_ZN10JsonBuffer7addDataEPKcj>
	jp.parse();
   b4c74:	4620      	mov	r0, r4
   b4c76:	f000 feeb 	bl	b5a50 <_ZN10JsonParser5parseEv>
	printTokens(jp, false);
   b4c7a:	2100      	movs	r1, #0
   b4c7c:	4620      	mov	r0, r4
   b4c7e:	f7ff fb07 	bl	b4290 <_Z11printTokensR10JsonParserb>
	Log.info("Next, we will load and store the node database into memory");
   b4c82:	4975      	ldr	r1, [pc, #468]	; (b4e58 <setup+0x234>)
   b4c84:	4870      	ldr	r0, [pc, #448]	; (b4e48 <setup+0x224>)
   b4c86:	f7ff fa71 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
	nodeDatabase.set_nodeIDJson(data);				// Load the text object from this sketch into the nodeDatabase
   b4c8a:	f001 f82b 	bl	b5ce4 <_ZN10nodeIDData8instanceEv>
   b4c8e:	4971      	ldr	r1, [pc, #452]	; (b4e54 <setup+0x230>)
   b4c90:	f001 f85e 	bl	b5d50 <_ZN10nodeIDData14set_nodeIDJsonEPKc>
	nodeDatabase.flush(false);						// Store the nodeDatabase into memory
   b4c94:	f001 f826 	bl	b5ce4 <_ZN10nodeIDData8instanceEv>
   b4c98:	6803      	ldr	r3, [r0, #0]
   b4c9a:	2100      	movs	r1, #0
   b4c9c:	68db      	ldr	r3, [r3, #12]
   b4c9e:	4798      	blx	r3
	Log.info("Note that our JSON object allocation is %4.2f%% of the memory allocated (less than 100%% is OK)", 100*(float)jp.getBufferLen()/(float)nodeDatabase.nodeDataStorageSize());
   b4ca0:	edd4 7a02 	vldr	s15, [r4, #8]
   b4ca4:	eeb8 8a67 	vcvt.f32.u32	s16, s15
   b4ca8:	eddf 7a6c 	vldr	s15, [pc, #432]	; b4e5c <setup+0x238>
   b4cac:	ee28 8a27 	vmul.f32	s16, s16, s15
   b4cb0:	f001 f818 	bl	b5ce4 <_ZN10nodeIDData8instanceEv>
   b4cb4:	f001 f836 	bl	b5d24 <_ZN10nodeIDData19nodeDataStorageSizeEv>
   b4cb8:	ee07 0a90 	vmov	s15, r0
   b4cbc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b4cc0:	eec8 7a27 	vdiv.f32	s15, s16, s15
   b4cc4:	ee17 0a90 	vmov	r0, s15
   b4cc8:	f004 f9ec 	bl	b90a4 <__aeabi_f2d>
   b4ccc:	460b      	mov	r3, r1
   b4cce:	4602      	mov	r2, r0
   b4cd0:	4963      	ldr	r1, [pc, #396]	; (b4e60 <setup+0x23c>)
   b4cd2:	485d      	ldr	r0, [pc, #372]	; (b4e48 <setup+0x224>)
   b4cd4:	f7ff fa4a 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
	jp.clear();										// Clear the JSON object from memory
   b4cd8:	4620      	mov	r0, r4
   b4cda:	f000 f979 	bl	b4fd0 <_ZN10JsonBuffer5clearEv>
	jp.addString(nodeDatabase.get_nodeIDJson());	// Read in the JSON string from memory
   b4cde:	f001 f801 	bl	b5ce4 <_ZN10nodeIDData8instanceEv>
   b4ce2:	4601      	mov	r1, r0
   b4ce4:	a802      	add	r0, sp, #8
   b4ce6:	f001 f821 	bl	b5d2c <_ZNK10nodeIDData14get_nodeIDJsonEv>
    char operator [] (unsigned int index) const;
    char& operator [] (unsigned int index);
    void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
    void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
        {getBytes((unsigned char *)buf, bufsize, index);}
    const char * c_str() const { return buffer; }
   b4cea:	9902      	ldr	r1, [sp, #8]
   b4cec:	9101      	str	r1, [sp, #4]
   b4cee:	4608      	mov	r0, r1
   b4cf0:	f004 fae3 	bl	b92ba <strlen>
   b4cf4:	9901      	ldr	r1, [sp, #4]
   b4cf6:	4602      	mov	r2, r0
   b4cf8:	4620      	mov	r0, r4
   b4cfa:	f000 f94c 	bl	b4f96 <_ZN10JsonBuffer7addDataEPKcj>
   b4cfe:	a802      	add	r0, sp, #8
   b4d00:	f003 fd5e 	bl	b87c0 <_ZN6StringD1Ev>
	Log.info("The node string is: %s",nodeDatabase.get_nodeIDJson().c_str());
   b4d04:	f000 ffee 	bl	b5ce4 <_ZN10nodeIDData8instanceEv>
   b4d08:	4601      	mov	r1, r0
   b4d0a:	a802      	add	r0, sp, #8
   b4d0c:	f001 f80e 	bl	b5d2c <_ZNK10nodeIDData14get_nodeIDJsonEv>
   b4d10:	9a02      	ldr	r2, [sp, #8]
   b4d12:	4954      	ldr	r1, [pc, #336]	; (b4e64 <setup+0x240>)
   b4d14:	484c      	ldr	r0, [pc, #304]	; (b4e48 <setup+0x224>)
   b4d16:	f7ff fa29 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
   b4d1a:	a802      	add	r0, sp, #8
   b4d1c:	f003 fd50 	bl	b87c0 <_ZN6StringD1Ev>
	if (jp.parse()) Log.info("Parsed Successfully");
   b4d20:	4620      	mov	r0, r4
   b4d22:	f000 fe95 	bl	b5a50 <_ZN10JsonParser5parseEv>
   b4d26:	2800      	cmp	r0, #0
   b4d28:	f000 8084 	beq.w	b4e34 <setup+0x210>
   b4d2c:	494e      	ldr	r1, [pc, #312]	; (b4e68 <setup+0x244>)
		Log.info("Parsing error");
   b4d2e:	4846      	ldr	r0, [pc, #280]	; (b4e48 <setup+0x224>)
	byte nodeNumber = findNodeNumber(uniqueID_1);
   b4d30:	4c4e      	ldr	r4, [pc, #312]	; (b4e6c <setup+0x248>)
	setType(nodeNumber, sensorType_2);
   b4d32:	4e4f      	ldr	r6, [pc, #316]	; (b4e70 <setup+0x24c>)
	setType(nodeNumber, sensorType_3);
   b4d34:	4d4f      	ldr	r5, [pc, #316]	; (b4e74 <setup+0x250>)
		Log.info("Parsing error");
   b4d36:	f7ff fa19 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
	printTokens(jp, false);
   b4d3a:	4841      	ldr	r0, [pc, #260]	; (b4e40 <setup+0x21c>)
   b4d3c:	2100      	movs	r1, #0
   b4d3e:	f7ff faa7 	bl	b4290 <_Z11printTokensR10JsonParserb>
	Log.info("Finally, we will add a new node to the database and print the database");
   b4d42:	494d      	ldr	r1, [pc, #308]	; (b4e78 <setup+0x254>)
   b4d44:	4840      	ldr	r0, [pc, #256]	; (b4e48 <setup+0x224>)
   b4d46:	f7ff fa11 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
	byte nodeNumber = findNodeNumber(uniqueID_1);
   b4d4a:	6820      	ldr	r0, [r4, #0]
   b4d4c:	f7ff fdc4 	bl	b48d8 <_Z14findNodeNumberm>
	Log.info("The node number is: %d",nodeNumber);
   b4d50:	494a      	ldr	r1, [pc, #296]	; (b4e7c <setup+0x258>)
	byte nodeNumber = findNodeNumber(uniqueID_1);
   b4d52:	4602      	mov	r2, r0
	Log.info("The node number is: %d",nodeNumber);
   b4d54:	483c      	ldr	r0, [pc, #240]	; (b4e48 <setup+0x224>)
   b4d56:	f7ff fa09 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
	printTokens(jp, false);
   b4d5a:	2100      	movs	r1, #0
   b4d5c:	4838      	ldr	r0, [pc, #224]	; (b4e40 <setup+0x21c>)
   b4d5e:	f7ff fa97 	bl	b4290 <_Z11printTokensR10JsonParserb>
	printNodeData(false);
   b4d62:	2000      	movs	r0, #0
   b4d64:	f7ff fba6 	bl	b44b4 <_Z13printNodeDatab>
	Log.info("Now we will change the type of the node and print the database");
   b4d68:	4945      	ldr	r1, [pc, #276]	; (b4e80 <setup+0x25c>)
   b4d6a:	4837      	ldr	r0, [pc, #220]	; (b4e48 <setup+0x224>)
   b4d6c:	f7ff f9fe 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
	nodeNumber = findNodeNumber(uniqueID_1);
   b4d70:	6820      	ldr	r0, [r4, #0]
   b4d72:	f7ff fdb1 	bl	b48d8 <_Z14findNodeNumberm>
   b4d76:	4604      	mov	r4, r0
	byte currentType = getType(nodeNumber);
   b4d78:	f7ff fa36 	bl	b41e8 <_Z7getTypei>
	Log.info("The current type for node number %d is: %d",nodeNumber, currentType);
   b4d7c:	4622      	mov	r2, r4
	byte currentType = getType(nodeNumber);
   b4d7e:	4603      	mov	r3, r0
	Log.info("The current type for node number %d is: %d",nodeNumber, currentType);
   b4d80:	4940      	ldr	r1, [pc, #256]	; (b4e84 <setup+0x260>)
   b4d82:	4831      	ldr	r0, [pc, #196]	; (b4e48 <setup+0x224>)
   b4d84:	f7ff f9f2 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
	setType(nodeNumber, sensorType_2);
   b4d88:	6831      	ldr	r1, [r6, #0]
   b4d8a:	4620      	mov	r0, r4
   b4d8c:	f7ff fe2e 	bl	b49ec <_Z7setTypeii>
	currentType = getType(nodeNumber);
   b4d90:	4620      	mov	r0, r4
   b4d92:	f7ff fa29 	bl	b41e8 <_Z7getTypei>
	Log.info("The new type for node number %d is: %d",nodeNumber, currentType);
   b4d96:	4622      	mov	r2, r4
	currentType = getType(nodeNumber);
   b4d98:	4603      	mov	r3, r0
	Log.info("The new type for node number %d is: %d",nodeNumber, currentType);
   b4d9a:	493b      	ldr	r1, [pc, #236]	; (b4e88 <setup+0x264>)
   b4d9c:	482a      	ldr	r0, [pc, #168]	; (b4e48 <setup+0x224>)
   b4d9e:	f7ff f9e5 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
	Log.info("Now we will change the type which will alter its structure and print the database");
   b4da2:	493a      	ldr	r1, [pc, #232]	; (b4e8c <setup+0x268>)
   b4da4:	4828      	ldr	r0, [pc, #160]	; (b4e48 <setup+0x224>)
   b4da6:	f7ff f9e1 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
	setType(nodeNumber, sensorType_3);
   b4daa:	6829      	ldr	r1, [r5, #0]
   b4dac:	4620      	mov	r0, r4
   b4dae:	f7ff fe1d 	bl	b49ec <_Z7setTypeii>
	printTokens(jp, false);
   b4db2:	2100      	movs	r1, #0
   b4db4:	4822      	ldr	r0, [pc, #136]	; (b4e40 <setup+0x21c>)
   b4db6:	f7ff fa6b 	bl	b4290 <_Z11printTokensR10JsonParserb>
	printNodeData(false);
   b4dba:	2000      	movs	r0, #0
   b4dbc:	f7ff fb7a 	bl	b44b4 <_Z13printNodeDatab>
	Log.info("Now we will change the type on a note that is in the middle of the pack and then change it back. ");
   b4dc0:	4933      	ldr	r1, [pc, #204]	; (b4e90 <setup+0x26c>)
   b4dc2:	4821      	ldr	r0, [pc, #132]	; (b4e48 <setup+0x224>)
   b4dc4:	f7ff f9d2 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
	nodeNumber = findNodeNumber(uniqueID_2);
   b4dc8:	4b32      	ldr	r3, [pc, #200]	; (b4e94 <setup+0x270>)
   b4dca:	6818      	ldr	r0, [r3, #0]
   b4dcc:	f7ff fd84 	bl	b48d8 <_Z14findNodeNumberm>
   b4dd0:	4604      	mov	r4, r0
	currentType = getType(nodeNumber);
   b4dd2:	f7ff fa09 	bl	b41e8 <_Z7getTypei>
	Log.info("The current type for node number %d is: %d",nodeNumber, currentType);
   b4dd6:	4622      	mov	r2, r4
	currentType = getType(nodeNumber);
   b4dd8:	4603      	mov	r3, r0
	Log.info("The current type for node number %d is: %d",nodeNumber, currentType);
   b4dda:	492a      	ldr	r1, [pc, #168]	; (b4e84 <setup+0x260>)
   b4ddc:	481a      	ldr	r0, [pc, #104]	; (b4e48 <setup+0x224>)
   b4dde:	f7ff f9c5 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
	setType(nodeNumber, sensorType_2);
   b4de2:	6831      	ldr	r1, [r6, #0]
   b4de4:	4620      	mov	r0, r4
   b4de6:	f7ff fe01 	bl	b49ec <_Z7setTypeii>
	printNodeData(false);
   b4dea:	2000      	movs	r0, #0
   b4dec:	f7ff fb62 	bl	b44b4 <_Z13printNodeDatab>
	currentType = getType(nodeNumber);
   b4df0:	4620      	mov	r0, r4
   b4df2:	f7ff f9f9 	bl	b41e8 <_Z7getTypei>
	Log.info("The new type for node number %d is: %d",nodeNumber, currentType);
   b4df6:	4622      	mov	r2, r4
	currentType = getType(nodeNumber);
   b4df8:	4603      	mov	r3, r0
	Log.info("The new type for node number %d is: %d",nodeNumber, currentType);
   b4dfa:	4923      	ldr	r1, [pc, #140]	; (b4e88 <setup+0x264>)
   b4dfc:	4812      	ldr	r0, [pc, #72]	; (b4e48 <setup+0x224>)
   b4dfe:	f7ff f9b5 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
	setType(nodeNumber, sensorType_3);
   b4e02:	6829      	ldr	r1, [r5, #0]
   b4e04:	4620      	mov	r0, r4
   b4e06:	f7ff fdf1 	bl	b49ec <_Z7setTypeii>
	currentType = getType(nodeNumber);
   b4e0a:	4620      	mov	r0, r4
   b4e0c:	f7ff f9ec 	bl	b41e8 <_Z7getTypei>
	Log.info("The new type for node number %d is: %d",nodeNumber, currentType);
   b4e10:	4622      	mov	r2, r4
	currentType = getType(nodeNumber);
   b4e12:	4603      	mov	r3, r0
	Log.info("The new type for node number %d is: %d",nodeNumber, currentType);
   b4e14:	491c      	ldr	r1, [pc, #112]	; (b4e88 <setup+0x264>)
   b4e16:	480c      	ldr	r0, [pc, #48]	; (b4e48 <setup+0x224>)
   b4e18:	f7ff f9a8 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
	printTokens(jp, false);
   b4e1c:	4808      	ldr	r0, [pc, #32]	; (b4e40 <setup+0x21c>)
   b4e1e:	2100      	movs	r1, #0
   b4e20:	f7ff fa36 	bl	b4290 <_Z11printTokensR10JsonParserb>
	Log.info("Finished test");
   b4e24:	491c      	ldr	r1, [pc, #112]	; (b4e98 <setup+0x274>)
   b4e26:	4808      	ldr	r0, [pc, #32]	; (b4e48 <setup+0x224>)
   b4e28:	f7ff f9a0 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
}
   b4e2c:	b006      	add	sp, #24
   b4e2e:	ecbd 8b02 	vpop	{d8}
   b4e32:	bd70      	pop	{r4, r5, r6, pc}
		nodeDatabase.resetNodeIDs();
   b4e34:	f000 ff56 	bl	b5ce4 <_ZN10nodeIDData8instanceEv>
   b4e38:	f001 f808 	bl	b5e4c <_ZN10nodeIDData12resetNodeIDsEv>
		Log.info("Parsing error");
   b4e3c:	4917      	ldr	r1, [pc, #92]	; (b4e9c <setup+0x278>)
   b4e3e:	e776      	b.n	b4d2e <setup+0x10a>
   b4e40:	2003b7b4 	.word	0x2003b7b4
   b4e44:	000b9897 	.word	0x000b9897
   b4e48:	2003e6b0 	.word	0x2003e6b0
   b4e4c:	000b98a6 	.word	0x000b98a6
   b4e50:	000b98ef 	.word	0x000b98ef
   b4e54:	000b9934 	.word	0x000b9934
   b4e58:	000b9cd5 	.word	0x000b9cd5
   b4e5c:	42c80000 	.word	0x42c80000
   b4e60:	000b9d10 	.word	0x000b9d10
   b4e64:	000b9d70 	.word	0x000b9d70
   b4e68:	000b9d87 	.word	0x000b9d87
   b4e6c:	2003b704 	.word	0x2003b704
   b4e70:	2003b6fc 	.word	0x2003b6fc
   b4e74:	2003b700 	.word	0x2003b700
   b4e78:	000b9da9 	.word	0x000b9da9
   b4e7c:	000b9df0 	.word	0x000b9df0
   b4e80:	000b9e07 	.word	0x000b9e07
   b4e84:	000b9e46 	.word	0x000b9e46
   b4e88:	000b9e71 	.word	0x000b9e71
   b4e8c:	000b9e98 	.word	0x000b9e98
   b4e90:	000b9eea 	.word	0x000b9eea
   b4e94:	2003b708 	.word	0x2003b708
   b4e98:	000b9f4c 	.word	0x000b9f4c
   b4e9c:	000b9d9b 	.word	0x000b9d9b

000b4ea0 <_ZN10JsonBufferD1Ev>:


JsonBuffer::JsonBuffer()  : buffer(0), bufferLen(0), offset(0), staticBuffers(false) {

}
JsonBuffer::~JsonBuffer() {
   b4ea0:	b510      	push	{r4, lr}
   b4ea2:	4b05      	ldr	r3, [pc, #20]	; (b4eb8 <_ZN10JsonBufferD1Ev+0x18>)
   b4ea4:	6003      	str	r3, [r0, #0]
	if (!staticBuffers && buffer) {
   b4ea6:	7c03      	ldrb	r3, [r0, #16]
JsonBuffer::~JsonBuffer() {
   b4ea8:	4604      	mov	r4, r0
	if (!staticBuffers && buffer) {
   b4eaa:	b91b      	cbnz	r3, b4eb4 <_ZN10JsonBufferD1Ev+0x14>
   b4eac:	6840      	ldr	r0, [r0, #4]
   b4eae:	b108      	cbz	r0, b4eb4 <_ZN10JsonBufferD1Ev+0x14>
		free(buffer);
   b4eb0:	f001 fd14 	bl	b68dc <free>
	}
}
   b4eb4:	4620      	mov	r0, r4
   b4eb6:	bd10      	pop	{r4, pc}
   b4eb8:	000b9fac 	.word	0x000b9fac

000b4ebc <_ZN10JsonBufferD0Ev>:
JsonBuffer::~JsonBuffer() {
   b4ebc:	b510      	push	{r4, lr}
   b4ebe:	4604      	mov	r4, r0
}
   b4ec0:	f7ff ffee 	bl	b4ea0 <_ZN10JsonBufferD1Ev>
   b4ec4:	4620      	mov	r0, r4
   b4ec6:	2114      	movs	r1, #20
   b4ec8:	f7ff f8e7 	bl	b409a <_ZdlPvj>
   b4ecc:	4620      	mov	r0, r4
   b4ece:	bd10      	pop	{r4, pc}

000b4ed0 <_ZN10JsonWriterD1Ev>:
//
JsonWriter::JsonWriter() : JsonBuffer(), floatPlaces(-1) {
	init();
}

JsonWriter::~JsonWriter() {
   b4ed0:	b510      	push	{r4, lr}
   b4ed2:	4b03      	ldr	r3, [pc, #12]	; (b4ee0 <_ZN10JsonWriterD1Ev+0x10>)
   b4ed4:	6003      	str	r3, [r0, #0]
   b4ed6:	4604      	mov	r4, r0
   b4ed8:	f7ff ffe2 	bl	b4ea0 <_ZN10JsonBufferD1Ev>

}
   b4edc:	4620      	mov	r0, r4
   b4ede:	bd10      	pop	{r4, pc}
   b4ee0:	000b9fcc 	.word	0x000b9fcc

000b4ee4 <_ZN10JsonWriterD0Ev>:
JsonWriter::~JsonWriter() {
   b4ee4:	b510      	push	{r4, lr}
   b4ee6:	4604      	mov	r4, r0
}
   b4ee8:	f7ff fff2 	bl	b4ed0 <_ZN10JsonWriterD1Ev>
   b4eec:	4620      	mov	r0, r4
   b4eee:	2130      	movs	r1, #48	; 0x30
   b4ef0:	f7ff f8d3 	bl	b409a <_ZdlPvj>
   b4ef4:	4620      	mov	r0, r4
   b4ef6:	bd10      	pop	{r4, pc}

000b4ef8 <_ZN12JsonModifierD1Ev>:

JsonModifier::JsonModifier(JsonParser &jp) : jp(jp) {

}

JsonModifier::~JsonModifier() {
   b4ef8:	b510      	push	{r4, lr}
   b4efa:	4b03      	ldr	r3, [pc, #12]	; (b4f08 <_ZN12JsonModifierD1Ev+0x10>)
   b4efc:	6003      	str	r3, [r0, #0]
   b4efe:	4604      	mov	r4, r0
   b4f00:	f7ff ffe6 	bl	b4ed0 <_ZN10JsonWriterD1Ev>

}
   b4f04:	4620      	mov	r0, r4
   b4f06:	bd10      	pop	{r4, pc}
   b4f08:	000b9fdc 	.word	0x000b9fdc

000b4f0c <_ZN12JsonModifierD0Ev>:
JsonModifier::~JsonModifier() {
   b4f0c:	b510      	push	{r4, lr}
   b4f0e:	4604      	mov	r4, r0
}
   b4f10:	f7ff fff2 	bl	b4ef8 <_ZN12JsonModifierD1Ev>
   b4f14:	4620      	mov	r0, r4
   b4f16:	2140      	movs	r1, #64	; 0x40
   b4f18:	f7ff f8bf 	bl	b409a <_ZdlPvj>
   b4f1c:	4620      	mov	r0, r4
   b4f1e:	bd10      	pop	{r4, pc}

000b4f20 <_ZN10JsonParserD1Ev>:
JsonParser::~JsonParser() {
   b4f20:	b510      	push	{r4, lr}
   b4f22:	4b07      	ldr	r3, [pc, #28]	; (b4f40 <_ZN10JsonParserD1Ev+0x20>)
   b4f24:	6003      	str	r3, [r0, #0]
	if (!staticBuffers && tokens) {
   b4f26:	7c03      	ldrb	r3, [r0, #16]
JsonParser::~JsonParser() {
   b4f28:	4604      	mov	r4, r0
	if (!staticBuffers && tokens) {
   b4f2a:	b91b      	cbnz	r3, b4f34 <_ZN10JsonParserD1Ev+0x14>
   b4f2c:	6940      	ldr	r0, [r0, #20]
   b4f2e:	b108      	cbz	r0, b4f34 <_ZN10JsonParserD1Ev+0x14>
		free(tokens);
   b4f30:	f001 fcd4 	bl	b68dc <free>
JsonParser::~JsonParser() {
   b4f34:	4620      	mov	r0, r4
   b4f36:	f7ff ffb3 	bl	b4ea0 <_ZN10JsonBufferD1Ev>
}
   b4f3a:	4620      	mov	r0, r4
   b4f3c:	bd10      	pop	{r4, pc}
   b4f3e:	bf00      	nop
   b4f40:	000b9fbc 	.word	0x000b9fbc

000b4f44 <_ZN10JsonParserD0Ev>:
JsonParser::~JsonParser() {
   b4f44:	b510      	push	{r4, lr}
   b4f46:	4604      	mov	r4, r0
}
   b4f48:	f7ff ffea 	bl	b4f20 <_ZN10JsonParserD1Ev>
   b4f4c:	4620      	mov	r0, r4
   b4f4e:	212c      	movs	r1, #44	; 0x2c
   b4f50:	f7ff f8a3 	bl	b409a <_ZdlPvj>
   b4f54:	4620      	mov	r0, r4
   b4f56:	bd10      	pop	{r4, pc}

000b4f58 <_ZN10JsonBufferC1Ev>:
JsonBuffer::JsonBuffer()  : buffer(0), bufferLen(0), offset(0), staticBuffers(false) {
   b4f58:	4a03      	ldr	r2, [pc, #12]	; (b4f68 <_ZN10JsonBufferC1Ev+0x10>)
   b4f5a:	6002      	str	r2, [r0, #0]
   b4f5c:	2200      	movs	r2, #0
   b4f5e:	e9c0 2201 	strd	r2, r2, [r0, #4]
   b4f62:	60c2      	str	r2, [r0, #12]
   b4f64:	7402      	strb	r2, [r0, #16]
}
   b4f66:	4770      	bx	lr
   b4f68:	000b9fac 	.word	0x000b9fac

000b4f6c <_ZN10JsonBuffer8allocateEj>:
bool JsonBuffer::allocate(size_t len) {
   b4f6c:	b538      	push	{r3, r4, r5, lr}
	if (!staticBuffers) {
   b4f6e:	7c03      	ldrb	r3, [r0, #16]
bool JsonBuffer::allocate(size_t len) {
   b4f70:	4604      	mov	r4, r0
   b4f72:	460d      	mov	r5, r1
	if (!staticBuffers) {
   b4f74:	b10b      	cbz	r3, b4f7a <_ZN10JsonBuffer8allocateEj+0xe>
		return false;
   b4f76:	2000      	movs	r0, #0
}
   b4f78:	bd38      	pop	{r3, r4, r5, pc}
		if (buffer) {
   b4f7a:	6840      	ldr	r0, [r0, #4]
   b4f7c:	b138      	cbz	r0, b4f8e <_ZN10JsonBuffer8allocateEj+0x22>
			newBuffer = (char *) realloc(buffer, len);
   b4f7e:	f001 fcb5 	bl	b68ec <realloc>
		if (newBuffer) {
   b4f82:	2800      	cmp	r0, #0
   b4f84:	d0f7      	beq.n	b4f76 <_ZN10JsonBuffer8allocateEj+0xa>
			bufferLen = len;
   b4f86:	e9c4 0501 	strd	r0, r5, [r4, #4]
			return true;
   b4f8a:	2001      	movs	r0, #1
   b4f8c:	e7f4      	b.n	b4f78 <_ZN10JsonBuffer8allocateEj+0xc>
			newBuffer = (char *) malloc(len);
   b4f8e:	4608      	mov	r0, r1
   b4f90:	f001 fc9c 	bl	b68cc <malloc>
   b4f94:	e7f5      	b.n	b4f82 <_ZN10JsonBuffer8allocateEj+0x16>

000b4f96 <_ZN10JsonBuffer7addDataEPKcj>:
bool JsonBuffer::addData(const char *data, size_t dataLen) {
   b4f96:	b570      	push	{r4, r5, r6, lr}
	if (!buffer || (offset + dataLen) > bufferLen) {
   b4f98:	68c3      	ldr	r3, [r0, #12]
bool JsonBuffer::addData(const char *data, size_t dataLen) {
   b4f9a:	460e      	mov	r6, r1
   b4f9c:	4615      	mov	r5, r2
	if (!buffer || (offset + dataLen) > bufferLen) {
   b4f9e:	18d1      	adds	r1, r2, r3
   b4fa0:	6842      	ldr	r2, [r0, #4]
bool JsonBuffer::addData(const char *data, size_t dataLen) {
   b4fa2:	4604      	mov	r4, r0
	if (!buffer || (offset + dataLen) > bufferLen) {
   b4fa4:	b172      	cbz	r2, b4fc4 <_ZN10JsonBuffer7addDataEPKcj+0x2e>
   b4fa6:	6882      	ldr	r2, [r0, #8]
   b4fa8:	428a      	cmp	r2, r1
   b4faa:	d30b      	bcc.n	b4fc4 <_ZN10JsonBuffer7addDataEPKcj+0x2e>
	memcpy(&buffer[offset], data, dataLen);
   b4fac:	6860      	ldr	r0, [r4, #4]
   b4fae:	68e3      	ldr	r3, [r4, #12]
   b4fb0:	462a      	mov	r2, r5
   b4fb2:	4631      	mov	r1, r6
   b4fb4:	4418      	add	r0, r3
   b4fb6:	f004 f8db 	bl	b9170 <memcpy>
	offset += dataLen;
   b4fba:	68e2      	ldr	r2, [r4, #12]
   b4fbc:	442a      	add	r2, r5
   b4fbe:	60e2      	str	r2, [r4, #12]
	return true;
   b4fc0:	2001      	movs	r0, #1
}
   b4fc2:	bd70      	pop	{r4, r5, r6, pc}
		if (!allocate(offset + dataLen)) {
   b4fc4:	4620      	mov	r0, r4
   b4fc6:	f7ff ffd1 	bl	b4f6c <_ZN10JsonBuffer8allocateEj>
   b4fca:	2800      	cmp	r0, #0
   b4fcc:	d1ee      	bne.n	b4fac <_ZN10JsonBuffer7addDataEPKcj+0x16>
   b4fce:	e7f8      	b.n	b4fc2 <_ZN10JsonBuffer7addDataEPKcj+0x2c>

000b4fd0 <_ZN10JsonBuffer5clearEv>:
	if (buffer && bufferLen) {
   b4fd0:	6843      	ldr	r3, [r0, #4]
	offset = 0;
   b4fd2:	2100      	movs	r1, #0
   b4fd4:	60c1      	str	r1, [r0, #12]
	if (buffer && bufferLen) {
   b4fd6:	b123      	cbz	r3, b4fe2 <_ZN10JsonBuffer5clearEv+0x12>
   b4fd8:	6882      	ldr	r2, [r0, #8]
   b4fda:	b112      	cbz	r2, b4fe2 <_ZN10JsonBuffer5clearEv+0x12>
		memset(buffer, 0, bufferLen);
   b4fdc:	4618      	mov	r0, r3
   b4fde:	f004 b8ef 	b.w	b91c0 <memset>
}
   b4fe2:	4770      	bx	lr

000b4fe4 <_ZN10JsonParserC1EPcjPN21JsonParserGeneratorRK9jsmntok_tEj>:
JsonParser::JsonParser(char *buffer, size_t bufferLen, JsonParserGeneratorRK::jsmntok_t *tokens, size_t maxTokens) :
   b4fe4:	b510      	push	{r4, lr}
JsonBuffer::JsonBuffer(char *buffer, size_t bufferLen)  : buffer(buffer), bufferLen(bufferLen), offset(0), staticBuffers(true) {
   b4fe6:	e9c0 1201 	strd	r1, r2, [r0, #4]
   b4fea:	2200      	movs	r2, #0
   b4fec:	60c2      	str	r2, [r0, #12]
   b4fee:	2201      	movs	r2, #1
   b4ff0:	7402      	strb	r2, [r0, #16]
		JsonBuffer(buffer, bufferLen), tokens(tokens), maxTokens(maxTokens) {
   b4ff2:	6143      	str	r3, [r0, #20]
   b4ff4:	4a02      	ldr	r2, [pc, #8]	; (b5000 <_ZN10JsonParserC1EPcjPN21JsonParserGeneratorRK9jsmntok_tEj+0x1c>)
   b4ff6:	9b02      	ldr	r3, [sp, #8]
   b4ff8:	6002      	str	r2, [r0, #0]
   b4ffa:	61c3      	str	r3, [r0, #28]
}
   b4ffc:	bd10      	pop	{r4, pc}
   b4ffe:	bf00      	nop
   b5000:	000b9fbc 	.word	0x000b9fbc

000b5004 <_ZNK10JsonParser13getOuterArrayEv>:
	for(const JsonParserGeneratorRK::jsmntok_t *token = tokens; token < tokensEnd; token++) {
   b5004:	e9d0 0305 	ldrd	r0, r3, [r0, #20]
   b5008:	4283      	cmp	r3, r0
   b500a:	d904      	bls.n	b5016 <_ZNK10JsonParser13getOuterArrayEv+0x12>
		if (token->type == JsonParserGeneratorRK::JSMN_ARRAY) {
   b500c:	7802      	ldrb	r2, [r0, #0]
   b500e:	2a02      	cmp	r2, #2
   b5010:	d002      	beq.n	b5018 <_ZNK10JsonParser13getOuterArrayEv+0x14>
	for(const JsonParserGeneratorRK::jsmntok_t *token = tokens; token < tokensEnd; token++) {
   b5012:	3010      	adds	r0, #16
   b5014:	e7f8      	b.n	b5008 <_ZNK10JsonParser13getOuterArrayEv+0x4>
	return 0;
   b5016:	2000      	movs	r0, #0
}
   b5018:	4770      	bx	lr

000b501a <_ZNK10JsonParser14getOuterObjectEv>:
	if (tokens < tokensEnd && tokens[0].type == JsonParserGeneratorRK::JSMN_OBJECT) {
   b501a:	e9d0 0305 	ldrd	r0, r3, [r0, #20]
   b501e:	4298      	cmp	r0, r3
   b5020:	d204      	bcs.n	b502c <_ZNK10JsonParser14getOuterObjectEv+0x12>
   b5022:	7803      	ldrb	r3, [r0, #0]
		return 0;
   b5024:	2b01      	cmp	r3, #1
   b5026:	bf18      	it	ne
   b5028:	2000      	movne	r0, #0
   b502a:	4770      	bx	lr
   b502c:	2000      	movs	r0, #0
}
   b502e:	4770      	bx	lr

000b5030 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>:
bool JsonParser::skipObject(const JsonParserGeneratorRK::jsmntok_t *container, const JsonParserGeneratorRK::jsmntok_t *&obj) const {
   b5030:	b570      	push	{r4, r5, r6, lr}
	int curObjectEnd = obj->end;
   b5032:	6813      	ldr	r3, [r2, #0]
   b5034:	689d      	ldr	r5, [r3, #8]
	while(++obj < tokensEnd && obj->end < container->end && obj->end <= curObjectEnd) {
   b5036:	6813      	ldr	r3, [r2, #0]
   b5038:	f103 0410 	add.w	r4, r3, #16
   b503c:	6014      	str	r4, [r2, #0]
   b503e:	6986      	ldr	r6, [r0, #24]
   b5040:	42b4      	cmp	r4, r6
   b5042:	d20a      	bcs.n	b505a <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_+0x2a>
   b5044:	699b      	ldr	r3, [r3, #24]
   b5046:	688c      	ldr	r4, [r1, #8]
   b5048:	42a3      	cmp	r3, r4
   b504a:	da01      	bge.n	b5050 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_+0x20>
   b504c:	42ab      	cmp	r3, r5
   b504e:	ddf2      	ble.n	b5036 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_+0x6>
	if (obj >= tokensEnd || obj->end > container->end) {
   b5050:	42a3      	cmp	r3, r4
   b5052:	bfcc      	ite	gt
   b5054:	2000      	movgt	r0, #0
   b5056:	2001      	movle	r0, #1
   b5058:	e000      	b.n	b505c <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_+0x2c>
		return false;
   b505a:	2000      	movs	r0, #0
}
   b505c:	bd70      	pop	{r4, r5, r6, pc}

000b505e <_ZNK10JsonParser15getTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj>:
const JsonParserGeneratorRK::jsmntok_t *JsonParser::getTokenByIndex(const JsonParserGeneratorRK::jsmntok_t *container, size_t desiredIndex) const {
   b505e:	b573      	push	{r0, r1, r4, r5, r6, lr}
	const JsonParserGeneratorRK::jsmntok_t *token = container + 1;
   b5060:	f101 0310 	add.w	r3, r1, #16
const JsonParserGeneratorRK::jsmntok_t *JsonParser::getTokenByIndex(const JsonParserGeneratorRK::jsmntok_t *container, size_t desiredIndex) const {
   b5064:	4604      	mov	r4, r0
   b5066:	4616      	mov	r6, r2
	const JsonParserGeneratorRK::jsmntok_t *token = container + 1;
   b5068:	9301      	str	r3, [sp, #4]
	size_t index = 0;
   b506a:	2500      	movs	r5, #0
	while(token < tokensEnd && token->end < container->end) {
   b506c:	9801      	ldr	r0, [sp, #4]
   b506e:	69a3      	ldr	r3, [r4, #24]
   b5070:	4283      	cmp	r3, r0
   b5072:	d90b      	bls.n	b508c <_ZNK10JsonParser15getTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj+0x2e>
   b5074:	6882      	ldr	r2, [r0, #8]
   b5076:	688b      	ldr	r3, [r1, #8]
   b5078:	429a      	cmp	r2, r3
   b507a:	da07      	bge.n	b508c <_ZNK10JsonParser15getTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj+0x2e>
		if (desiredIndex == index) {
   b507c:	42b5      	cmp	r5, r6
   b507e:	d006      	beq.n	b508e <_ZNK10JsonParser15getTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj+0x30>
		skipObject(container, token);
   b5080:	aa01      	add	r2, sp, #4
   b5082:	4620      	mov	r0, r4
		index++;
   b5084:	3501      	adds	r5, #1
		skipObject(container, token);
   b5086:	f7ff ffd3 	bl	b5030 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>
	while(token < tokensEnd && token->end < container->end) {
   b508a:	e7ef      	b.n	b506c <_ZNK10JsonParser15getTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj+0xe>
	return 0;
   b508c:	2000      	movs	r0, #0
}
   b508e:	b002      	add	sp, #8
   b5090:	bd70      	pop	{r4, r5, r6, pc}

000b5092 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j>:
bool JsonParser::getKeyValueTokenByIndex(const JsonParserGeneratorRK::jsmntok_t *container, const JsonParserGeneratorRK::jsmntok_t *&key, const JsonParserGeneratorRK::jsmntok_t *&value, size_t desiredIndex) const {
   b5092:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b5096:	9d08      	ldr	r5, [sp, #32]
   b5098:	4698      	mov	r8, r3
	const JsonParserGeneratorRK::jsmntok_t *token = container + 1;
   b509a:	f101 0310 	add.w	r3, r1, #16
bool JsonParser::getKeyValueTokenByIndex(const JsonParserGeneratorRK::jsmntok_t *container, const JsonParserGeneratorRK::jsmntok_t *&key, const JsonParserGeneratorRK::jsmntok_t *&value, size_t desiredIndex) const {
   b509e:	4604      	mov	r4, r0
   b50a0:	4617      	mov	r7, r2
	const JsonParserGeneratorRK::jsmntok_t *token = container + 1;
   b50a2:	9301      	str	r3, [sp, #4]
	size_t index = 0;
   b50a4:	2600      	movs	r6, #0
	while(token < tokensEnd && token->end < container->end) {
   b50a6:	9801      	ldr	r0, [sp, #4]
   b50a8:	69a3      	ldr	r3, [r4, #24]
   b50aa:	4283      	cmp	r3, r0
   b50ac:	d91a      	bls.n	b50e4 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x52>
   b50ae:	6882      	ldr	r2, [r0, #8]
   b50b0:	688b      	ldr	r3, [r1, #8]
   b50b2:	429a      	cmp	r2, r3
   b50b4:	da16      	bge.n	b50e4 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x52>
		if (desiredIndex == index) {
   b50b6:	42ae      	cmp	r6, r5
   b50b8:	d10b      	bne.n	b50d2 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x40>
			key = token;
   b50ba:	6038      	str	r0, [r7, #0]
			if (skipObject(container, token)) {
   b50bc:	aa01      	add	r2, sp, #4
   b50be:	4620      	mov	r0, r4
   b50c0:	f7ff ffb6 	bl	b5030 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>
   b50c4:	b128      	cbz	r0, b50d2 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x40>
				value = token;
   b50c6:	9b01      	ldr	r3, [sp, #4]
   b50c8:	f8c8 3000 	str.w	r3, [r8]
}
   b50cc:	b002      	add	sp, #8
   b50ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		skipObject(container, token);
   b50d2:	aa01      	add	r2, sp, #4
   b50d4:	4620      	mov	r0, r4
   b50d6:	f7ff ffab 	bl	b5030 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>
		skipObject(container, token);
   b50da:	4620      	mov	r0, r4
		index++;
   b50dc:	3601      	adds	r6, #1
		skipObject(container, token);
   b50de:	f7ff ffa7 	bl	b5030 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>
	while(token < tokensEnd && token->end < container->end) {
   b50e2:	e7e0      	b.n	b50a6 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x14>
	return false;
   b50e4:	2000      	movs	r0, #0
   b50e6:	e7f1      	b.n	b50cc <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x3a>

000b50e8 <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj>:
void JsonParser::copyTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, char *dst, size_t dstLen) const {
   b50e8:	b5f0      	push	{r4, r5, r6, r7, lr}
	for(ii = 0; ii < (token->end - token->start) && ii < ((int)dstLen - 1); ii++) {
   b50ea:	3b01      	subs	r3, #1
   b50ec:	2400      	movs	r4, #0
   b50ee:	e9d1 7601 	ldrd	r7, r6, [r1, #4]
   b50f2:	1bf6      	subs	r6, r6, r7
   b50f4:	42a6      	cmp	r6, r4
   b50f6:	dd08      	ble.n	b510a <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj+0x22>
   b50f8:	42a3      	cmp	r3, r4
   b50fa:	dd06      	ble.n	b510a <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj+0x22>
		dst[ii] = buffer[token->start + ii];
   b50fc:	6845      	ldr	r5, [r0, #4]
   b50fe:	443d      	add	r5, r7
   b5100:	5d2d      	ldrb	r5, [r5, r4]
   b5102:	f802 5b01 	strb.w	r5, [r2], #1
	for(ii = 0; ii < (token->end - token->start) && ii < ((int)dstLen - 1); ii++) {
   b5106:	3401      	adds	r4, #1
   b5108:	e7f1      	b.n	b50ee <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj+0x6>
	dst[ii] = 0;
   b510a:	2300      	movs	r3, #0
   b510c:	7013      	strb	r3, [r2, #0]
}
   b510e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b5110 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tERi>:
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, int &result) const {
   b5110:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b5112:	4614      	mov	r4, r2
	copyTokenValue(token, tmp, sizeof(tmp));
   b5114:	2310      	movs	r3, #16
   b5116:	466a      	mov	r2, sp
   b5118:	f7ff ffe6 	bl	b50e8 <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj>
	if (sscanf(tmp, "%d", &result) == 1) {
   b511c:	4904      	ldr	r1, [pc, #16]	; (b5130 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tERi+0x20>)
   b511e:	4622      	mov	r2, r4
   b5120:	4668      	mov	r0, sp
   b5122:	f001 fbeb 	bl	b68fc <sscanf>
}
   b5126:	1e43      	subs	r3, r0, #1
   b5128:	4258      	negs	r0, r3
   b512a:	4158      	adcs	r0, r3
   b512c:	b004      	add	sp, #16
   b512e:	bd10      	pop	{r4, pc}
   b5130:	000b9866 	.word	0x000b9866

000b5134 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tERm>:
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, unsigned long &result) const {
   b5134:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b5136:	4614      	mov	r4, r2
	copyTokenValue(token, tmp, sizeof(tmp));
   b5138:	2310      	movs	r3, #16
   b513a:	466a      	mov	r2, sp
   b513c:	f7ff ffd4 	bl	b50e8 <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj>
	if (sscanf(tmp, "%lu", &result) == 1) {
   b5140:	4904      	ldr	r1, [pc, #16]	; (b5154 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tERm+0x20>)
   b5142:	4622      	mov	r2, r4
   b5144:	4668      	mov	r0, sp
   b5146:	f001 fbd9 	bl	b68fc <sscanf>
}
   b514a:	1e43      	subs	r3, r0, #1
   b514c:	4258      	negs	r0, r3
   b514e:	4158      	adcs	r0, r3
   b5150:	b004      	add	sp, #16
   b5152:	bd10      	pop	{r4, pc}
   b5154:	000b97a2 	.word	0x000b97a2

000b5158 <_ZN16JsonParserString6appendEc>:
void JsonParserString::append(char ch) {
   b5158:	b510      	push	{r4, lr}
   b515a:	4604      	mov	r4, r0
	if (str) {
   b515c:	6800      	ldr	r0, [r0, #0]
void JsonParserString::append(char ch) {
   b515e:	460b      	mov	r3, r1
	if (str) {
   b5160:	b128      	cbz	r0, b516e <_ZN16JsonParserString6appendEc+0x16>
		str->concat(ch);
   b5162:	f003 fbf8 	bl	b8956 <_ZN6String6concatEc>
		length++;
   b5166:	68e3      	ldr	r3, [r4, #12]
   b5168:	3301      	adds	r3, #1
   b516a:	60e3      	str	r3, [r4, #12]
}
   b516c:	bd10      	pop	{r4, pc}
		if (buf && length < (bufLen - 1)) {
   b516e:	6860      	ldr	r0, [r4, #4]
   b5170:	2800      	cmp	r0, #0
   b5172:	d0f8      	beq.n	b5166 <_ZN16JsonParserString6appendEc+0xe>
   b5174:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
   b5178:	3a01      	subs	r2, #1
   b517a:	428a      	cmp	r2, r1
			buf[length] = ch;
   b517c:	bf88      	it	hi
   b517e:	5443      	strbhi	r3, [r0, r1]
   b5180:	e7f1      	b.n	b5166 <_ZN16JsonParserString6appendEc+0xe>

000b5182 <_ZN10JsonParser10appendUtf8EtR16JsonParserString>:
void JsonParser::appendUtf8(uint16_t unicode, JsonParserString &str) {
   b5182:	4603      	mov	r3, r0
	if (unicode <= 0x007f) {
   b5184:	2b7f      	cmp	r3, #127	; 0x7f
void JsonParser::appendUtf8(uint16_t unicode, JsonParserString &str) {
   b5186:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b5188:	4608      	mov	r0, r1
		str.append((char)unicode);
   b518a:	b2d9      	uxtb	r1, r3
	if (unicode <= 0x007f) {
   b518c:	d804      	bhi.n	b5198 <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0x16>
}
   b518e:	b003      	add	sp, #12
   b5190:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		str.append((char)value);
   b5194:	f7ff bfe0 	b.w	b5158 <_ZN16JsonParserString6appendEc>
		value = (0b10000000 | (unicode & 0b111111));
   b5198:	f001 013f 	and.w	r1, r1, #63	; 0x3f
	if (unicode <= 0x7ff) {
   b519c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
		value = (0b11000000 | ((unicode >> 6) & 0b11111));
   b51a0:	f3c3 1587 	ubfx	r5, r3, #6, #8
		value = (0b10000000 | (unicode & 0b111111));
   b51a4:	f041 0480 	orr.w	r4, r1, #128	; 0x80
	if (unicode <= 0x7ff) {
   b51a8:	d207      	bcs.n	b51ba <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0x38>
		str.append((char)value);
   b51aa:	f045 01c0 	orr.w	r1, r5, #192	; 0xc0
   b51ae:	9001      	str	r0, [sp, #4]
		str.append((char)value);
   b51b0:	f7ff ffd2 	bl	b5158 <_ZN16JsonParserString6appendEc>
		str.append((char)value);
   b51b4:	9801      	ldr	r0, [sp, #4]
   b51b6:	4621      	mov	r1, r4
   b51b8:	e7e9      	b.n	b518e <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0xc>
		value = 0b11100000 | ((unicode >> 12) & 0b1111);
   b51ba:	0b1b      	lsrs	r3, r3, #12
		str.append((char)value);
   b51bc:	f043 01e0 	orr.w	r1, r3, #224	; 0xe0
   b51c0:	9001      	str	r0, [sp, #4]
   b51c2:	f7ff ffc9 	bl	b5158 <_ZN16JsonParserString6appendEc>
		value = 0b10000000 | ((unicode >> 6) & 0b111111);
   b51c6:	f005 013f 	and.w	r1, r5, #63	; 0x3f
		str.append((char)value);
   b51ca:	9801      	ldr	r0, [sp, #4]
   b51cc:	f041 0180 	orr.w	r1, r1, #128	; 0x80
   b51d0:	e7ee      	b.n	b51b0 <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0x2e>
	...

000b51d4 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString>:
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, JsonParserString &str) const {
   b51d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
	bool escape = false;
   b51d8:	2400      	movs	r4, #0
	for(int ii = token->start; ii < token->end; ii++) {
   b51da:	684e      	ldr	r6, [r1, #4]
					if (sscanf(tmp, "%04x", &unicode) == 1) {
   b51dc:	f8df a0cc 	ldr.w	sl, [pc, #204]	; b52ac <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xd8>
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, JsonParserString &str) const {
   b51e0:	4680      	mov	r8, r0
   b51e2:	460f      	mov	r7, r1
   b51e4:	4615      	mov	r5, r2
			escape = false;
   b51e6:	46a1      	mov	r9, r4
	for(int ii = token->start; ii < token->end; ii++) {
   b51e8:	68b8      	ldr	r0, [r7, #8]
   b51ea:	42b0      	cmp	r0, r6
   b51ec:	dd5a      	ble.n	b52a4 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xd0>
			switch(buffer[ii]) {
   b51ee:	f8d8 3004 	ldr.w	r3, [r8, #4]
   b51f2:	5d99      	ldrb	r1, [r3, r6]
   b51f4:	199a      	adds	r2, r3, r6
		if (escape) {
   b51f6:	2c00      	cmp	r4, #0
   b51f8:	d04b      	beq.n	b5292 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xbe>
			switch(buffer[ii]) {
   b51fa:	2975      	cmp	r1, #117	; 0x75
   b51fc:	d805      	bhi.n	b520a <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
   b51fe:	296d      	cmp	r1, #109	; 0x6d
   b5200:	d807      	bhi.n	b5212 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x3e>
   b5202:	2962      	cmp	r1, #98	; 0x62
   b5204:	d01e      	beq.n	b5244 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x70>
   b5206:	2966      	cmp	r1, #102	; 0x66
   b5208:	d01e      	beq.n	b5248 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x74>
				str.append(buffer[ii]);
   b520a:	4628      	mov	r0, r5
   b520c:	f7ff ffa4 	bl	b5158 <_ZN16JsonParserString6appendEc>
				break;
   b5210:	e03d      	b.n	b528e <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xba>
   b5212:	f1a1 046e 	sub.w	r4, r1, #110	; 0x6e
   b5216:	2c07      	cmp	r4, #7
   b5218:	d8f7      	bhi.n	b520a <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
   b521a:	f20f 0c08 	addw	ip, pc, #8
   b521e:	f85c f024 	ldr.w	pc, [ip, r4, lsl #2]
   b5222:	bf00      	nop
   b5224:	000b524d 	.word	0x000b524d
   b5228:	000b520b 	.word	0x000b520b
   b522c:	000b520b 	.word	0x000b520b
   b5230:	000b520b 	.word	0x000b520b
   b5234:	000b5251 	.word	0x000b5251
   b5238:	000b520b 	.word	0x000b520b
   b523c:	000b5255 	.word	0x000b5255
   b5240:	000b5259 	.word	0x000b5259
				str.append('\b');
   b5244:	2108      	movs	r1, #8
   b5246:	e7e0      	b.n	b520a <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				str.append('\f');
   b5248:	210c      	movs	r1, #12
   b524a:	e7de      	b.n	b520a <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				str.append('\n');
   b524c:	210a      	movs	r1, #10
   b524e:	e7dc      	b.n	b520a <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				str.append('\r');
   b5250:	210d      	movs	r1, #13
   b5252:	e7da      	b.n	b520a <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				str.append('\t');
   b5254:	2109      	movs	r1, #9
   b5256:	e7d8      	b.n	b520a <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				if ((ii + 4) < token->end) {
   b5258:	1d31      	adds	r1, r6, #4
   b525a:	4288      	cmp	r0, r1
   b525c:	dd17      	ble.n	b528e <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xba>
   b525e:	a902      	add	r1, sp, #8
   b5260:	3304      	adds	r3, #4
   b5262:	4433      	add	r3, r6
   b5264:	4608      	mov	r0, r1
						tmp[jj] = buffer[ii + jj + 1];
   b5266:	f812 4f01 	ldrb.w	r4, [r2, #1]!
   b526a:	f801 4b01 	strb.w	r4, [r1], #1
					for(size_t jj = 0; jj < 4; jj++) {
   b526e:	429a      	cmp	r2, r3
   b5270:	d1f9      	bne.n	b5266 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x92>
					if (sscanf(tmp, "%04x", &unicode) == 1) {
   b5272:	aa01      	add	r2, sp, #4
   b5274:	4651      	mov	r1, sl
					tmp[4] = 0;
   b5276:	f88d 900c 	strb.w	r9, [sp, #12]
					if (sscanf(tmp, "%04x", &unicode) == 1) {
   b527a:	f001 fb3f 	bl	b68fc <sscanf>
   b527e:	2801      	cmp	r0, #1
   b5280:	d105      	bne.n	b528e <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xba>
						appendUtf8((uint16_t)unicode, str);
   b5282:	f8bd 0004 	ldrh.w	r0, [sp, #4]
   b5286:	4629      	mov	r1, r5
   b5288:	f7ff ff7b 	bl	b5182 <_ZN10JsonParser10appendUtf8EtR16JsonParserString>
						ii += 5; // also increments in loop
   b528c:	3605      	adds	r6, #5
			escape = false;
   b528e:	2400      	movs	r4, #0
   b5290:	e004      	b.n	b529c <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xc8>
		if (buffer[ii] == '\\') {
   b5292:	295c      	cmp	r1, #92	; 0x5c
   b5294:	d004      	beq.n	b52a0 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xcc>
			str.append(buffer[ii]);
   b5296:	4628      	mov	r0, r5
   b5298:	f7ff ff5e 	bl	b5158 <_ZN16JsonParserString6appendEc>
	for(int ii = token->start; ii < token->end; ii++) {
   b529c:	3601      	adds	r6, #1
   b529e:	e7a3      	b.n	b51e8 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x14>
			escape = true;
   b52a0:	2401      	movs	r4, #1
   b52a2:	e7fb      	b.n	b529c <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xc8>
}
   b52a4:	2001      	movs	r0, #1
   b52a6:	b004      	add	sp, #16
   b52a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b52ac:	000ba2a0 	.word	0x000ba2a0

000b52b0 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER6String>:
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, String &result) const {
   b52b0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b52b2:	460c      	mov	r4, r1
   b52b4:	4606      	mov	r6, r0
	result = "";
   b52b6:	490c      	ldr	r1, [pc, #48]	; (b52e8 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER6String+0x38>)
   b52b8:	4610      	mov	r0, r2
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, String &result) const {
   b52ba:	4615      	mov	r5, r2
	result = "";
   b52bc:	f003 fb22 	bl	b8904 <_ZN6StringaSEPKc>
	result.reserve(token->end - token->start + 1);
   b52c0:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
   b52c4:	1ac9      	subs	r1, r1, r3
   b52c6:	3101      	adds	r1, #1
   b52c8:	4628      	mov	r0, r5
   b52ca:	f003 fa97 	bl	b87fc <_ZN6String7reserveEj>
JsonParserString::JsonParserString(String *str) : str(str), buf(0), bufLen(0), length(0){
   b52ce:	2300      	movs	r3, #0
	return getTokenValue(token, strWrapper);
   b52d0:	466a      	mov	r2, sp
   b52d2:	4621      	mov	r1, r4
   b52d4:	4630      	mov	r0, r6
JsonParserString::JsonParserString(String *str) : str(str), buf(0), bufLen(0), length(0){
   b52d6:	e9cd 3301 	strd	r3, r3, [sp, #4]
   b52da:	9500      	str	r5, [sp, #0]
   b52dc:	9303      	str	r3, [sp, #12]
	return getTokenValue(token, strWrapper);
   b52de:	f7ff ff79 	bl	b51d4 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString>
}
   b52e2:	b004      	add	sp, #16
   b52e4:	bd70      	pop	{r4, r5, r6, pc}
   b52e6:	bf00      	nop
   b52e8:	000ba2ff 	.word	0x000ba2ff

000b52ec <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>:
bool JsonParser::getValueTokenByKey(const JsonParserGeneratorRK::jsmntok_t *container, const char *name, const JsonParserGeneratorRK::jsmntok_t *&value) const {
   b52ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b52f0:	b089      	sub	sp, #36	; 0x24
   b52f2:	4605      	mov	r5, r0
   b52f4:	4688      	mov	r8, r1
	String keyName;
   b52f6:	a804      	add	r0, sp, #16
   b52f8:	4912      	ldr	r1, [pc, #72]	; (b5344 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x58>)
bool JsonParser::getValueTokenByKey(const JsonParserGeneratorRK::jsmntok_t *container, const char *name, const JsonParserGeneratorRK::jsmntok_t *&value) const {
   b52fa:	4616      	mov	r6, r2
   b52fc:	4699      	mov	r9, r3
	String keyName;
   b52fe:	f003 faaa 	bl	b8856 <_ZN6StringC1EPK19__FlashStringHelper>
	for(size_t ii = 0; getKeyValueTokenByIndex(container, key, value, ii); ii++) {
   b5302:	2700      	movs	r7, #0
   b5304:	9700      	str	r7, [sp, #0]
   b5306:	464b      	mov	r3, r9
   b5308:	aa03      	add	r2, sp, #12
   b530a:	4641      	mov	r1, r8
   b530c:	4628      	mov	r0, r5
   b530e:	f7ff fec0 	bl	b5092 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j>
   b5312:	4604      	mov	r4, r0
   b5314:	b170      	cbz	r0, b5334 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x48>
		if (getTokenValue(key, keyName) && keyName == name) {
   b5316:	9903      	ldr	r1, [sp, #12]
   b5318:	aa04      	add	r2, sp, #16
   b531a:	4628      	mov	r0, r5
   b531c:	f7ff ffc8 	bl	b52b0 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER6String>
   b5320:	4604      	mov	r4, r0
   b5322:	b908      	cbnz	r0, b5328 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x3c>
	for(size_t ii = 0; getKeyValueTokenByIndex(container, key, value, ii); ii++) {
   b5324:	3701      	adds	r7, #1
   b5326:	e7ed      	b.n	b5304 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x18>
    unsigned char operator == (const char *cstr) const {return equals(cstr);}
   b5328:	4631      	mov	r1, r6
   b532a:	a804      	add	r0, sp, #16
   b532c:	f003 fb20 	bl	b8970 <_ZNK6String6equalsEPKc>
		if (getTokenValue(key, keyName) && keyName == name) {
   b5330:	2800      	cmp	r0, #0
   b5332:	d0f7      	beq.n	b5324 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x38>
	String keyName;
   b5334:	a804      	add	r0, sp, #16
   b5336:	f003 fa43 	bl	b87c0 <_ZN6StringD1Ev>
}
   b533a:	4620      	mov	r0, r4
   b533c:	b009      	add	sp, #36	; 0x24
   b533e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b5342:	bf00      	nop
   b5344:	000ba2ff 	.word	0x000ba2ff

000b5348 <_ZN10JsonWriter4initEv>:
	offset = 0;
   b5348:	2300      	movs	r3, #0
	context[contextIndex].isFirst = true;
   b534a:	2201      	movs	r2, #1
	offset = 0;
   b534c:	60c3      	str	r3, [r0, #12]
	contextIndex = 0;
   b534e:	6143      	str	r3, [r0, #20]
	context[contextIndex].isFirst = true;
   b5350:	8302      	strh	r2, [r0, #24]
	truncated = false;
   b5352:	f880 302a 	strb.w	r3, [r0, #42]	; 0x2a
}
   b5356:	4770      	bx	lr

000b5358 <_ZN10JsonWriterC1Ev>:
JsonWriter::JsonWriter() : JsonBuffer(), floatPlaces(-1) {
   b5358:	b508      	push	{r3, lr}
   b535a:	4603      	mov	r3, r0
   b535c:	f7ff fdfc 	bl	b4f58 <_ZN10JsonBufferC1Ev>
   b5360:	4a04      	ldr	r2, [pc, #16]	; (b5374 <_ZN10JsonWriterC1Ev+0x1c>)
   b5362:	601a      	str	r2, [r3, #0]
   b5364:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	init();
   b5368:	4618      	mov	r0, r3
JsonWriter::JsonWriter() : JsonBuffer(), floatPlaces(-1) {
   b536a:	62da      	str	r2, [r3, #44]	; 0x2c
	init();
   b536c:	f7ff ffec 	bl	b5348 <_ZN10JsonWriter4initEv>
}
   b5370:	bd08      	pop	{r3, pc}
   b5372:	bf00      	nop
   b5374:	000b9fcc 	.word	0x000b9fcc

000b5378 <_ZN10JsonWriter10insertCharEc>:
	if (offset < bufferLen) {
   b5378:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
void JsonWriter::insertChar(char ch) {
   b537c:	b510      	push	{r4, lr}
	if (offset < bufferLen) {
   b537e:	4293      	cmp	r3, r2
		buffer[offset++] = ch;
   b5380:	bf3f      	itttt	cc
   b5382:	6842      	ldrcc	r2, [r0, #4]
   b5384:	1c5c      	addcc	r4, r3, #1
   b5386:	60c4      	strcc	r4, [r0, #12]
   b5388:	54d1      	strbcc	r1, [r2, r3]
		truncated = true;
   b538a:	bf24      	itt	cs
   b538c:	2301      	movcs	r3, #1
   b538e:	f880 302a 	strbcs.w	r3, [r0, #42]	; 0x2a
}
   b5392:	bd10      	pop	{r4, pc}

000b5394 <_ZN10JsonWriter19finishObjectOrArrayEv>:
void JsonWriter::finishObjectOrArray() {
   b5394:	b510      	push	{r4, lr}
	if (contextIndex > 0) {
   b5396:	6943      	ldr	r3, [r0, #20]
void JsonWriter::finishObjectOrArray() {
   b5398:	4604      	mov	r4, r0
	if (contextIndex > 0) {
   b539a:	b143      	cbz	r3, b53ae <_ZN10JsonWriter19finishObjectOrArrayEv+0x1a>
		if (context[contextIndex].terminator != 0) {
   b539c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
   b53a0:	7e59      	ldrb	r1, [r3, #25]
   b53a2:	b109      	cbz	r1, b53a8 <_ZN10JsonWriter19finishObjectOrArrayEv+0x14>
			insertChar(context[contextIndex].terminator);
   b53a4:	f7ff ffe8 	bl	b5378 <_ZN10JsonWriter10insertCharEc>
		contextIndex--;
   b53a8:	6963      	ldr	r3, [r4, #20]
   b53aa:	3b01      	subs	r3, #1
   b53ac:	6163      	str	r3, [r4, #20]
	if (offset < bufferLen) {
   b53ae:	e9d4 1002 	ldrd	r1, r0, [r4, #8]
		buffer[offset] = 0;
   b53b2:	6863      	ldr	r3, [r4, #4]
	if (offset < bufferLen) {
   b53b4:	4288      	cmp	r0, r1
   b53b6:	f04f 0200 	mov.w	r2, #0
		buffer[bufferLen - 1] = 0;
   b53ba:	bf2a      	itet	cs
   b53bc:	185b      	addcs	r3, r3, r1
		buffer[offset] = 0;
   b53be:	541a      	strbcc	r2, [r3, r0]
		buffer[bufferLen - 1] = 0;
   b53c0:	f803 2c01 	strbcs.w	r2, [r3, #-1]
}
   b53c4:	bd10      	pop	{r4, pc}

000b53c6 <_ZN10JsonWriter14insertvsprintfEPKcSt9__va_list>:
void JsonWriter::insertvsprintf(const char *fmt, va_list ap) {
   b53c6:	b570      	push	{r4, r5, r6, lr}
   b53c8:	4604      	mov	r4, r0
	size_t spaceAvailable = bufferLen - offset;
   b53ca:	e9d0 5002 	ldrd	r5, r0, [r0, #8]
	size_t count = vsnprintf(&buffer[offset], spaceAvailable, fmt, ap);
   b53ce:	6866      	ldr	r6, [r4, #4]
	size_t spaceAvailable = bufferLen - offset;
   b53d0:	1a2d      	subs	r5, r5, r0
void JsonWriter::insertvsprintf(const char *fmt, va_list ap) {
   b53d2:	4613      	mov	r3, r2
	size_t count = vsnprintf(&buffer[offset], spaceAvailable, fmt, ap);
   b53d4:	4430      	add	r0, r6
   b53d6:	460a      	mov	r2, r1
   b53d8:	4629      	mov	r1, r5
   b53da:	f001 faa7 	bl	b692c <vsnprintf>
	if (count <= spaceAvailable) {
   b53de:	4285      	cmp	r5, r0
		offset += count;
   b53e0:	bf2d      	iteet	cs
   b53e2:	68e3      	ldrcs	r3, [r4, #12]
		offset = bufferLen;
   b53e4:	68a3      	ldrcc	r3, [r4, #8]
   b53e6:	60e3      	strcc	r3, [r4, #12]
		offset += count;
   b53e8:	18c0      	addcs	r0, r0, r3
		truncated = true;
   b53ea:	bf36      	itet	cc
   b53ec:	2301      	movcc	r3, #1
		offset += count;
   b53ee:	60e0      	strcs	r0, [r4, #12]
		truncated = true;
   b53f0:	f884 302a 	strbcc.w	r3, [r4, #42]	; 0x2a
}
   b53f4:	bd70      	pop	{r4, r5, r6, pc}

000b53f6 <_ZN10JsonWriter13insertsprintfEPKcz>:
void JsonWriter::insertsprintf(const char *fmt, ...) {
   b53f6:	b40e      	push	{r1, r2, r3}
   b53f8:	b503      	push	{r0, r1, lr}
   b53fa:	aa03      	add	r2, sp, #12
   b53fc:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(ap, fmt);
   b5400:	9201      	str	r2, [sp, #4]
	insertvsprintf(fmt, ap);
   b5402:	f7ff ffe0 	bl	b53c6 <_ZN10JsonWriter14insertvsprintfEPKcSt9__va_list>
}
   b5406:	b002      	add	sp, #8
   b5408:	f85d eb04 	ldr.w	lr, [sp], #4
   b540c:	b003      	add	sp, #12
   b540e:	4770      	bx	lr

000b5410 <_ZN10JsonWriter12insertStringEPKcb>:
void JsonWriter::insertString(const char *s, bool quoted) {
   b5410:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b5414:	4604      	mov	r4, r0
   b5416:	460e      	mov	r6, r1
	if (quoted) {
   b5418:	4617      	mov	r7, r2
   b541a:	b112      	cbz	r2, b5422 <_ZN10JsonWriter12insertStringEPKcb+0x12>
		insertChar('"');
   b541c:	2122      	movs	r1, #34	; 0x22
   b541e:	f7ff ffab 	bl	b5378 <_ZN10JsonWriter10insertCharEc>
				insertsprintf("\\u%04X", utf16);
   b5422:	f8df 810c 	ldr.w	r8, [pc, #268]	; b5530 <_ZN10JsonWriter12insertStringEPKcb+0x120>
void JsonWriter::insertString(const char *s, bool quoted) {
   b5426:	2500      	movs	r5, #0
	for(size_t ii = 0; s[ii] && offset < bufferLen; ii++) {
   b5428:	5d71      	ldrb	r1, [r6, r5]
   b542a:	eb06 0905 	add.w	r9, r6, r5
   b542e:	2900      	cmp	r1, #0
   b5430:	d074      	beq.n	b551c <_ZN10JsonWriter12insertStringEPKcb+0x10c>
   b5432:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   b5436:	429a      	cmp	r2, r3
   b5438:	d270      	bcs.n	b551c <_ZN10JsonWriter12insertStringEPKcb+0x10c>
		if (s[ii] & 0x80) {
   b543a:	060b      	lsls	r3, r1, #24
   b543c:	d534      	bpl.n	b54a8 <_ZN10JsonWriter12insertStringEPKcb+0x98>
			if (((s[ii] & 0b11110000) == 0b11100000) && ((s[ii+1] & 0b11000000) == 0b10000000) && ((s[ii+2] & 0b11000000) == 0b10000000)) {
   b543e:	f001 03f0 	and.w	r3, r1, #240	; 0xf0
   b5442:	2be0      	cmp	r3, #224	; 0xe0
   b5444:	f105 0901 	add.w	r9, r5, #1
   b5448:	d11d      	bne.n	b5486 <_ZN10JsonWriter12insertStringEPKcb+0x76>
   b544a:	f816 2009 	ldrb.w	r2, [r6, r9]
   b544e:	f002 03c0 	and.w	r3, r2, #192	; 0xc0
   b5452:	2b80      	cmp	r3, #128	; 0x80
   b5454:	d139      	bne.n	b54ca <_ZN10JsonWriter12insertStringEPKcb+0xba>
   b5456:	f105 0902 	add.w	r9, r5, #2
   b545a:	f816 3009 	ldrb.w	r3, [r6, r9]
   b545e:	f003 00c0 	and.w	r0, r3, #192	; 0xc0
   b5462:	2880      	cmp	r0, #128	; 0x80
   b5464:	d131      	bne.n	b54ca <_ZN10JsonWriter12insertStringEPKcb+0xba>
				uint16_t utf16 = ((s[ii] & 0b1111) << 12) | ((s[ii+1] & 0b111111) << 6) | (s[ii+2] & 0b111111);
   b5466:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   b546a:	0192      	lsls	r2, r2, #6
   b546c:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
   b5470:	f402 627c 	and.w	r2, r2, #4032	; 0xfc0
   b5474:	431a      	orrs	r2, r3
				insertsprintf("\\u%04X", utf16);
   b5476:	b292      	uxth	r2, r2
				insertsprintf("\\u%04X", utf16);
   b5478:	4641      	mov	r1, r8
   b547a:	4620      	mov	r0, r4
   b547c:	f7ff ffbb 	bl	b53f6 <_ZN10JsonWriter13insertsprintfEPKcz>
				ii++; // plus one more in loop increment
   b5480:	464d      	mov	r5, r9
	for(size_t ii = 0; s[ii] && offset < bufferLen; ii++) {
   b5482:	3501      	adds	r5, #1
   b5484:	e7d0      	b.n	b5428 <_ZN10JsonWriter12insertStringEPKcb+0x18>
			if (((s[ii] & 0b11100000) == 0b11000000) && ((s[ii+1] & 0b11000000) == 0b10000000)) {
   b5486:	f001 03e0 	and.w	r3, r1, #224	; 0xe0
   b548a:	2bc0      	cmp	r3, #192	; 0xc0
   b548c:	d11d      	bne.n	b54ca <_ZN10JsonWriter12insertStringEPKcb+0xba>
   b548e:	f816 3009 	ldrb.w	r3, [r6, r9]
   b5492:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
   b5496:	2a80      	cmp	r2, #128	; 0x80
   b5498:	d117      	bne.n	b54ca <_ZN10JsonWriter12insertStringEPKcb+0xba>
				uint16_t utf16 = ((s[ii] & 0b11111) << 6) | (s[ii+1] & 0b111111);
   b549a:	0189      	lsls	r1, r1, #6
   b549c:	f401 62f8 	and.w	r2, r1, #1984	; 0x7c0
   b54a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
				insertsprintf("\\u%04X", utf16);
   b54a4:	431a      	orrs	r2, r3
   b54a6:	e7e7      	b.n	b5478 <_ZN10JsonWriter12insertStringEPKcb+0x68>
			switch(s[ii]) {
   b54a8:	290d      	cmp	r1, #13
   b54aa:	d80a      	bhi.n	b54c2 <_ZN10JsonWriter12insertStringEPKcb+0xb2>
   b54ac:	2907      	cmp	r1, #7
   b54ae:	d90c      	bls.n	b54ca <_ZN10JsonWriter12insertStringEPKcb+0xba>
   b54b0:	f1a1 0308 	sub.w	r3, r1, #8
   b54b4:	2b05      	cmp	r3, #5
   b54b6:	d808      	bhi.n	b54ca <_ZN10JsonWriter12insertStringEPKcb+0xba>
   b54b8:	e8df f003 	tbb	[pc, r3]
   b54bc:	07172309 	.word	0x07172309
   b54c0:	1d11      	.short	0x1d11
   b54c2:	2922      	cmp	r1, #34	; 0x22
   b54c4:	d023      	beq.n	b550e <_ZN10JsonWriter12insertStringEPKcb+0xfe>
   b54c6:	295c      	cmp	r1, #92	; 0x5c
   b54c8:	d021      	beq.n	b550e <_ZN10JsonWriter12insertStringEPKcb+0xfe>
				insertChar(s[ii]);
   b54ca:	4620      	mov	r0, r4
   b54cc:	e004      	b.n	b54d8 <_ZN10JsonWriter12insertStringEPKcb+0xc8>
				insertChar('\\');
   b54ce:	215c      	movs	r1, #92	; 0x5c
   b54d0:	4620      	mov	r0, r4
   b54d2:	f7ff ff51 	bl	b5378 <_ZN10JsonWriter10insertCharEc>
				insertChar('b');
   b54d6:	2162      	movs	r1, #98	; 0x62
				insertChar(s[ii]);
   b54d8:	f7ff ff4e 	bl	b5378 <_ZN10JsonWriter10insertCharEc>
				break;
   b54dc:	e7d1      	b.n	b5482 <_ZN10JsonWriter12insertStringEPKcb+0x72>
				insertChar('\\');
   b54de:	215c      	movs	r1, #92	; 0x5c
   b54e0:	4620      	mov	r0, r4
   b54e2:	f7ff ff49 	bl	b5378 <_ZN10JsonWriter10insertCharEc>
				insertChar('f');
   b54e6:	2166      	movs	r1, #102	; 0x66
   b54e8:	e7f6      	b.n	b54d8 <_ZN10JsonWriter12insertStringEPKcb+0xc8>
				insertChar('\\');
   b54ea:	215c      	movs	r1, #92	; 0x5c
   b54ec:	4620      	mov	r0, r4
   b54ee:	f7ff ff43 	bl	b5378 <_ZN10JsonWriter10insertCharEc>
				insertChar('n');
   b54f2:	216e      	movs	r1, #110	; 0x6e
   b54f4:	e7f0      	b.n	b54d8 <_ZN10JsonWriter12insertStringEPKcb+0xc8>
				insertChar('\\');
   b54f6:	215c      	movs	r1, #92	; 0x5c
   b54f8:	4620      	mov	r0, r4
   b54fa:	f7ff ff3d 	bl	b5378 <_ZN10JsonWriter10insertCharEc>
				insertChar('r');
   b54fe:	2172      	movs	r1, #114	; 0x72
   b5500:	e7ea      	b.n	b54d8 <_ZN10JsonWriter12insertStringEPKcb+0xc8>
				insertChar('\\');
   b5502:	215c      	movs	r1, #92	; 0x5c
   b5504:	4620      	mov	r0, r4
   b5506:	f7ff ff37 	bl	b5378 <_ZN10JsonWriter10insertCharEc>
				insertChar('t');
   b550a:	2174      	movs	r1, #116	; 0x74
   b550c:	e7e4      	b.n	b54d8 <_ZN10JsonWriter12insertStringEPKcb+0xc8>
				insertChar('\\');
   b550e:	215c      	movs	r1, #92	; 0x5c
   b5510:	4620      	mov	r0, r4
   b5512:	f7ff ff31 	bl	b5378 <_ZN10JsonWriter10insertCharEc>
				insertChar(s[ii]);
   b5516:	f899 1000 	ldrb.w	r1, [r9]
   b551a:	e7dd      	b.n	b54d8 <_ZN10JsonWriter12insertStringEPKcb+0xc8>
	if (quoted) {
   b551c:	b12f      	cbz	r7, b552a <_ZN10JsonWriter12insertStringEPKcb+0x11a>
		insertChar('"');
   b551e:	4620      	mov	r0, r4
   b5520:	2122      	movs	r1, #34	; 0x22
}
   b5522:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		insertChar('"');
   b5526:	f7ff bf27 	b.w	b5378 <_ZN10JsonWriter10insertCharEc>
}
   b552a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b552e:	bf00      	nop
   b5530:	000b9f9c 	.word	0x000b9f9c

000b5534 <_ZN10JsonWriter20insertCheckSeparatorEv>:
	if (context[contextIndex].isFirst) {
   b5534:	6942      	ldr	r2, [r0, #20]
   b5536:	eb00 0342 	add.w	r3, r0, r2, lsl #1
   b553a:	7e1a      	ldrb	r2, [r3, #24]
   b553c:	b112      	cbz	r2, b5544 <_ZN10JsonWriter20insertCheckSeparatorEv+0x10>
		context[contextIndex].isFirst = false;
   b553e:	2200      	movs	r2, #0
   b5540:	761a      	strb	r2, [r3, #24]
}
   b5542:	4770      	bx	lr
		insertChar(',');
   b5544:	212c      	movs	r1, #44	; 0x2c
   b5546:	f7ff bf17 	b.w	b5378 <_ZN10JsonWriter10insertCharEc>

000b554a <_ZN10JsonWriter18startObjectOrArrayEcc>:
bool JsonWriter::startObjectOrArray(char startChar, char endChar) {
   b554a:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if ((contextIndex + 1) >= MAX_NESTED_CONTEXT) {
   b554c:	6943      	ldr	r3, [r0, #20]
bool JsonWriter::startObjectOrArray(char startChar, char endChar) {
   b554e:	9101      	str	r1, [sp, #4]
	if ((contextIndex + 1) >= MAX_NESTED_CONTEXT) {
   b5550:	3301      	adds	r3, #1
   b5552:	2b08      	cmp	r3, #8
bool JsonWriter::startObjectOrArray(char startChar, char endChar) {
   b5554:	4616      	mov	r6, r2
	if ((contextIndex + 1) >= MAX_NESTED_CONTEXT) {
   b5556:	d80f      	bhi.n	b5578 <_ZN10JsonWriter18startObjectOrArrayEcc+0x2e>
	insertCheckSeparator();
   b5558:	f7ff ffec 	bl	b5534 <_ZN10JsonWriter20insertCheckSeparatorEv>
	contextIndex++;
   b555c:	6943      	ldr	r3, [r0, #20]
	insertChar(startChar);
   b555e:	9901      	ldr	r1, [sp, #4]
   b5560:	eb00 0443 	add.w	r4, r0, r3, lsl #1
	contextIndex++;
   b5564:	1c5a      	adds	r2, r3, #1
	context[contextIndex].isFirst = true;
   b5566:	2501      	movs	r5, #1
	contextIndex++;
   b5568:	6142      	str	r2, [r0, #20]
	context[contextIndex].isFirst = true;
   b556a:	76a5      	strb	r5, [r4, #26]
	context[contextIndex].terminator = endChar;
   b556c:	76e6      	strb	r6, [r4, #27]
	insertChar(startChar);
   b556e:	f7ff ff03 	bl	b5378 <_ZN10JsonWriter10insertCharEc>
   b5572:	4628      	mov	r0, r5
}
   b5574:	b002      	add	sp, #8
   b5576:	bd70      	pop	{r4, r5, r6, pc}
		return false;
   b5578:	2000      	movs	r0, #0
   b557a:	e7fb      	b.n	b5574 <_ZN10JsonWriter18startObjectOrArrayEcc+0x2a>

000b557c <_ZN12JsonModifierC1ER10JsonParser>:
JsonModifier::JsonModifier(JsonParser &jp) : jp(jp) {
   b557c:	b510      	push	{r4, lr}
   b557e:	4604      	mov	r4, r0
   b5580:	f7ff feea 	bl	b5358 <_ZN10JsonWriterC1Ev>
   b5584:	4b05      	ldr	r3, [pc, #20]	; (b559c <_ZN12JsonModifierC1ER10JsonParser+0x20>)
   b5586:	6023      	str	r3, [r4, #0]
   b5588:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b558c:	2300      	movs	r3, #0
   b558e:	e9c4 230d 	strd	r2, r3, [r4, #52]	; 0x34
   b5592:	6321      	str	r1, [r4, #48]	; 0x30
   b5594:	63e3      	str	r3, [r4, #60]	; 0x3c
}
   b5596:	4620      	mov	r0, r4
   b5598:	bd10      	pop	{r4, pc}
   b559a:	bf00      	nop
   b559c:	000b9fdc 	.word	0x000b9fdc

000b55a0 <_ZN12JsonModifier11startAppendEPKN21JsonParserGeneratorRK9jsmntok_tE>:
	init();

	return true;
}

bool JsonModifier::startAppend(const JsonParserGeneratorRK::jsmntok_t *arrayOrObjectToken) {
   b55a0:	b570      	push	{r4, r5, r6, lr}
	if (start != -1) {
   b55a2:	6b43      	ldr	r3, [r0, #52]	; 0x34
   b55a4:	3301      	adds	r3, #1
bool JsonModifier::startAppend(const JsonParserGeneratorRK::jsmntok_t *arrayOrObjectToken) {
   b55a6:	4604      	mov	r4, r0
   b55a8:	460e      	mov	r6, r1
	if (start != -1) {
   b55aa:	d129      	bne.n	b5600 <_ZN12JsonModifier11startAppendEPKN21JsonParserGeneratorRK9jsmntok_tE+0x60>
		// Modification or insertion already in progress
		return false;
	}

	start = arrayOrObjectToken->end - 1; // Before the closing ] or }
   b55ac:	688d      	ldr	r5, [r1, #8]
	origAfter = jp.getOffset() - start;
   b55ae:	6b01      	ldr	r1, [r0, #48]	; 0x30
	start = arrayOrObjectToken->end - 1; // Before the closing ] or }
   b55b0:	3d01      	subs	r5, #1
   b55b2:	6345      	str	r5, [r0, #52]	; 0x34
	size_t getOffset() const { return offset; }
   b55b4:	68cb      	ldr	r3, [r1, #12]
	origAfter = jp.getOffset() - start;
   b55b6:	1b5a      	subs	r2, r3, r5
   b55b8:	6382      	str	r2, [r0, #56]	; 0x38
	saveLoc = jp.getBufferLen() - origAfter;
   b55ba:	6888      	ldr	r0, [r1, #8]
   b55bc:	4428      	add	r0, r5
   b55be:	1ac3      	subs	r3, r0, r3

	if (origAfter > 0) {
   b55c0:	2a00      	cmp	r2, #0
	saveLoc = jp.getBufferLen() - origAfter;
   b55c2:	63e3      	str	r3, [r4, #60]	; 0x3c
	if (origAfter > 0) {
   b55c4:	dd04      	ble.n	b55d0 <_ZN12JsonModifier11startAppendEPKN21JsonParserGeneratorRK9jsmntok_tE+0x30>
	char *getBuffer() const { return buffer; }
   b55c6:	6848      	ldr	r0, [r1, #4]
		memmove(jp.getBuffer() + saveLoc, jp.getBuffer() + start, origAfter);
   b55c8:	1941      	adds	r1, r0, r5
   b55ca:	4418      	add	r0, r3
   b55cc:	f003 fdde 	bl	b918c <memmove>
   b55d0:	6b22      	ldr	r2, [r4, #48]	; 0x30
	}

	setBuffer(jp.getBuffer() + start, saveLoc - start);
   b55d2:	6b61      	ldr	r1, [r4, #52]	; 0x34
   b55d4:	6852      	ldr	r2, [r2, #4]
   b55d6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   b55d8:	440a      	add	r2, r1
   b55da:	1a5b      	subs	r3, r3, r1
	this->staticBuffers = true;
   b55dc:	2501      	movs	r5, #1
	this->bufferLen = bufferLen;
   b55de:	e9c4 2301 	strd	r2, r3, [r4, #4]
	init();
   b55e2:	4620      	mov	r0, r4
	this->staticBuffers = true;
   b55e4:	7425      	strb	r5, [r4, #16]
	init();
   b55e6:	f7ff feaf 	bl	b5348 <_ZN10JsonWriter4initEv>
	context[contextIndex].isFirst = isFirst;
   b55ea:	6963      	ldr	r3, [r4, #20]
   b55ec:	f103 020c 	add.w	r2, r3, #12

	// If array is not empty, add a separator
	setIsFirst(arrayOrObjectToken->size == 0);
   b55f0:	68f3      	ldr	r3, [r6, #12]
   b55f2:	fab3 f383 	clz	r3, r3
   b55f6:	095b      	lsrs	r3, r3, #5
   b55f8:	f804 3012 	strb.w	r3, [r4, r2, lsl #1]
	context[contextIndex].isFirst = isFirst;
   b55fc:	4628      	mov	r0, r5

	return true;
}
   b55fe:	bd70      	pop	{r4, r5, r6, pc}
		return false;
   b5600:	2000      	movs	r0, #0
   b5602:	e7fc      	b.n	b55fe <_ZN12JsonModifier11startAppendEPKN21JsonParserGeneratorRK9jsmntok_tE+0x5e>

000b5604 <_ZNK12JsonModifier15tokenWithQuotesEPKN21JsonParserGeneratorRK9jsmntok_tE>:
	jp.parse();
	start = -1;
}


JsonParserGeneratorRK::jsmntok_t JsonModifier::tokenWithQuotes(const JsonParserGeneratorRK::jsmntok_t *tok) const {
   b5604:	b530      	push	{r4, r5, lr}
   b5606:	4604      	mov	r4, r0
   b5608:	4615      	mov	r5, r2
	JsonParserGeneratorRK::jsmntok_t expandedToken = *tok;
   b560a:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
   b560c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	if (tok->type == JsonParserGeneratorRK::JSMN_STRING) {
   b5610:	782b      	ldrb	r3, [r5, #0]
   b5612:	2b03      	cmp	r3, #3
		expandedToken.start--;
   b5614:	bf01      	itttt	eq
   b5616:	f101 31ff 	addeq.w	r1, r1, #4294967295	; 0xffffffff
		expandedToken.end++;
   b561a:	3201      	addeq	r2, #1
		expandedToken.start--;
   b561c:	6061      	streq	r1, [r4, #4]
		expandedToken.end++;
   b561e:	60a2      	streq	r2, [r4, #8]
	}
	return expandedToken;
}
   b5620:	4620      	mov	r0, r4
   b5622:	bd30      	pop	{r4, r5, pc}

000b5624 <_ZNK12JsonModifier13findLeftCommaEPKN21JsonParserGeneratorRK9jsmntok_tE>:

int JsonModifier::findLeftComma(const JsonParserGeneratorRK::jsmntok_t *tok) const {
   b5624:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b5626:	460a      	mov	r2, r1
   b5628:	4604      	mov	r4, r0

	JsonParserGeneratorRK::jsmntok_t expandedToken = tokenWithQuotes(tok);
   b562a:	4601      	mov	r1, r0
   b562c:	4668      	mov	r0, sp
   b562e:	f7ff ffe9 	bl	b5604 <_ZNK12JsonModifier15tokenWithQuotesEPKN21JsonParserGeneratorRK9jsmntok_tE>

	int ii = expandedToken.start - 1;
   b5632:	9b01      	ldr	r3, [sp, #4]
   b5634:	1e58      	subs	r0, r3, #1
	while(ii >= 0 && jp.getBuffer()[ii] == ' ') {
   b5636:	2800      	cmp	r0, #0
   b5638:	db06      	blt.n	b5648 <_ZNK12JsonModifier13findLeftCommaEPKN21JsonParserGeneratorRK9jsmntok_tE+0x24>
   b563a:	6b23      	ldr	r3, [r4, #48]	; 0x30
   b563c:	685b      	ldr	r3, [r3, #4]
   b563e:	5c1b      	ldrb	r3, [r3, r0]
   b5640:	2b20      	cmp	r3, #32
   b5642:	d105      	bne.n	b5650 <_ZNK12JsonModifier13findLeftCommaEPKN21JsonParserGeneratorRK9jsmntok_tE+0x2c>
		// Whitespace
		ii--;
   b5644:	3801      	subs	r0, #1
	while(ii >= 0 && jp.getBuffer()[ii] == ' ') {
   b5646:	e7f6      	b.n	b5636 <_ZNK12JsonModifier13findLeftCommaEPKN21JsonParserGeneratorRK9jsmntok_tE+0x12>
	}
	// printf("after whitespace check ii=%d c=%c\n", ii, jp.getBuffer()[ii]);

	if (ii < 0 || jp.getBuffer()[ii] != ',') {
		return -1;
   b5648:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}


	return ii;
}
   b564c:	b004      	add	sp, #16
   b564e:	bd10      	pop	{r4, pc}
		return -1;
   b5650:	2b2c      	cmp	r3, #44	; 0x2c
   b5652:	bf18      	it	ne
   b5654:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   b5658:	e7f8      	b.n	b564c <_ZNK12JsonModifier13findLeftCommaEPKN21JsonParserGeneratorRK9jsmntok_tE+0x28>

000b565a <_ZNK12JsonModifier14findRightCommaEPKN21JsonParserGeneratorRK9jsmntok_tE>:

int JsonModifier::findRightComma(const JsonParserGeneratorRK::jsmntok_t *tok) const {
   b565a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b565c:	4604      	mov	r4, r0
   b565e:	460a      	mov	r2, r1
	JsonParserGeneratorRK::jsmntok_t expandedToken = tokenWithQuotes(tok);
   b5660:	4601      	mov	r1, r0
   b5662:	4668      	mov	r0, sp
   b5664:	f7ff ffce 	bl	b5604 <_ZNK12JsonModifier15tokenWithQuotesEPKN21JsonParserGeneratorRK9jsmntok_tE>

	int ii = expandedToken.end;
	while(ii < jp.getOffset() && jp.getBuffer()[ii] == ' ') {
   b5668:	6b23      	ldr	r3, [r4, #48]	; 0x30
	int ii = expandedToken.end;
   b566a:	9802      	ldr	r0, [sp, #8]
	size_t getOffset() const { return offset; }
   b566c:	68da      	ldr	r2, [r3, #12]
	while(ii < jp.getOffset() && jp.getBuffer()[ii] == ' ') {
   b566e:	4282      	cmp	r2, r0
   b5670:	d905      	bls.n	b567e <_ZNK12JsonModifier14findRightCommaEPKN21JsonParserGeneratorRK9jsmntok_tE+0x24>
   b5672:	6859      	ldr	r1, [r3, #4]
   b5674:	5c09      	ldrb	r1, [r1, r0]
   b5676:	2920      	cmp	r1, #32
   b5678:	d101      	bne.n	b567e <_ZNK12JsonModifier14findRightCommaEPKN21JsonParserGeneratorRK9jsmntok_tE+0x24>
		// Whitespace
		ii++;
   b567a:	3001      	adds	r0, #1
	while(ii < jp.getOffset() && jp.getBuffer()[ii] == ' ') {
   b567c:	e7f7      	b.n	b566e <_ZNK12JsonModifier14findRightCommaEPKN21JsonParserGeneratorRK9jsmntok_tE+0x14>
	}

	if (ii < 0 || jp.getBuffer()[ii] != ',') {
   b567e:	2800      	cmp	r0, #0
   b5680:	db07      	blt.n	b5692 <_ZNK12JsonModifier14findRightCommaEPKN21JsonParserGeneratorRK9jsmntok_tE+0x38>
   b5682:	685b      	ldr	r3, [r3, #4]
   b5684:	5c1b      	ldrb	r3, [r3, r0]
		return -1;
   b5686:	2b2c      	cmp	r3, #44	; 0x2c
   b5688:	bf18      	it	ne
   b568a:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
	}

	return ii;
}
   b568e:	b004      	add	sp, #16
   b5690:	bd10      	pop	{r4, pc}
		return -1;
   b5692:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b5696:	e7fa      	b.n	b568e <_ZNK12JsonModifier14findRightCommaEPKN21JsonParserGeneratorRK9jsmntok_tE+0x34>

000b5698 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>:

/**
 * Parse JSON string and fill tokens.
 */
int jsmn_parse(jsmn_parser *parser, const char *js, size_t len,
		jsmntok_t *tokens, unsigned int num_tokens) {
   b5698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int r;
	int i;
	jsmntok_t *token;
	int count = parser->toknext;
   b569c:	6844      	ldr	r4, [r0, #4]
   b569e:	f04f 0c01 	mov.w	ip, #1
	tok->start = tok->end = -1;
   b56a2:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff

	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b56a6:	f8d0 e000 	ldr.w	lr, [r0]
   b56aa:	4596      	cmp	lr, r2
   b56ac:	f080 81b9 	bcs.w	b5a22 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x38a>
   b56b0:	f811 800e 	ldrb.w	r8, [r1, lr]
   b56b4:	f1b8 0f00 	cmp.w	r8, #0
   b56b8:	f000 81b3 	beq.w	b5a22 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x38a>
		char c;
		jsmntype_t type;

		c = js[parser->pos];
		switch (c) {
   b56bc:	f1b8 0f3a 	cmp.w	r8, #58	; 0x3a
   b56c0:	f000 8098 	beq.w	b57f4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x15c>
   b56c4:	d833      	bhi.n	b572e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x96>
   b56c6:	f1b8 0f22 	cmp.w	r8, #34	; 0x22
   b56ca:	f000 80a6 	beq.w	b581a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x182>
   b56ce:	d810      	bhi.n	b56f2 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x5a>
   b56d0:	f1a8 0809 	sub.w	r8, r8, #9
   b56d4:	fa5f f888 	uxtb.w	r8, r8
   b56d8:	f1b8 0f17 	cmp.w	r8, #23
   b56dc:	d80d      	bhi.n	b56fa <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x62>
   b56de:	4d9f      	ldr	r5, [pc, #636]	; (b595c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2c4>)
   b56e0:	fa0c f808 	lsl.w	r8, ip, r8
   b56e4:	ea18 0f05 	tst.w	r8, r5
   b56e8:	d007      	beq.n	b56fa <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x62>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b56ea:	6805      	ldr	r5, [r0, #0]
   b56ec:	3501      	adds	r5, #1
   b56ee:	6005      	str	r5, [r0, #0]
   b56f0:	e7d9      	b.n	b56a6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xe>
		switch (c) {
   b56f2:	f1b8 0f2c 	cmp.w	r8, #44	; 0x2c
   b56f6:	f000 8133 	beq.w	b5960 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2c8>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b56fa:	f8d0 8000 	ldr.w	r8, [r0]
   b56fe:	4542      	cmp	r2, r8
   b5700:	d90e      	bls.n	b5720 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x88>
   b5702:	f811 5008 	ldrb.w	r5, [r1, r8]
   b5706:	b15d      	cbz	r5, b5720 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x88>
		switch (js[parser->pos]) {
   b5708:	2d3a      	cmp	r5, #58	; 0x3a
   b570a:	f200 8169 	bhi.w	b59e0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x348>
   b570e:	2d1f      	cmp	r5, #31
   b5710:	f200 8151 	bhi.w	b59b6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x31e>
   b5714:	2d0a      	cmp	r5, #10
   b5716:	f200 8160 	bhi.w	b59da <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x342>
   b571a:	2d08      	cmp	r5, #8
   b571c:	f240 8156 	bls.w	b59cc <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x334>
	if (tokens == NULL) {
   b5720:	2b00      	cmp	r3, #0
   b5722:	f040 8162 	bne.w	b59ea <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x352>
		parser->pos--;
   b5726:	f108 35ff 	add.w	r5, r8, #4294967295	; 0xffffffff
	parser->pos--;
   b572a:	6005      	str	r5, [r0, #0]
   b572c:	e0a5      	b.n	b587a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1e2>
		switch (c) {
   b572e:	f1b8 0f7b 	cmp.w	r8, #123	; 0x7b
   b5732:	d037      	beq.n	b57a4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x10c>
   b5734:	d82e      	bhi.n	b5794 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xfc>
   b5736:	f1b8 0f5b 	cmp.w	r8, #91	; 0x5b
   b573a:	d033      	beq.n	b57a4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x10c>
   b573c:	f1b8 0f5d 	cmp.w	r8, #93	; 0x5d
   b5740:	d1db      	bne.n	b56fa <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x62>
				token->type = (c == '{' ? JSMN_OBJECT : JSMN_ARRAY);
				token->start = parser->pos;
				parser->toksuper = parser->toknext - 1;
				break;
			case '}': case ']':
				if (tokens == NULL)
   b5742:	2b00      	cmp	r3, #0
   b5744:	d0d1      	beq.n	b56ea <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
					break;
				type = (c == '}' ? JSMN_OBJECT : JSMN_ARRAY);
   b5746:	f04f 0902 	mov.w	r9, #2
						break;
					}
					token = &tokens[token->parent];
				}
#else
				for (i = parser->toknext - 1; i >= 0; i--) {
   b574a:	6845      	ldr	r5, [r0, #4]
   b574c:	3d01      	subs	r5, #1
   b574e:	eb03 1805 	add.w	r8, r3, r5, lsl #4
   b5752:	2d00      	cmp	r5, #0
   b5754:	db55      	blt.n	b5802 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x16a>
					token = &tokens[i];
					if (token->start != -1 && token->end == -1) {
   b5756:	f8d8 7004 	ldr.w	r7, [r8, #4]
   b575a:	3701      	adds	r7, #1
   b575c:	d04d      	beq.n	b57fa <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x162>
   b575e:	f8d8 a008 	ldr.w	sl, [r8, #8]
   b5762:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
   b5766:	d148      	bne.n	b57fa <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x162>
						if (token->type != type) {
   b5768:	f898 b000 	ldrb.w	fp, [r8]
   b576c:	45cb      	cmp	fp, r9
   b576e:	d14b      	bne.n	b5808 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x170>
							return JSMN_ERROR_INVAL;
						}
						parser->toksuper = -1;
						token->end = parser->pos + 1;
   b5770:	f10e 0e01 	add.w	lr, lr, #1
						parser->toksuper = -1;
   b5774:	f8c0 a008 	str.w	sl, [r0, #8]
						token->end = parser->pos + 1;
   b5778:	f8c8 e008 	str.w	lr, [r8, #8]
						break;
					}
				}
				/* Error if unmatched closing bracket */
				if (i == -1) return JSMN_ERROR_INVAL;
   b577c:	eb03 1e05 	add.w	lr, r3, r5, lsl #4
				for (; i >= 0; i--) {
					token = &tokens[i];
					if (token->start != -1 && token->end == -1) {
   b5780:	f8de 7004 	ldr.w	r7, [lr, #4]
   b5784:	3701      	adds	r7, #1
   b5786:	d042      	beq.n	b580e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x176>
   b5788:	f8de 7008 	ldr.w	r7, [lr, #8]
   b578c:	3701      	adds	r7, #1
   b578e:	d13e      	bne.n	b580e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x176>
					tokens[parser->toksuper].size++;
				break;
			case '\t' : case '\r' : case '\n' : case ' ':
				break;
			case ':':
				parser->toksuper = parser->toknext - 1;
   b5790:	6085      	str	r5, [r0, #8]
				break;
   b5792:	e7aa      	b.n	b56ea <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
		switch (c) {
   b5794:	f1b8 0f7d 	cmp.w	r8, #125	; 0x7d
   b5798:	d1af      	bne.n	b56fa <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x62>
				if (tokens == NULL)
   b579a:	2b00      	cmp	r3, #0
   b579c:	d0a5      	beq.n	b56ea <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
				type = (c == '}' ? JSMN_OBJECT : JSMN_ARRAY);
   b579e:	f04f 0901 	mov.w	r9, #1
   b57a2:	e7d2      	b.n	b574a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xb2>
				count++;
   b57a4:	3401      	adds	r4, #1
				if (tokens == NULL) {
   b57a6:	2b00      	cmp	r3, #0
   b57a8:	d09f      	beq.n	b56ea <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
	if (parser->toknext >= num_tokens) {
   b57aa:	6845      	ldr	r5, [r0, #4]
   b57ac:	9f09      	ldr	r7, [sp, #36]	; 0x24
   b57ae:	42af      	cmp	r7, r5
   b57b0:	d94a      	bls.n	b5848 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1b0>
	tok = &tokens[parser->toknext++];
   b57b2:	f105 0e01 	add.w	lr, r5, #1
   b57b6:	f8c0 e004 	str.w	lr, [r0, #4]
   b57ba:	eb03 1e05 	add.w	lr, r3, r5, lsl #4
	tok->start = tok->end = -1;
   b57be:	e9ce 6601 	strd	r6, r6, [lr, #4]
	tok = &tokens[parser->toknext++];
   b57c2:	ea4f 1a05 	mov.w	sl, r5, lsl #4
	tok->size = 0;
   b57c6:	2500      	movs	r5, #0
   b57c8:	f8ce 500c 	str.w	r5, [lr, #12]
				if (parser->toksuper != -1) {
   b57cc:	6885      	ldr	r5, [r0, #8]
   b57ce:	1c6f      	adds	r7, r5, #1
					tokens[parser->toksuper].size++;
   b57d0:	bf1f      	itttt	ne
   b57d2:	eb03 1905 	addne.w	r9, r3, r5, lsl #4
   b57d6:	f8d9 500c 	ldrne.w	r5, [r9, #12]
   b57da:	3501      	addne	r5, #1
   b57dc:	f8c9 500c 	strne.w	r5, [r9, #12]
				token->type = (c == '{' ? JSMN_OBJECT : JSMN_ARRAY);
   b57e0:	f1b8 0f7b 	cmp.w	r8, #123	; 0x7b
   b57e4:	bf0c      	ite	eq
   b57e6:	2501      	moveq	r5, #1
   b57e8:	2502      	movne	r5, #2
   b57ea:	f803 500a 	strb.w	r5, [r3, sl]
				token->start = parser->pos;
   b57ee:	6805      	ldr	r5, [r0, #0]
   b57f0:	f8ce 5004 	str.w	r5, [lr, #4]
				parser->toksuper = parser->toknext - 1;
   b57f4:	6845      	ldr	r5, [r0, #4]
   b57f6:	3d01      	subs	r5, #1
   b57f8:	e7ca      	b.n	b5790 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xf8>
				for (i = parser->toknext - 1; i >= 0; i--) {
   b57fa:	3d01      	subs	r5, #1
   b57fc:	f1a8 0810 	sub.w	r8, r8, #16
   b5800:	e7a7      	b.n	b5752 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xba>
				if (i == -1) return JSMN_ERROR_INVAL;
   b5802:	3501      	adds	r5, #1
   b5804:	f47f af71 	bne.w	b56ea <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
							return JSMN_ERROR_INVAL;
   b5808:	f06f 0401 	mvn.w	r4, #1
   b580c:	e01e      	b.n	b584c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1b4>
				for (; i >= 0; i--) {
   b580e:	3d01      	subs	r5, #1
   b5810:	1c6f      	adds	r7, r5, #1
   b5812:	f1ae 0e10 	sub.w	lr, lr, #16
   b5816:	d1b3      	bne.n	b5780 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xe8>
   b5818:	e767      	b.n	b56ea <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
	parser->pos++;
   b581a:	f10e 0901 	add.w	r9, lr, #1
   b581e:	f8c0 9000 	str.w	r9, [r0]
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b5822:	f8d0 8000 	ldr.w	r8, [r0]
   b5826:	4542      	cmp	r2, r8
   b5828:	f240 8093 	bls.w	b5952 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ba>
   b582c:	f811 5008 	ldrb.w	r5, [r1, r8]
   b5830:	2d00      	cmp	r5, #0
   b5832:	f000 808e 	beq.w	b5952 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ba>
		if (c == '\"') {
   b5836:	2d22      	cmp	r5, #34	; 0x22
   b5838:	d130      	bne.n	b589c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x204>
			if (tokens == NULL) {
   b583a:	b1f3      	cbz	r3, b587a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1e2>
	if (parser->toknext >= num_tokens) {
   b583c:	6845      	ldr	r5, [r0, #4]
   b583e:	9f09      	ldr	r7, [sp, #36]	; 0x24
   b5840:	42af      	cmp	r7, r5
   b5842:	d806      	bhi.n	b5852 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1ba>
		parser->pos = start;
   b5844:	f8c0 e000 	str.w	lr, [r0]
					return JSMN_ERROR_NOMEM;
   b5848:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
			}
		}
	}

	return count;
}
   b584c:	4620      	mov	r0, r4
   b584e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	tok = &tokens[parser->toknext++];
   b5852:	f105 0e01 	add.w	lr, r5, #1
   b5856:	ea4f 1805 	mov.w	r8, r5, lsl #4
   b585a:	eb03 1505 	add.w	r5, r3, r5, lsl #4
   b585e:	f8c0 e004 	str.w	lr, [r0, #4]
	tok->start = tok->end = -1;
   b5862:	e9c5 6601 	strd	r6, r6, [r5, #4]
	tok->size = 0;
   b5866:	2700      	movs	r7, #0
   b5868:	60ef      	str	r7, [r5, #12]
			jsmn_fill_token(token, JSMN_STRING, start+1, parser->pos);
   b586a:	f8d0 e000 	ldr.w	lr, [r0]
	token->type = type;
   b586e:	f04f 0a03 	mov.w	sl, #3
   b5872:	f803 a008 	strb.w	sl, [r3, r8]
	token->end = end;
   b5876:	e9c5 9e01 	strd	r9, lr, [r5, #4]
				if (parser->toksuper != -1 && tokens != NULL)
   b587a:	6885      	ldr	r5, [r0, #8]
   b587c:	1c6f      	adds	r7, r5, #1
				count++;
   b587e:	f104 0401 	add.w	r4, r4, #1
				if (parser->toksuper != -1 && tokens != NULL)
   b5882:	f43f af32 	beq.w	b56ea <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
   b5886:	2b00      	cmp	r3, #0
   b5888:	f43f af2f 	beq.w	b56ea <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
					tokens[parser->toksuper].size++;
   b588c:	eb03 1e05 	add.w	lr, r3, r5, lsl #4
   b5890:	f8de 500c 	ldr.w	r5, [lr, #12]
   b5894:	3501      	adds	r5, #1
   b5896:	f8ce 500c 	str.w	r5, [lr, #12]
   b589a:	e726      	b.n	b56ea <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
		if (c == '\\' && parser->pos + 1 < len) {
   b589c:	2d5c      	cmp	r5, #92	; 0x5c
   b589e:	d111      	bne.n	b58c4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x22c>
   b58a0:	f108 0501 	add.w	r5, r8, #1
   b58a4:	42aa      	cmp	r2, r5
   b58a6:	d90d      	bls.n	b58c4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x22c>
			parser->pos++;
   b58a8:	6005      	str	r5, [r0, #0]
			switch (js[parser->pos]) {
   b58aa:	5d4d      	ldrb	r5, [r1, r5]
   b58ac:	2d75      	cmp	r5, #117	; 0x75
   b58ae:	d82b      	bhi.n	b5908 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
   b58b0:	2d6d      	cmp	r5, #109	; 0x6d
   b58b2:	d80b      	bhi.n	b58cc <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x234>
   b58b4:	2d66      	cmp	r5, #102	; 0x66
   b58b6:	d827      	bhi.n	b5908 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
   b58b8:	2d5b      	cmp	r5, #91	; 0x5b
   b58ba:	d81d      	bhi.n	b58f8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x260>
   b58bc:	2d22      	cmp	r5, #34	; 0x22
   b58be:	d001      	beq.n	b58c4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x22c>
   b58c0:	2d2f      	cmp	r5, #47	; 0x2f
   b58c2:	d121      	bne.n	b5908 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b58c4:	6805      	ldr	r5, [r0, #0]
   b58c6:	3501      	adds	r5, #1
   b58c8:	6005      	str	r5, [r0, #0]
   b58ca:	e7aa      	b.n	b5822 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x18a>
   b58cc:	3d6e      	subs	r5, #110	; 0x6e
   b58ce:	2d07      	cmp	r5, #7
   b58d0:	d81a      	bhi.n	b5908 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
   b58d2:	a701      	add	r7, pc, #4	; (adr r7, b58d8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x240>)
   b58d4:	f857 f025 	ldr.w	pc, [r7, r5, lsl #2]
   b58d8:	000b58c5 	.word	0x000b58c5
   b58dc:	000b5909 	.word	0x000b5909
   b58e0:	000b5909 	.word	0x000b5909
   b58e4:	000b5909 	.word	0x000b5909
   b58e8:	000b58c5 	.word	0x000b58c5
   b58ec:	000b5909 	.word	0x000b5909
   b58f0:	000b58c5 	.word	0x000b58c5
   b58f4:	000b590f 	.word	0x000b590f
   b58f8:	3d5c      	subs	r5, #92	; 0x5c
   b58fa:	b2ed      	uxtb	r5, r5
   b58fc:	fa0c f505 	lsl.w	r5, ip, r5
   b5900:	f240 4741 	movw	r7, #1089	; 0x441
   b5904:	423d      	tst	r5, r7
   b5906:	d1dd      	bne.n	b58c4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x22c>
			parser->pos = start;
   b5908:	f8c0 e000 	str.w	lr, [r0]
				if (r < 0) return r;
   b590c:	e77c      	b.n	b5808 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x170>
					parser->pos++;
   b590e:	f108 0502 	add.w	r5, r8, #2
   b5912:	6005      	str	r5, [r0, #0]
   b5914:	f04f 0a04 	mov.w	sl, #4
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
   b5918:	f8d0 8000 	ldr.w	r8, [r0]
   b591c:	4542      	cmp	r2, r8
   b591e:	d803      	bhi.n	b5928 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x290>
					parser->pos--;
   b5920:	6805      	ldr	r5, [r0, #0]
   b5922:	3d01      	subs	r5, #1
   b5924:	6005      	str	r5, [r0, #0]
					break;
   b5926:	e7cd      	b.n	b58c4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x22c>
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
   b5928:	f811 5008 	ldrb.w	r5, [r1, r8]
   b592c:	2d00      	cmp	r5, #0
   b592e:	d0f7      	beq.n	b5920 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x288>
						if(!((js[parser->pos] >= 48 && js[parser->pos] <= 57) || /* 0-9 */
   b5930:	f1a5 0b30 	sub.w	fp, r5, #48	; 0x30
   b5934:	f1bb 0f09 	cmp.w	fp, #9
   b5938:	d904      	bls.n	b5944 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ac>
   b593a:	f025 0520 	bic.w	r5, r5, #32
   b593e:	3d41      	subs	r5, #65	; 0x41
   b5940:	2d05      	cmp	r5, #5
   b5942:	d8e1      	bhi.n	b5908 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
						parser->pos++;
   b5944:	f108 0501 	add.w	r5, r8, #1
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
   b5948:	f1ba 0a01 	subs.w	sl, sl, #1
						parser->pos++;
   b594c:	6005      	str	r5, [r0, #0]
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
   b594e:	d1e3      	bne.n	b5918 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x280>
   b5950:	e7e6      	b.n	b5920 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x288>
	parser->pos = start;
   b5952:	f8c0 e000 	str.w	lr, [r0]
				return JSMN_ERROR_PART;
   b5956:	f06f 0402 	mvn.w	r4, #2
   b595a:	e777      	b.n	b584c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1b4>
   b595c:	00800013 	.word	0x00800013
				if (tokens != NULL && parser->toksuper != -1 &&
   b5960:	2b00      	cmp	r3, #0
   b5962:	f43f aec2 	beq.w	b56ea <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
   b5966:	6885      	ldr	r5, [r0, #8]
   b5968:	1c6f      	adds	r7, r5, #1
   b596a:	f43f aebe 	beq.w	b56ea <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
						tokens[parser->toksuper].type != JSMN_ARRAY &&
   b596e:	012d      	lsls	r5, r5, #4
   b5970:	5d5d      	ldrb	r5, [r3, r5]
   b5972:	3d01      	subs	r5, #1
   b5974:	2d01      	cmp	r5, #1
   b5976:	f67f aeb8 	bls.w	b56ea <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
					for (i = parser->toknext - 1; i >= 0; i--) {
   b597a:	6845      	ldr	r5, [r0, #4]
   b597c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
   b5980:	eb03 1e05 	add.w	lr, r3, r5, lsl #4
   b5984:	f1b8 0f00 	cmp.w	r8, #0
   b5988:	f6ff aeaf 	blt.w	b56ea <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
						if (tokens[i].type == JSMN_ARRAY || tokens[i].type == JSMN_OBJECT) {
   b598c:	f81e 5c10 	ldrb.w	r5, [lr, #-16]
   b5990:	3d01      	subs	r5, #1
   b5992:	2d01      	cmp	r5, #1
   b5994:	d80a      	bhi.n	b59ac <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x314>
							if (tokens[i].start != -1 && tokens[i].end == -1) {
   b5996:	f85e 5c0c 	ldr.w	r5, [lr, #-12]
   b599a:	3501      	adds	r5, #1
   b599c:	d006      	beq.n	b59ac <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x314>
   b599e:	f85e 5c08 	ldr.w	r5, [lr, #-8]
   b59a2:	3501      	adds	r5, #1
   b59a4:	d102      	bne.n	b59ac <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x314>
								parser->toksuper = i;
   b59a6:	f8c0 8008 	str.w	r8, [r0, #8]
								break;
   b59aa:	e69e      	b.n	b56ea <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
					for (i = parser->toknext - 1; i >= 0; i--) {
   b59ac:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   b59b0:	f1ae 0e10 	sub.w	lr, lr, #16
   b59b4:	e7e6      	b.n	b5984 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ec>
   b59b6:	f1a5 0920 	sub.w	r9, r5, #32
   b59ba:	4f24      	ldr	r7, [pc, #144]	; (b5a4c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x3b4>)
   b59bc:	fa5f f989 	uxtb.w	r9, r9
   b59c0:	fa0c f909 	lsl.w	r9, ip, r9
   b59c4:	ea19 0f07 	tst.w	r9, r7
   b59c8:	f47f aeaa 	bne.w	b5720 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x88>
		if (js[parser->pos] < 32 || js[parser->pos] >= 127) {
   b59cc:	3d20      	subs	r5, #32
   b59ce:	2d5e      	cmp	r5, #94	; 0x5e
   b59d0:	d89a      	bhi.n	b5908 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b59d2:	f108 0501 	add.w	r5, r8, #1
   b59d6:	6005      	str	r5, [r0, #0]
   b59d8:	e68f      	b.n	b56fa <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x62>
		switch (js[parser->pos]) {
   b59da:	2d0d      	cmp	r5, #13
   b59dc:	d1f6      	bne.n	b59cc <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x334>
   b59de:	e69f      	b.n	b5720 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x88>
   b59e0:	f005 09df 	and.w	r9, r5, #223	; 0xdf
   b59e4:	f1b9 0f5d 	cmp.w	r9, #93	; 0x5d
   b59e8:	e7f8      	b.n	b59dc <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x344>
	if (parser->toknext >= num_tokens) {
   b59ea:	6845      	ldr	r5, [r0, #4]
   b59ec:	9f09      	ldr	r7, [sp, #36]	; 0x24
   b59ee:	42af      	cmp	r7, r5
   b59f0:	f67f af28 	bls.w	b5844 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1ac>
	tok = &tokens[parser->toknext++];
   b59f4:	f105 0801 	add.w	r8, r5, #1
   b59f8:	ea4f 1905 	mov.w	r9, r5, lsl #4
   b59fc:	eb03 1505 	add.w	r5, r3, r5, lsl #4
   b5a00:	f8c0 8004 	str.w	r8, [r0, #4]
	tok->start = tok->end = -1;
   b5a04:	e9c5 6601 	strd	r6, r6, [r5, #4]
	tok->size = 0;
   b5a08:	2700      	movs	r7, #0
   b5a0a:	60ef      	str	r7, [r5, #12]
	jsmn_fill_token(token, JSMN_PRIMITIVE, start, parser->pos);
   b5a0c:	f8d0 8000 	ldr.w	r8, [r0]
	token->type = type;
   b5a10:	f04f 0a04 	mov.w	sl, #4
   b5a14:	f803 a009 	strb.w	sl, [r3, r9]
	token->end = end;
   b5a18:	e9c5 e801 	strd	lr, r8, [r5, #4]
	parser->pos--;
   b5a1c:	6805      	ldr	r5, [r0, #0]
   b5a1e:	3d01      	subs	r5, #1
   b5a20:	e683      	b.n	b572a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x92>
	if (tokens != NULL) {
   b5a22:	2b00      	cmp	r3, #0
   b5a24:	f43f af12 	beq.w	b584c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1b4>
		for (i = parser->toknext - 1; i >= 0; i--) {
   b5a28:	6842      	ldr	r2, [r0, #4]
   b5a2a:	1e51      	subs	r1, r2, #1
   b5a2c:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   b5a30:	2900      	cmp	r1, #0
   b5a32:	f6ff af0b 	blt.w	b584c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1b4>
			if (tokens[i].start != -1 && tokens[i].end == -1) {
   b5a36:	f853 2c0c 	ldr.w	r2, [r3, #-12]
   b5a3a:	3201      	adds	r2, #1
   b5a3c:	d003      	beq.n	b5a46 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x3ae>
   b5a3e:	f853 2c08 	ldr.w	r2, [r3, #-8]
   b5a42:	3201      	adds	r2, #1
   b5a44:	d087      	beq.n	b5956 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2be>
		for (i = parser->toknext - 1; i >= 0; i--) {
   b5a46:	3901      	subs	r1, #1
   b5a48:	3b10      	subs	r3, #16
   b5a4a:	e7f1      	b.n	b5a30 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x398>
   b5a4c:	04001001 	.word	0x04001001

000b5a50 <_ZN10JsonParser5parseEv>:
bool JsonParser::parse() {
   b5a50:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (offset == 0) {
   b5a52:	68c2      	ldr	r2, [r0, #12]
bool JsonParser::parse() {
   b5a54:	4604      	mov	r4, r0
	if (offset == 0) {
   b5a56:	b912      	cbnz	r2, b5a5e <_ZN10JsonParser5parseEv+0xe>
		return false;
   b5a58:	2000      	movs	r0, #0
}
   b5a5a:	b003      	add	sp, #12
   b5a5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (tokens) {
   b5a5e:	6943      	ldr	r3, [r0, #20]
		JsonParserGeneratorRK::jsmn_init(&parser);
   b5a60:	f100 0620 	add.w	r6, r0, #32
	if (tokens) {
   b5a64:	b1ab      	cbz	r3, b5a92 <_ZN10JsonParser5parseEv+0x42>
/**
 * Creates a new parser based over a given  buffer with an array of tokens
 * available.
 */
void jsmn_init(jsmn_parser *parser) {
	parser->pos = 0;
   b5a66:	2100      	movs	r1, #0
	parser->toknext = 0;
   b5a68:	e9c0 1108 	strd	r1, r1, [r0, #32]
	parser->toksuper = -1;
   b5a6c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   b5a70:	6281      	str	r1, [r0, #40]	; 0x28
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   b5a72:	69c1      	ldr	r1, [r0, #28]
   b5a74:	9100      	str	r1, [sp, #0]
   b5a76:	6841      	ldr	r1, [r0, #4]
   b5a78:	4630      	mov	r0, r6
   b5a7a:	f7ff fe0d 	bl	b5698 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>
		if (result == JsonParserGeneratorRK::JSMN_ERROR_NOMEM) {
   b5a7e:	1c43      	adds	r3, r0, #1
   b5a80:	d128      	bne.n	b5ad4 <_ZN10JsonParser5parseEv+0x84>
			if (staticBuffers) {
   b5a82:	7c25      	ldrb	r5, [r4, #16]
   b5a84:	2d00      	cmp	r5, #0
   b5a86:	d1e7      	bne.n	b5a58 <_ZN10JsonParser5parseEv+0x8>
			free(tokens);
   b5a88:	6960      	ldr	r0, [r4, #20]
   b5a8a:	f000 ff27 	bl	b68dc <free>
			tokens = 0;
   b5a8e:	6165      	str	r5, [r4, #20]
			maxTokens = 0;
   b5a90:	61e5      	str	r5, [r4, #28]
	parser->pos = 0;
   b5a92:	2500      	movs	r5, #0
	parser->toksuper = -1;
   b5a94:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
	parser->toknext = 0;
   b5a98:	e9c4 5508 	strd	r5, r5, [r4, #32]
	int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, 0, 0);
   b5a9c:	68e2      	ldr	r2, [r4, #12]
   b5a9e:	6861      	ldr	r1, [r4, #4]
	parser->toksuper = -1;
   b5aa0:	62a7      	str	r7, [r4, #40]	; 0x28
	int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, 0, 0);
   b5aa2:	9500      	str	r5, [sp, #0]
   b5aa4:	462b      	mov	r3, r5
   b5aa6:	4630      	mov	r0, r6
   b5aa8:	f7ff fdf6 	bl	b5698 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>
	if (result < 0) {
   b5aac:	2800      	cmp	r0, #0
   b5aae:	dbd3      	blt.n	b5a58 <_ZN10JsonParser5parseEv+0x8>
	maxTokens = (size_t) result;
   b5ab0:	61e0      	str	r0, [r4, #28]
	if (maxTokens > 0) {
   b5ab2:	d017      	beq.n	b5ae4 <_ZN10JsonParser5parseEv+0x94>
		tokens = (JsonParserGeneratorRK::jsmntok_t *)malloc(sizeof(JsonParserGeneratorRK::jsmntok_t) * maxTokens);
   b5ab4:	0100      	lsls	r0, r0, #4
   b5ab6:	f000 ff09 	bl	b68cc <malloc>
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   b5aba:	69e2      	ldr	r2, [r4, #28]
		tokens = (JsonParserGeneratorRK::jsmntok_t *)malloc(sizeof(JsonParserGeneratorRK::jsmntok_t) * maxTokens);
   b5abc:	6160      	str	r0, [r4, #20]
   b5abe:	4603      	mov	r3, r0
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   b5ac0:	9200      	str	r2, [sp, #0]
	parser->toknext = 0;
   b5ac2:	e9c4 5508 	strd	r5, r5, [r4, #32]
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   b5ac6:	68e2      	ldr	r2, [r4, #12]
   b5ac8:	6861      	ldr	r1, [r4, #4]
	parser->toksuper = -1;
   b5aca:	62a7      	str	r7, [r4, #40]	; 0x28
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   b5acc:	4630      	mov	r0, r6
   b5ace:	f7ff fde3 	bl	b5698 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>
   b5ad2:	e001      	b.n	b5ad8 <_ZN10JsonParser5parseEv+0x88>
		if (result < 0) {
   b5ad4:	2800      	cmp	r0, #0
   b5ad6:	dbbf      	blt.n	b5a58 <_ZN10JsonParser5parseEv+0x8>
		tokensEnd = &tokens[result];
   b5ad8:	6963      	ldr	r3, [r4, #20]
   b5ada:	eb03 1000 	add.w	r0, r3, r0, lsl #4
   b5ade:	61a0      	str	r0, [r4, #24]
	return true;
   b5ae0:	2001      	movs	r0, #1
   b5ae2:	e7ba      	b.n	b5a5a <_ZN10JsonParser5parseEv+0xa>
		tokensEnd = tokens;
   b5ae4:	6963      	ldr	r3, [r4, #20]
   b5ae6:	61a3      	str	r3, [r4, #24]
   b5ae8:	e7fa      	b.n	b5ae0 <_ZN10JsonParser5parseEv+0x90>

000b5aea <_ZN12JsonModifier16removeArrayIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj>:
bool JsonModifier::removeArrayIndex(const JsonParserGeneratorRK::jsmntok_t *container, size_t index) {
   b5aea:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   b5aee:	4604      	mov	r4, r0
	const JsonParserGeneratorRK::jsmntok_t *tok = jp.getTokenByIndex(container, index);
   b5af0:	6b00      	ldr	r0, [r0, #48]	; 0x30
   b5af2:	f7ff fab4 	bl	b505e <_ZNK10JsonParser15getTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj>
	if (!tok) {
   b5af6:	4605      	mov	r5, r0
   b5af8:	b348      	cbz	r0, b5b4e <_ZN12JsonModifier16removeArrayIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj+0x64>
	const JsonParserGeneratorRK::jsmntok_t expandedToken = tokenWithQuotes(tok);
   b5afa:	4602      	mov	r2, r0
   b5afc:	4621      	mov	r1, r4
   b5afe:	4668      	mov	r0, sp
   b5b00:	f7ff fd80 	bl	b5604 <_ZNK12JsonModifier15tokenWithQuotesEPKN21JsonParserGeneratorRK9jsmntok_tE>
	int left = findLeftComma(tok);
   b5b04:	4629      	mov	r1, r5
   b5b06:	4620      	mov	r0, r4
   b5b08:	f7ff fd8c 	bl	b5624 <_ZNK12JsonModifier13findLeftCommaEPKN21JsonParserGeneratorRK9jsmntok_tE>
	int right = findRightComma(tok);
   b5b0c:	4629      	mov	r1, r5
	int left = findLeftComma(tok);
   b5b0e:	4680      	mov	r8, r0
	int right = findRightComma(tok);
   b5b10:	4620      	mov	r0, r4
   b5b12:	f7ff fda2 	bl	b565a <_ZNK12JsonModifier14findRightCommaEPKN21JsonParserGeneratorRK9jsmntok_tE>
	if (left >= 0 && right >= 0) {
   b5b16:	f1b8 0f00 	cmp.w	r8, #0
	const JsonParserGeneratorRK::jsmntok_t expandedToken = tokenWithQuotes(tok);
   b5b1a:	e9dd 7601 	ldrd	r7, r6, [sp, #4]
	if (left >= 0 && right >= 0) {
   b5b1e:	db19      	blt.n	b5b54 <_ZN12JsonModifier16removeArrayIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj+0x6a>
   b5b20:	2800      	cmp	r0, #0
   b5b22:	bfac      	ite	ge
   b5b24:	4606      	movge	r6, r0
   b5b26:	4647      	movlt	r7, r8
	origAfter = jp.getOffset() - right;
   b5b28:	6b23      	ldr	r3, [r4, #48]	; 0x30
   b5b2a:	68da      	ldr	r2, [r3, #12]
   b5b2c:	1b92      	subs	r2, r2, r6
	if (origAfter > 0) {
   b5b2e:	2a00      	cmp	r2, #0
	origAfter = jp.getOffset() - right;
   b5b30:	63a2      	str	r2, [r4, #56]	; 0x38
	if (origAfter > 0) {
   b5b32:	dd04      	ble.n	b5b3e <_ZN12JsonModifier16removeArrayIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj+0x54>
	char *getBuffer() const { return buffer; }
   b5b34:	6858      	ldr	r0, [r3, #4]
		memmove(jp.getBuffer() + left, jp.getBuffer() + right, origAfter);
   b5b36:	1981      	adds	r1, r0, r6
   b5b38:	4438      	add	r0, r7
   b5b3a:	f003 fb27 	bl	b918c <memmove>
	jp.setOffset(left + origAfter);
   b5b3e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   b5b40:	6b22      	ldr	r2, [r4, #48]	; 0x30
   b5b42:	443b      	add	r3, r7
	void setOffset(size_t offset) { this->offset = offset; };
   b5b44:	60d3      	str	r3, [r2, #12]
	jp.parse();
   b5b46:	6b20      	ldr	r0, [r4, #48]	; 0x30
   b5b48:	f7ff ff82 	bl	b5a50 <_ZN10JsonParser5parseEv>
	return true;
   b5b4c:	2001      	movs	r0, #1
}
   b5b4e:	b004      	add	sp, #16
   b5b50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (right >= 0) {
   b5b54:	2800      	cmp	r0, #0
		right++;
   b5b56:	bfa8      	it	ge
   b5b58:	1c46      	addge	r6, r0, #1
		left = expandedToken.start;
   b5b5a:	e7e5      	b.n	b5b28 <_ZN12JsonModifier16removeArrayIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj+0x3e>

000b5b5c <_ZN12JsonModifier6finishEv>:
void JsonModifier::finish() {
   b5b5c:	b538      	push	{r3, r4, r5, lr}
	if (start == -1) {
   b5b5e:	6b43      	ldr	r3, [r0, #52]	; 0x34
   b5b60:	1c5a      	adds	r2, r3, #1
void JsonModifier::finish() {
   b5b62:	4604      	mov	r4, r0
	if (start == -1) {
   b5b64:	d018      	beq.n	b5b98 <_ZN12JsonModifier6finishEv+0x3c>
	if (origAfter > 0) {
   b5b66:	6b82      	ldr	r2, [r0, #56]	; 0x38
   b5b68:	2a00      	cmp	r2, #0
   b5b6a:	dd08      	ble.n	b5b7e <_ZN12JsonModifier6finishEv+0x22>
	char *getBuffer() const { return buffer; }
   b5b6c:	6b01      	ldr	r1, [r0, #48]	; 0x30
		memmove(jp.getBuffer() + start + getOffset(), jp.getBuffer() + saveLoc, origAfter);
   b5b6e:	68e5      	ldr	r5, [r4, #12]
   b5b70:	6848      	ldr	r0, [r1, #4]
   b5b72:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   b5b74:	442b      	add	r3, r5
   b5b76:	4401      	add	r1, r0
   b5b78:	4418      	add	r0, r3
   b5b7a:	f003 fb07 	bl	b918c <memmove>
	jp.setOffset(start + getOffset() + origAfter);
   b5b7e:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	; 0x30
   b5b82:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   b5b84:	440b      	add	r3, r1
   b5b86:	68e1      	ldr	r1, [r4, #12]
   b5b88:	440b      	add	r3, r1
	void setOffset(size_t offset) { this->offset = offset; };
   b5b8a:	60d3      	str	r3, [r2, #12]
	jp.parse();
   b5b8c:	6b20      	ldr	r0, [r4, #48]	; 0x30
   b5b8e:	f7ff ff5f 	bl	b5a50 <_ZN10JsonParser5parseEv>
	start = -1;
   b5b92:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b5b96:	6363      	str	r3, [r4, #52]	; 0x34
}
   b5b98:	bd38      	pop	{r3, r4, r5, pc}
	...

000b5b9c <_ZN8MB85RC64D1Ev>:
	size_t memorySize;
	int addr; // This is just 0-7, the (0b1010000 of the 7-bit address is ORed in later)

};

class MB85RC64 : public MB85RC {
   b5b9c:	b510      	push	{r4, lr}
   b5b9e:	4b03      	ldr	r3, [pc, #12]	; (b5bac <_ZN8MB85RC64D1Ev+0x10>)
   b5ba0:	6003      	str	r3, [r0, #0]
   b5ba2:	4604      	mov	r4, r0
   b5ba4:	f000 f9c4 	bl	b5f30 <_ZN6MB85RCD1Ev>
   b5ba8:	4620      	mov	r0, r4
   b5baa:	bd10      	pop	{r4, pc}
   b5bac:	000ba0bc 	.word	0x000ba0bc

000b5bb0 <_ZN8MB85RC64D0Ev>:
   b5bb0:	b510      	push	{r4, lr}
   b5bb2:	4604      	mov	r4, r0
   b5bb4:	f7ff fff2 	bl	b5b9c <_ZN8MB85RC64D1Ev>
   b5bb8:	4620      	mov	r0, r4
   b5bba:	2110      	movs	r1, #16
   b5bbc:	f7fe fa6d 	bl	b409a <_ZdlPvj>
   b5bc0:	4620      	mov	r0, r4
   b5bc2:	bd10      	pop	{r4, pc}

000b5bc4 <_ZN10nodeIDData8validateEj>:
    nodeDatabase.set_nodeIDJson(blank);
    nodeDatabase.flush(true);
    Log.info("NodeID data is now %s", nodeDatabase.get_nodeIDJson().c_str());
}

bool nodeIDData::validate(size_t dataSize) {
   b5bc4:	b510      	push	{r4, lr}
    bool valid = PersistentDataFRAM::validate(dataSize);
   b5bc6:	f000 fbc5 	bl	b6354 <_ZN15StorageHelperRK18PersistentDataBase8validateEj>
    if (!valid) Log.info("nodeID data is %s",(valid) ? "valid": "not valid");
   b5bca:	4604      	mov	r4, r0
   b5bcc:	b920      	cbnz	r0, b5bd8 <_ZN10nodeIDData8validateEj+0x14>
   b5bce:	4a03      	ldr	r2, [pc, #12]	; (b5bdc <_ZN10nodeIDData8validateEj+0x18>)
   b5bd0:	4903      	ldr	r1, [pc, #12]	; (b5be0 <_ZN10nodeIDData8validateEj+0x1c>)
   b5bd2:	4804      	ldr	r0, [pc, #16]	; (b5be4 <_ZN10nodeIDData8validateEj+0x20>)
   b5bd4:	f7fe faca 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
    return valid;
}
   b5bd8:	4620      	mov	r0, r4
   b5bda:	bd10      	pop	{r4, pc}
   b5bdc:	000b9fe4 	.word	0x000b9fe4
   b5be0:	000ba001 	.word	0x000ba001
   b5be4:	2003e6b0 	.word	0x2003e6b0

000b5be8 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>:
         * 
         * Blocks if another thread has obtained the mutex, continues when the other thread releases it.
         * 
         * Never call lock from a SINGLE_THREADED_BLOCK since deadlock can occur.
         */
        void lock() const { 
   b5be8:	b510      	push	{r4, lr}
            if (!handle_) {
   b5bea:	6803      	ldr	r3, [r0, #0]
        void lock() const { 
   b5bec:	4604      	mov	r4, r0
            if (!handle_) {
   b5bee:	b90b      	cbnz	r3, b5bf4 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv+0xc>
                os_mutex_recursive_create(&handle_);
   b5bf0:	f000 fc58 	bl	b64a4 <os_mutex_recursive_create>
            }
            os_mutex_recursive_lock(handle_); 
   b5bf4:	6820      	ldr	r0, [r4, #0]
        }
   b5bf6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            os_mutex_recursive_lock(handle_); 
   b5bfa:	f000 bc63 	b.w	b64c4 <os_mutex_recursive_lock>

000b5bfe <_ZN15StorageHelperRK18PersistentDataFRAM4saveEv>:
        }

        /**
         * @brief Save the persistent data file. You normally do not need to call this; it will be saved automatically.
         */
        virtual void save() {
   b5bfe:	b538      	push	{r3, r4, r5, lr}
   b5c00:	4604      	mov	r4, r0
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
      { _M_device.lock(); }
   b5c02:	3004      	adds	r0, #4
   b5c04:	f7ff fff0 	bl	b5be8 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
            WITH_LOCK(*this) {
                fram.writeData(framOffset, (const uint8_t*)savedDataHeader, savedDataSize);
   b5c08:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b5c0a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   b5c0c:	6803      	ldr	r3, [r0, #0]
   b5c0e:	68dd      	ldr	r5, [r3, #12]
   b5c10:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   b5c14:	47a8      	blx	r5
            os_mutex_recursive_unlock(handle_); 
   b5c16:	6860      	ldr	r0, [r4, #4]
   b5c18:	f000 fc5c 	bl	b64d4 <os_mutex_recursive_unlock>
            }
            PersistentDataBase::save();
   b5c1c:	4620      	mov	r0, r4
        } 
   b5c1e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            PersistentDataBase::save();
   b5c22:	f000 bc19 	b.w	b6458 <_ZN15StorageHelperRK18PersistentDataBase4saveEv>

000b5c26 <_ZN15StorageHelperRK18PersistentDataFRAM4loadEv>:
        virtual bool load() {
   b5c26:	b538      	push	{r3, r4, r5, lr}
   b5c28:	4604      	mov	r4, r0
   b5c2a:	3004      	adds	r0, #4
   b5c2c:	f7ff ffdc 	bl	b5be8 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                fram.readData(framOffset, (uint8_t*)savedDataHeader, savedDataSize);
   b5c30:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b5c32:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   b5c34:	6803      	ldr	r3, [r0, #0]
   b5c36:	689d      	ldr	r5, [r3, #8]
   b5c38:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   b5c3c:	47a8      	blx	r5
                if (!validate(savedDataHeader->size)) {
   b5c3e:	68a2      	ldr	r2, [r4, #8]
   b5c40:	6823      	ldr	r3, [r4, #0]
   b5c42:	88d1      	ldrh	r1, [r2, #6]
   b5c44:	695b      	ldr	r3, [r3, #20]
   b5c46:	4620      	mov	r0, r4
   b5c48:	4798      	blx	r3
   b5c4a:	b918      	cbnz	r0, b5c54 <_ZN15StorageHelperRK18PersistentDataFRAM4loadEv+0x2e>
                    initialize();
   b5c4c:	6823      	ldr	r3, [r4, #0]
   b5c4e:	4620      	mov	r0, r4
   b5c50:	699b      	ldr	r3, [r3, #24]
   b5c52:	4798      	blx	r3
            os_mutex_recursive_unlock(handle_); 
   b5c54:	6860      	ldr	r0, [r4, #4]
   b5c56:	f000 fc3d 	bl	b64d4 <os_mutex_recursive_unlock>
        }
   b5c5a:	2001      	movs	r0, #1
   b5c5c:	bd38      	pop	{r3, r4, r5, pc}
	...

000b5c60 <_ZN15StorageHelperRK18PersistentDataFRAMD1Ev>:
    class PersistentDataFRAM : public PersistentDataBase {
   b5c60:	b510      	push	{r4, lr}
    class PersistentDataBase : public CustomRecursiveMutex {
   b5c62:	4b04      	ldr	r3, [pc, #16]	; (b5c74 <_ZN15StorageHelperRK18PersistentDataFRAMD1Ev+0x14>)
   b5c64:	6003      	str	r3, [r0, #0]
    class PersistentDataFRAM : public PersistentDataBase {
   b5c66:	4604      	mov	r4, r0
            if (handle_) {
   b5c68:	6840      	ldr	r0, [r0, #4]
   b5c6a:	b108      	cbz	r0, b5c70 <_ZN15StorageHelperRK18PersistentDataFRAMD1Ev+0x10>
                os_mutex_recursive_destroy(handle_);
   b5c6c:	f000 fc22 	bl	b64b4 <os_mutex_recursive_destroy>
    class PersistentDataFRAM : public PersistentDataBase {
   b5c70:	4620      	mov	r0, r4
   b5c72:	bd10      	pop	{r4, pc}
   b5c74:	000ba1b0 	.word	0x000ba1b0

000b5c78 <_ZN10nodeIDDataD1Ev>:
nodeIDData::~nodeIDData() {
   b5c78:	b510      	push	{r4, lr}
   b5c7a:	4b03      	ldr	r3, [pc, #12]	; (b5c88 <_ZN10nodeIDDataD1Ev+0x10>)
   b5c7c:	6003      	str	r3, [r0, #0]
   b5c7e:	4604      	mov	r4, r0
   b5c80:	f7ff ffee 	bl	b5c60 <_ZN15StorageHelperRK18PersistentDataFRAMD1Ev>
}
   b5c84:	4620      	mov	r0, r4
   b5c86:	bd10      	pop	{r4, pc}
   b5c88:	000ba0d8 	.word	0x000ba0d8

000b5c8c <_ZN10nodeIDDataD0Ev>:
nodeIDData::~nodeIDData() {
   b5c8c:	b510      	push	{r4, lr}
   b5c8e:	4604      	mov	r4, r0
}
   b5c90:	f7ff fff2 	bl	b5c78 <_ZN10nodeIDDataD1Ev>
   b5c94:	4620      	mov	r0, r4
   b5c96:	f640 413c 	movw	r1, #3132	; 0xc3c
   b5c9a:	f7fe f9fe 	bl	b409a <_ZdlPvj>
   b5c9e:	4620      	mov	r0, r4
   b5ca0:	bd10      	pop	{r4, pc}
	...

000b5ca4 <_ZN10nodeIDDataC1Ev>:
nodeIDData::nodeIDData() : StorageHelperRK::PersistentDataFRAM(::fram, 200, &nodeData.nodeHeader, sizeof(NodeData), NODEID_DATA_MAGIC, NODEID_DATA_VERSION) {
   b5ca4:	f100 012c 	add.w	r1, r0, #44	; 0x2c
        CustomRecursiveMutex() : handle_(nullptr) {
   b5ca8:	2200      	movs	r2, #0
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b5caa:	6081      	str	r1, [r0, #8]
   b5cac:	490a      	ldr	r1, [pc, #40]	; (b5cd8 <_ZN10nodeIDDataC1Ev+0x34>)
        CustomRecursiveMutex() : handle_(nullptr) {
   b5cae:	6042      	str	r2, [r0, #4]
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b5cb0:	f44f 6c41 	mov.w	ip, #3088	; 0xc10
   b5cb4:	6182      	str	r2, [r0, #24]
   b5cb6:	f880 2020 	strb.w	r2, [r0, #32]
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion), fram(fram), framOffset(framOffset) {
   b5cba:	4a08      	ldr	r2, [pc, #32]	; (b5cdc <_ZN10nodeIDDataC1Ev+0x38>)
   b5cbc:	6242      	str	r2, [r0, #36]	; 0x24
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b5cbe:	e9c0 c103 	strd	ip, r1, [r0, #12]
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion), fram(fram), framOffset(framOffset) {
   b5cc2:	22c8      	movs	r2, #200	; 0xc8
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b5cc4:	2102      	movs	r1, #2
   b5cc6:	8281      	strh	r1, [r0, #20]
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion), fram(fram), framOffset(framOffset) {
   b5cc8:	6282      	str	r2, [r0, #40]	; 0x28
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b5cca:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   b5cce:	4a04      	ldr	r2, [pc, #16]	; (b5ce0 <_ZN10nodeIDDataC1Ev+0x3c>)
   b5cd0:	61c1      	str	r1, [r0, #28]
   b5cd2:	6002      	str	r2, [r0, #0]
};
   b5cd4:	4770      	bx	lr
   b5cd6:	bf00      	nop
   b5cd8:	20a99e60 	.word	0x20a99e60
   b5cdc:	2003e658 	.word	0x2003e658
   b5ce0:	000ba0d8 	.word	0x000ba0d8

000b5ce4 <_ZN10nodeIDData8instanceEv>:
nodeIDData &nodeIDData::instance() {
   b5ce4:	b510      	push	{r4, lr}
    if (!_instance) {
   b5ce6:	4c07      	ldr	r4, [pc, #28]	; (b5d04 <_ZN10nodeIDData8instanceEv+0x20>)
   b5ce8:	6823      	ldr	r3, [r4, #0]
   b5cea:	b943      	cbnz	r3, b5cfe <_ZN10nodeIDData8instanceEv+0x1a>
        _instance = new nodeIDData();
   b5cec:	f640 403c 	movw	r0, #3132	; 0xc3c
   b5cf0:	f7fe f9cf 	bl	b4092 <_Znwj>
   b5cf4:	4603      	mov	r3, r0
   b5cf6:	b108      	cbz	r0, b5cfc <_ZN10nodeIDData8instanceEv+0x18>
   b5cf8:	f7ff ffd4 	bl	b5ca4 <_ZN10nodeIDDataC1Ev>
   b5cfc:	6023      	str	r3, [r4, #0]
}
   b5cfe:	6820      	ldr	r0, [r4, #0]
   b5d00:	bd10      	pop	{r4, pc}
   b5d02:	bf00      	nop
   b5d04:	2003e654 	.word	0x2003e654

000b5d08 <_ZN10nodeIDData5setupEv>:
void nodeIDData::setup() {
   b5d08:	b510      	push	{r4, lr}
    fram.begin();
   b5d0a:	6a40      	ldr	r0, [r0, #36]	; 0x24
   b5d0c:	f000 f926 	bl	b5f5c <_ZN6MB85RC5beginEv>
    nodeDatabase
   b5d10:	f7ff ffe8 	bl	b5ce4 <_ZN10nodeIDData8instanceEv>
            saveDelayMs = value;
   b5d14:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
        .load();
   b5d18:	6803      	ldr	r3, [r0, #0]
   b5d1a:	61c2      	str	r2, [r0, #28]
}
   b5d1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        .load();
   b5d20:	685b      	ldr	r3, [r3, #4]
   b5d22:	4718      	bx	r3

000b5d24 <_ZN10nodeIDData19nodeDataStorageSizeEv>:
}
   b5d24:	f44f 6041 	mov.w	r0, #3088	; 0xc10
   b5d28:	4770      	bx	lr
	...

000b5d2c <_ZNK10nodeIDData14get_nodeIDJsonEv>:
    nodeIDData::resetNodeIDs();
    updateHash();                                       // If you manually update fields here, be sure to update the hash
}


String nodeIDData::get_nodeIDJson() const {
   b5d2c:	b538      	push	{r3, r4, r5, lr}
   b5d2e:	4604      	mov	r4, r0
   b5d30:	460d      	mov	r5, r1
	String result;
   b5d32:	4906      	ldr	r1, [pc, #24]	; (b5d4c <_ZNK10nodeIDData14get_nodeIDJsonEv+0x20>)
   b5d34:	f002 fd8f 	bl	b8856 <_ZN6StringC1EPK19__FlashStringHelper>
	getValueString(offsetof(NodeData, nodeIDJson), sizeof(NodeData::nodeIDJson), result);
   b5d38:	4623      	mov	r3, r4
   b5d3a:	f44f 6240 	mov.w	r2, #3072	; 0xc00
   b5d3e:	2110      	movs	r1, #16
   b5d40:	4628      	mov	r0, r5
   b5d42:	f000 fa59 	bl	b61f8 <_ZNK15StorageHelperRK18PersistentDataBase14getValueStringEjjR6String>
	return result;
}
   b5d46:	4620      	mov	r0, r4
   b5d48:	bd38      	pop	{r3, r4, r5, pc}
   b5d4a:	bf00      	nop
   b5d4c:	000ba2ff 	.word	0x000ba2ff

000b5d50 <_ZN10nodeIDData14set_nodeIDJsonEPKc>:

bool nodeIDData::set_nodeIDJson(const char* str) {
   b5d50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5d54:	f5ad 7d21 	sub.w	sp, sp, #644	; 0x284
   b5d58:	4680      	mov	r8, r0
   b5d5a:	460c      	mov	r4, r1
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b5d5c:	f000 fd3e 	bl	b67dc <spark_cloud_flag_connected>

    if (Particle.connected()) {
   b5d60:	b360      	cbz	r0, b5dbc <_ZN10nodeIDData14set_nodeIDJsonEPKc+0x6c>
        const size_t maxChunkSize = 622; // max report size
        size_t messageLength = strlen(str);
   b5d62:	4620      	mov	r0, r4
   b5d64:	f003 faa9 	bl	b92ba <strlen>
            // Calculate chunk size for the current iteration
            size_t chunkSize = std::min(maxChunkSize, messageLength - offset);

            // Create a buffer for the current chunk
            char chunk[maxChunkSize + 1]; // +1 for null terminator
            snprintf(chunk, sizeof(chunk), "%.*s", static_cast<int>(chunkSize), str + offset);
   b5d68:	f8df b0d0 	ldr.w	fp, [pc, #208]	; b5e3c <_ZN10nodeIDData14set_nodeIDJsonEPKc+0xec>
   b5d6c:	f8df a0d0 	ldr.w	sl, [pc, #208]	; b5e40 <_ZN10nodeIDData14set_nodeIDJsonEPKc+0xf0>
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b5d70:	f8df 90d0 	ldr.w	r9, [pc, #208]	; b5e44 <_ZN10nodeIDData14set_nodeIDJsonEPKc+0xf4>
        size_t messageLength = strlen(str);
   b5d74:	4607      	mov	r7, r0
        size_t offset = 0;
   b5d76:	2500      	movs	r5, #0
        while (offset < messageLength) {
   b5d78:	42bd      	cmp	r5, r7
   b5d7a:	d21f      	bcs.n	b5dbc <_ZN10nodeIDData14set_nodeIDJsonEPKc+0x6c>
            size_t chunkSize = std::min(maxChunkSize, messageLength - offset);
   b5d7c:	1b7e      	subs	r6, r7, r5
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return __b < __a ? __b : __a;
      if (__b < __a)
	return __b;
      return __a;
   b5d7e:	f240 226d 	movw	r2, #621	; 0x26d
   b5d82:	f240 236e 	movw	r3, #622	; 0x26e
   b5d86:	4296      	cmp	r6, r2
   b5d88:	bf88      	it	hi
   b5d8a:	461e      	movhi	r6, r3
            snprintf(chunk, sizeof(chunk), "%.*s", static_cast<int>(chunkSize), str + offset);
   b5d8c:	1963      	adds	r3, r4, r5
   b5d8e:	9300      	str	r3, [sp, #0]
   b5d90:	465a      	mov	r2, fp
   b5d92:	4633      	mov	r3, r6
   b5d94:	f240 216f 	movw	r1, #623	; 0x26f
   b5d98:	a804      	add	r0, sp, #16
   b5d9a:	f000 fdb7 	bl	b690c <snprintf>
   b5d9e:	f89a 3000 	ldrb.w	r3, [sl]
   b5da2:	f88d 3000 	strb.w	r3, [sp]
   b5da6:	aa04      	add	r2, sp, #16
   b5da8:	233c      	movs	r3, #60	; 0x3c
   b5daa:	4649      	mov	r1, r9
   b5dac:	a802      	add	r0, sp, #8
   b5dae:	f000 ffc5 	bl	b6d3c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   b5db2:	a803      	add	r0, sp, #12
   b5db4:	f7fe fa56 	bl	b4264 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>

            // Publish the current chunk
            Particle.publish("Node Database before set:", chunk, PRIVATE);

            // Move to the next chunk
            offset += chunkSize;
   b5db8:	4435      	add	r5, r6
        while (offset < messageLength) {
   b5dba:	e7dd      	b.n	b5d78 <_ZN10nodeIDData14set_nodeIDJsonEPKc+0x28>
    // char cleanedJson[3072];
    // strcpy(cleanedJson, str);
    // cleanJSON(cleanedJson);

    // Set the cleaned JSON value
    bool result = setValueString(offsetof(NodeData, nodeIDJson), sizeof(NodeData::nodeIDJson), str);
   b5dbc:	4623      	mov	r3, r4
   b5dbe:	f44f 6240 	mov.w	r2, #3072	; 0xc00
   b5dc2:	2110      	movs	r1, #16
   b5dc4:	4640      	mov	r0, r8
   b5dc6:	f000 fa95 	bl	b62f4 <_ZN15StorageHelperRK18PersistentDataBase14setValueStringEjjPKc>

    if (result && Particle.connected()) {
   b5dca:	4607      	mov	r7, r0
   b5dcc:	b380      	cbz	r0, b5e30 <_ZN10nodeIDData14set_nodeIDJsonEPKc+0xe0>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b5dce:	f000 fd05 	bl	b67dc <spark_cloud_flag_connected>
   b5dd2:	b368      	cbz	r0, b5e30 <_ZN10nodeIDData14set_nodeIDJsonEPKc+0xe0>
        const size_t maxChunkSize = 622; // max report size
        size_t messageLength = strlen(str);
   b5dd4:	4620      	mov	r0, r4
   b5dd6:	f003 fa70 	bl	b92ba <strlen>
            // Calculate chunk size for the current iteration
            size_t chunkSize = std::min(maxChunkSize, messageLength - offset);

            // Create a buffer for the current chunk
            char chunk[maxChunkSize + 1]; // +1 for null terminator
            snprintf(chunk, sizeof(chunk), "%.*s", static_cast<int>(chunkSize), str + offset);
   b5dda:	f8df b060 	ldr.w	fp, [pc, #96]	; b5e3c <_ZN10nodeIDData14set_nodeIDJsonEPKc+0xec>
   b5dde:	f8df a060 	ldr.w	sl, [pc, #96]	; b5e40 <_ZN10nodeIDData14set_nodeIDJsonEPKc+0xf0>
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b5de2:	f8df 9064 	ldr.w	r9, [pc, #100]	; b5e48 <_ZN10nodeIDData14set_nodeIDJsonEPKc+0xf8>
        size_t messageLength = strlen(str);
   b5de6:	4680      	mov	r8, r0
        size_t offset = 0;
   b5de8:	2500      	movs	r5, #0
        while (offset < messageLength) {
   b5dea:	4545      	cmp	r5, r8
   b5dec:	d220      	bcs.n	b5e30 <_ZN10nodeIDData14set_nodeIDJsonEPKc+0xe0>
            size_t chunkSize = std::min(maxChunkSize, messageLength - offset);
   b5dee:	eba8 0605 	sub.w	r6, r8, r5
   b5df2:	f240 226d 	movw	r2, #621	; 0x26d
   b5df6:	f240 236e 	movw	r3, #622	; 0x26e
   b5dfa:	4296      	cmp	r6, r2
   b5dfc:	bf88      	it	hi
   b5dfe:	461e      	movhi	r6, r3
            snprintf(chunk, sizeof(chunk), "%.*s", static_cast<int>(chunkSize), str + offset);
   b5e00:	1963      	adds	r3, r4, r5
   b5e02:	9300      	str	r3, [sp, #0]
   b5e04:	465a      	mov	r2, fp
   b5e06:	4633      	mov	r3, r6
   b5e08:	f240 216f 	movw	r1, #623	; 0x26f
   b5e0c:	a804      	add	r0, sp, #16
   b5e0e:	f000 fd7d 	bl	b690c <snprintf>
   b5e12:	f89a 3000 	ldrb.w	r3, [sl]
   b5e16:	f88d 3000 	strb.w	r3, [sp]
   b5e1a:	aa04      	add	r2, sp, #16
   b5e1c:	233c      	movs	r3, #60	; 0x3c
   b5e1e:	4649      	mov	r1, r9
   b5e20:	a802      	add	r0, sp, #8
   b5e22:	f000 ff8b 	bl	b6d3c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   b5e26:	a803      	add	r0, sp, #12
   b5e28:	f7fe fa1c 	bl	b4264 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>

            // Publish the current chunk
            Particle.publish("Node Database after set:", chunk, PRIVATE);

            // Move to the next chunk
            offset += chunkSize;
   b5e2c:	4435      	add	r5, r6
        while (offset < messageLength) {
   b5e2e:	e7dc      	b.n	b5dea <_ZN10nodeIDData14set_nodeIDJsonEPKc+0x9a>
        }
    }

    return result;
}
   b5e30:	4638      	mov	r0, r7
   b5e32:	f50d 7d21 	add.w	sp, sp, #644	; 0x284
   b5e36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b5e3a:	bf00      	nop
   b5e3c:	000ba013 	.word	0x000ba013
   b5e40:	2003e650 	.word	0x2003e650
   b5e44:	000ba018 	.word	0x000ba018
   b5e48:	000ba032 	.word	0x000ba032

000b5e4c <_ZN10nodeIDData12resetNodeIDsEv>:
void nodeIDData::resetNodeIDs() {
   b5e4c:	b510      	push	{r4, lr}
    Log.info("Resettig NodeID config to: %s", blank.c_str());
   b5e4e:	4c14      	ldr	r4, [pc, #80]	; (b5ea0 <_ZN10nodeIDData12resetNodeIDsEv+0x54>)
    String blank = "{\"nodes\":[]}";
   b5e50:	4914      	ldr	r1, [pc, #80]	; (b5ea4 <_ZN10nodeIDData12resetNodeIDsEv+0x58>)
void nodeIDData::resetNodeIDs() {
   b5e52:	b088      	sub	sp, #32
    String blank = "{\"nodes\":[]}";
   b5e54:	4668      	mov	r0, sp
   b5e56:	f002 fcfe 	bl	b8856 <_ZN6StringC1EPK19__FlashStringHelper>
    Log.info("Resettig NodeID config to: %s", blank.c_str());
   b5e5a:	9a00      	ldr	r2, [sp, #0]
   b5e5c:	4912      	ldr	r1, [pc, #72]	; (b5ea8 <_ZN10nodeIDData12resetNodeIDsEv+0x5c>)
   b5e5e:	4620      	mov	r0, r4
   b5e60:	f7fe f984 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
    nodeDatabase.set_nodeIDJson(blank);
   b5e64:	f7ff ff3e 	bl	b5ce4 <_ZN10nodeIDData8instanceEv>
   b5e68:	9900      	ldr	r1, [sp, #0]
   b5e6a:	f7ff ff71 	bl	b5d50 <_ZN10nodeIDData14set_nodeIDJsonEPKc>
    nodeDatabase.flush(true);
   b5e6e:	f7ff ff39 	bl	b5ce4 <_ZN10nodeIDData8instanceEv>
   b5e72:	6803      	ldr	r3, [r0, #0]
   b5e74:	2101      	movs	r1, #1
   b5e76:	68db      	ldr	r3, [r3, #12]
   b5e78:	4798      	blx	r3
    Log.info("NodeID data is now %s", nodeDatabase.get_nodeIDJson().c_str());
   b5e7a:	f7ff ff33 	bl	b5ce4 <_ZN10nodeIDData8instanceEv>
   b5e7e:	4601      	mov	r1, r0
   b5e80:	a804      	add	r0, sp, #16
   b5e82:	f7ff ff53 	bl	b5d2c <_ZNK10nodeIDData14get_nodeIDJsonEv>
   b5e86:	9a04      	ldr	r2, [sp, #16]
   b5e88:	4908      	ldr	r1, [pc, #32]	; (b5eac <_ZN10nodeIDData12resetNodeIDsEv+0x60>)
   b5e8a:	4620      	mov	r0, r4
   b5e8c:	f7fe f96e 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
   b5e90:	a804      	add	r0, sp, #16
   b5e92:	f002 fc95 	bl	b87c0 <_ZN6StringD1Ev>
    String blank = "{\"nodes\":[]}";
   b5e96:	4668      	mov	r0, sp
   b5e98:	f002 fc92 	bl	b87c0 <_ZN6StringD1Ev>
}
   b5e9c:	b008      	add	sp, #32
   b5e9e:	bd10      	pop	{r4, pc}
   b5ea0:	2003e6b0 	.word	0x2003e6b0
   b5ea4:	000ba04b 	.word	0x000ba04b
   b5ea8:	000ba058 	.word	0x000ba058
   b5eac:	000ba076 	.word	0x000ba076

000b5eb0 <_ZN10nodeIDData10initializeEv>:
void nodeIDData::initialize() {
   b5eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    Log.info("Erasing FRAM region");
   b5eb2:	4910      	ldr	r1, [pc, #64]	; (b5ef4 <_ZN10nodeIDData10initializeEv+0x44>)
void nodeIDData::initialize() {
   b5eb4:	4604      	mov	r4, r0
    Log.info("Erasing FRAM region");
   b5eb6:	4810      	ldr	r0, [pc, #64]	; (b5ef8 <_ZN10nodeIDData10initializeEv+0x48>)
   b5eb8:	f7fe f958 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
   b5ebc:	25c8      	movs	r5, #200	; 0xc8
    for (unsigned int i=0; i < sizeof(NodeData); i++) {
   b5ebe:	f640 46d8 	movw	r6, #3288	; 0xcd8
        fram.writeData(i+200,(uint8_t *)0xFF,2);
   b5ec2:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b5ec4:	6803      	ldr	r3, [r0, #0]
   b5ec6:	4629      	mov	r1, r5
   b5ec8:	68df      	ldr	r7, [r3, #12]
   b5eca:	22ff      	movs	r2, #255	; 0xff
   b5ecc:	2302      	movs	r3, #2
    for (unsigned int i=0; i < sizeof(NodeData); i++) {
   b5ece:	3501      	adds	r5, #1
        fram.writeData(i+200,(uint8_t *)0xFF,2);
   b5ed0:	47b8      	blx	r7
    for (unsigned int i=0; i < sizeof(NodeData); i++) {
   b5ed2:	42b5      	cmp	r5, r6
   b5ed4:	d1f5      	bne.n	b5ec2 <_ZN10nodeIDData10initializeEv+0x12>
    Log.info("Initializing data");
   b5ed6:	4909      	ldr	r1, [pc, #36]	; (b5efc <_ZN10nodeIDData10initializeEv+0x4c>)
   b5ed8:	4807      	ldr	r0, [pc, #28]	; (b5ef8 <_ZN10nodeIDData10initializeEv+0x48>)
   b5eda:	f7fe f947 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
    PersistentDataFRAM::initialize();
   b5ede:	4620      	mov	r0, r4
   b5ee0:	f000 faa4 	bl	b642c <_ZN15StorageHelperRK18PersistentDataBase10initializeEv>
    nodeIDData::resetNodeIDs();
   b5ee4:	4620      	mov	r0, r4
   b5ee6:	f7ff ffb1 	bl	b5e4c <_ZN10nodeIDData12resetNodeIDsEv>
    updateHash();                                       // If you manually update fields here, be sure to update the hash
   b5eea:	4620      	mov	r0, r4
}
   b5eec:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    updateHash();                                       // If you manually update fields here, be sure to update the hash
   b5ef0:	f000 b9f4 	b.w	b62dc <_ZN15StorageHelperRK18PersistentDataBase10updateHashEv>
   b5ef4:	000ba08c 	.word	0x000ba08c
   b5ef8:	2003e6b0 	.word	0x2003e6b0
   b5efc:	000ba0a0 	.word	0x000ba0a0

000b5f00 <_GLOBAL__sub_I_fram>:
        val_(val) {
   b5f00:	4b08      	ldr	r3, [pc, #32]	; (b5f24 <_GLOBAL__sub_I_fram+0x24>)
   b5f02:	2201      	movs	r2, #1
    // Null-terminate the withoutDoubleCommas array
    withoutDoubleCommas[j] = '\0';

    // Copy the cleaned JSON back to the original string
    strcpy(jsonString, withoutDoubleCommas);
   b5f04:	b510      	push	{r4, lr}
   b5f06:	701a      	strb	r2, [r3, #0]
MB85RC64 fram(Wire, 0);
   b5f08:	f002 fefc 	bl	b8d04 <_Z19__fetch_global_Wirev>
	 *
	 * @param addr The address 0-7 based on the setting of A0, A1 and A2.
	 *
	 * You typically create one of these objects as a global variable.
	 */
	MB85RC64(TwoWire &wire, int addr = 0) : MB85RC(wire, 8192, addr) {};
   b5f0c:	4c06      	ldr	r4, [pc, #24]	; (b5f28 <_GLOBAL__sub_I_fram+0x28>)
   b5f0e:	4601      	mov	r1, r0
   b5f10:	2300      	movs	r3, #0
   b5f12:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   b5f16:	4620      	mov	r0, r4
   b5f18:	f000 f816 	bl	b5f48 <_ZN6MB85RCC1ER7TwoWireji>
   b5f1c:	4b03      	ldr	r3, [pc, #12]	; (b5f2c <_GLOBAL__sub_I_fram+0x2c>)
   b5f1e:	6023      	str	r3, [r4, #0]
   b5f20:	bd10      	pop	{r4, pc}
   b5f22:	bf00      	nop
   b5f24:	2003e650 	.word	0x2003e650
   b5f28:	2003e658 	.word	0x2003e658
   b5f2c:	000ba0bc 	.word	0x000ba0bc

000b5f30 <_ZN6MB85RCD1Ev>:
MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
	wire(wire), memorySize(memorySize), addr(addr) {
}

MB85RC::~MB85RC() {
}
   b5f30:	4770      	bx	lr

000b5f32 <_ZN6MB85RCD0Ev>:
MB85RC::~MB85RC() {
   b5f32:	b510      	push	{r4, lr}
}
   b5f34:	2110      	movs	r1, #16
MB85RC::~MB85RC() {
   b5f36:	4604      	mov	r4, r0
}
   b5f38:	f7fe f8af 	bl	b409a <_ZdlPvj>
   b5f3c:	4620      	mov	r0, r4
   b5f3e:	bd10      	pop	{r4, pc}

000b5f40 <_ZN7TwoWire5writeEj>:
  bool lock();
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
   b5f40:	6803      	ldr	r3, [r0, #0]
   b5f42:	b2c9      	uxtb	r1, r1
   b5f44:	689b      	ldr	r3, [r3, #8]
   b5f46:	4718      	bx	r3

000b5f48 <_ZN6MB85RCC1ER7TwoWireji>:
MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
   b5f48:	b530      	push	{r4, r5, lr}
	wire(wire), memorySize(memorySize), addr(addr) {
   b5f4a:	4d03      	ldr	r5, [pc, #12]	; (b5f58 <_ZN6MB85RCC1ER7TwoWireji+0x10>)
   b5f4c:	e9c0 2302 	strd	r2, r3, [r0, #8]
   b5f50:	e9c0 5100 	strd	r5, r1, [r0]
}
   b5f54:	bd30      	pop	{r4, r5, pc}
   b5f56:	bf00      	nop
   b5f58:	000ba104 	.word	0x000ba104

000b5f5c <_ZN6MB85RC5beginEv>:

void MB85RC::begin() {
	wire.begin();
   b5f5c:	6840      	ldr	r0, [r0, #4]
   b5f5e:	f001 b8e1 	b.w	b7124 <_ZN7TwoWire5beginEv>

000b5f62 <_ZNSt10lock_guardIR7TwoWireED1Ev>:

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   b5f62:	b510      	push	{r4, lr}
   b5f64:	4604      	mov	r4, r0
      { _M_device.unlock(); }
   b5f66:	6800      	ldr	r0, [r0, #0]
   b5f68:	f001 f91f 	bl	b71aa <_ZN7TwoWire6unlockEv>
   b5f6c:	4620      	mov	r0, r4
   b5f6e:	bd10      	pop	{r4, pc}

000b5f70 <_ZN6MB85RC8readDataEjPhj>:

	return true;
}


bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
   b5f70:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b5f74:	4604      	mov	r4, r0
	bool result = true;

	WITH_LOCK(wire) {
   b5f76:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b5f78:	9001      	str	r0, [sp, #4]
bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
   b5f7a:	460d      	mov	r5, r1
   b5f7c:	4616      	mov	r6, r2
   b5f7e:	461f      	mov	r7, r3
      { _M_device.lock(); }
   b5f80:	f001 f90a 	bl	b7198 <_ZN7TwoWire4lockEv>

		while(dataLen > 0) {
   b5f84:	b1a7      	cbz	r7, b5fb0 <_ZN6MB85RC8readDataEjPhj+0x40>
			wire.beginTransmission(addr | DEVICE_ADDR);
   b5f86:	68e1      	ldr	r1, [r4, #12]
   b5f88:	6860      	ldr	r0, [r4, #4]
   b5f8a:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   b5f8e:	f001 f8fc 	bl	b718a <_ZN7TwoWire17beginTransmissionEi>
			wire.write(framAddr >> 8);
   b5f92:	0a29      	lsrs	r1, r5, #8
   b5f94:	6860      	ldr	r0, [r4, #4]
   b5f96:	f7ff ffd3 	bl	b5f40 <_ZN7TwoWire5writeEj>
			wire.write(framAddr);
   b5f9a:	4629      	mov	r1, r5
   b5f9c:	6860      	ldr	r0, [r4, #4]
   b5f9e:	f7ff ffcf 	bl	b5f40 <_ZN7TwoWire5writeEj>
			int stat = wire.endTransmission(false);
   b5fa2:	6860      	ldr	r0, [r4, #4]
   b5fa4:	2100      	movs	r1, #0
   b5fa6:	f001 f8f3 	bl	b7190 <_ZN7TwoWire15endTransmissionEh>
			if (stat != 0) {
   b5faa:	b148      	cbz	r0, b5fc0 <_ZN6MB85RC8readDataEjPhj+0x50>
				//Serial.printlnf("read set address failed %d", stat);
				result = false;
   b5fac:	2400      	movs	r4, #0
   b5fae:	e000      	b.n	b5fb2 <_ZN6MB85RC8readDataEjPhj+0x42>
   b5fb0:	2401      	movs	r4, #1
	WITH_LOCK(wire) {
   b5fb2:	a801      	add	r0, sp, #4
   b5fb4:	f7ff ffd5 	bl	b5f62 <_ZNSt10lock_guardIR7TwoWireED1Ev>
				dataLen--;
			}
		}
	}
	return result;
}
   b5fb8:	4620      	mov	r0, r4
   b5fba:	b003      	add	sp, #12
   b5fbc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			if (bytesToRead > 32) {
   b5fc0:	2f20      	cmp	r7, #32
			wire.requestFrom((uint8_t)(addr | DEVICE_ADDR), bytesToRead, (uint8_t) true);
   b5fc2:	7b21      	ldrb	r1, [r4, #12]
   b5fc4:	6860      	ldr	r0, [r4, #4]
   b5fc6:	46b8      	mov	r8, r7
   b5fc8:	bf28      	it	cs
   b5fca:	f04f 0820 	movcs.w	r8, #32
   b5fce:	2301      	movs	r3, #1
   b5fd0:	4642      	mov	r2, r8
   b5fd2:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   b5fd6:	f001 f8c2 	bl	b715e <_ZN7TwoWire11requestFromEhjh>
			if (Wire.available() < (int) bytesToRead) {
   b5fda:	f002 fe93 	bl	b8d04 <_Z19__fetch_global_Wirev>
   b5fde:	6803      	ldr	r3, [r0, #0]
   b5fe0:	691b      	ldr	r3, [r3, #16]
   b5fe2:	4798      	blx	r3
   b5fe4:	4540      	cmp	r0, r8
   b5fe6:	dbe1      	blt.n	b5fac <_ZN6MB85RC8readDataEjPhj+0x3c>
   b5fe8:	eb06 0908 	add.w	r9, r6, r8
				*data++ = Wire.read();    // receive a byte as character
   b5fec:	f002 fe8a 	bl	b8d04 <_Z19__fetch_global_Wirev>
   b5ff0:	6803      	ldr	r3, [r0, #0]
   b5ff2:	695b      	ldr	r3, [r3, #20]
   b5ff4:	4798      	blx	r3
   b5ff6:	f806 0b01 	strb.w	r0, [r6], #1
			for(size_t ii = 0; ii < bytesToRead; ii++) {
   b5ffa:	454e      	cmp	r6, r9
   b5ffc:	d1f6      	bne.n	b5fec <_ZN6MB85RC8readDataEjPhj+0x7c>
				framAddr++;
   b5ffe:	4445      	add	r5, r8
				dataLen--;
   b6000:	eba7 0708 	sub.w	r7, r7, r8
   b6004:	e7be      	b.n	b5f84 <_ZN6MB85RC8readDataEjPhj+0x14>

000b6006 <_ZN6MB85RC9writeDataEjPKhj>:


bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
   b6006:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b600a:	4604      	mov	r4, r0
	bool result = true;

	WITH_LOCK(wire) {
   b600c:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b600e:	9001      	str	r0, [sp, #4]
bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
   b6010:	460e      	mov	r6, r1
   b6012:	4690      	mov	r8, r2
   b6014:	461d      	mov	r5, r3
      { _M_device.lock(); }
   b6016:	f001 f8bf 	bl	b7198 <_ZN7TwoWire4lockEv>
   b601a:	f04f 0901 	mov.w	r9, #1
	WITH_LOCK(wire) {
   b601e:	f1b9 0f00 	cmp.w	r9, #0
   b6022:	d02a      	beq.n	b607a <_ZN6MB85RC9writeDataEjPKhj+0x74>
		while(dataLen > 0) {
   b6024:	b34d      	cbz	r5, b607a <_ZN6MB85RC9writeDataEjPKhj+0x74>
			wire.beginTransmission(addr | DEVICE_ADDR);
   b6026:	68e1      	ldr	r1, [r4, #12]
   b6028:	6860      	ldr	r0, [r4, #4]
   b602a:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   b602e:	f001 f8ac 	bl	b718a <_ZN7TwoWire17beginTransmissionEi>
			wire.write(framAddr >> 8);
   b6032:	0a31      	lsrs	r1, r6, #8
   b6034:	6860      	ldr	r0, [r4, #4]
   b6036:	f7ff ff83 	bl	b5f40 <_ZN7TwoWire5writeEj>
			wire.write(framAddr);
   b603a:	6860      	ldr	r0, [r4, #4]
   b603c:	4631      	mov	r1, r6
   b603e:	f7ff ff7f 	bl	b5f40 <_ZN7TwoWire5writeEj>

			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   b6042:	f1a5 0a1e 	sub.w	sl, r5, #30
			wire.write(framAddr);
   b6046:	4647      	mov	r7, r8
   b6048:	eba6 0b08 	sub.w	fp, r6, r8
				wire.write(*data);
   b604c:	6860      	ldr	r0, [r4, #4]
   b604e:	f817 1b01 	ldrb.w	r1, [r7], #1
   b6052:	6803      	ldr	r3, [r0, #0]
				framAddr++;
				data++;
				dataLen--;
   b6054:	3d01      	subs	r5, #1
				wire.write(*data);
   b6056:	689b      	ldr	r3, [r3, #8]
   b6058:	4798      	blx	r3
			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   b605a:	4555      	cmp	r5, sl
   b605c:	eb0b 0607 	add.w	r6, fp, r7
				data++;
   b6060:	46b8      	mov	r8, r7
			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   b6062:	d001      	beq.n	b6068 <_ZN6MB85RC9writeDataEjPKhj+0x62>
   b6064:	2d00      	cmp	r5, #0
   b6066:	d1f1      	bne.n	b604c <_ZN6MB85RC9writeDataEjPKhj+0x46>
			}

			int stat = wire.endTransmission(true);
   b6068:	6860      	ldr	r0, [r4, #4]
   b606a:	2101      	movs	r1, #1
   b606c:	f001 f890 	bl	b7190 <_ZN7TwoWire15endTransmissionEh>
			if (stat != 0) {
   b6070:	2800      	cmp	r0, #0
   b6072:	d0d7      	beq.n	b6024 <_ZN6MB85RC9writeDataEjPKhj+0x1e>
				//Serial.printlnf("write failed %d", stat);
				result = false;
   b6074:	f04f 0900 	mov.w	r9, #0
   b6078:	e7d1      	b.n	b601e <_ZN6MB85RC9writeDataEjPKhj+0x18>
	WITH_LOCK(wire) {
   b607a:	a801      	add	r0, sp, #4
   b607c:	f7ff ff71 	bl	b5f62 <_ZNSt10lock_guardIR7TwoWireED1Ev>
				break;
			}
		}
	}
	return result;
}
   b6080:	4648      	mov	r0, r9
   b6082:	b003      	add	sp, #12
   b6084:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b6088 <_ZN6MB85RC8moveDataEjjj>:


bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   b6088:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b608c:	b08b      	sub	sp, #44	; 0x2c
   b608e:	460e      	mov	r6, r1
   b6090:	4615      	mov	r5, r2
   b6092:	4680      	mov	r8, r0
	bool result = true;

	// Maximum number of bytes we can write is 30
	uint8_t buf[30];

	WITH_LOCK(wire) {
   b6094:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b6096:	9001      	str	r0, [sp, #4]
bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   b6098:	461c      	mov	r4, r3
      { _M_device.lock(); }
   b609a:	f001 f87d 	bl	b7198 <_ZN7TwoWire4lockEv>
		if (framAddrFrom < framAddrTo) {
   b609e:	42ae      	cmp	r6, r5
   b60a0:	d229      	bcs.n	b60f6 <_ZN6MB85RC8moveDataEjjj+0x6e>
			// Moving to a higher address - copy from the end of the from buffer
			framAddrFrom += numBytes;
   b60a2:	4426      	add	r6, r4
			framAddrTo += numBytes;
   b60a4:	4425      	add	r5, r4
			while(numBytes > 0) {
   b60a6:	b18c      	cbz	r4, b60cc <_ZN6MB85RC8moveDataEjjj+0x44>
				size_t count = numBytes;
				if (count > sizeof(buf)) {
   b60a8:	2c1e      	cmp	r4, #30
   b60aa:	4627      	mov	r7, r4
					count = sizeof(buf);
				}
				framAddrFrom -= count;
				framAddrTo -= count;

				result = readData(framAddrFrom, buf, count);
   b60ac:	f8d8 3000 	ldr.w	r3, [r8]
   b60b0:	bf28      	it	cs
   b60b2:	271e      	movcs	r7, #30
				framAddrFrom -= count;
   b60b4:	1bf6      	subs	r6, r6, r7
				result = readData(framAddrFrom, buf, count);
   b60b6:	f8d3 9008 	ldr.w	r9, [r3, #8]
   b60ba:	aa02      	add	r2, sp, #8
   b60bc:	463b      	mov	r3, r7
   b60be:	4631      	mov	r1, r6
   b60c0:	4640      	mov	r0, r8
				framAddrTo -= count;
   b60c2:	1bed      	subs	r5, r5, r7
				result = readData(framAddrFrom, buf, count);
   b60c4:	47c8      	blx	r9
				if (!result) {
   b60c6:	b948      	cbnz	r0, b60dc <_ZN6MB85RC8moveDataEjjj+0x54>
bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   b60c8:	2400      	movs	r4, #0
   b60ca:	e000      	b.n	b60ce <_ZN6MB85RC8moveDataEjjj+0x46>
   b60cc:	2401      	movs	r4, #1
	WITH_LOCK(wire) {
   b60ce:	a801      	add	r0, sp, #4
   b60d0:	f7ff ff47 	bl	b5f62 <_ZNSt10lock_guardIR7TwoWireED1Ev>
				numBytes -= count;
			}
		}
	}
	return result;
}
   b60d4:	4620      	mov	r0, r4
   b60d6:	b00b      	add	sp, #44	; 0x2c
   b60d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				result = writeData(framAddrTo, buf, count);
   b60dc:	f8d8 3000 	ldr.w	r3, [r8]
   b60e0:	aa02      	add	r2, sp, #8
   b60e2:	f8d3 900c 	ldr.w	r9, [r3, #12]
   b60e6:	4629      	mov	r1, r5
   b60e8:	463b      	mov	r3, r7
   b60ea:	4640      	mov	r0, r8
   b60ec:	47c8      	blx	r9
				if (!result) {
   b60ee:	2800      	cmp	r0, #0
   b60f0:	d0ea      	beq.n	b60c8 <_ZN6MB85RC8moveDataEjjj+0x40>
				numBytes -= count;
   b60f2:	1be4      	subs	r4, r4, r7
			while(numBytes > 0) {
   b60f4:	e7d7      	b.n	b60a6 <_ZN6MB85RC8moveDataEjjj+0x1e>
		if (framAddrFrom > framAddrTo) {
   b60f6:	d9e9      	bls.n	b60cc <_ZN6MB85RC8moveDataEjjj+0x44>
			while(numBytes > 0) {
   b60f8:	2c00      	cmp	r4, #0
   b60fa:	d0e7      	beq.n	b60cc <_ZN6MB85RC8moveDataEjjj+0x44>
				result = readData(framAddrFrom, buf, count);
   b60fc:	f8d8 3000 	ldr.w	r3, [r8]
   b6100:	2c1e      	cmp	r4, #30
   b6102:	4627      	mov	r7, r4
   b6104:	bf28      	it	cs
   b6106:	271e      	movcs	r7, #30
   b6108:	f8d3 9008 	ldr.w	r9, [r3, #8]
   b610c:	aa02      	add	r2, sp, #8
   b610e:	463b      	mov	r3, r7
   b6110:	4631      	mov	r1, r6
   b6112:	4640      	mov	r0, r8
   b6114:	47c8      	blx	r9
				if (!result) {
   b6116:	2800      	cmp	r0, #0
   b6118:	d0d6      	beq.n	b60c8 <_ZN6MB85RC8moveDataEjjj+0x40>
				result = writeData(framAddrTo, buf, count);
   b611a:	f8d8 3000 	ldr.w	r3, [r8]
   b611e:	aa02      	add	r2, sp, #8
   b6120:	f8d3 900c 	ldr.w	r9, [r3, #12]
   b6124:	4629      	mov	r1, r5
   b6126:	463b      	mov	r3, r7
   b6128:	4640      	mov	r0, r8
   b612a:	47c8      	blx	r9
				if (!result) {
   b612c:	2800      	cmp	r0, #0
   b612e:	d0cb      	beq.n	b60c8 <_ZN6MB85RC8moveDataEjjj+0x40>
				framAddrFrom += count;
   b6130:	443e      	add	r6, r7
				framAddrTo += count;
   b6132:	443d      	add	r5, r7
				numBytes -= count;
   b6134:	1be4      	subs	r4, r4, r7
			while(numBytes > 0) {
   b6136:	e7df      	b.n	b60f8 <_ZN6MB85RC8moveDataEjjj+0x70>

000b6138 <_ZN15StorageHelperRK18PersistentDataBase5setupEv>:
// PersistentDataBase
//

void StorageHelperRK::PersistentDataBase::setup() {
    // Load data at boot
    load();
   b6138:	6803      	ldr	r3, [r0, #0]
   b613a:	685b      	ldr	r3, [r3, #4]
   b613c:	4718      	bx	r3

000b613e <_ZN15StorageHelperRK18PersistentDataBase5flushEb>:

    return true;
}


void StorageHelperRK::PersistentDataBase::flush(bool force) {
   b613e:	b510      	push	{r4, lr}
    if (lastUpdate) {
   b6140:	6983      	ldr	r3, [r0, #24]
void StorageHelperRK::PersistentDataBase::flush(bool force) {
   b6142:	4604      	mov	r4, r0
    if (lastUpdate) {
   b6144:	b133      	cbz	r3, b6154 <_ZN15StorageHelperRK18PersistentDataBase5flushEb+0x16>
        if (force || (millis() - lastUpdate >= saveDelayMs)) {
   b6146:	b131      	cbz	r1, b6156 <_ZN15StorageHelperRK18PersistentDataBase5flushEb+0x18>
            save();
   b6148:	6823      	ldr	r3, [r4, #0]
   b614a:	4620      	mov	r0, r4
   b614c:	689b      	ldr	r3, [r3, #8]
   b614e:	4798      	blx	r3
            lastUpdate = 0;
   b6150:	2300      	movs	r3, #0
   b6152:	61a3      	str	r3, [r4, #24]
        }
    }
}
   b6154:	bd10      	pop	{r4, pc}

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b6156:	f000 f9d5 	bl	b6504 <HAL_Timer_Get_Milli_Seconds>
        if (force || (millis() - lastUpdate >= saveDelayMs)) {
   b615a:	69a3      	ldr	r3, [r4, #24]
   b615c:	1ac0      	subs	r0, r0, r3
   b615e:	69e3      	ldr	r3, [r4, #28]
   b6160:	4298      	cmp	r0, r3
   b6162:	d2f1      	bcs.n	b6148 <_ZN15StorageHelperRK18PersistentDataBase5flushEb+0xa>
   b6164:	e7f6      	b.n	b6154 <_ZN15StorageHelperRK18PersistentDataBase5flushEb+0x16>

000b6166 <_ZN15StorageHelperRK18PersistentDataBase11saveOrDeferEv>:

void StorageHelperRK::PersistentDataBase::saveOrDefer() {
   b6166:	b510      	push	{r4, lr}
    if (saveDelayMs) {
   b6168:	69c3      	ldr	r3, [r0, #28]
void StorageHelperRK::PersistentDataBase::saveOrDefer() {
   b616a:	4604      	mov	r4, r0
    if (saveDelayMs) {
   b616c:	b11b      	cbz	r3, b6176 <_ZN15StorageHelperRK18PersistentDataBase11saveOrDeferEv+0x10>
   b616e:	f000 f9c9 	bl	b6504 <HAL_Timer_Get_Milli_Seconds>
        lastUpdate = millis();
   b6172:	61a0      	str	r0, [r4, #24]
    }
    else {
        save();
    }
}
   b6174:	bd10      	pop	{r4, pc}
        save();
   b6176:	6803      	ldr	r3, [r0, #0]
}
   b6178:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        save();
   b617c:	689b      	ldr	r3, [r3, #8]
   b617e:	4718      	bx	r3

000b6180 <_ZNK15StorageHelperRK20CustomRecursiveMutex6unlockEv.isra.0>:
            os_mutex_recursive_unlock(handle_); 
   b6180:	f000 b9a8 	b.w	b64d4 <os_mutex_recursive_unlock>

000b6184 <_ZNK5spark6Logger5traceEPKcz>:
inline void spark::Logger::trace(const char *fmt, ...) const {
   b6184:	b40e      	push	{r1, r2, r3}
   b6186:	b500      	push	{lr}
   b6188:	b08c      	sub	sp, #48	; 0x30
   b618a:	aa0d      	add	r2, sp, #52	; 0x34
    attr.flags = 0;
   b618c:	f04f 0c20 	mov.w	ip, #32
inline void spark::Logger::trace(const char *fmt, ...) const {
   b6190:	f852 1b04 	ldr.w	r1, [r2], #4
    va_start(args, fmt);
   b6194:	9203      	str	r2, [sp, #12]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b6196:	e9cd 1200 	strd	r1, r2, [sp]
    attr.flags = 0;
   b619a:	2300      	movs	r3, #0
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b619c:	6801      	ldr	r1, [r0, #0]
   b619e:	aa04      	add	r2, sp, #16
   b61a0:	2001      	movs	r0, #1
    attr.flags = 0;
   b61a2:	e9cd c304 	strd	ip, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b61a6:	f000 fabd 	bl	b6724 <log_message_v>
}
   b61aa:	b00c      	add	sp, #48	; 0x30
   b61ac:	f85d eb04 	ldr.w	lr, [sp], #4
   b61b0:	b003      	add	sp, #12
   b61b2:	4770      	bx	lr

000b61b4 <_ZNK5spark6Logger4dumpEPKvj>:
inline void spark::Logger::dump(const void *data, size_t size) const {
   b61b4:	b507      	push	{r0, r1, r2, lr}
   b61b6:	4613      	mov	r3, r2
    if (data) {
   b61b8:	b139      	cbz	r1, b61ca <_ZNK5spark6Logger4dumpEPKvj+0x16>
        log_dump(level, name_, data, size, 0, nullptr);
   b61ba:	2200      	movs	r2, #0
   b61bc:	e9cd 2200 	strd	r2, r2, [sp]
   b61c0:	460a      	mov	r2, r1
   b61c2:	6801      	ldr	r1, [r0, #0]
   b61c4:	201e      	movs	r0, #30
   b61c6:	f000 fabd 	bl	b6744 <log_dump>
}
   b61ca:	b003      	add	sp, #12
   b61cc:	f85d fb04 	ldr.w	pc, [sp], #4

000b61d0 <_ZN15StorageHelperRK18PersistentDataBase4loadEv>:
bool StorageHelperRK::PersistentDataBase::load() {
   b61d0:	b510      	push	{r4, lr}
   b61d2:	4604      	mov	r4, r0
   b61d4:	3004      	adds	r0, #4
   b61d6:	f7ff fd07 	bl	b5be8 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
        if (!validate(savedDataSize)) {
   b61da:	6823      	ldr	r3, [r4, #0]
   b61dc:	68e1      	ldr	r1, [r4, #12]
   b61de:	695b      	ldr	r3, [r3, #20]
   b61e0:	4620      	mov	r0, r4
   b61e2:	4798      	blx	r3
   b61e4:	b918      	cbnz	r0, b61ee <_ZN15StorageHelperRK18PersistentDataBase4loadEv+0x1e>
            initialize();
   b61e6:	6823      	ldr	r3, [r4, #0]
   b61e8:	4620      	mov	r0, r4
   b61ea:	699b      	ldr	r3, [r3, #24]
   b61ec:	4798      	blx	r3
      { _M_device.unlock(); }
   b61ee:	6860      	ldr	r0, [r4, #4]
   b61f0:	f7ff ffc6 	bl	b6180 <_ZNK15StorageHelperRK20CustomRecursiveMutex6unlockEv.isra.0>
}
   b61f4:	2001      	movs	r0, #1
   b61f6:	bd10      	pop	{r4, pc}

000b61f8 <_ZNK15StorageHelperRK18PersistentDataBase14getValueStringEjjR6String>:



bool StorageHelperRK::PersistentDataBase::getValueString(size_t offset, size_t size, String &value) const {
   b61f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b61fa:	4605      	mov	r5, r0
      { _M_device.lock(); }
   b61fc:	3004      	adds	r0, #4
   b61fe:	4614      	mov	r4, r2
   b6200:	460e      	mov	r6, r1
   b6202:	461f      	mov	r7, r3
   b6204:	f7ff fcf0 	bl	b5be8 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
    bool result = false;

    WITH_LOCK(*this) {
        if (offset <= (savedDataSize - (size - 1))) {
   b6208:	68ea      	ldr	r2, [r5, #12]
   b620a:	f1c4 0401 	rsb	r4, r4, #1
   b620e:	4414      	add	r4, r2
   b6210:	42b4      	cmp	r4, r6
   b6212:	d30a      	bcc.n	b622a <_ZNK15StorageHelperRK18PersistentDataBase14getValueStringEjjR6String+0x32>
            const char *p = (const char *)savedDataHeader;
   b6214:	68a9      	ldr	r1, [r5, #8]
            p += offset;
            value = p; // copies string
   b6216:	4638      	mov	r0, r7
   b6218:	4431      	add	r1, r6
   b621a:	f002 fb73 	bl	b8904 <_ZN6StringaSEPKc>
            result = true;
   b621e:	2401      	movs	r4, #1
      { _M_device.unlock(); }
   b6220:	6868      	ldr	r0, [r5, #4]
   b6222:	f7ff ffad 	bl	b6180 <_ZNK15StorageHelperRK20CustomRecursiveMutex6unlockEv.isra.0>
        }
    }
    return result;
}
   b6226:	4620      	mov	r0, r4
   b6228:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bool result = false;
   b622a:	2400      	movs	r4, #0
   b622c:	e7f8      	b.n	b6220 <_ZNK15StorageHelperRK18PersistentDataBase14getValueStringEjjR6String+0x28>
	...

000b6230 <_ZN15StorageHelperRK10murmur3_32EPKhjm>:
    }
    PersistentDataBase::save();
}


uint32_t StorageHelperRK::murmur3_32(const uint8_t* key, size_t len, uint32_t seed) {
   b6230:	b5f0      	push	{r4, r5, r6, r7, lr}
   b6232:	f021 0403 	bic.w	r4, r1, #3
     * 
     * @param k 
     * @return uint32_t 
     */
    static inline uint32_t murmur_32_scramble(uint32_t k) {
        k *= 0xcc9e2d51;
   b6236:	4f18      	ldr	r7, [pc, #96]	; (b6298 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x68>)
        k = (k << 15) | (k >> 17);
        k *= 0x1b873593;
   b6238:	4e18      	ldr	r6, [pc, #96]	; (b629c <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x6c>)
        // A swap here has no effects on hash properties though.
        memcpy(&k, key, sizeof(uint32_t));
        key += sizeof(uint32_t);
        h ^= murmur_32_scramble(k);
        h = (h << 13) | (h >> 19);
        h = h * 5 + 0xe6546b64;
   b623a:	4d19      	ldr	r5, [pc, #100]	; (b62a0 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x70>)
   b623c:	4404      	add	r4, r0
    for (size_t i = len >> 2; i; i--) {
   b623e:	42a0      	cmp	r0, r4
   b6240:	d00c      	beq.n	b625c <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x2c>
        memcpy(&k, key, sizeof(uint32_t));
   b6242:	f850 3b04 	ldr.w	r3, [r0], #4
        k *= 0xcc9e2d51;
   b6246:	437b      	muls	r3, r7
        k = (k << 15) | (k >> 17);
   b6248:	ea4f 4373 	mov.w	r3, r3, ror #17
        k *= 0x1b873593;
   b624c:	4373      	muls	r3, r6
        h ^= murmur_32_scramble(k);
   b624e:	405a      	eors	r2, r3
        h = (h << 13) | (h >> 19);
   b6250:	ea4f 42f2 	mov.w	r2, r2, ror #19
        h = h * 5 + 0xe6546b64;
   b6254:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   b6258:	442a      	add	r2, r5
    for (size_t i = len >> 2; i; i--) {
   b625a:	e7f0      	b.n	b623e <_ZN15StorageHelperRK10murmur3_32EPKhjm+0xe>
    }
    /* Read the rest. */
    k = 0;
    for (size_t i = len & 3; i; i--) {
   b625c:	f001 0403 	and.w	r4, r1, #3
   b6260:	4404      	add	r4, r0
    k = 0;
   b6262:	2300      	movs	r3, #0
    for (size_t i = len & 3; i; i--) {
   b6264:	42a0      	cmp	r0, r4
   b6266:	d004      	beq.n	b6272 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x42>
        k <<= 8;
        k |= key[i - 1];
   b6268:	f814 5d01 	ldrb.w	r5, [r4, #-1]!
   b626c:	ea45 2303 	orr.w	r3, r5, r3, lsl #8
    for (size_t i = len & 3; i; i--) {
   b6270:	e7f8      	b.n	b6264 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x34>
        k *= 0xcc9e2d51;
   b6272:	4809      	ldr	r0, [pc, #36]	; (b6298 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x68>)
   b6274:	4343      	muls	r3, r0
        k *= 0x1b873593;
   b6276:	4809      	ldr	r0, [pc, #36]	; (b629c <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x6c>)
        k = (k << 15) | (k >> 17);
   b6278:	ea4f 4373 	mov.w	r3, r3, ror #17
        return k;
   b627c:	404a      	eors	r2, r1
        k *= 0x1b873593;
   b627e:	4358      	muls	r0, r3
    // A swap is *not* necessary here because the preceding loop already
    // places the low bytes in the low places according to whatever endianness
    // we use. Swaps only apply when the memory is copied in a chunk.
    h ^= murmur_32_scramble(k);
    /* Finalize. */
	h ^= len;
   b6280:	4050      	eors	r0, r2
	h ^= h >> 16;
	h *= 0x85ebca6b;
   b6282:	4b08      	ldr	r3, [pc, #32]	; (b62a4 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x74>)
	h ^= h >> 16;
   b6284:	ea80 4010 	eor.w	r0, r0, r0, lsr #16
	h *= 0x85ebca6b;
   b6288:	4358      	muls	r0, r3
	h ^= h >> 13;
	h *= 0xc2b2ae35;
   b628a:	4b07      	ldr	r3, [pc, #28]	; (b62a8 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x78>)
	h ^= h >> 13;
   b628c:	ea80 3050 	eor.w	r0, r0, r0, lsr #13
	h *= 0xc2b2ae35;
   b6290:	4358      	muls	r0, r3
	h ^= h >> 16;
	return h;
}
   b6292:	ea80 4010 	eor.w	r0, r0, r0, lsr #16
   b6296:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b6298:	cc9e2d51 	.word	0xcc9e2d51
   b629c:	1b873593 	.word	0x1b873593
   b62a0:	e6546b64 	.word	0xe6546b64
   b62a4:	85ebca6b 	.word	0x85ebca6b
   b62a8:	c2b2ae35 	.word	0xc2b2ae35

000b62ac <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>:
uint32_t StorageHelperRK::PersistentDataBase::getHash() const {
   b62ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b62ae:	4604      	mov	r4, r0
      { _M_device.lock(); }
   b62b0:	3004      	adds	r0, #4
   b62b2:	f7ff fc99 	bl	b5be8 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
        uint32_t savedHash = savedDataHeader->hash;
   b62b6:	68a3      	ldr	r3, [r4, #8]
        savedDataHeader->hash = 0;
   b62b8:	2200      	movs	r2, #0
        uint32_t savedHash = savedDataHeader->hash;
   b62ba:	689f      	ldr	r7, [r3, #8]
        savedDataHeader->hash = 0;
   b62bc:	609a      	str	r2, [r3, #8]
        hash = StorageHelperRK::murmur3_32((const uint8_t *)savedDataHeader, savedDataHeader->size, HASH_SEED);
   b62be:	68a6      	ldr	r6, [r4, #8]
   b62c0:	4a05      	ldr	r2, [pc, #20]	; (b62d8 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv+0x2c>)
   b62c2:	88f1      	ldrh	r1, [r6, #6]
   b62c4:	4630      	mov	r0, r6
   b62c6:	f7ff ffb3 	bl	b6230 <_ZN15StorageHelperRK10murmur3_32EPKhjm>
        savedDataHeader->hash = savedHash;
   b62ca:	60b7      	str	r7, [r6, #8]
        hash = StorageHelperRK::murmur3_32((const uint8_t *)savedDataHeader, savedDataHeader->size, HASH_SEED);
   b62cc:	4605      	mov	r5, r0
      { _M_device.unlock(); }
   b62ce:	6860      	ldr	r0, [r4, #4]
   b62d0:	f7ff ff56 	bl	b6180 <_ZNK15StorageHelperRK20CustomRecursiveMutex6unlockEv.isra.0>
}
   b62d4:	4628      	mov	r0, r5
   b62d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b62d8:	851c2a3f 	.word	0x851c2a3f

000b62dc <_ZN15StorageHelperRK18PersistentDataBase10updateHashEv>:
void StorageHelperRK::PersistentDataBase::updateHash() {
   b62dc:	b570      	push	{r4, r5, r6, lr}
   b62de:	4604      	mov	r4, r0
    savedDataHeader->hash = getHash();
   b62e0:	6885      	ldr	r5, [r0, #8]
   b62e2:	f7ff ffe3 	bl	b62ac <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
   b62e6:	60a8      	str	r0, [r5, #8]
    saveOrDefer();
   b62e8:	6823      	ldr	r3, [r4, #0]
   b62ea:	4620      	mov	r0, r4
   b62ec:	691b      	ldr	r3, [r3, #16]
}
   b62ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    saveOrDefer();
   b62f2:	4718      	bx	r3

000b62f4 <_ZN15StorageHelperRK18PersistentDataBase14setValueStringEjjPKc>:
bool StorageHelperRK::PersistentDataBase::setValueString(size_t offset, size_t size, const char *value) {
   b62f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b62f8:	4604      	mov	r4, r0
      { _M_device.lock(); }
   b62fa:	3004      	adds	r0, #4
   b62fc:	4690      	mov	r8, r2
   b62fe:	460d      	mov	r5, r1
   b6300:	461f      	mov	r7, r3
   b6302:	f7ff fc71 	bl	b5be8 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
        if (offset <= (savedDataSize - (size - 1)) && strlen(value) < size) {
   b6306:	68e2      	ldr	r2, [r4, #12]
   b6308:	f1c8 0301 	rsb	r3, r8, #1
   b630c:	4413      	add	r3, r2
   b630e:	42ab      	cmp	r3, r5
   b6310:	d319      	bcc.n	b6346 <_ZN15StorageHelperRK18PersistentDataBase14setValueStringEjjPKc+0x52>
   b6312:	4638      	mov	r0, r7
   b6314:	f002 ffd1 	bl	b92ba <strlen>
   b6318:	4540      	cmp	r0, r8
   b631a:	d214      	bcs.n	b6346 <_ZN15StorageHelperRK18PersistentDataBase14setValueStringEjjPKc+0x52>
            char *p = (char *)savedDataHeader;
   b631c:	68a6      	ldr	r6, [r4, #8]
            p += offset;
   b631e:	4435      	add	r5, r6
            if (strcmp(value, p) != 0) {
   b6320:	4629      	mov	r1, r5
   b6322:	4638      	mov	r0, r7
   b6324:	f002 ff99 	bl	b925a <strcmp>
   b6328:	b158      	cbz	r0, b6342 <_ZN15StorageHelperRK18PersistentDataBase14setValueStringEjjPKc+0x4e>
                memset(p, 0, size);
   b632a:	4642      	mov	r2, r8
   b632c:	2100      	movs	r1, #0
   b632e:	4628      	mov	r0, r5
   b6330:	f002 ff46 	bl	b91c0 <memset>
                strcpy(p, value);
   b6334:	4639      	mov	r1, r7
   b6336:	4628      	mov	r0, r5
   b6338:	f002 ff99 	bl	b926e <strcpy>
                updateHash();
   b633c:	4620      	mov	r0, r4
   b633e:	f7ff ffcd 	bl	b62dc <_ZN15StorageHelperRK18PersistentDataBase10updateHashEv>
            result = true;
   b6342:	2501      	movs	r5, #1
   b6344:	e000      	b.n	b6348 <_ZN15StorageHelperRK18PersistentDataBase14setValueStringEjjPKc+0x54>
    bool result = false;
   b6346:	2500      	movs	r5, #0
      { _M_device.unlock(); }
   b6348:	6860      	ldr	r0, [r4, #4]
   b634a:	f7ff ff19 	bl	b6180 <_ZNK15StorageHelperRK20CustomRecursiveMutex6unlockEv.isra.0>
}
   b634e:	4628      	mov	r0, r5
   b6350:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b6354 <_ZN15StorageHelperRK18PersistentDataBase8validateEj>:
bool StorageHelperRK::PersistentDataBase::validate(size_t dataSize) {
   b6354:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if (logData && dataSize < 4096) {
   b6356:	f890 3020 	ldrb.w	r3, [r0, #32]
bool StorageHelperRK::PersistentDataBase::validate(size_t dataSize) {
   b635a:	4604      	mov	r4, r0
   b635c:	460d      	mov	r5, r1
    if (logData && dataSize < 4096) {
   b635e:	b1ab      	cbz	r3, b638c <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x38>
   b6360:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
   b6364:	d217      	bcs.n	b6396 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x42>
        Log.info("validating data size=%d", (int)dataSize);
   b6366:	4e2c      	ldr	r6, [pc, #176]	; (b6418 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0xc4>)
   b6368:	460a      	mov	r2, r1
   b636a:	4630      	mov	r0, r6
   b636c:	492b      	ldr	r1, [pc, #172]	; (b641c <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0xc8>)
   b636e:	f7fd fefd 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
        Log.dump((const uint8_t *)savedDataHeader, dataSize);
   b6372:	68a1      	ldr	r1, [r4, #8]
   b6374:	462a      	mov	r2, r5
   b6376:	4630      	mov	r0, r6
   b6378:	f7ff ff1c 	bl	b61b4 <_ZNK5spark6Logger4dumpEPKvj>
        log_write(level, name_, data, size, nullptr);
   b637c:	2300      	movs	r3, #0
   b637e:	9300      	str	r3, [sp, #0]
   b6380:	4a27      	ldr	r2, [pc, #156]	; (b6420 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0xcc>)
   b6382:	6831      	ldr	r1, [r6, #0]
   b6384:	2301      	movs	r3, #1
   b6386:	201e      	movs	r0, #30
   b6388:	f000 f9d4 	bl	b6734 <log_write>
    if (dataSize >= 12 && 
   b638c:	2d0b      	cmp	r5, #11
   b638e:	d802      	bhi.n	b6396 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x42>
    if (!isValid && dataSize != 0 && savedDataHeader->magic != 0) {
   b6390:	bb55      	cbnz	r5, b63e8 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x94>
   b6392:	2000      	movs	r0, #0
   b6394:	e026      	b.n	b63e4 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x90>
        savedDataHeader->magic == savedDataMagic && 
   b6396:	68a3      	ldr	r3, [r4, #8]
    if (dataSize >= 12 && 
   b6398:	6922      	ldr	r2, [r4, #16]
   b639a:	6819      	ldr	r1, [r3, #0]
   b639c:	4291      	cmp	r1, r2
   b639e:	d123      	bne.n	b63e8 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x94>
        savedDataHeader->magic == savedDataMagic && 
   b63a0:	8899      	ldrh	r1, [r3, #4]
   b63a2:	8aa2      	ldrh	r2, [r4, #20]
   b63a4:	4291      	cmp	r1, r2
   b63a6:	d11f      	bne.n	b63e8 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x94>
        savedDataHeader->version == savedDataVersion &&
   b63a8:	88da      	ldrh	r2, [r3, #6]
   b63aa:	b2ab      	uxth	r3, r5
   b63ac:	429a      	cmp	r2, r3
   b63ae:	d81b      	bhi.n	b63e8 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x94>
        hash = getHash();
   b63b0:	4620      	mov	r0, r4
   b63b2:	f7ff ff7b 	bl	b62ac <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
        if (savedDataHeader->hash == hash) {                
   b63b6:	68a3      	ldr	r3, [r4, #8]
   b63b8:	689a      	ldr	r2, [r3, #8]
   b63ba:	4282      	cmp	r2, r0
        hash = getHash();
   b63bc:	4606      	mov	r6, r0
        if (savedDataHeader->hash == hash) {                
   b63be:	d114      	bne.n	b63ea <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x96>
            if ((size_t)dataSize < savedDataSize) {
   b63c0:	68e2      	ldr	r2, [r4, #12]
   b63c2:	42aa      	cmp	r2, r5
   b63c4:	d905      	bls.n	b63d2 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x7e>
                    p[ii] = 0;
   b63c6:	2100      	movs	r1, #0
   b63c8:	5559      	strb	r1, [r3, r5]
                for(size_t ii = (size_t)dataSize; ii < savedDataSize; ii++) {
   b63ca:	68e2      	ldr	r2, [r4, #12]
   b63cc:	3501      	adds	r5, #1
   b63ce:	42aa      	cmp	r2, r5
   b63d0:	d8fa      	bhi.n	b63c8 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x74>
            savedDataHeader->size = (uint16_t) savedDataSize;
   b63d2:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
            savedDataHeader->hash = getHash();
   b63d6:	4620      	mov	r0, r4
            savedDataHeader->size = (uint16_t) savedDataSize;
   b63d8:	80da      	strh	r2, [r3, #6]
            savedDataHeader->hash = getHash();
   b63da:	68a5      	ldr	r5, [r4, #8]
   b63dc:	f7ff ff66 	bl	b62ac <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
   b63e0:	60a8      	str	r0, [r5, #8]
            isValid = true;
   b63e2:	2001      	movs	r0, #1
}
   b63e4:	b002      	add	sp, #8
   b63e6:	bd70      	pop	{r4, r5, r6, pc}
    uint32_t hash = 0;
   b63e8:	2600      	movs	r6, #0
    if (!isValid && dataSize != 0 && savedDataHeader->magic != 0) {
   b63ea:	68a1      	ldr	r1, [r4, #8]
   b63ec:	680a      	ldr	r2, [r1, #0]
   b63ee:	2a00      	cmp	r2, #0
   b63f0:	d0cf      	beq.n	b6392 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x3e>
        Log.trace("got: magic=%08x version=%04x size=%04x hash=%08x", (int)savedDataHeader->magic, (int)savedDataHeader->version, (int)savedDataHeader->size, (int)savedDataHeader->hash);
   b63f2:	6888      	ldr	r0, [r1, #8]
   b63f4:	888b      	ldrh	r3, [r1, #4]
   b63f6:	9001      	str	r0, [sp, #4]
   b63f8:	88c9      	ldrh	r1, [r1, #6]
   b63fa:	9100      	str	r1, [sp, #0]
   b63fc:	4806      	ldr	r0, [pc, #24]	; (b6418 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0xc4>)
   b63fe:	4909      	ldr	r1, [pc, #36]	; (b6424 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0xd0>)
   b6400:	f7ff fec0 	bl	b6184 <_ZNK5spark6Logger5traceEPKcz>
        Log.trace("exp: magic=%08x version=%04x size=%04x hash=%08x", (int)savedDataMagic, (int)savedDataVersion, (int)dataSize, (int)hash);
   b6404:	e9cd 5600 	strd	r5, r6, [sp]
   b6408:	8aa3      	ldrh	r3, [r4, #20]
   b640a:	6922      	ldr	r2, [r4, #16]
   b640c:	4906      	ldr	r1, [pc, #24]	; (b6428 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0xd4>)
   b640e:	4802      	ldr	r0, [pc, #8]	; (b6418 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0xc4>)
   b6410:	f7ff feb8 	bl	b6184 <_ZNK5spark6Logger5traceEPKcz>
   b6414:	e7bd      	b.n	b6392 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x3e>
   b6416:	bf00      	nop
   b6418:	2003e6b0 	.word	0x2003e6b0
   b641c:	000ba118 	.word	0x000ba118
   b6420:	000ba2fe 	.word	0x000ba2fe
   b6424:	000ba130 	.word	0x000ba130
   b6428:	000ba161 	.word	0x000ba161

000b642c <_ZN15StorageHelperRK18PersistentDataBase10initializeEv>:
void StorageHelperRK::PersistentDataBase::initialize() {
   b642c:	b538      	push	{r3, r4, r5, lr}
   b642e:	4604      	mov	r4, r0
    memset(savedDataHeader, 0, savedDataSize);
   b6430:	68c2      	ldr	r2, [r0, #12]
   b6432:	6880      	ldr	r0, [r0, #8]
   b6434:	2100      	movs	r1, #0
   b6436:	f002 fec3 	bl	b91c0 <memset>
    savedDataHeader->magic = savedDataMagic;
   b643a:	68a3      	ldr	r3, [r4, #8]
   b643c:	6922      	ldr	r2, [r4, #16]
   b643e:	601a      	str	r2, [r3, #0]
    savedDataHeader->version = savedDataVersion;
   b6440:	68a3      	ldr	r3, [r4, #8]
   b6442:	8aa2      	ldrh	r2, [r4, #20]
   b6444:	809a      	strh	r2, [r3, #4]
    savedDataHeader->size = (uint16_t) savedDataSize;
   b6446:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    savedDataHeader->hash = getHash();
   b644a:	4620      	mov	r0, r4
    savedDataHeader->size = (uint16_t) savedDataSize;
   b644c:	80da      	strh	r2, [r3, #6]
    savedDataHeader->hash = getHash();
   b644e:	68a5      	ldr	r5, [r4, #8]
   b6450:	f7ff ff2c 	bl	b62ac <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
   b6454:	60a8      	str	r0, [r5, #8]
}
   b6456:	bd38      	pop	{r3, r4, r5, pc}

000b6458 <_ZN15StorageHelperRK18PersistentDataBase4saveEv>:
void StorageHelperRK::PersistentDataBase::save() {
   b6458:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b645a:	4604      	mov	r4, r0
    savedDataHeader->hash = getHash();
   b645c:	6885      	ldr	r5, [r0, #8]
   b645e:	f7ff ff25 	bl	b62ac <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
   b6462:	60a8      	str	r0, [r5, #8]
    if (logData) {
   b6464:	f894 3020 	ldrb.w	r3, [r4, #32]
   b6468:	b19b      	cbz	r3, b6492 <_ZN15StorageHelperRK18PersistentDataBase4saveEv+0x3a>
        Log.info("saving data size=%d", (int)savedDataHeader->size);
   b646a:	68a3      	ldr	r3, [r4, #8]
   b646c:	4d0a      	ldr	r5, [pc, #40]	; (b6498 <_ZN15StorageHelperRK18PersistentDataBase4saveEv+0x40>)
   b646e:	88da      	ldrh	r2, [r3, #6]
   b6470:	490a      	ldr	r1, [pc, #40]	; (b649c <_ZN15StorageHelperRK18PersistentDataBase4saveEv+0x44>)
   b6472:	4628      	mov	r0, r5
   b6474:	f7fd fe7a 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
        Log.dump((const uint8_t *)savedDataHeader, savedDataHeader->size);
   b6478:	68a1      	ldr	r1, [r4, #8]
   b647a:	4628      	mov	r0, r5
   b647c:	88ca      	ldrh	r2, [r1, #6]
   b647e:	f7ff fe99 	bl	b61b4 <_ZNK5spark6Logger4dumpEPKvj>
   b6482:	2300      	movs	r3, #0
   b6484:	9300      	str	r3, [sp, #0]
   b6486:	4a06      	ldr	r2, [pc, #24]	; (b64a0 <_ZN15StorageHelperRK18PersistentDataBase4saveEv+0x48>)
   b6488:	6829      	ldr	r1, [r5, #0]
   b648a:	2301      	movs	r3, #1
   b648c:	201e      	movs	r0, #30
   b648e:	f000 f951 	bl	b6734 <log_write>
}
   b6492:	b003      	add	sp, #12
   b6494:	bd30      	pop	{r4, r5, pc}
   b6496:	bf00      	nop
   b6498:	2003e6b0 	.word	0x2003e6b0
   b649c:	000ba192 	.word	0x000ba192
   b64a0:	000ba2fe 	.word	0x000ba2fe

000b64a4 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b64a4:	b508      	push	{r3, lr}
   b64a6:	4b02      	ldr	r3, [pc, #8]	; (b64b0 <os_mutex_recursive_create+0xc>)
   b64a8:	681b      	ldr	r3, [r3, #0]
   b64aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b64ac:	9301      	str	r3, [sp, #4]
   b64ae:	bd08      	pop	{r3, pc}
   b64b0:	00030248 	.word	0x00030248

000b64b4 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   b64b4:	b508      	push	{r3, lr}
   b64b6:	4b02      	ldr	r3, [pc, #8]	; (b64c0 <os_mutex_recursive_destroy+0xc>)
   b64b8:	681b      	ldr	r3, [r3, #0]
   b64ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   b64bc:	9301      	str	r3, [sp, #4]
   b64be:	bd08      	pop	{r3, pc}
   b64c0:	00030248 	.word	0x00030248

000b64c4 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   b64c4:	b508      	push	{r3, lr}
   b64c6:	4b02      	ldr	r3, [pc, #8]	; (b64d0 <os_mutex_recursive_lock+0xc>)
   b64c8:	681b      	ldr	r3, [r3, #0]
   b64ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b64cc:	9301      	str	r3, [sp, #4]
   b64ce:	bd08      	pop	{r3, pc}
   b64d0:	00030248 	.word	0x00030248

000b64d4 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   b64d4:	b508      	push	{r3, lr}
   b64d6:	4b02      	ldr	r3, [pc, #8]	; (b64e0 <os_mutex_recursive_unlock+0xc>)
   b64d8:	681b      	ldr	r3, [r3, #0]
   b64da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b64dc:	9301      	str	r3, [sp, #4]
   b64de:	bd08      	pop	{r3, pc}
   b64e0:	00030248 	.word	0x00030248

000b64e4 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b64e4:	b508      	push	{r3, lr}
   b64e6:	4b02      	ldr	r3, [pc, #8]	; (b64f0 <HAL_RNG_GetRandomNumber+0xc>)
   b64e8:	681b      	ldr	r3, [r3, #0]
   b64ea:	685b      	ldr	r3, [r3, #4]
   b64ec:	9301      	str	r3, [sp, #4]
   b64ee:	bd08      	pop	{r3, pc}
   b64f0:	00030218 	.word	0x00030218

000b64f4 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b64f4:	b508      	push	{r3, lr}
   b64f6:	4b02      	ldr	r3, [pc, #8]	; (b6500 <HAL_Delay_Microseconds+0xc>)
   b64f8:	681b      	ldr	r3, [r3, #0]
   b64fa:	68db      	ldr	r3, [r3, #12]
   b64fc:	9301      	str	r3, [sp, #4]
   b64fe:	bd08      	pop	{r3, pc}
   b6500:	00030218 	.word	0x00030218

000b6504 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b6504:	b508      	push	{r3, lr}
   b6506:	4b02      	ldr	r3, [pc, #8]	; (b6510 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b6508:	681b      	ldr	r3, [r3, #0]
   b650a:	695b      	ldr	r3, [r3, #20]
   b650c:	9301      	str	r3, [sp, #4]
   b650e:	bd08      	pop	{r3, pc}
   b6510:	00030218 	.word	0x00030218

000b6514 <hal_i2c_begin>:
DYNALIB_BEGIN(hal_i2c)

DYNALIB_FN(0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b6514:	b508      	push	{r3, lr}
   b6516:	4b02      	ldr	r3, [pc, #8]	; (b6520 <hal_i2c_begin+0xc>)
   b6518:	681b      	ldr	r3, [r3, #0]
   b651a:	68db      	ldr	r3, [r3, #12]
   b651c:	9301      	str	r3, [sp, #4]
   b651e:	bd08      	pop	{r3, pc}
   b6520:	00030228 	.word	0x00030228

000b6524 <hal_i2c_begin_transmission>:
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b6524:	b508      	push	{r3, lr}
   b6526:	4b02      	ldr	r3, [pc, #8]	; (b6530 <hal_i2c_begin_transmission+0xc>)
   b6528:	681b      	ldr	r3, [r3, #0]
   b652a:	699b      	ldr	r3, [r3, #24]
   b652c:	9301      	str	r3, [sp, #4]
   b652e:	bd08      	pop	{r3, pc}
   b6530:	00030228 	.word	0x00030228

000b6534 <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b6534:	b508      	push	{r3, lr}
   b6536:	4b02      	ldr	r3, [pc, #8]	; (b6540 <hal_i2c_end_transmission+0xc>)
   b6538:	681b      	ldr	r3, [r3, #0]
   b653a:	69db      	ldr	r3, [r3, #28]
   b653c:	9301      	str	r3, [sp, #4]
   b653e:	bd08      	pop	{r3, pc}
   b6540:	00030228 	.word	0x00030228

000b6544 <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b6544:	b508      	push	{r3, lr}
   b6546:	4b02      	ldr	r3, [pc, #8]	; (b6550 <hal_i2c_write+0xc>)
   b6548:	681b      	ldr	r3, [r3, #0]
   b654a:	6a1b      	ldr	r3, [r3, #32]
   b654c:	9301      	str	r3, [sp, #4]
   b654e:	bd08      	pop	{r3, pc}
   b6550:	00030228 	.word	0x00030228

000b6554 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b6554:	b508      	push	{r3, lr}
   b6556:	4b02      	ldr	r3, [pc, #8]	; (b6560 <hal_i2c_available+0xc>)
   b6558:	681b      	ldr	r3, [r3, #0]
   b655a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b655c:	9301      	str	r3, [sp, #4]
   b655e:	bd08      	pop	{r3, pc}
   b6560:	00030228 	.word	0x00030228

000b6564 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b6564:	b508      	push	{r3, lr}
   b6566:	4b02      	ldr	r3, [pc, #8]	; (b6570 <hal_i2c_read+0xc>)
   b6568:	681b      	ldr	r3, [r3, #0]
   b656a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b656c:	9301      	str	r3, [sp, #4]
   b656e:	bd08      	pop	{r3, pc}
   b6570:	00030228 	.word	0x00030228

000b6574 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b6574:	b508      	push	{r3, lr}
   b6576:	4b02      	ldr	r3, [pc, #8]	; (b6580 <hal_i2c_peek+0xc>)
   b6578:	681b      	ldr	r3, [r3, #0]
   b657a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b657c:	9301      	str	r3, [sp, #4]
   b657e:	bd08      	pop	{r3, pc}
   b6580:	00030228 	.word	0x00030228

000b6584 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b6584:	b508      	push	{r3, lr}
   b6586:	4b02      	ldr	r3, [pc, #8]	; (b6590 <hal_i2c_flush+0xc>)
   b6588:	681b      	ldr	r3, [r3, #0]
   b658a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b658c:	9301      	str	r3, [sp, #4]
   b658e:	bd08      	pop	{r3, pc}
   b6590:	00030228 	.word	0x00030228

000b6594 <hal_i2c_init>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b6594:	b508      	push	{r3, lr}
   b6596:	4b02      	ldr	r3, [pc, #8]	; (b65a0 <hal_i2c_init+0xc>)
   b6598:	681b      	ldr	r3, [r3, #0]
   b659a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b659c:	9301      	str	r3, [sp, #4]
   b659e:	bd08      	pop	{r3, pc}
   b65a0:	00030228 	.word	0x00030228

000b65a4 <hal_i2c_lock>:
DYNALIB_FN(17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
   b65a4:	b508      	push	{r3, lr}
   b65a6:	4b02      	ldr	r3, [pc, #8]	; (b65b0 <hal_i2c_lock+0xc>)
   b65a8:	681b      	ldr	r3, [r3, #0]
   b65aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   b65ac:	9301      	str	r3, [sp, #4]
   b65ae:	bd08      	pop	{r3, pc}
   b65b0:	00030228 	.word	0x00030228

000b65b4 <hal_i2c_unlock>:
DYNALIB_FN(19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
   b65b4:	b508      	push	{r3, lr}
   b65b6:	4b02      	ldr	r3, [pc, #8]	; (b65c0 <hal_i2c_unlock+0xc>)
   b65b8:	681b      	ldr	r3, [r3, #0]
   b65ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b65bc:	9301      	str	r3, [sp, #4]
   b65be:	bd08      	pop	{r3, pc}
   b65c0:	00030228 	.word	0x00030228

000b65c4 <hal_i2c_request_ex>:
DYNALIB_FN(20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   b65c4:	b508      	push	{r3, lr}
   b65c6:	4b02      	ldr	r3, [pc, #8]	; (b65d0 <hal_i2c_request_ex+0xc>)
   b65c8:	681b      	ldr	r3, [r3, #0]
   b65ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b65cc:	9301      	str	r3, [sp, #4]
   b65ce:	bd08      	pop	{r3, pc}
   b65d0:	00030228 	.word	0x00030228

000b65d4 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b65d4:	b508      	push	{r3, lr}
   b65d6:	4b02      	ldr	r3, [pc, #8]	; (b65e0 <inet_inet_ntop+0xc>)
   b65d8:	681b      	ldr	r3, [r3, #0]
   b65da:	695b      	ldr	r3, [r3, #20]
   b65dc:	9301      	str	r3, [sp, #4]
   b65de:	bd08      	pop	{r3, pc}
   b65e0:	00030264 	.word	0x00030264

000b65e4 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b65e4:	b508      	push	{r3, lr}
   b65e6:	4b02      	ldr	r3, [pc, #8]	; (b65f0 <netdb_freeaddrinfo+0xc>)
   b65e8:	681b      	ldr	r3, [r3, #0]
   b65ea:	689b      	ldr	r3, [r3, #8]
   b65ec:	9301      	str	r3, [sp, #4]
   b65ee:	bd08      	pop	{r3, pc}
   b65f0:	00030268 	.word	0x00030268

000b65f4 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b65f4:	b508      	push	{r3, lr}
   b65f6:	4b02      	ldr	r3, [pc, #8]	; (b6600 <netdb_getaddrinfo+0xc>)
   b65f8:	681b      	ldr	r3, [r3, #0]
   b65fa:	68db      	ldr	r3, [r3, #12]
   b65fc:	9301      	str	r3, [sp, #4]
   b65fe:	bd08      	pop	{r3, pc}
   b6600:	00030268 	.word	0x00030268

000b6604 <hal_usart_end>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
   b6604:	b508      	push	{r3, lr}
   b6606:	4b02      	ldr	r3, [pc, #8]	; (b6610 <hal_usart_end+0xc>)
   b6608:	681b      	ldr	r3, [r3, #0]
   b660a:	689b      	ldr	r3, [r3, #8]
   b660c:	9301      	str	r3, [sp, #4]
   b660e:	bd08      	pop	{r3, pc}
   b6610:	0003023c 	.word	0x0003023c

000b6614 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b6614:	b508      	push	{r3, lr}
   b6616:	4b02      	ldr	r3, [pc, #8]	; (b6620 <hal_usart_write+0xc>)
   b6618:	681b      	ldr	r3, [r3, #0]
   b661a:	68db      	ldr	r3, [r3, #12]
   b661c:	9301      	str	r3, [sp, #4]
   b661e:	bd08      	pop	{r3, pc}
   b6620:	0003023c 	.word	0x0003023c

000b6624 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b6624:	b508      	push	{r3, lr}
   b6626:	4b02      	ldr	r3, [pc, #8]	; (b6630 <hal_usart_available+0xc>)
   b6628:	681b      	ldr	r3, [r3, #0]
   b662a:	691b      	ldr	r3, [r3, #16]
   b662c:	9301      	str	r3, [sp, #4]
   b662e:	bd08      	pop	{r3, pc}
   b6630:	0003023c 	.word	0x0003023c

000b6634 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b6634:	b508      	push	{r3, lr}
   b6636:	4b02      	ldr	r3, [pc, #8]	; (b6640 <hal_usart_read+0xc>)
   b6638:	681b      	ldr	r3, [r3, #0]
   b663a:	695b      	ldr	r3, [r3, #20]
   b663c:	9301      	str	r3, [sp, #4]
   b663e:	bd08      	pop	{r3, pc}
   b6640:	0003023c 	.word	0x0003023c

000b6644 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b6644:	b508      	push	{r3, lr}
   b6646:	4b02      	ldr	r3, [pc, #8]	; (b6650 <hal_usart_peek+0xc>)
   b6648:	681b      	ldr	r3, [r3, #0]
   b664a:	699b      	ldr	r3, [r3, #24]
   b664c:	9301      	str	r3, [sp, #4]
   b664e:	bd08      	pop	{r3, pc}
   b6650:	0003023c 	.word	0x0003023c

000b6654 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b6654:	b508      	push	{r3, lr}
   b6656:	4b02      	ldr	r3, [pc, #8]	; (b6660 <hal_usart_flush+0xc>)
   b6658:	681b      	ldr	r3, [r3, #0]
   b665a:	69db      	ldr	r3, [r3, #28]
   b665c:	9301      	str	r3, [sp, #4]
   b665e:	bd08      	pop	{r3, pc}
   b6660:	0003023c 	.word	0x0003023c

000b6664 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b6664:	b508      	push	{r3, lr}
   b6666:	4b02      	ldr	r3, [pc, #8]	; (b6670 <hal_usart_available_data_for_write+0xc>)
   b6668:	681b      	ldr	r3, [r3, #0]
   b666a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b666c:	9301      	str	r3, [sp, #4]
   b666e:	bd08      	pop	{r3, pc}
   b6670:	0003023c 	.word	0x0003023c

000b6674 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
   b6674:	b508      	push	{r3, lr}
   b6676:	4b02      	ldr	r3, [pc, #8]	; (b6680 <hal_usart_begin_config+0xc>)
   b6678:	681b      	ldr	r3, [r3, #0]
   b667a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b667c:	9301      	str	r3, [sp, #4]
   b667e:	bd08      	pop	{r3, pc}
   b6680:	0003023c 	.word	0x0003023c

000b6684 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b6684:	b508      	push	{r3, lr}
   b6686:	4b02      	ldr	r3, [pc, #8]	; (b6690 <hal_usart_init_ex+0xc>)
   b6688:	681b      	ldr	r3, [r3, #0]
   b668a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b668c:	9301      	str	r3, [sp, #4]
   b668e:	bd08      	pop	{r3, pc}
   b6690:	0003023c 	.word	0x0003023c

000b6694 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b6694:	b508      	push	{r3, lr}
   b6696:	4b02      	ldr	r3, [pc, #8]	; (b66a0 <HAL_USB_USART_Init+0xc>)
   b6698:	681b      	ldr	r3, [r3, #0]
   b669a:	681b      	ldr	r3, [r3, #0]
   b669c:	9301      	str	r3, [sp, #4]
   b669e:	bd08      	pop	{r3, pc}
   b66a0:	0003024c 	.word	0x0003024c

000b66a4 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b66a4:	b508      	push	{r3, lr}
   b66a6:	4b02      	ldr	r3, [pc, #8]	; (b66b0 <HAL_USB_USART_Begin+0xc>)
   b66a8:	681b      	ldr	r3, [r3, #0]
   b66aa:	685b      	ldr	r3, [r3, #4]
   b66ac:	9301      	str	r3, [sp, #4]
   b66ae:	bd08      	pop	{r3, pc}
   b66b0:	0003024c 	.word	0x0003024c

000b66b4 <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
   b66b4:	b508      	push	{r3, lr}
   b66b6:	4b02      	ldr	r3, [pc, #8]	; (b66c0 <HAL_USB_USART_End+0xc>)
   b66b8:	681b      	ldr	r3, [r3, #0]
   b66ba:	689b      	ldr	r3, [r3, #8]
   b66bc:	9301      	str	r3, [sp, #4]
   b66be:	bd08      	pop	{r3, pc}
   b66c0:	0003024c 	.word	0x0003024c

000b66c4 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b66c4:	b508      	push	{r3, lr}
   b66c6:	4b02      	ldr	r3, [pc, #8]	; (b66d0 <HAL_USB_USART_Available_Data+0xc>)
   b66c8:	681b      	ldr	r3, [r3, #0]
   b66ca:	691b      	ldr	r3, [r3, #16]
   b66cc:	9301      	str	r3, [sp, #4]
   b66ce:	bd08      	pop	{r3, pc}
   b66d0:	0003024c 	.word	0x0003024c

000b66d4 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b66d4:	b508      	push	{r3, lr}
   b66d6:	4b02      	ldr	r3, [pc, #8]	; (b66e0 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b66d8:	681b      	ldr	r3, [r3, #0]
   b66da:	695b      	ldr	r3, [r3, #20]
   b66dc:	9301      	str	r3, [sp, #4]
   b66de:	bd08      	pop	{r3, pc}
   b66e0:	0003024c 	.word	0x0003024c

000b66e4 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b66e4:	b508      	push	{r3, lr}
   b66e6:	4b02      	ldr	r3, [pc, #8]	; (b66f0 <HAL_USB_USART_Receive_Data+0xc>)
   b66e8:	681b      	ldr	r3, [r3, #0]
   b66ea:	699b      	ldr	r3, [r3, #24]
   b66ec:	9301      	str	r3, [sp, #4]
   b66ee:	bd08      	pop	{r3, pc}
   b66f0:	0003024c 	.word	0x0003024c

000b66f4 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b66f4:	b508      	push	{r3, lr}
   b66f6:	4b02      	ldr	r3, [pc, #8]	; (b6700 <HAL_USB_USART_Send_Data+0xc>)
   b66f8:	681b      	ldr	r3, [r3, #0]
   b66fa:	69db      	ldr	r3, [r3, #28]
   b66fc:	9301      	str	r3, [sp, #4]
   b66fe:	bd08      	pop	{r3, pc}
   b6700:	0003024c 	.word	0x0003024c

000b6704 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b6704:	b508      	push	{r3, lr}
   b6706:	4b02      	ldr	r3, [pc, #8]	; (b6710 <HAL_USB_USART_Flush_Data+0xc>)
   b6708:	681b      	ldr	r3, [r3, #0]
   b670a:	6a1b      	ldr	r3, [r3, #32]
   b670c:	9301      	str	r3, [sp, #4]
   b670e:	bd08      	pop	{r3, pc}
   b6710:	0003024c 	.word	0x0003024c

000b6714 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b6714:	b508      	push	{r3, lr}
   b6716:	4b02      	ldr	r3, [pc, #8]	; (b6720 <panic_+0xc>)
   b6718:	681b      	ldr	r3, [r3, #0]
   b671a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b671c:	9301      	str	r3, [sp, #4]
   b671e:	bd08      	pop	{r3, pc}
   b6720:	00030260 	.word	0x00030260

000b6724 <log_message_v>:
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
   b6724:	b508      	push	{r3, lr}
   b6726:	4b02      	ldr	r3, [pc, #8]	; (b6730 <log_message_v+0xc>)
   b6728:	681b      	ldr	r3, [r3, #0]
   b672a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b672c:	9301      	str	r3, [sp, #4]
   b672e:	bd08      	pop	{r3, pc}
   b6730:	00030260 	.word	0x00030260

000b6734 <log_write>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
   b6734:	b508      	push	{r3, lr}
   b6736:	4b02      	ldr	r3, [pc, #8]	; (b6740 <log_write+0xc>)
   b6738:	681b      	ldr	r3, [r3, #0]
   b673a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b673c:	9301      	str	r3, [sp, #4]
   b673e:	bd08      	pop	{r3, pc}
   b6740:	00030260 	.word	0x00030260

000b6744 <log_dump>:
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
   b6744:	b508      	push	{r3, lr}
   b6746:	4b02      	ldr	r3, [pc, #8]	; (b6750 <log_dump+0xc>)
   b6748:	681b      	ldr	r3, [r3, #0]
   b674a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   b674c:	9301      	str	r3, [sp, #4]
   b674e:	bd08      	pop	{r3, pc}
   b6750:	00030260 	.word	0x00030260

000b6754 <log_level_name>:
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
   b6754:	b508      	push	{r3, lr}
   b6756:	4b02      	ldr	r3, [pc, #8]	; (b6760 <log_level_name+0xc>)
   b6758:	681b      	ldr	r3, [r3, #0]
   b675a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   b675c:	9301      	str	r3, [sp, #4]
   b675e:	bd08      	pop	{r3, pc}
   b6760:	00030260 	.word	0x00030260

000b6764 <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
   b6764:	b508      	push	{r3, lr}
   b6766:	4b02      	ldr	r3, [pc, #8]	; (b6770 <log_set_callbacks+0xc>)
   b6768:	681b      	ldr	r3, [r3, #0]
   b676a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   b676c:	9301      	str	r3, [sp, #4]
   b676e:	bd08      	pop	{r3, pc}
   b6770:	00030260 	.word	0x00030260

000b6774 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b6774:	b508      	push	{r3, lr}
   b6776:	4b02      	ldr	r3, [pc, #8]	; (b6780 <set_system_mode+0xc>)
   b6778:	681b      	ldr	r3, [r3, #0]
   b677a:	685b      	ldr	r3, [r3, #4]
   b677c:	9301      	str	r3, [sp, #4]
   b677e:	bd08      	pop	{r3, pc}
   b6780:	00030220 	.word	0x00030220

000b6784 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b6784:	b508      	push	{r3, lr}
   b6786:	4b02      	ldr	r3, [pc, #8]	; (b6790 <system_delay_ms+0xc>)
   b6788:	681b      	ldr	r3, [r3, #0]
   b678a:	695b      	ldr	r3, [r3, #20]
   b678c:	9301      	str	r3, [sp, #4]
   b678e:	bd08      	pop	{r3, pc}
   b6790:	00030220 	.word	0x00030220

000b6794 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   b6794:	b508      	push	{r3, lr}
   b6796:	4b02      	ldr	r3, [pc, #8]	; (b67a0 <application_thread_current+0xc>)
   b6798:	681b      	ldr	r3, [r3, #0]
   b679a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b679c:	9301      	str	r3, [sp, #4]
   b679e:	bd08      	pop	{r3, pc}
   b67a0:	00030220 	.word	0x00030220

000b67a4 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   b67a4:	b508      	push	{r3, lr}
   b67a6:	4b02      	ldr	r3, [pc, #8]	; (b67b0 <application_thread_invoke+0xc>)
   b67a8:	681b      	ldr	r3, [r3, #0]
   b67aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b67ac:	9301      	str	r3, [sp, #4]
   b67ae:	bd08      	pop	{r3, pc}
   b67b0:	00030220 	.word	0x00030220

000b67b4 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b67b4:	b508      	push	{r3, lr}
   b67b6:	4b03      	ldr	r3, [pc, #12]	; (b67c4 <system_ctrl_set_app_request_handler+0x10>)
   b67b8:	681b      	ldr	r3, [r3, #0]
   b67ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b67be:	9301      	str	r3, [sp, #4]
   b67c0:	bd08      	pop	{r3, pc}
   b67c2:	0000      	.short	0x0000
   b67c4:	00030220 	.word	0x00030220

000b67c8 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b67c8:	b508      	push	{r3, lr}
   b67ca:	4b03      	ldr	r3, [pc, #12]	; (b67d8 <system_ctrl_set_result+0x10>)
   b67cc:	681b      	ldr	r3, [r3, #0]
   b67ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b67d2:	9301      	str	r3, [sp, #4]
   b67d4:	bd08      	pop	{r3, pc}
   b67d6:	0000      	.short	0x0000
   b67d8:	00030220 	.word	0x00030220

000b67dc <spark_cloud_flag_connected>:
DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, bool(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   b67dc:	b508      	push	{r3, lr}
   b67de:	4b02      	ldr	r3, [pc, #8]	; (b67e8 <spark_cloud_flag_connected+0xc>)
   b67e0:	681b      	ldr	r3, [r3, #0]
   b67e2:	695b      	ldr	r3, [r3, #20]
   b67e4:	9301      	str	r3, [sp, #4]
   b67e6:	bd08      	pop	{r3, pc}
   b67e8:	00030244 	.word	0x00030244

000b67ec <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   b67ec:	b508      	push	{r3, lr}
   b67ee:	4b02      	ldr	r3, [pc, #8]	; (b67f8 <spark_send_event+0xc>)
   b67f0:	681b      	ldr	r3, [r3, #0]
   b67f2:	6a1b      	ldr	r3, [r3, #32]
   b67f4:	9301      	str	r3, [sp, #4]
   b67f6:	bd08      	pop	{r3, pc}
   b67f8:	00030244 	.word	0x00030244

000b67fc <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b67fc:	b508      	push	{r3, lr}
   b67fe:	4b02      	ldr	r3, [pc, #8]	; (b6808 <spark_set_random_seed_from_cloud_handler+0xc>)
   b6800:	681b      	ldr	r3, [r3, #0]
   b6802:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b6804:	9301      	str	r3, [sp, #4]
   b6806:	bd08      	pop	{r3, pc}
   b6808:	00030244 	.word	0x00030244

000b680c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b680c:	b508      	push	{r3, lr}
   b680e:	4b02      	ldr	r3, [pc, #8]	; (b6818 <network_connect+0xc>)
   b6810:	681b      	ldr	r3, [r3, #0]
   b6812:	685b      	ldr	r3, [r3, #4]
   b6814:	9301      	str	r3, [sp, #4]
   b6816:	bd08      	pop	{r3, pc}
   b6818:	00030240 	.word	0x00030240

000b681c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b681c:	b508      	push	{r3, lr}
   b681e:	4b02      	ldr	r3, [pc, #8]	; (b6828 <network_connecting+0xc>)
   b6820:	681b      	ldr	r3, [r3, #0]
   b6822:	689b      	ldr	r3, [r3, #8]
   b6824:	9301      	str	r3, [sp, #4]
   b6826:	bd08      	pop	{r3, pc}
   b6828:	00030240 	.word	0x00030240

000b682c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b682c:	b508      	push	{r3, lr}
   b682e:	4b02      	ldr	r3, [pc, #8]	; (b6838 <network_disconnect+0xc>)
   b6830:	681b      	ldr	r3, [r3, #0]
   b6832:	68db      	ldr	r3, [r3, #12]
   b6834:	9301      	str	r3, [sp, #4]
   b6836:	bd08      	pop	{r3, pc}
   b6838:	00030240 	.word	0x00030240

000b683c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b683c:	b508      	push	{r3, lr}
   b683e:	4b02      	ldr	r3, [pc, #8]	; (b6848 <network_ready+0xc>)
   b6840:	681b      	ldr	r3, [r3, #0]
   b6842:	691b      	ldr	r3, [r3, #16]
   b6844:	9301      	str	r3, [sp, #4]
   b6846:	bd08      	pop	{r3, pc}
   b6848:	00030240 	.word	0x00030240

000b684c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b684c:	b508      	push	{r3, lr}
   b684e:	4b02      	ldr	r3, [pc, #8]	; (b6858 <network_on+0xc>)
   b6850:	681b      	ldr	r3, [r3, #0]
   b6852:	695b      	ldr	r3, [r3, #20]
   b6854:	9301      	str	r3, [sp, #4]
   b6856:	bd08      	pop	{r3, pc}
   b6858:	00030240 	.word	0x00030240

000b685c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b685c:	b508      	push	{r3, lr}
   b685e:	4b02      	ldr	r3, [pc, #8]	; (b6868 <network_off+0xc>)
   b6860:	681b      	ldr	r3, [r3, #0]
   b6862:	699b      	ldr	r3, [r3, #24]
   b6864:	9301      	str	r3, [sp, #4]
   b6866:	bd08      	pop	{r3, pc}
   b6868:	00030240 	.word	0x00030240

000b686c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b686c:	b508      	push	{r3, lr}
   b686e:	4b02      	ldr	r3, [pc, #8]	; (b6878 <network_listen+0xc>)
   b6870:	681b      	ldr	r3, [r3, #0]
   b6872:	69db      	ldr	r3, [r3, #28]
   b6874:	9301      	str	r3, [sp, #4]
   b6876:	bd08      	pop	{r3, pc}
   b6878:	00030240 	.word	0x00030240

000b687c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b687c:	b508      	push	{r3, lr}
   b687e:	4b02      	ldr	r3, [pc, #8]	; (b6888 <network_listening+0xc>)
   b6880:	681b      	ldr	r3, [r3, #0]
   b6882:	6a1b      	ldr	r3, [r3, #32]
   b6884:	9301      	str	r3, [sp, #4]
   b6886:	bd08      	pop	{r3, pc}
   b6888:	00030240 	.word	0x00030240

000b688c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b688c:	b508      	push	{r3, lr}
   b688e:	4b02      	ldr	r3, [pc, #8]	; (b6898 <network_set_listen_timeout+0xc>)
   b6890:	681b      	ldr	r3, [r3, #0]
   b6892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6894:	9301      	str	r3, [sp, #4]
   b6896:	bd08      	pop	{r3, pc}
   b6898:	00030240 	.word	0x00030240

000b689c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b689c:	b508      	push	{r3, lr}
   b689e:	4b02      	ldr	r3, [pc, #8]	; (b68a8 <network_get_listen_timeout+0xc>)
   b68a0:	681b      	ldr	r3, [r3, #0]
   b68a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b68a4:	9301      	str	r3, [sp, #4]
   b68a6:	bd08      	pop	{r3, pc}
   b68a8:	00030240 	.word	0x00030240

000b68ac <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b68ac:	b508      	push	{r3, lr}
   b68ae:	4b02      	ldr	r3, [pc, #8]	; (b68b8 <network_is_on+0xc>)
   b68b0:	681b      	ldr	r3, [r3, #0]
   b68b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b68b4:	9301      	str	r3, [sp, #4]
   b68b6:	bd08      	pop	{r3, pc}
   b68b8:	00030240 	.word	0x00030240

000b68bc <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b68bc:	b508      	push	{r3, lr}
   b68be:	4b02      	ldr	r3, [pc, #8]	; (b68c8 <network_is_off+0xc>)
   b68c0:	681b      	ldr	r3, [r3, #0]
   b68c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b68c4:	9301      	str	r3, [sp, #4]
   b68c6:	bd08      	pop	{r3, pc}
   b68c8:	00030240 	.word	0x00030240

000b68cc <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b68cc:	b508      	push	{r3, lr}
   b68ce:	4b02      	ldr	r3, [pc, #8]	; (b68d8 <malloc+0xc>)
   b68d0:	681b      	ldr	r3, [r3, #0]
   b68d2:	681b      	ldr	r3, [r3, #0]
   b68d4:	9301      	str	r3, [sp, #4]
   b68d6:	bd08      	pop	{r3, pc}
   b68d8:	0003021c 	.word	0x0003021c

000b68dc <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b68dc:	b508      	push	{r3, lr}
   b68de:	4b02      	ldr	r3, [pc, #8]	; (b68e8 <free+0xc>)
   b68e0:	681b      	ldr	r3, [r3, #0]
   b68e2:	685b      	ldr	r3, [r3, #4]
   b68e4:	9301      	str	r3, [sp, #4]
   b68e6:	bd08      	pop	{r3, pc}
   b68e8:	0003021c 	.word	0x0003021c

000b68ec <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b68ec:	b508      	push	{r3, lr}
   b68ee:	4b02      	ldr	r3, [pc, #8]	; (b68f8 <realloc+0xc>)
   b68f0:	681b      	ldr	r3, [r3, #0]
   b68f2:	689b      	ldr	r3, [r3, #8]
   b68f4:	9301      	str	r3, [sp, #4]
   b68f6:	bd08      	pop	{r3, pc}
   b68f8:	0003021c 	.word	0x0003021c

000b68fc <sscanf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
   b68fc:	b508      	push	{r3, lr}
   b68fe:	4b02      	ldr	r3, [pc, #8]	; (b6908 <sscanf+0xc>)
   b6900:	681b      	ldr	r3, [r3, #0]
   b6902:	695b      	ldr	r3, [r3, #20]
   b6904:	9301      	str	r3, [sp, #4]
   b6906:	bd08      	pop	{r3, pc}
   b6908:	0003021c 	.word	0x0003021c

000b690c <snprintf>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   b690c:	b508      	push	{r3, lr}
   b690e:	4b02      	ldr	r3, [pc, #8]	; (b6918 <snprintf+0xc>)
   b6910:	681b      	ldr	r3, [r3, #0]
   b6912:	69db      	ldr	r3, [r3, #28]
   b6914:	9301      	str	r3, [sp, #4]
   b6916:	bd08      	pop	{r3, pc}
   b6918:	0003021c 	.word	0x0003021c

000b691c <sniprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
   b691c:	b508      	push	{r3, lr}
   b691e:	4b02      	ldr	r3, [pc, #8]	; (b6928 <sniprintf+0xc>)
   b6920:	681b      	ldr	r3, [r3, #0]
   b6922:	6a1b      	ldr	r3, [r3, #32]
   b6924:	9301      	str	r3, [sp, #4]
   b6926:	bd08      	pop	{r3, pc}
   b6928:	0003021c 	.word	0x0003021c

000b692c <vsnprintf>:
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b692c:	b508      	push	{r3, lr}
   b692e:	4b02      	ldr	r3, [pc, #8]	; (b6938 <vsnprintf+0xc>)
   b6930:	681b      	ldr	r3, [r3, #0]
   b6932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b6934:	9301      	str	r3, [sp, #4]
   b6936:	bd08      	pop	{r3, pc}
   b6938:	0003021c 	.word	0x0003021c

000b693c <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b693c:	b508      	push	{r3, lr}
   b693e:	4b02      	ldr	r3, [pc, #8]	; (b6948 <abort+0xc>)
   b6940:	681b      	ldr	r3, [r3, #0]
   b6942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6944:	9301      	str	r3, [sp, #4]
   b6946:	bd08      	pop	{r3, pc}
   b6948:	0003021c 	.word	0x0003021c

000b694c <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   b694c:	b508      	push	{r3, lr}
   b694e:	4b02      	ldr	r3, [pc, #8]	; (b6958 <_malloc_r+0xc>)
   b6950:	681b      	ldr	r3, [r3, #0]
   b6952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6954:	9301      	str	r3, [sp, #4]
   b6956:	bd08      	pop	{r3, pc}
   b6958:	0003021c 	.word	0x0003021c

000b695c <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b695c:	b508      	push	{r3, lr}
   b695e:	4b02      	ldr	r3, [pc, #8]	; (b6968 <__errno+0xc>)
   b6960:	681b      	ldr	r3, [r3, #0]
   b6962:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b6964:	9301      	str	r3, [sp, #4]
   b6966:	bd08      	pop	{r3, pc}
   b6968:	0003021c 	.word	0x0003021c

000b696c <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b696c:	b508      	push	{r3, lr}
   b696e:	4b02      	ldr	r3, [pc, #8]	; (b6978 <__assert_func+0xc>)
   b6970:	681b      	ldr	r3, [r3, #0]
   b6972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6974:	9301      	str	r3, [sp, #4]
   b6976:	bd08      	pop	{r3, pc}
   b6978:	0003021c 	.word	0x0003021c

000b697c <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b697c:	b508      	push	{r3, lr}
   b697e:	4b02      	ldr	r3, [pc, #8]	; (b6988 <newlib_impure_ptr_callback+0xc>)
   b6980:	681b      	ldr	r3, [r3, #0]
   b6982:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b6984:	9301      	str	r3, [sp, #4]
   b6986:	bd08      	pop	{r3, pc}
   b6988:	0003021c 	.word	0x0003021c

000b698c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b698c:	2100      	movs	r1, #0
   b698e:	f7ff bef9 	b.w	b6784 <system_delay_ms>

000b6992 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   b6992:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   b6994:	6883      	ldr	r3, [r0, #8]
   b6996:	4604      	mov	r4, r0
   b6998:	b90b      	cbnz	r3, b699e <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   b699a:	f002 fa1b 	bl	b8dd4 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b699e:	68c3      	ldr	r3, [r0, #12]
   b69a0:	4798      	blx	r3
      if (_M_manager)
   b69a2:	68a3      	ldr	r3, [r4, #8]
   b69a4:	b11b      	cbz	r3, b69ae <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b69a6:	2203      	movs	r2, #3
   b69a8:	4621      	mov	r1, r4
   b69aa:	4620      	mov	r0, r4
   b69ac:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   b69ae:	4620      	mov	r0, r4
   b69b0:	2110      	movs	r1, #16
}
   b69b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   b69b6:	f7fd bb70 	b.w	b409a <_ZdlPvj>

000b69ba <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   b69ba:	b510      	push	{r4, lr}
      if (_M_manager)
   b69bc:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b69be:	4604      	mov	r4, r0
      if (_M_manager)
   b69c0:	b113      	cbz	r3, b69c8 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b69c2:	2203      	movs	r2, #3
   b69c4:	4601      	mov	r1, r0
   b69c6:	4798      	blx	r3
    }
   b69c8:	4620      	mov	r0, r4
   b69ca:	bd10      	pop	{r4, pc}

000b69cc <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    {
   b69cc:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   b69ce:	6843      	ldr	r3, [r0, #4]
   b69d0:	3b01      	subs	r3, #1
    {
   b69d2:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   b69d4:	6043      	str	r3, [r0, #4]
   b69d6:	b963      	cbnz	r3, b69f2 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
          _M_dispose();
   b69d8:	6803      	ldr	r3, [r0, #0]
   b69da:	689b      	ldr	r3, [r3, #8]
   b69dc:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b69de:	68a3      	ldr	r3, [r4, #8]
   b69e0:	3b01      	subs	r3, #1
   b69e2:	60a3      	str	r3, [r4, #8]
   b69e4:	b92b      	cbnz	r3, b69f2 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   b69e6:	6823      	ldr	r3, [r4, #0]
   b69e8:	4620      	mov	r0, r4
   b69ea:	68db      	ldr	r3, [r3, #12]
    }
   b69ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   b69f0:	4718      	bx	r3
    }
   b69f2:	bd10      	pop	{r4, pc}

000b69f4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   b69f4:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b69f6:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b69fa:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b69fc:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
   b6a00:	42ae      	cmp	r6, r5
   b6a02:	d004      	beq.n	b6a0e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
   b6a04:	4628      	mov	r0, r5
   b6a06:	f001 fedb 	bl	b87c0 <_ZN6StringD1Ev>
        for (; p != end; ++p) {
   b6a0a:	3510      	adds	r5, #16
   b6a0c:	e7f8      	b.n	b6a00 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b6a0e:	6820      	ldr	r0, [r4, #0]
   b6a10:	f7ff ff64 	bl	b68dc <free>
    AllocatorT::free(data_);
}
   b6a14:	4620      	mov	r0, r4
   b6a16:	bd70      	pop	{r4, r5, r6, pc}

000b6a18 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
   b6a18:	b513      	push	{r0, r1, r4, lr}
   b6a1a:	460b      	mov	r3, r1
   b6a1c:	4602      	mov	r2, r0
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6a1e:	e9d0 0100 	ldrd	r0, r1, [r0]
   b6a22:	466c      	mov	r4, sp
   b6a24:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b6a28:	e893 0003 	ldmia.w	r3, {r0, r1}
   b6a2c:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b6a30:	e894 0003 	ldmia.w	r4, {r0, r1}
   b6a34:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   b6a38:	b002      	add	sp, #8
   b6a3a:	bd10      	pop	{r4, pc}

000b6a3c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b6a3c:	4802      	ldr	r0, [pc, #8]	; (b6a48 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b6a3e:	2300      	movs	r3, #0
   b6a40:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b6a42:	f7ff bd2f 	b.w	b64a4 <os_mutex_recursive_create>
   b6a46:	bf00      	nop
   b6a48:	2003e668 	.word	0x2003e668

000b6a4c <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   b6a4c:	2200      	movs	r2, #0
   b6a4e:	6840      	ldr	r0, [r0, #4]
   b6a50:	4611      	mov	r1, r2
   b6a52:	f7ff bef3 	b.w	b683c <network_ready>

000b6a56 <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   b6a56:	2200      	movs	r2, #0
   b6a58:	6840      	ldr	r0, [r0, #4]
   b6a5a:	4611      	mov	r1, r2
   b6a5c:	f7ff bf0e 	b.w	b687c <network_listening>

000b6a60 <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b6a60:	2200      	movs	r2, #0
   b6a62:	6840      	ldr	r0, [r0, #4]
   b6a64:	4611      	mov	r1, r2
   b6a66:	f7ff bf19 	b.w	b689c <network_get_listen_timeout>

000b6a6a <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b6a6a:	6840      	ldr	r0, [r0, #4]
   b6a6c:	2200      	movs	r2, #0
   b6a6e:	f7ff bf0d 	b.w	b688c <network_set_listen_timeout>

000b6a72 <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b6a72:	6840      	ldr	r0, [r0, #4]
   b6a74:	2200      	movs	r2, #0
   b6a76:	f081 0101 	eor.w	r1, r1, #1
   b6a7a:	f7ff bef7 	b.w	b686c <network_listen>

000b6a7e <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b6a7e:	2300      	movs	r3, #0
   b6a80:	6840      	ldr	r0, [r0, #4]
   b6a82:	461a      	mov	r2, r3
   b6a84:	4619      	mov	r1, r3
   b6a86:	f7ff bee9 	b.w	b685c <network_off>

000b6a8a <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b6a8a:	2300      	movs	r3, #0
   b6a8c:	6840      	ldr	r0, [r0, #4]
   b6a8e:	461a      	mov	r2, r3
   b6a90:	4619      	mov	r1, r3
   b6a92:	f7ff bedb 	b.w	b684c <network_on>

000b6a96 <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b6a96:	2200      	movs	r2, #0
   b6a98:	6840      	ldr	r0, [r0, #4]
   b6a9a:	4611      	mov	r1, r2
   b6a9c:	f7ff bebe 	b.w	b681c <network_connecting>

000b6aa0 <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b6aa0:	6840      	ldr	r0, [r0, #4]
   b6aa2:	2200      	movs	r2, #0
   b6aa4:	2102      	movs	r1, #2
   b6aa6:	f7ff bec1 	b.w	b682c <network_disconnect>

000b6aaa <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b6aaa:	2300      	movs	r3, #0
   b6aac:	6840      	ldr	r0, [r0, #4]
   b6aae:	461a      	mov	r2, r3
   b6ab0:	f7ff beac 	b.w	b680c <network_connect>

000b6ab4 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   b6ab4:	4b08      	ldr	r3, [pc, #32]	; (b6ad8 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   b6ab6:	b510      	push	{r4, lr}
   b6ab8:	2428      	movs	r4, #40	; 0x28
   b6aba:	4622      	mov	r2, r4
   b6abc:	4618      	mov	r0, r3
   b6abe:	2100      	movs	r1, #0
   b6ac0:	f002 fb7e 	bl	b91c0 <memset>
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b6ac4:	4b05      	ldr	r3, [pc, #20]	; (b6adc <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   b6ac6:	8004      	strh	r4, [r0, #0]
        cid = -1;
   b6ac8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b6acc:	6042      	str	r2, [r0, #4]
   b6ace:	2204      	movs	r2, #4
   b6ad0:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   b6ad2:	4a03      	ldr	r2, [pc, #12]	; (b6ae0 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   b6ad4:	601a      	str	r2, [r3, #0]
   b6ad6:	bd10      	pop	{r4, pc}
   b6ad8:	2003e674 	.word	0x2003e674
   b6adc:	2003e66c 	.word	0x2003e66c
   b6ae0:	000ba1d4 	.word	0x000ba1d4

000b6ae4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b6ae4:	4770      	bx	lr

000b6ae6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   b6ae6:	2000      	movs	r0, #0
   b6ae8:	4770      	bx	lr

000b6aea <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b6aea:	b510      	push	{r4, lr}
   b6aec:	2110      	movs	r1, #16
   b6aee:	4604      	mov	r4, r0
   b6af0:	f7fd fad3 	bl	b409a <_ZdlPvj>
   b6af4:	4620      	mov	r0, r4
   b6af6:	bd10      	pop	{r4, pc}

000b6af8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   b6af8:	b508      	push	{r3, lr}
      { delete this; }
   b6afa:	f7ff fff6 	bl	b6aea <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   b6afe:	bd08      	pop	{r3, pc}

000b6b00 <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   b6b00:	b530      	push	{r4, r5, lr}
        type_(type) {
   b6b02:	2200      	movs	r2, #0
   b6b04:	f64f 749c 	movw	r4, #65436	; 0xff9c
   b6b08:	6002      	str	r2, [r0, #0]
   b6b0a:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   b6b0c:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   b6b0e:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   b6b10:	680c      	ldr	r4, [r1, #0]
   b6b12:	8085      	strh	r5, [r0, #4]
   b6b14:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b6b16:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   b6b18:	bd30      	pop	{r4, r5, pc}

000b6b1a <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   b6b1a:	b510      	push	{r4, lr}
   b6b1c:	4604      	mov	r4, r0
    free((void*)msg_);
   b6b1e:	6800      	ldr	r0, [r0, #0]
   b6b20:	f7ff fedc 	bl	b68dc <free>
}
   b6b24:	4620      	mov	r0, r4
   b6b26:	bd10      	pop	{r4, pc}

000b6b28 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b6b28:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   b6b2a:	68c4      	ldr	r4, [r0, #12]
   b6b2c:	b1f4      	cbz	r4, b6b6c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   b6b2e:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   b6b30:	2b02      	cmp	r3, #2
   b6b32:	d103      	bne.n	b6b3c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   b6b34:	f104 000c 	add.w	r0, r4, #12
   b6b38:	f7ff ffef 	bl	b6b1a <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   b6b3c:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   b6b3e:	b135      	cbz	r5, b6b4e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   b6b40:	4628      	mov	r0, r5
   b6b42:	f7ff ff3a 	bl	b69ba <_ZNSt14_Function_baseD1Ev>
   b6b46:	2110      	movs	r1, #16
   b6b48:	4628      	mov	r0, r5
   b6b4a:	f7fd faa6 	bl	b409a <_ZdlPvj>
   b6b4e:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   b6b50:	b135      	cbz	r5, b6b60 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   b6b52:	4628      	mov	r0, r5
   b6b54:	f7ff ff31 	bl	b69ba <_ZNSt14_Function_baseD1Ev>
   b6b58:	2110      	movs	r1, #16
   b6b5a:	4628      	mov	r0, r5
   b6b5c:	f7fd fa9d 	bl	b409a <_ZdlPvj>
   b6b60:	4620      	mov	r0, r4
   b6b62:	2114      	movs	r1, #20
   b6b64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b6b68:	f7fd ba97 	b.w	b409a <_ZdlPvj>
   b6b6c:	bd38      	pop	{r3, r4, r5, pc}

000b6b6e <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b6b6e:	680b      	ldr	r3, [r1, #0]
   b6b70:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   b6b72:	684b      	ldr	r3, [r1, #4]
   b6b74:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   b6b76:	b113      	cbz	r3, b6b7e <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_+0x10>
    { ++_M_use_count; }
   b6b78:	685a      	ldr	r2, [r3, #4]
   b6b7a:	3201      	adds	r2, #1
   b6b7c:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b6b7e:	4770      	bx	lr

000b6b80 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   b6b80:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b6b82:	4604      	mov	r4, r0
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b6b84:	4668      	mov	r0, sp
   b6b86:	460d      	mov	r5, r1
   b6b88:	f7ff fff1 	bl	b6b6e <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   b6b8c:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b6b8e:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b6b90:	6023      	str	r3, [r4, #0]
	_M_pi = __tmp;
   b6b92:	6062      	str	r2, [r4, #4]
	__r._M_pi = _M_pi;
   b6b94:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   b6b96:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   b6b98:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   b6b9a:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   b6b9c:	f7fd fb62 	bl	b4264 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   b6ba0:	b135      	cbz	r5, b6bb0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv+0x30>
   b6ba2:	1d28      	adds	r0, r5, #4
   b6ba4:	f7fd fb5e 	bl	b4264 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b6ba8:	2108      	movs	r1, #8
   b6baa:	4628      	mov	r0, r5
   b6bac:	f7fd fa75 	bl	b409a <_ZdlPvj>
        return p;
    }
   b6bb0:	4620      	mov	r0, r4
   b6bb2:	b003      	add	sp, #12
   b6bb4:	bd30      	pop	{r4, r5, pc}

000b6bb6 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   b6bb6:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b6bb8:	b510      	push	{r4, lr}
      if (_M_empty())
   b6bba:	b90a      	cbnz	r2, b6bc0 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   b6bbc:	f002 f90a 	bl	b8dd4 <_ZSt25__throw_bad_function_callv>
    }
   b6bc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b6bc4:	68c3      	ldr	r3, [r0, #12]
   b6bc6:	4718      	bx	r3

000b6bc8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b6bc8:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b6bca:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b6bcc:	f100 0110 	add.w	r1, r0, #16
   b6bd0:	f7ff fff1 	bl	b6bb6 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   b6bd4:	bd08      	pop	{r3, pc}

000b6bd6 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   b6bd6:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b6bd8:	b510      	push	{r4, lr}
      if (_M_empty())
   b6bda:	b90a      	cbnz	r2, b6be0 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   b6bdc:	f002 f8fa 	bl	b8dd4 <_ZSt25__throw_bad_function_callv>
    }
   b6be0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b6be4:	68c3      	ldr	r3, [r0, #12]
   b6be6:	4718      	bx	r3

000b6be8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b6be8:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b6bea:	6800      	ldr	r0, [r0, #0]
   b6bec:	f100 0110 	add.w	r1, r0, #16
   b6bf0:	f7ff fff1 	bl	b6bd6 <_ZNKSt8functionIFvRKbEEclES1_>
      }
   b6bf4:	bd08      	pop	{r3, pc}
	...

000b6bf8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   b6bf8:	b538      	push	{r3, r4, r5, lr}
   b6bfa:	2300      	movs	r3, #0
   b6bfc:	4604      	mov	r4, r0
   b6bfe:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b6c00:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   b6c02:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b6c04:	f7fd fa45 	bl	b4092 <_Znwj>
   b6c08:	b128      	cbz	r0, b6c16 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   b6c0a:	2301      	movs	r3, #1
   b6c0c:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   b6c10:	4b02      	ldr	r3, [pc, #8]	; (b6c1c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   b6c12:	6003      	str	r3, [r0, #0]
   b6c14:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b6c16:	6020      	str	r0, [r4, #0]
	}
   b6c18:	4620      	mov	r0, r4
   b6c1a:	bd38      	pop	{r3, r4, r5, pc}
   b6c1c:	000ba210 	.word	0x000ba210

000b6c20 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   b6c20:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b6c22:	2300      	movs	r3, #0
   b6c24:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b6c26:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b6c28:	4604      	mov	r4, r0
   b6c2a:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b6c2c:	b12b      	cbz	r3, b6c3a <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b6c2e:	2202      	movs	r2, #2
   b6c30:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b6c32:	68eb      	ldr	r3, [r5, #12]
   b6c34:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b6c36:	68ab      	ldr	r3, [r5, #8]
   b6c38:	60a3      	str	r3, [r4, #8]
    }
   b6c3a:	4620      	mov	r0, r4
   b6c3c:	bd38      	pop	{r3, r4, r5, pc}
	...

000b6c40 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   b6c40:	b5f0      	push	{r4, r5, r6, r7, lr}
   b6c42:	b089      	sub	sp, #36	; 0x24
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b6c44:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   b6c46:	4668      	mov	r0, sp
   b6c48:	f7ff ff5a 	bl	b6b00 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b6c4c:	f04f 0302 	mov.w	r3, #2
   b6c50:	e8d4 2f4f 	ldrexb	r2, [r4]
   b6c54:	2a00      	cmp	r2, #0
   b6c56:	d103      	bne.n	b6c60 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   b6c58:	e8c4 3f41 	strexb	r1, r3, [r4]
   b6c5c:	2900      	cmp	r1, #0
   b6c5e:	d1f7      	bne.n	b6c50 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   b6c60:	d125      	bne.n	b6cae <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   b6c62:	f104 050c 	add.w	r5, r4, #12
   b6c66:	4669      	mov	r1, sp
   b6c68:	4628      	mov	r0, r5
   b6c6a:	f7ff ff49 	bl	b6b00 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   b6c6e:	f3bf 8f5b 	dmb	ish
   b6c72:	2301      	movs	r3, #1
   b6c74:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b6c76:	2000      	movs	r0, #0
   b6c78:	f104 0308 	add.w	r3, r4, #8
   b6c7c:	f3bf 8f5b 	dmb	ish
   b6c80:	e853 6f00 	ldrex	r6, [r3]
   b6c84:	e843 0200 	strex	r2, r0, [r3]
   b6c88:	2a00      	cmp	r2, #0
   b6c8a:	d1f9      	bne.n	b6c80 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   b6c8c:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b6c90:	b16e      	cbz	r6, b6cae <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   b6c92:	f7ff fd7f 	bl	b6794 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b6c96:	b178      	cbz	r0, b6cb8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b6c98:	4629      	mov	r1, r5
   b6c9a:	4630      	mov	r0, r6
   b6c9c:	f7ff ff8b 	bl	b6bb6 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   b6ca0:	4630      	mov	r0, r6
   b6ca2:	f7ff fe8a 	bl	b69ba <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b6ca6:	2110      	movs	r1, #16
   b6ca8:	4630      	mov	r0, r6
   b6caa:	f7fd f9f6 	bl	b409a <_ZdlPvj>
        p_->setError(std::move(error));
   b6cae:	4668      	mov	r0, sp
   b6cb0:	f7ff ff33 	bl	b6b1a <_ZN8particle5ErrorD1Ev>
    }
   b6cb4:	b009      	add	sp, #36	; 0x24
   b6cb6:	bdf0      	pop	{r4, r5, r6, r7, pc}

     public:
      template<typename... _Args>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b6cb8:	4631      	mov	r1, r6
   b6cba:	a802      	add	r0, sp, #8
   b6cbc:	f7ff ffb0 	bl	b6c20 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b6cc0:	68e0      	ldr	r0, [r4, #12]
   b6cc2:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b6cc6:	b108      	cbz	r0, b6ccc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   b6cc8:	f002 fada 	bl	b9280 <strdup>
        type_(type) {
   b6ccc:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b6cce:	2010      	movs	r0, #16
   b6cd0:	f8ad 501c 	strh.w	r5, [sp, #28]
   b6cd4:	f7fd f9dd 	bl	b4092 <_Znwj>
   b6cd8:	4605      	mov	r5, r0
   b6cda:	b1e8      	cbz	r0, b6d18 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   b6cdc:	2700      	movs	r7, #0
   b6cde:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b6ce0:	2018      	movs	r0, #24
   b6ce2:	f7fd f9d6 	bl	b4092 <_Znwj>
   b6ce6:	4604      	mov	r4, r0
   b6ce8:	b188      	cbz	r0, b6d0e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   b6cea:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   b6cec:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b6cee:	a802      	add	r0, sp, #8
   b6cf0:	f7ff fe92 	bl	b6a18 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6cf4:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   b6cf6:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b6cf8:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6cfa:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b6cfc:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b6cfe:	a906      	add	r1, sp, #24
   b6d00:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b6d02:	60e3      	str	r3, [r4, #12]
   b6d04:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   b6d08:	9205      	str	r2, [sp, #20]
   b6d0a:	f7ff fef9 	bl	b6b00 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   b6d0e:	4b08      	ldr	r3, [pc, #32]	; (b6d30 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   b6d10:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b6d12:	4b08      	ldr	r3, [pc, #32]	; (b6d34 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b6d14:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b6d16:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   b6d18:	a806      	add	r0, sp, #24
   b6d1a:	f7ff fefe 	bl	b6b1a <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b6d1e:	a802      	add	r0, sp, #8
   b6d20:	f7ff fe4b 	bl	b69ba <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b6d24:	2200      	movs	r2, #0
   b6d26:	4629      	mov	r1, r5
   b6d28:	4803      	ldr	r0, [pc, #12]	; (b6d38 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   b6d2a:	f7ff fd3b 	bl	b67a4 <application_thread_invoke>
   b6d2e:	e7b7      	b.n	b6ca0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   b6d30:	000b6bc9 	.word	0x000b6bc9
   b6d34:	000b6e4d 	.word	0x000b6e4d
   b6d38:	000b6993 	.word	0x000b6993

000b6d3c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   b6d3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6d40:	b08b      	sub	sp, #44	; 0x2c
   b6d42:	4605      	mov	r5, r0
   b6d44:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   b6d48:	460f      	mov	r7, r1
   b6d4a:	4690      	mov	r8, r2
   b6d4c:	4699      	mov	r9, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   b6d4e:	f7ff fd45 	bl	b67dc <spark_cloud_flag_connected>
   b6d52:	ae07      	add	r6, sp, #28
    if (!connected()) {
   b6d54:	4683      	mov	fp, r0
   b6d56:	bb38      	cbnz	r0, b6da8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   b6d58:	f64f 732e 	movw	r3, #65326	; 0xff2e
   b6d5c:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   b6d5e:	a905      	add	r1, sp, #20
   b6d60:	4630      	mov	r0, r6
   b6d62:	f8ad 3018 	strh.w	r3, [sp, #24]
   b6d66:	f7ff fecb 	bl	b6b00 <_ZN8particle5ErrorC1EOS0_>
   b6d6a:	2014      	movs	r0, #20
   b6d6c:	f7fd f991 	bl	b4092 <_Znwj>
   b6d70:	4604      	mov	r4, r0
   b6d72:	b148      	cbz	r0, b6d88 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   b6d74:	2302      	movs	r3, #2
   b6d76:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b6d78:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   b6d7a:	e9c0 bb01 	strd	fp, fp, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b6d7e:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   b6d80:	4631      	mov	r1, r6
   b6d82:	300c      	adds	r0, #12
   b6d84:	f7ff febc 	bl	b6b00 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b6d88:	4628      	mov	r0, r5
	: __shared_count(__p)
   b6d8a:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b6d8c:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   b6d90:	f7ff ff32 	bl	b6bf8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   b6d94:	4630      	mov	r0, r6
   b6d96:	f7ff fec0 	bl	b6b1a <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   b6d9a:	a805      	add	r0, sp, #20
   b6d9c:	f7ff febd 	bl	b6b1a <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   b6da0:	4628      	mov	r0, r5
   b6da2:	b00b      	add	sp, #44	; 0x2c
   b6da4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d.size = sizeof(spark_send_event_data);
   b6da8:	230c      	movs	r3, #12
    spark_send_event_data d = {};
   b6daa:	2400      	movs	r4, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   b6dac:	2014      	movs	r0, #20
   b6dae:	e9cd 4408 	strd	r4, r4, [sp, #32]
    d.size = sizeof(spark_send_event_data);
   b6db2:	9307      	str	r3, [sp, #28]
   b6db4:	f7fd f96d 	bl	b4092 <_Znwj>
   b6db8:	4601      	mov	r1, r0
   b6dba:	b118      	cbz	r0, b6dc4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x88>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   b6dbc:	e9c0 4401 	strd	r4, r4, [r0, #4]
   b6dc0:	7004      	strb	r4, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b6dc2:	7044      	strb	r4, [r0, #1]
   b6dc4:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b6dc6:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   b6dc8:	f7ff ff16 	bl	b6bf8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   b6dcc:	4b1e      	ldr	r3, [pc, #120]	; (b6e48 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x10c>)
   b6dce:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   b6dd0:	2008      	movs	r0, #8
   b6dd2:	f7fd f95e 	bl	b4092 <_Znwj>
   b6dd6:	4604      	mov	r4, r0
   b6dd8:	b110      	cbz	r0, b6de0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa4>
   b6dda:	a903      	add	r1, sp, #12
   b6ddc:	f7ff fec7 	bl	b6b6e <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   b6de0:	9600      	str	r6, [sp, #0]
   b6de2:	fa5f f38a 	uxtb.w	r3, sl
   b6de6:	464a      	mov	r2, r9
   b6de8:	4641      	mov	r1, r8
   b6dea:	4638      	mov	r0, r7
    d.handler_data = p.dataPtr();
   b6dec:	9409      	str	r4, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   b6dee:	f7ff fcfd 	bl	b67ec <spark_send_event>
   b6df2:	b9b8      	cbnz	r0, b6e24 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
	return __atomic_load_n(&_M_i, int(__m));
   b6df4:	9b03      	ldr	r3, [sp, #12]
   b6df6:	785b      	ldrb	r3, [r3, #1]
   b6df8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   b6dfc:	b993      	cbnz	r3, b6e24 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   b6dfe:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   b6e02:	a905      	add	r1, sp, #20
   b6e04:	a803      	add	r0, sp, #12
   b6e06:	9205      	str	r2, [sp, #20]
   b6e08:	f8ad 3018 	strh.w	r3, [sp, #24]
   b6e0c:	f7ff ff18 	bl	b6c40 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b6e10:	a805      	add	r0, sp, #20
   b6e12:	f7ff fe82 	bl	b6b1a <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   b6e16:	a805      	add	r0, sp, #20
   b6e18:	9909      	ldr	r1, [sp, #36]	; 0x24
   b6e1a:	f7ff feb1 	bl	b6b80 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   b6e1e:	a806      	add	r0, sp, #24
   b6e20:	f7fd fa20 	bl	b4264 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b6e24:	a903      	add	r1, sp, #12
   b6e26:	a805      	add	r0, sp, #20
   b6e28:	f7ff fea1 	bl	b6b6e <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   b6e2c:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b6e2e:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b6e30:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   b6e32:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   b6e34:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   b6e36:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   b6e38:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   b6e3a:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   b6e3c:	f7fd fa12 	bl	b4264 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b6e40:	a804      	add	r0, sp, #16
   b6e42:	f7fd fa0f 	bl	b4264 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   b6e46:	e7ab      	b.n	b6da0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   b6e48:	000b6ec9 	.word	0x000b6ec9

000b6e4c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	switch (__op)
   b6e4c:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b6e4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6e50:	4605      	mov	r5, r0
	switch (__op)
   b6e52:	d103      	bne.n	b6e5c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b6e54:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b6e56:	6003      	str	r3, [r0, #0]
      }
   b6e58:	2000      	movs	r0, #0
   b6e5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  switch (__op)
   b6e5c:	2a02      	cmp	r2, #2
   b6e5e:	d010      	beq.n	b6e82 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   b6e60:	2a03      	cmp	r2, #3
   b6e62:	d1f9      	bne.n	b6e58 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b6e64:	6804      	ldr	r4, [r0, #0]
   b6e66:	2c00      	cmp	r4, #0
   b6e68:	d0f6      	beq.n	b6e58 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
   b6e6a:	f104 0010 	add.w	r0, r4, #16
   b6e6e:	f7ff fe54 	bl	b6b1a <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b6e72:	4620      	mov	r0, r4
   b6e74:	f7ff fda1 	bl	b69ba <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b6e78:	2118      	movs	r1, #24
   b6e7a:	4620      	mov	r0, r4
   b6e7c:	f7fd f90d 	bl	b409a <_ZdlPvj>
   b6e80:	e7ea      	b.n	b6e58 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b6e82:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   b6e84:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b6e86:	f7fd f904 	bl	b4092 <_Znwj>
   b6e8a:	4604      	mov	r4, r0
   b6e8c:	b150      	cbz	r0, b6ea4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x58>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   b6e8e:	4631      	mov	r1, r6
   b6e90:	f7ff fec6 	bl	b6c20 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b6e94:	6930      	ldr	r0, [r6, #16]
   b6e96:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b6e9a:	b108      	cbz	r0, b6ea0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
   b6e9c:	f002 f9f0 	bl	b9280 <strdup>
        type_(type) {
   b6ea0:	6120      	str	r0, [r4, #16]
   b6ea2:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   b6ea4:	602c      	str	r4, [r5, #0]
	}
   b6ea6:	e7d7      	b.n	b6e58 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>

000b6ea8 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   b6ea8:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b6eaa:	2300      	movs	r3, #0
   b6eac:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b6eae:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b6eb0:	4604      	mov	r4, r0
   b6eb2:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b6eb4:	b12b      	cbz	r3, b6ec2 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b6eb6:	2202      	movs	r2, #2
   b6eb8:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b6eba:	68eb      	ldr	r3, [r5, #12]
   b6ebc:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b6ebe:	68ab      	ldr	r3, [r5, #8]
   b6ec0:	60a3      	str	r3, [r4, #8]
    }
   b6ec2:	4620      	mov	r0, r4
   b6ec4:	bd38      	pop	{r3, r4, r5, pc}
	...

000b6ec8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   b6ec8:	b5f0      	push	{r4, r5, r6, r7, lr}
   b6eca:	b089      	sub	sp, #36	; 0x24
   b6ecc:	4604      	mov	r4, r0
   b6ece:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   b6ed0:	a801      	add	r0, sp, #4
   b6ed2:	4611      	mov	r1, r2
   b6ed4:	f7ff fe54 	bl	b6b80 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   b6ed8:	b1a4      	cbz	r4, b6f04 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   b6eda:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b6edc:	b11d      	cbz	r5, b6ee6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   b6ede:	4628      	mov	r0, r5
   b6ee0:	f002 f9ce 	bl	b9280 <strdup>
   b6ee4:	4605      	mov	r5, r0
   b6ee6:	a801      	add	r0, sp, #4
   b6ee8:	a903      	add	r1, sp, #12
        type_(type) {
   b6eea:	9503      	str	r5, [sp, #12]
   b6eec:	f8ad 4010 	strh.w	r4, [sp, #16]
   b6ef0:	f7ff fea6 	bl	b6c40 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b6ef4:	a803      	add	r0, sp, #12
   b6ef6:	f7ff fe10 	bl	b6b1a <_ZN8particle5ErrorD1Ev>
   b6efa:	a802      	add	r0, sp, #8
   b6efc:	f7fd f9b2 	bl	b4264 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b6f00:	b009      	add	sp, #36	; 0x24
   b6f02:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return _M_ptr; }
   b6f04:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b6f06:	2301      	movs	r3, #1
   b6f08:	e8d5 2f4f 	ldrexb	r2, [r5]
   b6f0c:	2a00      	cmp	r2, #0
   b6f0e:	d103      	bne.n	b6f18 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   b6f10:	e8c5 3f41 	strexb	r1, r3, [r5]
   b6f14:	2900      	cmp	r1, #0
   b6f16:	d1f7      	bne.n	b6f08 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   b6f18:	d1ef      	bne.n	b6efa <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   b6f1a:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   b6f1c:	f3bf 8f5b 	dmb	ish
   b6f20:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b6f22:	1d2b      	adds	r3, r5, #4
   b6f24:	f3bf 8f5b 	dmb	ish
   b6f28:	e853 6f00 	ldrex	r6, [r3]
   b6f2c:	e843 4200 	strex	r2, r4, [r3]
   b6f30:	2a00      	cmp	r2, #0
   b6f32:	d1f9      	bne.n	b6f28 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   b6f34:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b6f38:	2e00      	cmp	r6, #0
   b6f3a:	d0de      	beq.n	b6efa <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   b6f3c:	4620      	mov	r0, r4
   b6f3e:	f7ff fc29 	bl	b6794 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b6f42:	4607      	mov	r7, r0
   b6f44:	b160      	cbz	r0, b6f60 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b6f46:	f105 010c 	add.w	r1, r5, #12
   b6f4a:	4630      	mov	r0, r6
   b6f4c:	f7ff fe43 	bl	b6bd6 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   b6f50:	4630      	mov	r0, r6
   b6f52:	f7ff fd32 	bl	b69ba <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b6f56:	2110      	movs	r1, #16
   b6f58:	4630      	mov	r0, r6
   b6f5a:	f7fd f89e 	bl	b409a <_ZdlPvj>
   b6f5e:	e7cc      	b.n	b6efa <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b6f60:	4631      	mov	r1, r6
   b6f62:	a803      	add	r0, sp, #12
   b6f64:	f7ff ffa0 	bl	b6ea8 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b6f68:	7b2b      	ldrb	r3, [r5, #12]
   b6f6a:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b6f6e:	2010      	movs	r0, #16
   b6f70:	f7fd f88f 	bl	b4092 <_Znwj>
   b6f74:	4605      	mov	r5, r0
   b6f76:	b1d0      	cbz	r0, b6fae <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   b6f78:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b6f7a:	2014      	movs	r0, #20
   b6f7c:	f7fd f889 	bl	b4092 <_Znwj>
   b6f80:	4604      	mov	r4, r0
   b6f82:	b178      	cbz	r0, b6fa4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   b6f84:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b6f86:	4601      	mov	r1, r0
   b6f88:	a803      	add	r0, sp, #12
   b6f8a:	f7ff fd45 	bl	b6a18 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6f8e:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b6f90:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b6f92:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6f94:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   b6f96:	9205      	str	r2, [sp, #20]
   b6f98:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b6f9a:	60e3      	str	r3, [r4, #12]
   b6f9c:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   b6fa0:	9206      	str	r2, [sp, #24]
   b6fa2:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   b6fa4:	4b06      	ldr	r3, [pc, #24]	; (b6fc0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   b6fa6:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b6fa8:	4b06      	ldr	r3, [pc, #24]	; (b6fc4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b6faa:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b6fac:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   b6fae:	a803      	add	r0, sp, #12
   b6fb0:	f7ff fd03 	bl	b69ba <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b6fb4:	2200      	movs	r2, #0
   b6fb6:	4629      	mov	r1, r5
   b6fb8:	4803      	ldr	r0, [pc, #12]	; (b6fc8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   b6fba:	f7ff fbf3 	bl	b67a4 <application_thread_invoke>
   b6fbe:	e7c7      	b.n	b6f50 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   b6fc0:	000b6be9 	.word	0x000b6be9
   b6fc4:	000b6fcd 	.word	0x000b6fcd
   b6fc8:	000b6993 	.word	0x000b6993

000b6fcc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	switch (__op)
   b6fcc:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b6fce:	b570      	push	{r4, r5, r6, lr}
   b6fd0:	4604      	mov	r4, r0
	switch (__op)
   b6fd2:	d103      	bne.n	b6fdc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b6fd4:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b6fd6:	6003      	str	r3, [r0, #0]
      }
   b6fd8:	2000      	movs	r0, #0
   b6fda:	bd70      	pop	{r4, r5, r6, pc}
	  switch (__op)
   b6fdc:	2a02      	cmp	r2, #2
   b6fde:	d00c      	beq.n	b6ffa <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   b6fe0:	2a03      	cmp	r2, #3
   b6fe2:	d1f9      	bne.n	b6fd8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b6fe4:	6804      	ldr	r4, [r0, #0]
   b6fe6:	2c00      	cmp	r4, #0
   b6fe8:	d0f6      	beq.n	b6fd8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
   b6fea:	4620      	mov	r0, r4
   b6fec:	f7ff fce5 	bl	b69ba <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b6ff0:	2114      	movs	r1, #20
   b6ff2:	4620      	mov	r0, r4
   b6ff4:	f7fd f851 	bl	b409a <_ZdlPvj>
   b6ff8:	e7ee      	b.n	b6fd8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b6ffa:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   b6ffc:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b6ffe:	f7fd f848 	bl	b4092 <_Znwj>
   b7002:	4605      	mov	r5, r0
   b7004:	b120      	cbz	r0, b7010 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x44>
      _Bind(const _Bind&) = default;
   b7006:	4631      	mov	r1, r6
   b7008:	f7ff ff4e 	bl	b6ea8 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   b700c:	7c33      	ldrb	r3, [r6, #16]
   b700e:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   b7010:	6025      	str	r5, [r4, #0]
	}
   b7012:	e7e1      	b.n	b6fd8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>

000b7014 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b7014:	2200      	movs	r2, #0
   b7016:	6840      	ldr	r0, [r0, #4]
   b7018:	4611      	mov	r1, r2
   b701a:	f7ff bc2f 	b.w	b687c <network_listening>

000b701e <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b701e:	2200      	movs	r2, #0
   b7020:	6840      	ldr	r0, [r0, #4]
   b7022:	4611      	mov	r1, r2
   b7024:	f7ff bc3a 	b.w	b689c <network_get_listen_timeout>

000b7028 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b7028:	6840      	ldr	r0, [r0, #4]
   b702a:	2200      	movs	r2, #0
   b702c:	f7ff bc2e 	b.w	b688c <network_set_listen_timeout>

000b7030 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b7030:	6840      	ldr	r0, [r0, #4]
   b7032:	2200      	movs	r2, #0
   b7034:	f081 0101 	eor.w	r1, r1, #1
   b7038:	f7ff bc18 	b.w	b686c <network_listen>

000b703c <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b703c:	2300      	movs	r3, #0
   b703e:	6840      	ldr	r0, [r0, #4]
   b7040:	461a      	mov	r2, r3
   b7042:	4619      	mov	r1, r3
   b7044:	f7ff bc0a 	b.w	b685c <network_off>

000b7048 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b7048:	2300      	movs	r3, #0
   b704a:	6840      	ldr	r0, [r0, #4]
   b704c:	461a      	mov	r2, r3
   b704e:	4619      	mov	r1, r3
   b7050:	f7ff bbfc 	b.w	b684c <network_on>

000b7054 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b7054:	2200      	movs	r2, #0
   b7056:	6840      	ldr	r0, [r0, #4]
   b7058:	4611      	mov	r1, r2
   b705a:	f7ff bbef 	b.w	b683c <network_ready>

000b705e <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b705e:	2200      	movs	r2, #0
   b7060:	6840      	ldr	r0, [r0, #4]
   b7062:	4611      	mov	r1, r2
   b7064:	f7ff bbda 	b.w	b681c <network_connecting>

000b7068 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b7068:	6840      	ldr	r0, [r0, #4]
   b706a:	2200      	movs	r2, #0
   b706c:	2102      	movs	r1, #2
   b706e:	f7ff bbdd 	b.w	b682c <network_disconnect>

000b7072 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b7072:	2300      	movs	r3, #0
   b7074:	6840      	ldr	r0, [r0, #4]
   b7076:	461a      	mov	r2, r3
   b7078:	f7ff bbc8 	b.w	b680c <network_connect>

000b707c <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   b707c:	4b02      	ldr	r3, [pc, #8]	; (b7088 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b707e:	2203      	movs	r2, #3
   b7080:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b7082:	4a02      	ldr	r2, [pc, #8]	; (b708c <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b7084:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b7086:	4770      	bx	lr
   b7088:	2003e69c 	.word	0x2003e69c
   b708c:	000ba22c 	.word	0x000ba22c

000b7090 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b7090:	4770      	bx	lr

000b7092 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b7092:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7094:	4606      	mov	r6, r0
   b7096:	4615      	mov	r5, r2
   b7098:	460c      	mov	r4, r1
   b709a:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b709c:	42bc      	cmp	r4, r7
   b709e:	d006      	beq.n	b70ae <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b70a0:	6833      	ldr	r3, [r6, #0]
   b70a2:	f814 1b01 	ldrb.w	r1, [r4], #1
   b70a6:	689b      	ldr	r3, [r3, #8]
   b70a8:	4630      	mov	r0, r6
   b70aa:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b70ac:	e7f6      	b.n	b709c <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b70ae:	4628      	mov	r0, r5
   b70b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b70b2 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b70b2:	7c00      	ldrb	r0, [r0, #16]
   b70b4:	2200      	movs	r2, #0
   b70b6:	f7ff ba45 	b.w	b6544 <hal_i2c_write>

000b70ba <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b70ba:	7c00      	ldrb	r0, [r0, #16]
   b70bc:	2100      	movs	r1, #0
   b70be:	f7ff ba49 	b.w	b6554 <hal_i2c_available>

000b70c2 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b70c2:	7c00      	ldrb	r0, [r0, #16]
   b70c4:	2100      	movs	r1, #0
   b70c6:	f7ff ba4d 	b.w	b6564 <hal_i2c_read>

000b70ca <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b70ca:	7c00      	ldrb	r0, [r0, #16]
   b70cc:	2100      	movs	r1, #0
   b70ce:	f7ff ba51 	b.w	b6574 <hal_i2c_peek>

000b70d2 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b70d2:	7c00      	ldrb	r0, [r0, #16]
   b70d4:	2100      	movs	r1, #0
   b70d6:	f7ff ba55 	b.w	b6584 <hal_i2c_flush>

000b70da <_ZN7TwoWireD0Ev>:
   b70da:	b510      	push	{r4, lr}
   b70dc:	2114      	movs	r1, #20
   b70de:	4604      	mov	r4, r0
   b70e0:	f7fc ffdb 	bl	b409a <_ZdlPvj>
   b70e4:	4620      	mov	r0, r4
   b70e6:	bd10      	pop	{r4, pc}

000b70e8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b70e8:	b538      	push	{r3, r4, r5, lr}
   b70ea:	4604      	mov	r4, r0
   b70ec:	4615      	mov	r5, r2
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b70ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b70f2:	2200      	movs	r2, #0
   b70f4:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b70f8:	4b09      	ldr	r3, [pc, #36]	; (b7120 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
  _i2c = i2c;
   b70fa:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b70fc:	4608      	mov	r0, r1
   b70fe:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
   b7100:	4629      	mov	r1, r5
   b7102:	f7ff fa47 	bl	b6594 <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b7106:	30bf      	adds	r0, #191	; 0xbf
   b7108:	d108      	bne.n	b711c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
   b710a:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b710c:	07db      	lsls	r3, r3, #31
   b710e:	d505      	bpl.n	b711c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
   b7110:	6868      	ldr	r0, [r5, #4]
   b7112:	f7ff fbe3 	bl	b68dc <free>
    free(conf.tx_buffer);
   b7116:	68e8      	ldr	r0, [r5, #12]
   b7118:	f7ff fbe0 	bl	b68dc <free>
}
   b711c:	4620      	mov	r0, r4
   b711e:	bd38      	pop	{r3, r4, r5, pc}
   b7120:	000ba268 	.word	0x000ba268

000b7124 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   b7124:	2300      	movs	r3, #0
   b7126:	7c00      	ldrb	r0, [r0, #16]
   b7128:	461a      	mov	r2, r3
   b712a:	4619      	mov	r1, r3
   b712c:	f7ff b9f2 	b.w	b6514 <hal_i2c_begin>

000b7130 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   b7130:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   b7132:	2200      	movs	r2, #0
   b7134:	2314      	movs	r3, #20
   b7136:	e9cd 2201 	strd	r2, r2, [sp, #4]
   b713a:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   b713e:	780b      	ldrb	r3, [r1, #0]
   b7140:	f88d 3008 	strb.w	r3, [sp, #8]
   b7144:	684b      	ldr	r3, [r1, #4]
   b7146:	9303      	str	r3, [sp, #12]
   b7148:	68cb      	ldr	r3, [r1, #12]
   b714a:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   b714c:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   b714e:	7a0b      	ldrb	r3, [r1, #8]
   b7150:	9305      	str	r3, [sp, #20]
   b7152:	a901      	add	r1, sp, #4
   b7154:	f7ff fa36 	bl	b65c4 <hal_i2c_request_ex>
}
   b7158:	b007      	add	sp, #28
   b715a:	f85d fb04 	ldr.w	pc, [sp], #4

000b715e <_ZN7TwoWire11requestFromEhjh>:
{
   b715e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   b7160:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   b7162:	f88d 1000 	strb.w	r1, [sp]
   b7166:	f04f 0164 	mov.w	r1, #100	; 0x64
   b716a:	9103      	str	r1, [sp, #12]
   b716c:	bf18      	it	ne
   b716e:	2301      	movne	r3, #1
   b7170:	4669      	mov	r1, sp
    size_ = size;
   b7172:	9201      	str	r2, [sp, #4]
   b7174:	f88d 3008 	strb.w	r3, [sp, #8]
   b7178:	f7ff ffda 	bl	b7130 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   b717c:	b005      	add	sp, #20
   b717e:	f85d fb04 	ldr.w	pc, [sp], #4

000b7182 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   b7182:	7c00      	ldrb	r0, [r0, #16]
   b7184:	2200      	movs	r2, #0
   b7186:	f7ff b9cd 	b.w	b6524 <hal_i2c_begin_transmission>

000b718a <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   b718a:	b2c9      	uxtb	r1, r1
   b718c:	f7ff bff9 	b.w	b7182 <_ZN7TwoWire17beginTransmissionEh>

000b7190 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   b7190:	7c00      	ldrb	r0, [r0, #16]
   b7192:	2200      	movs	r2, #0
   b7194:	f7ff b9ce 	b.w	b6534 <hal_i2c_end_transmission>

000b7198 <_ZN7TwoWire4lockEv>:
{
  hal_i2c_reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
   b7198:	b508      	push	{r3, lr}
  return hal_i2c_lock(_i2c, NULL) == 0;
   b719a:	2100      	movs	r1, #0
   b719c:	7c00      	ldrb	r0, [r0, #16]
   b719e:	f7ff fa01 	bl	b65a4 <hal_i2c_lock>
}
   b71a2:	fab0 f080 	clz	r0, r0
   b71a6:	0940      	lsrs	r0, r0, #5
   b71a8:	bd08      	pop	{r3, pc}

000b71aa <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
   b71aa:	b508      	push	{r3, lr}
  return hal_i2c_unlock(_i2c, NULL) == 0;
   b71ac:	2100      	movs	r1, #0
   b71ae:	7c00      	ldrb	r0, [r0, #16]
   b71b0:	f7ff fa00 	bl	b65b4 <hal_i2c_unlock>
}
   b71b4:	fab0 f080 	clz	r0, r0
   b71b8:	0940      	lsrs	r0, r0, #5
   b71ba:	bd08      	pop	{r3, pc}

000b71bc <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b71bc:	4770      	bx	lr

000b71be <_ZN9IPAddressD0Ev>:
   b71be:	b510      	push	{r4, lr}
   b71c0:	2118      	movs	r1, #24
   b71c2:	4604      	mov	r4, r0
   b71c4:	f7fc ff69 	bl	b409a <_ZdlPvj>
   b71c8:	4620      	mov	r0, r4
   b71ca:	bd10      	pop	{r4, pc}

000b71cc <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b71cc:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b71ce:	7d03      	ldrb	r3, [r0, #20]
   b71d0:	2b06      	cmp	r3, #6
{
   b71d2:	b08d      	sub	sp, #52	; 0x34
   b71d4:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b71d6:	f100 0704 	add.w	r7, r0, #4
   b71da:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b71de:	d012      	beq.n	b7206 <_ZNK9IPAddress7printToER5Print+0x3a>
   b71e0:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b71e4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b71e8:	220a      	movs	r2, #10
   b71ea:	4630      	mov	r0, r6
   b71ec:	f001 fa93 	bl	b8716 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b71f0:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b71f2:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b71f4:	d019      	beq.n	b722a <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b71f6:	2c00      	cmp	r4, #0
   b71f8:	d0f4      	beq.n	b71e4 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b71fa:	212e      	movs	r1, #46	; 0x2e
   b71fc:	4630      	mov	r0, r6
   b71fe:	f001 fa7b 	bl	b86f8 <_ZN5Print5printEc>
   b7202:	4404      	add	r4, r0
   b7204:	e7ee      	b.n	b71e4 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b7206:	232f      	movs	r3, #47	; 0x2f
   b7208:	466a      	mov	r2, sp
   b720a:	4639      	mov	r1, r7
   b720c:	200a      	movs	r0, #10
		buf[0] = 0;
   b720e:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b7212:	f7ff f9df 	bl	b65d4 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b7216:	4668      	mov	r0, sp
   b7218:	f002 f84f 	bl	b92ba <strlen>
   b721c:	6833      	ldr	r3, [r6, #0]
   b721e:	4602      	mov	r2, r0
   b7220:	68db      	ldr	r3, [r3, #12]
   b7222:	4669      	mov	r1, sp
   b7224:	4630      	mov	r0, r6
   b7226:	4798      	blx	r3
   b7228:	4604      	mov	r4, r0
    }
    return n;
}
   b722a:	4620      	mov	r0, r4
   b722c:	b00d      	add	sp, #52	; 0x34
   b722e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b7230 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b7230:	b510      	push	{r4, lr}
   b7232:	4b05      	ldr	r3, [pc, #20]	; (b7248 <_ZN9IPAddressC1Ev+0x18>)
   b7234:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b7236:	2211      	movs	r2, #17
   b7238:	f840 3b04 	str.w	r3, [r0], #4
   b723c:	2100      	movs	r1, #0
   b723e:	f001 ffbf 	bl	b91c0 <memset>
}
   b7242:	4620      	mov	r0, r4
   b7244:	bd10      	pop	{r4, pc}
   b7246:	bf00      	nop
   b7248:	000ba290 	.word	0x000ba290

000b724c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b724c:	4603      	mov	r3, r0
   b724e:	4a07      	ldr	r2, [pc, #28]	; (b726c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b7250:	b510      	push	{r4, lr}
   b7252:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b7256:	f101 0210 	add.w	r2, r1, #16
   b725a:	f851 4b04 	ldr.w	r4, [r1], #4
   b725e:	f843 4b04 	str.w	r4, [r3], #4
   b7262:	4291      	cmp	r1, r2
   b7264:	d1f9      	bne.n	b725a <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b7266:	780a      	ldrb	r2, [r1, #0]
   b7268:	701a      	strb	r2, [r3, #0]
}
   b726a:	bd10      	pop	{r4, pc}
   b726c:	000ba290 	.word	0x000ba290

000b7270 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b7270:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b7272:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b7276:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b727a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b727e:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b7282:	2304      	movs	r3, #4
   b7284:	6041      	str	r1, [r0, #4]
   b7286:	7503      	strb	r3, [r0, #20]
}
   b7288:	bd10      	pop	{r4, pc}
	...

000b728c <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b728c:	b507      	push	{r0, r1, r2, lr}
   b728e:	4b06      	ldr	r3, [pc, #24]	; (b72a8 <_ZN9IPAddressC1EPKh+0x1c>)
   b7290:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b7292:	78cb      	ldrb	r3, [r1, #3]
   b7294:	9300      	str	r3, [sp, #0]
   b7296:	788b      	ldrb	r3, [r1, #2]
   b7298:	784a      	ldrb	r2, [r1, #1]
   b729a:	7809      	ldrb	r1, [r1, #0]
   b729c:	f7ff ffe8 	bl	b7270 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b72a0:	b003      	add	sp, #12
   b72a2:	f85d fb04 	ldr.w	pc, [sp], #4
   b72a6:	bf00      	nop
   b72a8:	000ba290 	.word	0x000ba290

000b72ac <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
   b72ac:	f100 0310 	add.w	r3, r0, #16
   b72b0:	2201      	movs	r2, #1
    do {
        if (t->type == JSMN_OBJECT) {
   b72b2:	f813 1c10 	ldrb.w	r1, [r3, #-16]
   b72b6:	2901      	cmp	r1, #1
   b72b8:	4618      	mov	r0, r3
   b72ba:	d108      	bne.n	b72ce <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
   b72bc:	f853 1c04 	ldr.w	r1, [r3, #-4]
   b72c0:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
   b72c4:	3a01      	subs	r2, #1
   b72c6:	f103 0310 	add.w	r3, r3, #16
   b72ca:	d1f2      	bne.n	b72b2 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
   b72cc:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
   b72ce:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
   b72d0:	bf04      	itt	eq
   b72d2:	f853 1c04 	ldreq.w	r1, [r3, #-4]
   b72d6:	1852      	addeq	r2, r2, r1
   b72d8:	e7f4      	b.n	b72c4 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

000b72da <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
   b72da:	b40e      	push	{r1, r2, r3}
   b72dc:	b5f0      	push	{r4, r5, r6, r7, lr}
   b72de:	b088      	sub	sp, #32
   b72e0:	af00      	add	r7, sp, #0
   b72e2:	f107 0534 	add.w	r5, r7, #52	; 0x34
    char buf[16];
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b72e6:	2110      	movs	r1, #16
void spark::JSONWriter::printf(const char *fmt, ...) {
   b72e8:	f855 2b04 	ldr.w	r2, [r5], #4
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b72ec:	607a      	str	r2, [r7, #4]
void spark::JSONWriter::printf(const char *fmt, ...) {
   b72ee:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b72f0:	462b      	mov	r3, r5
   b72f2:	1878      	adds	r0, r7, r1
    va_start(args, fmt);
   b72f4:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b72f6:	f7ff fb19 	bl	b692c <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
   b72fa:	280f      	cmp	r0, #15
   b72fc:	687a      	ldr	r2, [r7, #4]
   b72fe:	d91a      	bls.n	b7336 <_ZN5spark10JSONWriter6printfEPKcz+0x5c>
        char buf[n + 1]; // Use larger buffer
   b7300:	f100 0308 	add.w	r3, r0, #8
   b7304:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
   b7308:	466e      	mov	r6, sp
        char buf[n + 1]; // Use larger buffer
   b730a:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   b730e:	1c41      	adds	r1, r0, #1
   b7310:	462b      	mov	r3, r5
   b7312:	4668      	mov	r0, sp
        va_start(args, fmt);
   b7314:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   b7316:	f7ff fb09 	bl	b692c <vsnprintf>
        if (n > 0) {
   b731a:	1e02      	subs	r2, r0, #0
   b731c:	dd04      	ble.n	b7328 <_ZN5spark10JSONWriter6printfEPKcz+0x4e>
            write(buf, n);
   b731e:	6823      	ldr	r3, [r4, #0]
   b7320:	4669      	mov	r1, sp
   b7322:	689b      	ldr	r3, [r3, #8]
   b7324:	4620      	mov	r0, r4
   b7326:	4798      	blx	r3
   b7328:	46b5      	mov	sp, r6
    } else if (n > 0) {
        write(buf, n);
    }
}
   b732a:	3720      	adds	r7, #32
   b732c:	46bd      	mov	sp, r7
   b732e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b7332:	b003      	add	sp, #12
   b7334:	4770      	bx	lr
    } else if (n > 0) {
   b7336:	2800      	cmp	r0, #0
   b7338:	d0f7      	beq.n	b732a <_ZN5spark10JSONWriter6printfEPKcz+0x50>
        write(buf, n);
   b733a:	6823      	ldr	r3, [r4, #0]
   b733c:	4602      	mov	r2, r0
   b733e:	689b      	ldr	r3, [r3, #8]
   b7340:	f107 0110 	add.w	r1, r7, #16
   b7344:	4620      	mov	r0, r4
   b7346:	4798      	blx	r3
}
   b7348:	e7ef      	b.n	b732a <_ZN5spark10JSONWriter6printfEPKcz+0x50>

000b734a <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>:
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b734a:	b538      	push	{r3, r4, r5, lr}
   b734c:	680b      	ldr	r3, [r1, #0]
   b734e:	6003      	str	r3, [r0, #0]
   b7350:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
   b7352:	6843      	ldr	r3, [r0, #4]
   b7354:	429d      	cmp	r5, r3
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b7356:	4604      	mov	r4, r0
	if (__tmp != _M_pi)
   b7358:	d008      	beq.n	b736c <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x22>
	    if (__tmp != 0)
   b735a:	b115      	cbz	r5, b7362 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x18>
    { ++_M_use_count; }
   b735c:	686b      	ldr	r3, [r5, #4]
   b735e:	3301      	adds	r3, #1
   b7360:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
   b7362:	6860      	ldr	r0, [r4, #4]
   b7364:	b108      	cbz	r0, b736a <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x20>
	      _M_pi->_M_release();
   b7366:	f7ff fb31 	bl	b69cc <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
   b736a:	6065      	str	r5, [r4, #4]
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b736c:	bd38      	pop	{r3, r4, r5, pc}

000b736e <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
   b736e:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   b7370:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
   b7372:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   b7376:	689b      	ldr	r3, [r3, #8]
   b7378:	2201      	movs	r2, #1
   b737a:	f10d 0107 	add.w	r1, sp, #7
   b737e:	4798      	blx	r3
}
   b7380:	b003      	add	sp, #12
   b7382:	f85d fb04 	ldr.w	pc, [sp], #4

000b7386 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
   b7386:	460b      	mov	r3, r1
   b7388:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
   b738a:	2200      	movs	r2, #0
   b738c:	b510      	push	{r4, lr}
      constexpr __shared_count() noexcept : _M_pi(0)
   b738e:	e9c0 2200 	strd	r2, r2, [r0]
   b7392:	4604      	mov	r4, r0
        t_ = t;
   b7394:	6083      	str	r3, [r0, #8]
    if (t) {
   b7396:	b90b      	cbnz	r3, b739c <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
}
   b7398:	4620      	mov	r0, r4
   b739a:	bd10      	pop	{r4, pc}
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count() == 0 && get() == nullptr
       */
      constexpr shared_ptr(nullptr_t) noexcept : shared_ptr() { }

      shared_ptr& operator=(const shared_ptr&) noexcept = default;
   b739c:	f7ff ffd5 	bl	b734a <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
   b73a0:	e7fa      	b.n	b7398 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

000b73a2 <_ZNK5spark9JSONValue4typeEv>:
    if (!t_) {
   b73a2:	6883      	ldr	r3, [r0, #8]
   b73a4:	b1eb      	cbz	r3, b73e2 <_ZNK5spark9JSONValue4typeEv+0x40>
    switch (t_->type) {
   b73a6:	781a      	ldrb	r2, [r3, #0]
   b73a8:	2a03      	cmp	r2, #3
   b73aa:	d81a      	bhi.n	b73e2 <_ZNK5spark9JSONValue4typeEv+0x40>
   b73ac:	e8df f002 	tbb	[pc, r2]
   b73b0:	1b021704 	.word	0x1b021704
   b73b4:	2005      	movs	r0, #5
   b73b6:	4770      	bx	lr
        const char c = d_->json[t_->start];
   b73b8:	6802      	ldr	r2, [r0, #0]
   b73ba:	685b      	ldr	r3, [r3, #4]
   b73bc:	6852      	ldr	r2, [r2, #4]
   b73be:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
   b73c0:	282d      	cmp	r0, #45	; 0x2d
   b73c2:	d012      	beq.n	b73ea <_ZNK5spark9JSONValue4typeEv+0x48>
   b73c4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   b73c8:	2b09      	cmp	r3, #9
   b73ca:	d90e      	bls.n	b73ea <_ZNK5spark9JSONValue4typeEv+0x48>
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
   b73cc:	2874      	cmp	r0, #116	; 0x74
   b73ce:	d00e      	beq.n	b73ee <_ZNK5spark9JSONValue4typeEv+0x4c>
   b73d0:	2866      	cmp	r0, #102	; 0x66
   b73d2:	d00c      	beq.n	b73ee <_ZNK5spark9JSONValue4typeEv+0x4c>
        return JSON_TYPE_INVALID;
   b73d4:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
   b73d8:	4258      	negs	r0, r3
   b73da:	4158      	adcs	r0, r3
   b73dc:	4770      	bx	lr
        return JSON_TYPE_OBJECT;
   b73de:	2006      	movs	r0, #6
   b73e0:	4770      	bx	lr
        return JSON_TYPE_INVALID;
   b73e2:	2000      	movs	r0, #0
   b73e4:	4770      	bx	lr
        return JSON_TYPE_STRING;
   b73e6:	2004      	movs	r0, #4
   b73e8:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
   b73ea:	2003      	movs	r0, #3
   b73ec:	4770      	bx	lr
            return JSON_TYPE_BOOL;
   b73ee:	2002      	movs	r0, #2
}
   b73f0:	4770      	bx	lr

000b73f2 <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
   b73f2:	b510      	push	{r4, lr}
   b73f4:	4604      	mov	r4, r0
    switch (type()) {
   b73f6:	f7ff ffd4 	bl	b73a2 <_ZNK5spark9JSONValue4typeEv>
   b73fa:	2802      	cmp	r0, #2
   b73fc:	d00e      	beq.n	b741c <_ZNK5spark9JSONValue5toIntEv+0x2a>
   b73fe:	1ec3      	subs	r3, r0, #3
   b7400:	b2db      	uxtb	r3, r3
   b7402:	2b01      	cmp	r3, #1
   b7404:	d814      	bhi.n	b7430 <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
   b7406:	6822      	ldr	r2, [r4, #0]
   b7408:	68a3      	ldr	r3, [r4, #8]
   b740a:	6850      	ldr	r0, [r2, #4]
   b740c:	685b      	ldr	r3, [r3, #4]
}
   b740e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
   b7412:	220a      	movs	r2, #10
   b7414:	2100      	movs	r1, #0
   b7416:	4418      	add	r0, r3
   b7418:	f002 b802 	b.w	b9420 <strtol>
        const char* const s = d_->json + t_->start;
   b741c:	6822      	ldr	r2, [r4, #0]
   b741e:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   b7420:	6852      	ldr	r2, [r2, #4]
   b7422:	685b      	ldr	r3, [r3, #4]
   b7424:	5cd0      	ldrb	r0, [r2, r3]
   b7426:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
   b742a:	4258      	negs	r0, r3
   b742c:	4158      	adcs	r0, r3
}
   b742e:	bd10      	pop	{r4, pc}
    switch (type()) {
   b7430:	2000      	movs	r0, #0
   b7432:	e7fc      	b.n	b742e <_ZNK5spark9JSONValue5toIntEv+0x3c>

000b7434 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
   b7434:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   b7436:	2300      	movs	r3, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   b7438:	e9c0 3300 	strd	r3, r3, [r0]
   b743c:	4604      	mov	r4, r0
        n_(0) {
   b743e:	480e      	ldr	r0, [pc, #56]	; (b7478 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
   b7440:	e9c4 0302 	strd	r0, r3, [r4, #8]
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
   b7444:	b1a9      	cbz	r1, b7472 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
   b7446:	780b      	ldrb	r3, [r1, #0]
   b7448:	2b03      	cmp	r3, #3
   b744a:	d006      	beq.n	b745a <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
   b744c:	b98b      	cbnz	r3, b7472 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
   b744e:	6813      	ldr	r3, [r2, #0]
   b7450:	6858      	ldr	r0, [r3, #4]
   b7452:	684b      	ldr	r3, [r1, #4]
   b7454:	5cc3      	ldrb	r3, [r0, r3]
   b7456:	2b6e      	cmp	r3, #110	; 0x6e
   b7458:	d007      	beq.n	b746a <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x36>
            s_ = d->json + t->start;
   b745a:	6813      	ldr	r3, [r2, #0]
   b745c:	684d      	ldr	r5, [r1, #4]
   b745e:	6858      	ldr	r0, [r3, #4]
            n_ = t->end - t->start;
   b7460:	688b      	ldr	r3, [r1, #8]
            s_ = d->json + t->start;
   b7462:	4428      	add	r0, r5
            n_ = t->end - t->start;
   b7464:	1b5b      	subs	r3, r3, r5
            s_ = d->json + t->start;
   b7466:	60a0      	str	r0, [r4, #8]
            n_ = t->end - t->start;
   b7468:	60e3      	str	r3, [r4, #12]
   b746a:	4611      	mov	r1, r2
   b746c:	4620      	mov	r0, r4
   b746e:	f7ff ff6c 	bl	b734a <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
   b7472:	4620      	mov	r0, r4
   b7474:	bd38      	pop	{r3, r4, r5, pc}
   b7476:	bf00      	nop
   b7478:	000ba2ff 	.word	0x000ba2ff

000b747c <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
   b747c:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   b747e:	2500      	movs	r5, #0
   b7480:	460b      	mov	r3, r1
      constexpr __shared_count() noexcept : _M_pi(0)
   b7482:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
   b7486:	e9c0 5502 	strd	r5, r5, [r0, #8]
   b748a:	e9c0 5504 	strd	r5, r5, [r0, #16]
   b748e:	4604      	mov	r4, r0
   b7490:	4611      	mov	r1, r2
    if (t && t->type == JSMN_OBJECT) {
   b7492:	b14b      	cbz	r3, b74a8 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
   b7494:	781a      	ldrb	r2, [r3, #0]
   b7496:	2a01      	cmp	r2, #1
   b7498:	d106      	bne.n	b74a8 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
   b749a:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
   b749e:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
   b74a0:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
   b74a2:	6143      	str	r3, [r0, #20]
   b74a4:	f7ff ff51 	bl	b734a <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
   b74a8:	4620      	mov	r0, r4
   b74aa:	bd38      	pop	{r3, r4, r5, pc}

000b74ac <_ZN5spark18JSONObjectIterator4nextEv>:
bool spark::JSONObjectIterator::next() {
   b74ac:	b510      	push	{r4, lr}
    if (!n_) {
   b74ae:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
   b74b0:	4604      	mov	r4, r0
    if (!n_) {
   b74b2:	b163      	cbz	r3, b74ce <_ZN5spark18JSONObjectIterator4nextEv+0x22>
    k_ = t_; // Name
   b74b4:	6880      	ldr	r0, [r0, #8]
   b74b6:	60e0      	str	r0, [r4, #12]
    --n_;
   b74b8:	3b01      	subs	r3, #1
    ++t_;
   b74ba:	3010      	adds	r0, #16
   b74bc:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
   b74be:	6120      	str	r0, [r4, #16]
    --n_;
   b74c0:	6163      	str	r3, [r4, #20]
    if (n_) {
   b74c2:	b113      	cbz	r3, b74ca <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
   b74c4:	f7ff fef2 	bl	b72ac <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
   b74c8:	60a0      	str	r0, [r4, #8]
    return true;
   b74ca:	2001      	movs	r0, #1
   b74cc:	e000      	b.n	b74d0 <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
   b74ce:	4618      	mov	r0, r3
}
   b74d0:	bd10      	pop	{r4, pc}

000b74d2 <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
   b74d2:	b510      	push	{r4, lr}
    write('}');
   b74d4:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
   b74d6:	4604      	mov	r4, r0
    write('}');
   b74d8:	f7ff ff49 	bl	b736e <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
   b74dc:	2301      	movs	r3, #1
   b74de:	7123      	strb	r3, [r4, #4]
}
   b74e0:	4620      	mov	r0, r4
   b74e2:	bd10      	pop	{r4, pc}

000b74e4 <_ZN5spark10JSONWriter14writeSeparatorEv>:

void spark::JSONWriter::writeSeparator() {
   b74e4:	b508      	push	{r3, lr}
    switch (state_) {
   b74e6:	7903      	ldrb	r3, [r0, #4]
   b74e8:	2b01      	cmp	r3, #1
   b74ea:	d002      	beq.n	b74f2 <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
   b74ec:	2b02      	cmp	r3, #2
   b74ee:	d004      	beq.n	b74fa <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
        write(':');
        break;
    default:
        break;
    }
}
   b74f0:	bd08      	pop	{r3, pc}
        write(',');
   b74f2:	212c      	movs	r1, #44	; 0x2c
        write(':');
   b74f4:	f7ff ff3b 	bl	b736e <_ZN5spark10JSONWriter5writeEc>
}
   b74f8:	e7fa      	b.n	b74f0 <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
   b74fa:	213a      	movs	r1, #58	; 0x3a
   b74fc:	e7fa      	b.n	b74f4 <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

000b74fe <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
   b74fe:	b510      	push	{r4, lr}
   b7500:	4604      	mov	r4, r0
    writeSeparator();
   b7502:	f7ff ffef 	bl	b74e4 <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
   b7506:	4620      	mov	r0, r4
   b7508:	217b      	movs	r1, #123	; 0x7b
   b750a:	f7ff ff30 	bl	b736e <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
   b750e:	2300      	movs	r3, #0
   b7510:	7123      	strb	r3, [r4, #4]
}
   b7512:	4620      	mov	r0, r4
   b7514:	bd10      	pop	{r4, pc}
	...

000b7518 <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
   b7518:	b513      	push	{r0, r1, r4, lr}
   b751a:	4604      	mov	r4, r0
   b751c:	9101      	str	r1, [sp, #4]
    writeSeparator();
   b751e:	f7ff ffe1 	bl	b74e4 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
   b7522:	6823      	ldr	r3, [r4, #0]
   b7524:	9a01      	ldr	r2, [sp, #4]
   b7526:	68db      	ldr	r3, [r3, #12]
   b7528:	4903      	ldr	r1, [pc, #12]	; (b7538 <_ZN5spark10JSONWriter5valueEi+0x20>)
   b752a:	4620      	mov	r0, r4
   b752c:	4798      	blx	r3
    state_ = NEXT;
   b752e:	2301      	movs	r3, #1
}
   b7530:	4620      	mov	r0, r4
    state_ = NEXT;
   b7532:	7123      	strb	r3, [r4, #4]
}
   b7534:	b002      	add	sp, #8
   b7536:	bd10      	pop	{r4, pc}
   b7538:	000b9866 	.word	0x000b9866

000b753c <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
   b753c:	b513      	push	{r0, r1, r4, lr}
   b753e:	4604      	mov	r4, r0
   b7540:	9101      	str	r1, [sp, #4]
    writeSeparator();
   b7542:	f7ff ffcf 	bl	b74e4 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
   b7546:	6823      	ldr	r3, [r4, #0]
   b7548:	9a01      	ldr	r2, [sp, #4]
   b754a:	68db      	ldr	r3, [r3, #12]
   b754c:	4903      	ldr	r1, [pc, #12]	; (b755c <_ZN5spark10JSONWriter5valueEj+0x20>)
   b754e:	4620      	mov	r0, r4
   b7550:	4798      	blx	r3
    state_ = NEXT;
   b7552:	2301      	movs	r3, #1
}
   b7554:	4620      	mov	r0, r4
    state_ = NEXT;
   b7556:	7123      	strb	r3, [r4, #4]
}
   b7558:	b002      	add	sp, #8
   b755a:	bd10      	pop	{r4, pc}
   b755c:	000ba29c 	.word	0x000ba29c

000b7560 <_ZN5spark10JSONWriter12writeEscapedEPKcj>:

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   b7560:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b7564:	460d      	mov	r5, r1
    write('"');
   b7566:	2122      	movs	r1, #34	; 0x22
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   b7568:	4690      	mov	r8, r2
   b756a:	4604      	mov	r4, r0
    write('"');
   b756c:	f7ff feff 	bl	b736e <_ZN5spark10JSONWriter5writeEc>
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
   b7570:	f8df 90a4 	ldr.w	r9, [pc, #164]	; b7618 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xb8>
    const char* const end = str + size;
   b7574:	44a8      	add	r8, r5
    const char *s = str;
   b7576:	462f      	mov	r7, r5
    while (s != end) {
   b7578:	4547      	cmp	r7, r8
   b757a:	46ba      	mov	sl, r7
   b757c:	d03d      	beq.n	b75fa <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9a>
        const char c = *s;
   b757e:	f817 6b01 	ldrb.w	r6, [r7], #1
        if (c == '"' || c == '\\' || !std::isprint((unsigned char)c)) {
   b7582:	2e22      	cmp	r6, #34	; 0x22
   b7584:	d006      	beq.n	b7594 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   b7586:	2e5c      	cmp	r6, #92	; 0x5c
   b7588:	d004      	beq.n	b7594 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   b758a:	4630      	mov	r0, r6
   b758c:	f001 fde8 	bl	b9160 <isprint>
   b7590:	2800      	cmp	r0, #0
   b7592:	d1f1      	bne.n	b7578 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
   b7594:	6823      	ldr	r3, [r4, #0]
   b7596:	ebaa 0205 	sub.w	r2, sl, r5
   b759a:	689b      	ldr	r3, [r3, #8]
   b759c:	4629      	mov	r1, r5
   b759e:	4620      	mov	r0, r4
   b75a0:	4798      	blx	r3
            write('\\');
   b75a2:	215c      	movs	r1, #92	; 0x5c
   b75a4:	4620      	mov	r0, r4
   b75a6:	f7ff fee2 	bl	b736e <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
   b75aa:	2e0d      	cmp	r6, #13
   b75ac:	d80a      	bhi.n	b75c4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
   b75ae:	2e07      	cmp	r6, #7
   b75b0:	d91c      	bls.n	b75ec <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   b75b2:	f1a6 0308 	sub.w	r3, r6, #8
   b75b6:	2b05      	cmp	r3, #5
   b75b8:	d818      	bhi.n	b75ec <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   b75ba:	e8df f003 	tbb	[pc, r3]
   b75be:	0f0d      	.short	0x0f0d
   b75c0:	15131711 	.word	0x15131711
   b75c4:	2e22      	cmp	r6, #34	; 0x22
   b75c6:	d001      	beq.n	b75cc <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6c>
   b75c8:	2e5c      	cmp	r6, #92	; 0x5c
   b75ca:	d10f      	bne.n	b75ec <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
                write(c);
   b75cc:	4631      	mov	r1, r6
                write('b');
   b75ce:	4620      	mov	r0, r4
   b75d0:	f7ff fecd 	bl	b736e <_ZN5spark10JSONWriter5writeEc>
                break;
            }
            str = s + 1;
   b75d4:	463d      	mov	r5, r7
    while (s != end) {
   b75d6:	e7cf      	b.n	b7578 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
   b75d8:	2162      	movs	r1, #98	; 0x62
   b75da:	e7f8      	b.n	b75ce <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('t');
   b75dc:	2174      	movs	r1, #116	; 0x74
   b75de:	e7f6      	b.n	b75ce <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('n');
   b75e0:	216e      	movs	r1, #110	; 0x6e
   b75e2:	e7f4      	b.n	b75ce <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('f');
   b75e4:	2166      	movs	r1, #102	; 0x66
   b75e6:	e7f2      	b.n	b75ce <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('r');
   b75e8:	2172      	movs	r1, #114	; 0x72
   b75ea:	e7f0      	b.n	b75ce <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                printf("u%04x", (unsigned)c);
   b75ec:	6823      	ldr	r3, [r4, #0]
   b75ee:	4632      	mov	r2, r6
   b75f0:	68db      	ldr	r3, [r3, #12]
   b75f2:	4649      	mov	r1, r9
   b75f4:	4620      	mov	r0, r4
   b75f6:	4798      	blx	r3
                break;
   b75f8:	e7ec      	b.n	b75d4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x74>
        }
        ++s;
    }
    if (s != str) {
   b75fa:	42bd      	cmp	r5, r7
   b75fc:	d005      	beq.n	b760a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xaa>
        write(str, s - str); // Write remaining characters
   b75fe:	6823      	ldr	r3, [r4, #0]
   b7600:	1b7a      	subs	r2, r7, r5
   b7602:	689b      	ldr	r3, [r3, #8]
   b7604:	4629      	mov	r1, r5
   b7606:	4620      	mov	r0, r4
   b7608:	4798      	blx	r3
    }
    write('"');
   b760a:	2122      	movs	r1, #34	; 0x22
   b760c:	4620      	mov	r0, r4
   b760e:	f7ff feae 	bl	b736e <_ZN5spark10JSONWriter5writeEc>
}
   b7612:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b7616:	bf00      	nop
   b7618:	000ba29f 	.word	0x000ba29f

000b761c <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
   b761c:	b513      	push	{r0, r1, r4, lr}
   b761e:	4604      	mov	r4, r0
   b7620:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   b7624:	f7ff ff5e 	bl	b74e4 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
   b7628:	4620      	mov	r0, r4
   b762a:	e9dd 2100 	ldrd	r2, r1, [sp]
   b762e:	f7ff ff97 	bl	b7560 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
   b7632:	2302      	movs	r3, #2
}
   b7634:	4620      	mov	r0, r4
    state_ = VALUE;
   b7636:	7123      	strb	r3, [r4, #4]
}
   b7638:	b002      	add	sp, #8
   b763a:	bd10      	pop	{r4, pc}

000b763c <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
   b763c:	b513      	push	{r0, r1, r4, lr}
   b763e:	4604      	mov	r4, r0
   b7640:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   b7644:	f7ff ff4e 	bl	b74e4 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
   b7648:	4620      	mov	r0, r4
   b764a:	e9dd 2100 	ldrd	r2, r1, [sp]
   b764e:	f7ff ff87 	bl	b7560 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
   b7652:	2301      	movs	r3, #1
}
   b7654:	4620      	mov	r0, r4
    state_ = NEXT;
   b7656:	7123      	strb	r3, [r4, #4]
}
   b7658:	b002      	add	sp, #8
   b765a:	bd10      	pop	{r4, pc}

000b765c <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
   b765c:	6880      	ldr	r0, [r0, #8]
   b765e:	6803      	ldr	r3, [r0, #0]
   b7660:	68db      	ldr	r3, [r3, #12]
   b7662:	4718      	bx	r3

000b7664 <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
    // This handler doesn't support direct logging
}
   b7664:	4770      	bx	lr

000b7666 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
   b7666:	4608      	mov	r0, r1
   b7668:	b111      	cbz	r1, b7670 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
   b766a:	680b      	ldr	r3, [r1, #0]
   b766c:	685b      	ldr	r3, [r3, #4]
   b766e:	4718      	bx	r3
}
   b7670:	4770      	bx	lr

000b7672 <__tcf_0>:
    }
    return nullptr; // Unknown handler type
}

spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
    static DefaultLogHandlerFactory factory;
   b7672:	4770      	bx	lr

000b7674 <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   b7674:	4770      	bx	lr

000b7676 <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
class DefaultLogHandlerFactory: public LogHandlerFactory {
   b7676:	4770      	bx	lr

000b7678 <_ZN5spark16JSONStreamWriterD1Ev>:
class JSONStreamWriter: public JSONWriter {
   b7678:	4770      	bx	lr

000b767a <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
const char* nextSubcategoryName(const char* &category, size_t &size) {
   b767a:	b538      	push	{r3, r4, r5, lr}
   b767c:	4604      	mov	r4, r0
   b767e:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
   b7680:	6800      	ldr	r0, [r0, #0]
   b7682:	212e      	movs	r1, #46	; 0x2e
   b7684:	f001 fddf 	bl	b9246 <strchrnul>
    size = s - category;
   b7688:	6823      	ldr	r3, [r4, #0]
   b768a:	1ac3      	subs	r3, r0, r3
   b768c:	602b      	str	r3, [r5, #0]
    if (size) {
   b768e:	b123      	cbz	r3, b769a <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
   b7690:	7803      	ldrb	r3, [r0, #0]
   b7692:	b103      	cbz	r3, b7696 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
   b7694:	3001      	adds	r0, #1
   b7696:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b7698:	6020      	str	r0, [r4, #0]
}
   b769a:	4618      	mov	r0, r3
   b769c:	bd38      	pop	{r3, r4, r5, pc}

000b769e <_ZN5spark16JSONStreamWriterD0Ev>:
   b769e:	b510      	push	{r4, lr}
   b76a0:	210c      	movs	r1, #12
   b76a2:	4604      	mov	r4, r0
   b76a4:	f7fc fcf9 	bl	b409a <_ZdlPvj>
   b76a8:	4620      	mov	r0, r4
   b76aa:	bd10      	pop	{r4, pc}

000b76ac <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
   b76ac:	b510      	push	{r4, lr}
   b76ae:	2104      	movs	r1, #4
   b76b0:	4604      	mov	r4, r0
   b76b2:	f7fc fcf2 	bl	b409a <_ZdlPvj>
   b76b6:	4620      	mov	r0, r4
   b76b8:	bd10      	pop	{r4, pc}

000b76ba <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   b76ba:	b510      	push	{r4, lr}
   b76bc:	2104      	movs	r1, #4
   b76be:	4604      	mov	r4, r0
   b76c0:	f7fc fceb 	bl	b409a <_ZdlPvj>
   b76c4:	4620      	mov	r0, r4
   b76c6:	bd10      	pop	{r4, pc}

000b76c8 <_ZN14RecursiveMutex4lockEv.isra.0>:
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   b76c8:	f7fe befc 	b.w	b64c4 <os_mutex_recursive_lock>

000b76cc <_ZNK5spark10JSONStringeqEPKc.isra.0>:
inline bool spark::JSONString::operator==(const char *str) const {
   b76cc:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
   b76ce:	f001 fdc4 	bl	b925a <strcmp>
}
   b76d2:	fab0 f080 	clz	r0, r0
   b76d6:	0940      	lsrs	r0, r0, #5
   b76d8:	bd08      	pop	{r3, pc}

000b76da <__tcf_1>:
   b76da:	4770      	bx	lr

000b76dc <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
   b76dc:	b510      	push	{r4, lr}
   b76de:	460c      	mov	r4, r1
#if PLATFORM_ID != PLATFORM_GCC
    if (stream == &Serial) {
   b76e0:	f001 fa32 	bl	b8b48 <_Z16_fetch_usbserialv>
   b76e4:	4284      	cmp	r4, r0
   b76e6:	d010      	beq.n	b770a <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
    if (stream == &USBSerial1) {
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
   b76e8:	f001 fb4c 	bl	b8d84 <_Z22__fetch_global_Serial1v>
   b76ec:	4284      	cmp	r4, r0
   b76ee:	d105      	bne.n	b76fc <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x20>
        Serial1.end();
   b76f0:	f001 fb48 	bl	b8d84 <_Z22__fetch_global_Serial1v>
        return;
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    OutputStreamFactory::destroyStream(stream);
}
   b76f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial1.end();
   b76f8:	f001 b9c1 	b.w	b8a7e <_ZN11USARTSerial3endEv>

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
   b76fc:	b12c      	cbz	r4, b770a <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
   b76fe:	6823      	ldr	r3, [r4, #0]
   b7700:	4620      	mov	r0, r4
   b7702:	685b      	ldr	r3, [r3, #4]
}
   b7704:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b7708:	4718      	bx	r3
   b770a:	bd10      	pop	{r4, pc}

000b770c <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b770c:	680b      	ldr	r3, [r1, #0]
   b770e:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   b7710:	684b      	ldr	r3, [r1, #4]
   b7712:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   b7714:	b113      	cbz	r3, b771c <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_+0x10>
    { ++_M_use_count; }
   b7716:	685a      	ldr	r2, [r3, #4]
   b7718:	3201      	adds	r2, #1
   b771a:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b771c:	4770      	bx	lr

000b771e <_ZN5spark10JSONWriter5valueEPKc>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   b771e:	b513      	push	{r0, r1, r4, lr}
   b7720:	4604      	mov	r4, r0
    return value(val, strlen(val));
   b7722:	4608      	mov	r0, r1
   b7724:	9101      	str	r1, [sp, #4]
   b7726:	f001 fdc8 	bl	b92ba <strlen>
   b772a:	9901      	ldr	r1, [sp, #4]
   b772c:	4602      	mov	r2, r0
   b772e:	4620      	mov	r0, r4
}
   b7730:	b002      	add	sp, #8
   b7732:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return value(val, strlen(val));
   b7736:	f7ff bf81 	b.w	b763c <_ZN5spark10JSONWriter5valueEPKcj>

000b773a <_ZN5spark16StreamLogHandler5writeEPKc>:
inline void spark::StreamLogHandler::write(const char *str) {
   b773a:	b513      	push	{r0, r1, r4, lr}
   b773c:	4604      	mov	r4, r0
    write(str, strlen(str));
   b773e:	4608      	mov	r0, r1
   b7740:	9101      	str	r1, [sp, #4]
   b7742:	f001 fdba 	bl	b92ba <strlen>
   b7746:	6823      	ldr	r3, [r4, #0]
   b7748:	9901      	ldr	r1, [sp, #4]
   b774a:	68db      	ldr	r3, [r3, #12]
   b774c:	4602      	mov	r2, r0
   b774e:	4620      	mov	r0, r4
}
   b7750:	b002      	add	sp, #8
   b7752:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    write(str, strlen(str));
   b7756:	4718      	bx	r3

000b7758 <_ZN5spark16StreamLogHandler5writeEc>:
inline void spark::StreamLogHandler::write(char c) {
   b7758:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   b775a:	6803      	ldr	r3, [r0, #0]
inline void spark::StreamLogHandler::write(char c) {
   b775c:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   b7760:	68db      	ldr	r3, [r3, #12]
   b7762:	2201      	movs	r2, #1
   b7764:	f10d 0107 	add.w	r1, sp, #7
   b7768:	4798      	blx	r3
}
   b776a:	b003      	add	sp, #12
   b776c:	f85d fb04 	ldr.w	pc, [sp], #4

000b7770 <_ZN5spark16StreamLogHandler6printfEPKcz>:
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   b7770:	b40e      	push	{r1, r2, r3}
   b7772:	b503      	push	{r0, r1, lr}
   b7774:	ab03      	add	r3, sp, #12
    stream_->vprintf(false, fmt, args);
   b7776:	2100      	movs	r1, #0
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   b7778:	f853 2b04 	ldr.w	r2, [r3], #4
    stream_->vprintf(false, fmt, args);
   b777c:	6a00      	ldr	r0, [r0, #32]
    va_start(args, fmt);
   b777e:	9301      	str	r3, [sp, #4]
    stream_->vprintf(false, fmt, args);
   b7780:	f000 ffe7 	bl	b8752 <_ZN5Print7vprintfEbPKcSt9__va_list>
}
   b7784:	b002      	add	sp, #8
   b7786:	f85d eb04 	ldr.w	lr, [sp], #4
   b778a:	b003      	add	sp, #12
   b778c:	4770      	bx	lr

000b778e <_ZN5spark6detail9LogFilter4NodeC1EOS2_>:
struct spark::detail::LogFilter::Node {
   b778e:	680a      	ldr	r2, [r1, #0]
   b7790:	6002      	str	r2, [r0, #0]
   b7792:	684a      	ldr	r2, [r1, #4]
   b7794:	6042      	str	r2, [r0, #4]
        capacity_(0) {
   b7796:	2200      	movs	r2, #0
   b7798:	e9c0 2202 	strd	r2, r2, [r0, #8]
   b779c:	b510      	push	{r4, lr}
   b779e:	6102      	str	r2, [r0, #16]
      __a = _GLIBCXX_MOVE(__b);
   b77a0:	688c      	ldr	r4, [r1, #8]
   b77a2:	6084      	str	r4, [r0, #8]
   b77a4:	68cc      	ldr	r4, [r1, #12]
   b77a6:	60c4      	str	r4, [r0, #12]
   b77a8:	690c      	ldr	r4, [r1, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   b77aa:	608a      	str	r2, [r1, #8]
   b77ac:	60ca      	str	r2, [r1, #12]
      __a = _GLIBCXX_MOVE(__b);
   b77ae:	6104      	str	r4, [r0, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   b77b0:	610a      	str	r2, [r1, #16]
   b77b2:	bd10      	pop	{r4, pc}

000b77b4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   b77b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return data_ + size_;
}

template<typename T, typename AllocatorT>
const T* spark::Vector<T, AllocatorT>::end() const {
    return data_ + size_;
   b77b8:	e9d0 8400 	ldrd	r8, r4, [r0]
   b77bc:	f04f 0a14 	mov.w	sl, #20
   b77c0:	9300      	str	r3, [sp, #0]
   b77c2:	fb0a f404 	mul.w	r4, sl, r4
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   b77c6:	4b18      	ldr	r3, [pc, #96]	; (b7828 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
   b77c8:	10a4      	asrs	r4, r4, #2
   b77ca:	4617      	mov	r7, r2
   b77cc:	435c      	muls	r4, r3
   b77ce:	4645      	mov	r5, r8
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
   b77d0:	2c00      	cmp	r4, #0
   b77d2:	dd21      	ble.n	b7818 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x64>
	{
	  _DistanceType __half = __len >> 1;
   b77d4:	1066      	asrs	r6, r4, #1
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
   b77d6:	fb0a f006 	mul.w	r0, sl, r6
   b77da:	eb05 0900 	add.w	r9, r5, r0
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
   b77de:	463a      	mov	r2, r7
   b77e0:	f8b9 b004 	ldrh.w	fp, [r9, #4]
   b77e4:	5828      	ldr	r0, [r5, r0]
   b77e6:	9101      	str	r1, [sp, #4]
   b77e8:	455f      	cmp	r7, fp
   b77ea:	bf28      	it	cs
   b77ec:	465a      	movcs	r2, fp
   b77ee:	f001 fd6c 	bl	b92ca <strncmp>
                if (cmp == 0) {
   b77f2:	2800      	cmp	r0, #0
   b77f4:	9901      	ldr	r1, [sp, #4]
   b77f6:	f04f 0301 	mov.w	r3, #1
   b77fa:	d10b      	bne.n	b7814 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x60>
                    if (node.size == value.second) { // Lengths are equal
   b77fc:	455f      	cmp	r7, fp
   b77fe:	d103      	bne.n	b7808 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x54>
                        found = true; // Allows caller code to avoid extra call to strncmp()
   b7800:	9a00      	ldr	r2, [sp, #0]
   b7802:	7013      	strb	r3, [r2, #0]
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   b7804:	4634      	mov	r4, r6
   b7806:	e7e3      	b.n	b77d0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x1c>
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
   b7808:	d9fc      	bls.n	b7804 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
   b780a:	1ba6      	subs	r6, r4, r6
	      ++__first;
   b780c:	f109 0514 	add.w	r5, r9, #20
	      __len = __len - __half - 1;
   b7810:	3e01      	subs	r6, #1
   b7812:	e7f7      	b.n	b7804 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	  if (__comp(__middle, __val))
   b7814:	dbf9      	blt.n	b780a <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
   b7816:	e7f5      	b.n	b7804 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
      return __last - __first;
   b7818:	eba5 0508 	sub.w	r5, r5, r8
}
   b781c:	4802      	ldr	r0, [pc, #8]	; (b7828 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
   b781e:	10ad      	asrs	r5, r5, #2
   b7820:	4368      	muls	r0, r5
   b7822:	b003      	add	sp, #12
   b7824:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b7828:	cccccccd 	.word	0xcccccccd

000b782c <_ZNK5spark6detail9LogFilter5levelEPKc>:
LogLevel spark::detail::LogFilter::level(const char *category) const {
   b782c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (!nodes_.isEmpty() && category) {
   b782e:	6903      	ldr	r3, [r0, #16]
    LogLevel level = level_; // Default level
   b7830:	7e05      	ldrb	r5, [r0, #24]
LogLevel spark::detail::LogFilter::level(const char *category) const {
   b7832:	9101      	str	r1, [sp, #4]
    if (!nodes_.isEmpty() && category) {
   b7834:	b303      	cbz	r3, b7878 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
   b7836:	b1f9      	cbz	r1, b7878 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
        size_t size = 0; // Name length
   b7838:	2600      	movs	r6, #0
        const Vector<Node> *pNodes = &nodes_; // Root nodes
   b783a:	f100 040c 	add.w	r4, r0, #12
        size_t size = 0; // Name length
   b783e:	9603      	str	r6, [sp, #12]
        while ((name = nextSubcategoryName(category, size))) {
   b7840:	a903      	add	r1, sp, #12
   b7842:	a801      	add	r0, sp, #4
   b7844:	f7ff ff19 	bl	b767a <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   b7848:	4601      	mov	r1, r0
   b784a:	b1a8      	cbz	r0, b7878 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
            const int index = nodeIndex(*pNodes, name, size, found);
   b784c:	f10d 030b 	add.w	r3, sp, #11
   b7850:	9a03      	ldr	r2, [sp, #12]
            bool found = false;
   b7852:	f88d 600b 	strb.w	r6, [sp, #11]
            const int index = nodeIndex(*pNodes, name, size, found);
   b7856:	4620      	mov	r0, r4
   b7858:	f7ff ffac 	bl	b77b4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
   b785c:	f89d 300b 	ldrb.w	r3, [sp, #11]
   b7860:	b153      	cbz	r3, b7878 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
    return data_[i];
   b7862:	6823      	ldr	r3, [r4, #0]
   b7864:	2414      	movs	r4, #20
   b7866:	fb04 3400 	mla	r4, r4, r0, r3
            pNodes = &node.nodes;
   b786a:	3408      	adds	r4, #8
            if (node.level >= 0) {
   b786c:	f934 3c02 	ldrsh.w	r3, [r4, #-2]
   b7870:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
   b7872:	bfa8      	it	ge
   b7874:	b2dd      	uxtbge	r5, r3
        while ((name = nextSubcategoryName(category, size))) {
   b7876:	e7e3      	b.n	b7840 <_ZNK5spark6detail9LogFilter5levelEPKc+0x14>
}
   b7878:	4628      	mov	r0, r5
   b787a:	b004      	add	sp, #16
   b787c:	bd70      	pop	{r4, r5, r6, pc}
	...

000b7880 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
   b7880:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
   b7882:	4c09      	ldr	r4, [pc, #36]	; (b78a8 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x28>)
   b7884:	7823      	ldrb	r3, [r4, #0]
   b7886:	f3bf 8f5b 	dmb	ish
   b788a:	07db      	lsls	r3, r3, #31
   b788c:	d409      	bmi.n	b78a2 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   b788e:	4620      	mov	r0, r4
   b7890:	f7fc fc12 	bl	b40b8 <__cxa_guard_acquire>
   b7894:	b128      	cbz	r0, b78a2 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   b7896:	4620      	mov	r0, r4
   b7898:	f7fc fc13 	bl	b40c2 <__cxa_guard_release>
   b789c:	4803      	ldr	r0, [pc, #12]	; (b78ac <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
   b789e:	f001 fc59 	bl	b9154 <atexit>
}
   b78a2:	4803      	ldr	r0, [pc, #12]	; (b78b0 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x30>)
   b78a4:	bd10      	pop	{r4, pc}
   b78a6:	bf00      	nop
   b78a8:	2003e6a8 	.word	0x2003e6a8
   b78ac:	000b7673 	.word	0x000b7673
   b78b0:	2003b70c 	.word	0x2003b70c

000b78b4 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
   b78b4:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
   b78b6:	4c09      	ldr	r4, [pc, #36]	; (b78dc <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x28>)
   b78b8:	7823      	ldrb	r3, [r4, #0]
   b78ba:	f3bf 8f5b 	dmb	ish
   b78be:	07db      	lsls	r3, r3, #31
   b78c0:	d409      	bmi.n	b78d6 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   b78c2:	4620      	mov	r0, r4
   b78c4:	f7fc fbf8 	bl	b40b8 <__cxa_guard_acquire>
   b78c8:	b128      	cbz	r0, b78d6 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   b78ca:	4620      	mov	r0, r4
   b78cc:	f7fc fbf9 	bl	b40c2 <__cxa_guard_release>
   b78d0:	4803      	ldr	r0, [pc, #12]	; (b78e0 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
   b78d2:	f001 fc3f 	bl	b9154 <atexit>
    return &factory;
}
   b78d6:	4803      	ldr	r0, [pc, #12]	; (b78e4 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x30>)
   b78d8:	bd10      	pop	{r4, pc}
   b78da:	bf00      	nop
   b78dc:	2003e6ac 	.word	0x2003e6ac
   b78e0:	000b76db 	.word	0x000b76db
   b78e4:	2003b710 	.word	0x2003b710

000b78e8 <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
   b78e8:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
   b78ea:	2500      	movs	r5, #0
   b78ec:	4604      	mov	r4, r0
   b78ee:	e9c0 5500 	strd	r5, r5, [r0]
   b78f2:	e9c0 5504 	strd	r5, r5, [r0, #16]
   b78f6:	6085      	str	r5, [r0, #8]
   b78f8:	6185      	str	r5, [r0, #24]
    RecursiveMutex() : handle_(nullptr)
   b78fa:	f840 5f24 	str.w	r5, [r0, #36]!
        os_mutex_recursive_create(&handle_);
   b78fe:	f7fe fdd1 	bl	b64a4 <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
   b7902:	f7ff ffbd 	bl	b7880 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
   b7906:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   b7908:	f7ff ffd4 	bl	b78b4 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
   b790c:	7325      	strb	r5, [r4, #12]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   b790e:	6220      	str	r0, [r4, #32]
}
   b7910:	4620      	mov	r0, r4
   b7912:	bd38      	pop	{r3, r4, r5, pc}

000b7914 <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
   b7914:	b510      	push	{r4, lr}
    static LogManager mgr;
   b7916:	4c0a      	ldr	r4, [pc, #40]	; (b7940 <_ZN5spark10LogManager8instanceEv+0x2c>)
   b7918:	7823      	ldrb	r3, [r4, #0]
   b791a:	f3bf 8f5b 	dmb	ish
   b791e:	07db      	lsls	r3, r3, #31
   b7920:	d40c      	bmi.n	b793c <_ZN5spark10LogManager8instanceEv+0x28>
   b7922:	4620      	mov	r0, r4
   b7924:	f7fc fbc8 	bl	b40b8 <__cxa_guard_acquire>
   b7928:	b140      	cbz	r0, b793c <_ZN5spark10LogManager8instanceEv+0x28>
   b792a:	4806      	ldr	r0, [pc, #24]	; (b7944 <_ZN5spark10LogManager8instanceEv+0x30>)
   b792c:	f7ff ffdc 	bl	b78e8 <_ZN5spark10LogManagerC1Ev>
   b7930:	4620      	mov	r0, r4
   b7932:	f7fc fbc6 	bl	b40c2 <__cxa_guard_release>
   b7936:	4804      	ldr	r0, [pc, #16]	; (b7948 <_ZN5spark10LogManager8instanceEv+0x34>)
   b7938:	f001 fc0c 	bl	b9154 <atexit>
    return &mgr;
}
   b793c:	4801      	ldr	r0, [pc, #4]	; (b7944 <_ZN5spark10LogManager8instanceEv+0x30>)
   b793e:	bd10      	pop	{r4, pc}
   b7940:	2003e6a4 	.word	0x2003e6a4
   b7944:	2003e6b4 	.word	0x2003e6b4
   b7948:	000b7e69 	.word	0x000b7e69

000b794c <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
   b794c:	4a02      	ldr	r2, [pc, #8]	; (b7958 <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
   b794e:	4903      	ldr	r1, [pc, #12]	; (b795c <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
   b7950:	4803      	ldr	r0, [pc, #12]	; (b7960 <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
   b7952:	2300      	movs	r3, #0
   b7954:	f7fe bf06 	b.w	b6764 <log_set_callbacks>
   b7958:	000b7c4d 	.word	0x000b7c4d
   b795c:	000b7bd9 	.word	0x000b7bd9
   b7960:	000b7b59 	.word	0x000b7b59

000b7964 <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
   b7964:	2300      	movs	r3, #0
   b7966:	461a      	mov	r2, r3
   b7968:	4619      	mov	r1, r3
   b796a:	4618      	mov	r0, r3
   b796c:	f7fe befa 	b.w	b6764 <log_set_callbacks>

000b7970 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   b7970:	b537      	push	{r0, r1, r2, r4, r5, lr}
        JSONObjectIterator(value.t_, value.d_) {
   b7972:	688d      	ldr	r5, [r1, #8]
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   b7974:	4604      	mov	r4, r0
      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b7976:	4668      	mov	r0, sp
   b7978:	f7ff fec8 	bl	b770c <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
        JSONObjectIterator(value.t_, value.d_) {
   b797c:	466a      	mov	r2, sp
   b797e:	4629      	mov	r1, r5
   b7980:	4620      	mov	r0, r4
   b7982:	f7ff fd7b 	bl	b747c <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   b7986:	a801      	add	r0, sp, #4
   b7988:	f7fc fc6c 	bl	b4264 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b798c:	4620      	mov	r0, r4
   b798e:	b003      	add	sp, #12
   b7990:	bd30      	pop	{r4, r5, pc}

000b7992 <_ZNK5spark18JSONObjectIterator4nameEv>:
inline spark::JSONString spark::JSONObjectIterator::name() const {
   b7992:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONString(k_, d_);
   b7994:	68cd      	ldr	r5, [r1, #12]
inline spark::JSONString spark::JSONObjectIterator::name() const {
   b7996:	4604      	mov	r4, r0
   b7998:	4668      	mov	r0, sp
   b799a:	f7ff feb7 	bl	b770c <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONString(k_, d_);
   b799e:	466a      	mov	r2, sp
   b79a0:	4629      	mov	r1, r5
   b79a2:	4620      	mov	r0, r4
   b79a4:	f7ff fd46 	bl	b7434 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   b79a8:	a801      	add	r0, sp, #4
   b79aa:	f7fc fc5b 	bl	b4264 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b79ae:	4620      	mov	r0, r4
   b79b0:	b003      	add	sp, #12
   b79b2:	bd30      	pop	{r4, r5, pc}

000b79b4 <_ZNK5spark18JSONObjectIterator5valueEv>:
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   b79b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONValue(v_, d_);
   b79b6:	690d      	ldr	r5, [r1, #16]
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   b79b8:	4604      	mov	r4, r0
   b79ba:	4668      	mov	r0, sp
   b79bc:	f7ff fea6 	bl	b770c <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONValue(v_, d_);
   b79c0:	466a      	mov	r2, sp
   b79c2:	4629      	mov	r1, r5
   b79c4:	4620      	mov	r0, r4
   b79c6:	f7ff fcde 	bl	b7386 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   b79ca:	a801      	add	r0, sp, #4
   b79cc:	f7fc fc4a 	bl	b4264 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b79d0:	4620      	mov	r0, r4
   b79d2:	b003      	add	sp, #12
   b79d4:	bd30      	pop	{r4, r5, pc}
	...

000b79d8 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
   b79d8:	b570      	push	{r4, r5, r6, lr}
   b79da:	b08a      	sub	sp, #40	; 0x28
   b79dc:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
   b79de:	4601      	mov	r1, r0
   b79e0:	a804      	add	r0, sp, #16
   b79e2:	f7ff ffc5 	bl	b7970 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
        if (it.name() == "baud" && baudRate) {
   b79e6:	4e14      	ldr	r6, [pc, #80]	; (b7a38 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x60>)
    while (it.next()) {
   b79e8:	a804      	add	r0, sp, #16
   b79ea:	f7ff fd5f 	bl	b74ac <_ZN5spark18JSONObjectIterator4nextEv>
   b79ee:	b1e8      	cbz	r0, b7a2c <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x54>
        if (it.name() == "baud" && baudRate) {
   b79f0:	a904      	add	r1, sp, #16
   b79f2:	4668      	mov	r0, sp
   b79f4:	f7ff ffcd 	bl	b7992 <_ZNK5spark18JSONObjectIterator4nameEv>
   b79f8:	9802      	ldr	r0, [sp, #8]
   b79fa:	4631      	mov	r1, r6
   b79fc:	f7ff fe66 	bl	b76cc <_ZNK5spark10JSONStringeqEPKc.isra.0>
   b7a00:	4604      	mov	r4, r0
   b7a02:	b110      	cbz	r0, b7a0a <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x32>
   b7a04:	1e2c      	subs	r4, r5, #0
   b7a06:	bf18      	it	ne
   b7a08:	2401      	movne	r4, #1
   b7a0a:	a801      	add	r0, sp, #4
   b7a0c:	f7fc fc2a 	bl	b4264 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b7a10:	2c00      	cmp	r4, #0
   b7a12:	d0e9      	beq.n	b79e8 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
            *baudRate = it.value().toInt();
   b7a14:	a904      	add	r1, sp, #16
   b7a16:	4668      	mov	r0, sp
   b7a18:	f7ff ffcc 	bl	b79b4 <_ZNK5spark18JSONObjectIterator5valueEv>
   b7a1c:	4668      	mov	r0, sp
   b7a1e:	f7ff fce8 	bl	b73f2 <_ZNK5spark9JSONValue5toIntEv>
   b7a22:	6028      	str	r0, [r5, #0]
   b7a24:	a801      	add	r0, sp, #4
   b7a26:	f7fc fc1d 	bl	b4264 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b7a2a:	e7dd      	b.n	b79e8 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
   b7a2c:	a805      	add	r0, sp, #20
   b7a2e:	f7fc fc19 	bl	b4264 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b7a32:	b00a      	add	sp, #40	; 0x28
   b7a34:	bd70      	pop	{r4, r5, r6, pc}
   b7a36:	bf00      	nop
   b7a38:	000ba2a5 	.word	0x000ba2a5

000b7a3c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   b7a3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b7a3e:	460c      	mov	r4, r1
    if (strcmp(type, "Serial") == 0) {
   b7a40:	4620      	mov	r0, r4
   b7a42:	4913      	ldr	r1, [pc, #76]	; (b7a90 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   b7a44:	4615      	mov	r5, r2
    if (strcmp(type, "Serial") == 0) {
   b7a46:	f001 fc08 	bl	b925a <strcmp>
   b7a4a:	b950      	cbnz	r0, b7a62 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x26>
        Serial.begin();
   b7a4c:	f001 f87c 	bl	b8b48 <_Z16_fetch_usbserialv>
   b7a50:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b7a54:	f001 f868 	bl	b8b28 <_ZN9USBSerial5beginEl>
}
   b7a58:	b003      	add	sp, #12
   b7a5a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        return &Serial;
   b7a5e:	f001 b873 	b.w	b8b48 <_Z16_fetch_usbserialv>
    if (strcmp(type, "Serial1") == 0) {
   b7a62:	490c      	ldr	r1, [pc, #48]	; (b7a94 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x58>)
   b7a64:	4620      	mov	r0, r4
   b7a66:	f001 fbf8 	bl	b925a <strcmp>
   b7a6a:	b978      	cbnz	r0, b7a8c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x50>
        int baud = 9600;
   b7a6c:	f44f 5316 	mov.w	r3, #9600	; 0x2580
        getParams(params, &baud);
   b7a70:	a901      	add	r1, sp, #4
   b7a72:	4628      	mov	r0, r5
        int baud = 9600;
   b7a74:	9301      	str	r3, [sp, #4]
        getParams(params, &baud);
   b7a76:	f7ff ffaf 	bl	b79d8 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
   b7a7a:	f001 f983 	bl	b8d84 <_Z22__fetch_global_Serial1v>
   b7a7e:	9901      	ldr	r1, [sp, #4]
   b7a80:	f000 fffa 	bl	b8a78 <_ZN11USARTSerial5beginEm>
        return &Serial1;
   b7a84:	f001 f97e 	bl	b8d84 <_Z22__fetch_global_Serial1v>
}
   b7a88:	b003      	add	sp, #12
   b7a8a:	bd30      	pop	{r4, r5, pc}
    return nullptr;
   b7a8c:	2000      	movs	r0, #0
   b7a8e:	e7fb      	b.n	b7a88 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
   b7a90:	000ba2aa 	.word	0x000ba2aa
   b7a94:	000ba2b1 	.word	0x000ba2b1

000b7a98 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b7a98:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b7a9a:	e9d0 5300 	ldrd	r5, r3, [r0]
   b7a9e:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   b7aa0:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b7aa2:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b7aa6:	42ae      	cmp	r6, r5
   b7aa8:	d005      	beq.n	b7ab6 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
struct spark::detail::LogFilter::Node {
   b7aaa:	f105 0008 	add.w	r0, r5, #8
   b7aae:	f7ff fff3 	bl	b7a98 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   b7ab2:	3514      	adds	r5, #20
   b7ab4:	e7f7      	b.n	b7aa6 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   b7ab6:	6820      	ldr	r0, [r4, #0]
   b7ab8:	f7fe ff10 	bl	b68dc <free>
}
   b7abc:	4620      	mov	r0, r4
   b7abe:	bd70      	pop	{r4, r5, r6, pc}

000b7ac0 <_ZN5spark6detail9LogFilterD1Ev>:
spark::detail::LogFilter::~LogFilter() {
   b7ac0:	b510      	push	{r4, lr}
   b7ac2:	4604      	mov	r4, r0
   b7ac4:	300c      	adds	r0, #12
   b7ac6:	f7ff ffe7 	bl	b7a98 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   b7aca:	4620      	mov	r0, r4
   b7acc:	f7fe ff92 	bl	b69f4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   b7ad0:	4620      	mov	r0, r4
   b7ad2:	bd10      	pop	{r4, pc}

000b7ad4 <_ZN5spark16StreamLogHandlerD1Ev>:
class StreamLogHandler: public LogHandler {
   b7ad4:	b510      	push	{r4, lr}
    virtual ~LogHandler() = default;
   b7ad6:	4b04      	ldr	r3, [pc, #16]	; (b7ae8 <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
class StreamLogHandler: public LogHandler {
   b7ad8:	4604      	mov	r4, r0
    virtual ~LogHandler() = default;
   b7ada:	f840 3b04 	str.w	r3, [r0], #4
   b7ade:	f7ff ffef 	bl	b7ac0 <_ZN5spark6detail9LogFilterD1Ev>
class StreamLogHandler: public LogHandler {
   b7ae2:	4620      	mov	r0, r4
   b7ae4:	bd10      	pop	{r4, pc}
   b7ae6:	bf00      	nop
   b7ae8:	000b9f64 	.word	0x000b9f64

000b7aec <_ZN5spark16StreamLogHandlerD0Ev>:
   b7aec:	b510      	push	{r4, lr}
   b7aee:	4604      	mov	r4, r0
   b7af0:	f7ff fff0 	bl	b7ad4 <_ZN5spark16StreamLogHandlerD1Ev>
   b7af4:	4620      	mov	r0, r4
   b7af6:	2124      	movs	r1, #36	; 0x24
   b7af8:	f7fc facf 	bl	b409a <_ZdlPvj>
   b7afc:	4620      	mov	r0, r4
   b7afe:	bd10      	pop	{r4, pc}

000b7b00 <_ZN5spark20JSONStreamLogHandlerD1Ev>:
class JSONStreamLogHandler: public StreamLogHandler {
   b7b00:	b510      	push	{r4, lr}
   b7b02:	4b03      	ldr	r3, [pc, #12]	; (b7b10 <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
   b7b04:	6003      	str	r3, [r0, #0]
   b7b06:	4604      	mov	r4, r0
   b7b08:	f7ff ffe4 	bl	b7ad4 <_ZN5spark16StreamLogHandlerD1Ev>
   b7b0c:	4620      	mov	r0, r4
   b7b0e:	bd10      	pop	{r4, pc}
   b7b10:	000ba350 	.word	0x000ba350

000b7b14 <_ZN5spark20JSONStreamLogHandlerD0Ev>:
   b7b14:	b510      	push	{r4, lr}
   b7b16:	4604      	mov	r4, r0
   b7b18:	f7ff fff2 	bl	b7b00 <_ZN5spark20JSONStreamLogHandlerD1Ev>
   b7b1c:	4620      	mov	r0, r4
   b7b1e:	2124      	movs	r1, #36	; 0x24
   b7b20:	f7fc fabb 	bl	b409a <_ZdlPvj>
   b7b24:	4620      	mov	r0, r4
   b7b26:	bd10      	pop	{r4, pc}

000b7b28 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        capacity_(0) {
   b7b28:	2200      	movs	r2, #0
   b7b2a:	e9c0 2200 	strd	r2, r2, [r0]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   b7b2e:	b510      	push	{r4, lr}
        capacity_(0) {
   b7b30:	6082      	str	r2, [r0, #8]
      __a = _GLIBCXX_MOVE(__b);
   b7b32:	680c      	ldr	r4, [r1, #0]
   b7b34:	6004      	str	r4, [r0, #0]
   b7b36:	684c      	ldr	r4, [r1, #4]
   b7b38:	6044      	str	r4, [r0, #4]
   b7b3a:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b7b3c:	600a      	str	r2, [r1, #0]
   b7b3e:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   b7b40:	6084      	str	r4, [r0, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b7b42:	608a      	str	r2, [r1, #8]
}
   b7b44:	bd10      	pop	{r4, pc}

000b7b46 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      ~lock_guard()
   b7b46:	b510      	push	{r4, lr}
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   b7b48:	6803      	ldr	r3, [r0, #0]
   b7b4a:	4604      	mov	r4, r0
   b7b4c:	6818      	ldr	r0, [r3, #0]
   b7b4e:	f7fe fcc1 	bl	b64d4 <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
   b7b52:	4620      	mov	r0, r4
   b7b54:	bd10      	pop	{r4, pc}
	...

000b7b58 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   b7b58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7b5c:	b087      	sub	sp, #28
   b7b5e:	4680      	mov	r8, r0
   b7b60:	9303      	str	r3, [sp, #12]
#endif /* nRF52840 */

#if defined(STM32F10X_MD) || defined(STM32F10X_HD) || defined(STM32F2XX) || defined(nRF52840)
static inline bool HAL_IsISR() 
{
	return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   b7b62:	4b1c      	ldr	r3, [pc, #112]	; (b7bd4 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x7c>)
   b7b64:	685b      	ldr	r3, [r3, #4]
   b7b66:	f3c3 0308 	ubfx	r3, r3, #0, #9
   b7b6a:	4689      	mov	r9, r1
   b7b6c:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   b7b6e:	b96b      	cbnz	r3, b7b8c <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x34>
        return;
    }
#endif
    LogManager *that = instance();
   b7b70:	f7ff fed0 	bl	b7914 <_ZN5spark10LogManager8instanceEv>
   b7b74:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   b7b76:	f100 0324 	add.w	r3, r0, #36	; 0x24
      { _M_device.lock(); }
   b7b7a:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b7b7c:	9305      	str	r3, [sp, #20]
      { _M_device.lock(); }
   b7b7e:	f7ff fda3 	bl	b76c8 <_ZN14RecursiveMutex4lockEv.isra.0>
        // prevent re-entry
        if (that->isActive()) {
   b7b82:	7b23      	ldrb	r3, [r4, #12]
   b7b84:	b12b      	cbz	r3, b7b92 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x3a>
    LOG_WITH_LOCK(that->mutex_) {
   b7b86:	a805      	add	r0, sp, #20
   b7b88:	f7ff ffdd 	bl	b7b46 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
   b7b8c:	b007      	add	sp, #28
   b7b8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   b7b92:	2301      	movs	r3, #1
   b7b94:	7323      	strb	r3, [r4, #12]
    return data_ + size_;
   b7b96:	e9d4 5300 	ldrd	r5, r3, [r4]
            handler->message(msg, (LogLevel)level, category, *attr);
   b7b9a:	fa5f f989 	uxtb.w	r9, r9
   b7b9e:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   b7ba2:	45aa      	cmp	sl, r5
   b7ba4:	d012      	beq.n	b7bcc <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>
   b7ba6:	f855 7b04 	ldr.w	r7, [r5], #4
    if (level >= filter_.level(category)) {
   b7baa:	4631      	mov	r1, r6
   b7bac:	1d38      	adds	r0, r7, #4
   b7bae:	f7ff fe3d 	bl	b782c <_ZNK5spark6detail9LogFilter5levelEPKc>
   b7bb2:	4581      	cmp	r9, r0
   b7bb4:	d3f5      	bcc.n	b7ba2 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
        logMessage(msg, level, category, attr);
   b7bb6:	683b      	ldr	r3, [r7, #0]
   b7bb8:	9a03      	ldr	r2, [sp, #12]
   b7bba:	9200      	str	r2, [sp, #0]
   b7bbc:	f8d3 b008 	ldr.w	fp, [r3, #8]
   b7bc0:	464a      	mov	r2, r9
   b7bc2:	4633      	mov	r3, r6
   b7bc4:	4641      	mov	r1, r8
   b7bc6:	4638      	mov	r0, r7
   b7bc8:	47d8      	blx	fp
   b7bca:	e7ea      	b.n	b7ba2 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
    outputActive_ = outputActive;
   b7bcc:	2300      	movs	r3, #0
   b7bce:	7323      	strb	r3, [r4, #12]
   b7bd0:	e7d9      	b.n	b7b86 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x2e>
   b7bd2:	bf00      	nop
   b7bd4:	e000ed00 	.word	0xe000ed00

000b7bd8 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:
void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   b7bd8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7bdc:	469b      	mov	fp, r3
   b7bde:	4b1a      	ldr	r3, [pc, #104]	; (b7c48 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x70>)
   b7be0:	685b      	ldr	r3, [r3, #4]
   b7be2:	f3c3 0308 	ubfx	r3, r3, #0, #9
   b7be6:	4680      	mov	r8, r0
   b7be8:	4689      	mov	r9, r1
   b7bea:	4616      	mov	r6, r2
    if (HAL_IsISR()) {
   b7bec:	b96b      	cbnz	r3, b7c0a <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x32>
    LogManager *that = instance();
   b7bee:	f7ff fe91 	bl	b7914 <_ZN5spark10LogManager8instanceEv>
   b7bf2:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   b7bf4:	f100 0324 	add.w	r3, r0, #36	; 0x24
   b7bf8:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b7bfa:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   b7bfc:	f7ff fd64 	bl	b76c8 <_ZN14RecursiveMutex4lockEv.isra.0>
        if (that->isActive()) {
   b7c00:	7b23      	ldrb	r3, [r4, #12]
   b7c02:	b12b      	cbz	r3, b7c10 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
    LOG_WITH_LOCK(that->mutex_) {
   b7c04:	a801      	add	r0, sp, #4
   b7c06:	f7ff ff9e 	bl	b7b46 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   b7c0a:	b003      	add	sp, #12
   b7c0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outputActive_ = outputActive;
   b7c10:	2301      	movs	r3, #1
   b7c12:	7323      	strb	r3, [r4, #12]
   b7c14:	e9d4 5300 	ldrd	r5, r3, [r4]
    if (level >= filter_.level(category)) {
   b7c18:	b2f6      	uxtb	r6, r6
   b7c1a:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   b7c1e:	4555      	cmp	r5, sl
   b7c20:	d00e      	beq.n	b7c40 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x68>
   b7c22:	f855 7b04 	ldr.w	r7, [r5], #4
   b7c26:	4659      	mov	r1, fp
   b7c28:	1d38      	adds	r0, r7, #4
   b7c2a:	f7ff fdff 	bl	b782c <_ZNK5spark6detail9LogFilter5levelEPKc>
   b7c2e:	4286      	cmp	r6, r0
   b7c30:	d3f5      	bcc.n	b7c1e <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
        write(data, size);
   b7c32:	683b      	ldr	r3, [r7, #0]
   b7c34:	464a      	mov	r2, r9
   b7c36:	68db      	ldr	r3, [r3, #12]
   b7c38:	4641      	mov	r1, r8
   b7c3a:	4638      	mov	r0, r7
   b7c3c:	4798      	blx	r3
   b7c3e:	e7ee      	b.n	b7c1e <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
    outputActive_ = outputActive;
   b7c40:	2300      	movs	r3, #0
   b7c42:	7323      	strb	r3, [r4, #12]
   b7c44:	e7de      	b.n	b7c04 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x2c>
   b7c46:	bf00      	nop
   b7c48:	e000ed00 	.word	0xe000ed00

000b7c4c <_ZN5spark10LogManager10logEnabledEiPKcPv>:
int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   b7c4c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b7c50:	4b16      	ldr	r3, [pc, #88]	; (b7cac <_ZN5spark10LogManager10logEnabledEiPKcPv+0x60>)
   b7c52:	685b      	ldr	r3, [r3, #4]
   b7c54:	f3c3 0308 	ubfx	r3, r3, #0, #9
   b7c58:	4605      	mov	r5, r0
   b7c5a:	460f      	mov	r7, r1
    if (HAL_IsISR()) {
   b7c5c:	bb1b      	cbnz	r3, b7ca6 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5a>
    LogManager *that = instance();
   b7c5e:	f7ff fe59 	bl	b7914 <_ZN5spark10LogManager8instanceEv>
    LOG_WITH_LOCK(that->mutex_) {
   b7c62:	f100 0324 	add.w	r3, r0, #36	; 0x24
    LogManager *that = instance();
   b7c66:	4604      	mov	r4, r0
   b7c68:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b7c6a:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   b7c6c:	f7ff fd2c 	bl	b76c8 <_ZN14RecursiveMutex4lockEv.isra.0>
   b7c70:	e9d4 6300 	ldrd	r6, r3, [r4]
    int minLevel = LOG_LEVEL_NONE;
   b7c74:	2446      	movs	r4, #70	; 0x46
   b7c76:	eb06 0883 	add.w	r8, r6, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   b7c7a:	45b0      	cmp	r8, r6
   b7c7c:	d109      	bne.n	b7c92 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x46>
    LOG_WITH_LOCK(that->mutex_) {
   b7c7e:	a801      	add	r0, sp, #4
   b7c80:	f7ff ff61 	bl	b7b46 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    return (level >= minLevel);
   b7c84:	42a5      	cmp	r5, r4
   b7c86:	bfb4      	ite	lt
   b7c88:	2000      	movlt	r0, #0
   b7c8a:	2001      	movge	r0, #1
}
   b7c8c:	b002      	add	sp, #8
   b7c8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return filter_.level(category);
   b7c92:	f856 0b04 	ldr.w	r0, [r6], #4
   b7c96:	4639      	mov	r1, r7
   b7c98:	3004      	adds	r0, #4
   b7c9a:	f7ff fdc7 	bl	b782c <_ZNK5spark6detail9LogFilter5levelEPKc>
            if (level < minLevel) {
   b7c9e:	4284      	cmp	r4, r0
   b7ca0:	bfa8      	it	ge
   b7ca2:	4604      	movge	r4, r0
        for (LogHandler *handler: that->activeHandlers_) {
   b7ca4:	e7e9      	b.n	b7c7a <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2e>
        return 0;
   b7ca6:	2000      	movs	r0, #0
   b7ca8:	e7f0      	b.n	b7c8c <_ZN5spark10LogManager10logEnabledEiPKcPv+0x40>
   b7caa:	bf00      	nop
   b7cac:	e000ed00 	.word	0xe000ed00

000b7cb0 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b7cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b7cb2:	e9d0 5301 	ldrd	r5, r3, [r0, #4]
   b7cb6:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b7cb8:	4604      	mov	r4, r0
   b7cba:	460e      	mov	r6, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b7cbc:	db0d      	blt.n	b7cda <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x2a>
   b7cbe:	1c6f      	adds	r7, r5, #1
        if (n > 0) {
   b7cc0:	2f00      	cmp	r7, #0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   b7cc2:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   b7cc4:	dd04      	ble.n	b7cd0 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x20>
    return ::realloc(ptr, size);
   b7cc6:	00b9      	lsls	r1, r7, #2
   b7cc8:	f7fe fe10 	bl	b68ec <realloc>
            if (!d) {
   b7ccc:	b918      	cbnz	r0, b7cd6 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x26>
}
   b7cce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ::free(ptr);
   b7cd0:	f7fe fe04 	bl	b68dc <free>
        T* d = nullptr;
   b7cd4:	2000      	movs	r0, #0
        data_ = d;
   b7cd6:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   b7cd8:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   b7cda:	6827      	ldr	r7, [r4, #0]
    move(p + 1, p, data_ + size_);
   b7cdc:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b7cde:	eb07 0185 	add.w	r1, r7, r5, lsl #2
    move(p + 1, p, data_ + size_);
   b7ce2:	0092      	lsls	r2, r2, #2
        ::memmove(dest, p, (end - p) * sizeof(T));
   b7ce4:	eba2 0285 	sub.w	r2, r2, r5, lsl #2
   b7ce8:	1d08      	adds	r0, r1, #4
   b7cea:	f001 fa4f 	bl	b918c <memmove>
    new(p) T(std::move(value));
   b7cee:	f847 6025 	str.w	r6, [r7, r5, lsl #2]
    ++size_;
   b7cf2:	6863      	ldr	r3, [r4, #4]
   b7cf4:	3301      	adds	r3, #1
   b7cf6:	6063      	str	r3, [r4, #4]
    return true;
   b7cf8:	2001      	movs	r0, #1
   b7cfa:	e7e8      	b.n	b7cce <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x1e>

000b7cfc <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
bool spark::LogManager::addHandler(LogHandler *handler) {
   b7cfc:	b537      	push	{r0, r1, r2, r4, r5, lr}
    LOG_WITH_LOCK(mutex_) {
   b7cfe:	f100 0324 	add.w	r3, r0, #36	; 0x24
bool spark::LogManager::addHandler(LogHandler *handler) {
   b7d02:	4604      	mov	r4, r0
   b7d04:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b7d06:	9301      	str	r3, [sp, #4]
   b7d08:	460d      	mov	r5, r1
      { _M_device.lock(); }
   b7d0a:	f7ff fcdd 	bl	b76c8 <_ZN14RecursiveMutex4lockEv.isra.0>
    return find(data_, data_ + size_, value);
   b7d0e:	e9d4 3200 	ldrd	r3, r2, [r4]
   b7d12:	eb03 0282 	add.w	r2, r3, r2, lsl #2
        for (; p != end; ++p) {
   b7d16:	4293      	cmp	r3, r2
   b7d18:	4619      	mov	r1, r3
   b7d1a:	d00b      	beq.n	b7d34 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x38>
            if (*p == value) {
   b7d1c:	6809      	ldr	r1, [r1, #0]
   b7d1e:	42a9      	cmp	r1, r5
   b7d20:	f103 0304 	add.w	r3, r3, #4
   b7d24:	d1f7      	bne.n	b7d16 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x1a>
            return false;
   b7d26:	a801      	add	r0, sp, #4
   b7d28:	f7ff ff0d 	bl	b7b46 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   b7d2c:	2500      	movs	r5, #0
}
   b7d2e:	4628      	mov	r0, r5
   b7d30:	b003      	add	sp, #12
   b7d32:	bd30      	pop	{r4, r5, pc}
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
   b7d34:	4629      	mov	r1, r5
   b7d36:	4620      	mov	r0, r4
   b7d38:	f7ff ffba 	bl	b7cb0 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>
   b7d3c:	4605      	mov	r5, r0
   b7d3e:	2800      	cmp	r0, #0
   b7d40:	d0f1      	beq.n	b7d26 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x2a>
        if (activeHandlers_.size() == 1) {
   b7d42:	6863      	ldr	r3, [r4, #4]
   b7d44:	2b01      	cmp	r3, #1
   b7d46:	d101      	bne.n	b7d4c <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x50>
            setSystemCallbacks();
   b7d48:	f7ff fe00 	bl	b794c <_ZN5spark10LogManager18setSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   b7d4c:	a801      	add	r0, sp, #4
   b7d4e:	f7ff fefa 	bl	b7b46 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   b7d52:	e7ec      	b.n	b7d2e <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x32>

000b7d54 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b7d54:	b570      	push	{r4, r5, r6, lr}
   b7d56:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
   b7d58:	e9d0 0200 	ldrd	r0, r2, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b7d5c:	460b      	mov	r3, r1
    T* const p = find(data_, data_ + size_, value);
   b7d5e:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        for (; p != end; ++p) {
   b7d62:	4282      	cmp	r2, r0
   b7d64:	d00f      	beq.n	b7d86 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x32>
    move(p, p + 1, data_ + size_);
   b7d66:	4601      	mov	r1, r0
            if (*p == value) {
   b7d68:	681d      	ldr	r5, [r3, #0]
   b7d6a:	f851 6b04 	ldr.w	r6, [r1], #4
   b7d6e:	42ae      	cmp	r6, r5
   b7d70:	d107      	bne.n	b7d82 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2e>
        ::memmove(dest, p, (end - p) * sizeof(T));
   b7d72:	1a52      	subs	r2, r2, r1
   b7d74:	f001 fa0a 	bl	b918c <memmove>
    --size_;
   b7d78:	6863      	ldr	r3, [r4, #4]
   b7d7a:	3b01      	subs	r3, #1
   b7d7c:	6063      	str	r3, [r4, #4]
    return true;
   b7d7e:	2001      	movs	r0, #1
}
   b7d80:	bd70      	pop	{r4, r5, r6, pc}
    move(p, p + 1, data_ + size_);
   b7d82:	4608      	mov	r0, r1
   b7d84:	e7ed      	b.n	b7d62 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xe>
        return false;
   b7d86:	2000      	movs	r0, #0
   b7d88:	e7fa      	b.n	b7d80 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2c>

000b7d8a <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
void spark::LogManager::removeHandler(LogHandler *handler) {
   b7d8a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    LOG_WITH_LOCK(mutex_) {
   b7d8c:	f100 0324 	add.w	r3, r0, #36	; 0x24
void spark::LogManager::removeHandler(LogHandler *handler) {
   b7d90:	4604      	mov	r4, r0
   b7d92:	6a40      	ldr	r0, [r0, #36]	; 0x24
   b7d94:	9101      	str	r1, [sp, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b7d96:	9303      	str	r3, [sp, #12]
      { _M_device.lock(); }
   b7d98:	f7ff fc96 	bl	b76c8 <_ZN14RecursiveMutex4lockEv.isra.0>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   b7d9c:	a901      	add	r1, sp, #4
   b7d9e:	4620      	mov	r0, r4
   b7da0:	f7ff ffd8 	bl	b7d54 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
   b7da4:	b118      	cbz	r0, b7dae <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
   b7da6:	6863      	ldr	r3, [r4, #4]
   b7da8:	b90b      	cbnz	r3, b7dae <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
            resetSystemCallbacks();
   b7daa:	f7ff fddb 	bl	b7964 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   b7dae:	a803      	add	r0, sp, #12
   b7db0:	f7ff fec9 	bl	b7b46 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   b7db4:	b004      	add	sp, #16
   b7db6:	bd10      	pop	{r4, pc}

000b7db8 <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
void spark::LogManager::destroyFactoryHandlers() {
   b7db8:	b570      	push	{r4, r5, r6, lr}
    return data_ + size_;
   b7dba:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
   b7dbe:	2318      	movs	r3, #24
   b7dc0:	4604      	mov	r4, r0
   b7dc2:	fb03 5606 	mla	r6, r3, r6, r5
    for (const FactoryHandler &h: factoryHandlers_) {
   b7dc6:	42ae      	cmp	r6, r5
   b7dc8:	d015      	beq.n	b7df6 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
   b7dca:	f105 0110 	add.w	r1, r5, #16
   b7dce:	4620      	mov	r0, r4
   b7dd0:	f7ff ffc0 	bl	b7d54 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
   b7dd4:	6863      	ldr	r3, [r4, #4]
   b7dd6:	b90b      	cbnz	r3, b7ddc <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
   b7dd8:	f7ff fdc4 	bl	b7964 <_ZN5spark10LogManager20resetSystemCallbacksEv>
        handlerFactory_->destroyHandler(h.handler);
   b7ddc:	69e0      	ldr	r0, [r4, #28]
   b7dde:	6929      	ldr	r1, [r5, #16]
   b7de0:	6803      	ldr	r3, [r0, #0]
   b7de2:	68db      	ldr	r3, [r3, #12]
   b7de4:	4798      	blx	r3
        if (h.stream) {
   b7de6:	6969      	ldr	r1, [r5, #20]
   b7de8:	b119      	cbz	r1, b7df2 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
   b7dea:	6a20      	ldr	r0, [r4, #32]
   b7dec:	6803      	ldr	r3, [r0, #0]
   b7dee:	68db      	ldr	r3, [r3, #12]
   b7df0:	4798      	blx	r3
    for (const FactoryHandler &h: factoryHandlers_) {
   b7df2:	3518      	adds	r5, #24
   b7df4:	e7e7      	b.n	b7dc6 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    destruct(data_, data_ + size_);
   b7df6:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   b7dfa:	2618      	movs	r6, #24
   b7dfc:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b7e00:	42ae      	cmp	r6, r5
   b7e02:	d004      	beq.n	b7e0e <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
struct spark::LogManager::FactoryHandler {
   b7e04:	4628      	mov	r0, r5
   b7e06:	f000 fcdb 	bl	b87c0 <_ZN6StringD1Ev>
   b7e0a:	3518      	adds	r5, #24
   b7e0c:	e7f8      	b.n	b7e00 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
    size_ = 0;
   b7e0e:	2300      	movs	r3, #0
   b7e10:	6163      	str	r3, [r4, #20]
}
   b7e12:	bd70      	pop	{r4, r5, r6, pc}

000b7e14 <_ZN5spark10LogManagerD1Ev>:
spark::LogManager::~LogManager() {
   b7e14:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b7e16:	4604      	mov	r4, r0
    resetSystemCallbacks();
   b7e18:	f7ff fda4 	bl	b7964 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   b7e1c:	f104 0324 	add.w	r3, r4, #36	; 0x24
   b7e20:	6a60      	ldr	r0, [r4, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b7e22:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   b7e24:	f7ff fc50 	bl	b76c8 <_ZN14RecursiveMutex4lockEv.isra.0>
         destroyFactoryHandlers();
   b7e28:	4620      	mov	r0, r4
   b7e2a:	f7ff ffc5 	bl	b7db8 <_ZN5spark10LogManager22destroyFactoryHandlersEv>
    LOG_WITH_LOCK(mutex_) {
   b7e2e:	a801      	add	r0, sp, #4
   b7e30:	f7ff fe89 	bl	b7b46 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (handle_) {
   b7e34:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b7e36:	b108      	cbz	r0, b7e3c <_ZN5spark10LogManagerD1Ev+0x28>
            os_mutex_recursive_destroy(handle_);
   b7e38:	f7fe fb3c 	bl	b64b4 <os_mutex_recursive_destroy>
    destruct(data_, data_ + size_);
   b7e3c:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   b7e40:	2618      	movs	r6, #24
   b7e42:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b7e46:	42ae      	cmp	r6, r5
   b7e48:	d004      	beq.n	b7e54 <_ZN5spark10LogManagerD1Ev+0x40>
struct spark::LogManager::FactoryHandler {
   b7e4a:	4628      	mov	r0, r5
   b7e4c:	f000 fcb8 	bl	b87c0 <_ZN6StringD1Ev>
   b7e50:	3518      	adds	r5, #24
   b7e52:	e7f8      	b.n	b7e46 <_ZN5spark10LogManagerD1Ev+0x32>
    ::free(ptr);
   b7e54:	6920      	ldr	r0, [r4, #16]
   b7e56:	f7fe fd41 	bl	b68dc <free>
   b7e5a:	6820      	ldr	r0, [r4, #0]
   b7e5c:	f7fe fd3e 	bl	b68dc <free>
}
   b7e60:	4620      	mov	r0, r4
   b7e62:	b002      	add	sp, #8
   b7e64:	bd70      	pop	{r4, r5, r6, pc}
	...

000b7e68 <__tcf_2>:
    static LogManager mgr;
   b7e68:	4801      	ldr	r0, [pc, #4]	; (b7e70 <__tcf_2+0x8>)
   b7e6a:	f7ff bfd3 	b.w	b7e14 <_ZN5spark10LogManagerD1Ev>
   b7e6e:	bf00      	nop
   b7e70:	2003e6b4 	.word	0x2003e6b4

000b7e74 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        if (dest > p && dest < end) {
   b7e74:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b7e76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7e78:	4604      	mov	r4, r0
   b7e7a:	460d      	mov	r5, r1
   b7e7c:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b7e7e:	d915      	bls.n	b7eac <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x38>
   b7e80:	4290      	cmp	r0, r2
   b7e82:	d214      	bcs.n	b7eae <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
            --end;
   b7e84:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   b7e88:	1a75      	subs	r5, r6, r1
   b7e8a:	f1a1 0714 	sub.w	r7, r1, #20
   b7e8e:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b7e90:	42b7      	cmp	r7, r6
   b7e92:	d01a      	beq.n	b7eca <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*end));
   b7e94:	b11c      	cbz	r4, b7e9e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x2a>
   b7e96:	4631      	mov	r1, r6
   b7e98:	4620      	mov	r0, r4
   b7e9a:	f7ff fc78 	bl	b778e <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
struct spark::detail::LogFilter::Node {
   b7e9e:	f106 0008 	add.w	r0, r6, #8
   b7ea2:	f7ff fdf9 	bl	b7a98 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
   b7ea6:	3e14      	subs	r6, #20
   b7ea8:	3c14      	subs	r4, #20
   b7eaa:	e7f1      	b.n	b7e90 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1c>
        } else if (dest != p) {
   b7eac:	d00d      	beq.n	b7eca <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
            for (; p != end; ++p, ++dest) {
   b7eae:	42b5      	cmp	r5, r6
   b7eb0:	d00b      	beq.n	b7eca <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*p));
   b7eb2:	b11c      	cbz	r4, b7ebc <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x48>
   b7eb4:	4629      	mov	r1, r5
   b7eb6:	4620      	mov	r0, r4
   b7eb8:	f7ff fc69 	bl	b778e <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
   b7ebc:	f105 0008 	add.w	r0, r5, #8
   b7ec0:	f7ff fdea 	bl	b7a98 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; p != end; ++p, ++dest) {
   b7ec4:	3514      	adds	r5, #20
   b7ec6:	3414      	adds	r4, #20
   b7ec8:	e7f1      	b.n	b7eae <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
    }
   b7eca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b7ecc <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   b7ecc:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b7ece:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7ed0:	4604      	mov	r4, r0
   b7ed2:	460d      	mov	r5, r1
   b7ed4:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b7ed6:	d914      	bls.n	b7f02 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
   b7ed8:	4290      	cmp	r0, r2
   b7eda:	d213      	bcs.n	b7f04 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            --end;
   b7edc:	f1a2 0610 	sub.w	r6, r2, #16
            dest += end - p - 1;
   b7ee0:	1a75      	subs	r5, r6, r1
   b7ee2:	f1a1 0710 	sub.w	r7, r1, #16
   b7ee6:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b7ee8:	42b7      	cmp	r7, r6
   b7eea:	d018      	beq.n	b7f1e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
   b7eec:	b11c      	cbz	r4, b7ef6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
   b7eee:	4631      	mov	r1, r6
   b7ef0:	4620      	mov	r0, r4
   b7ef2:	f000 fce2 	bl	b88ba <_ZN6StringC1EOS_>
                end->~T();
   b7ef6:	4630      	mov	r0, r6
   b7ef8:	f000 fc62 	bl	b87c0 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   b7efc:	3e10      	subs	r6, #16
   b7efe:	3c10      	subs	r4, #16
   b7f00:	e7f2      	b.n	b7ee8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   b7f02:	d00c      	beq.n	b7f1e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
   b7f04:	42b5      	cmp	r5, r6
   b7f06:	d00a      	beq.n	b7f1e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
   b7f08:	b11c      	cbz	r4, b7f12 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
   b7f0a:	4629      	mov	r1, r5
   b7f0c:	4620      	mov	r0, r4
   b7f0e:	f000 fcd4 	bl	b88ba <_ZN6StringC1EOS_>
                p->~T();
   b7f12:	4628      	mov	r0, r5
   b7f14:	f000 fc54 	bl	b87c0 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   b7f18:	3510      	adds	r5, #16
   b7f1a:	3410      	adds	r4, #16
   b7f1c:	e7f2      	b.n	b7f04 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
    }
   b7f1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b7f20 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
   b7f20:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b7f22:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b7f24:	4605      	mov	r5, r0
        if (n > 0) {
   b7f26:	dd11      	ble.n	b7f4c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2c>
    return ::malloc(size);
   b7f28:	0130      	lsls	r0, r6, #4
   b7f2a:	f7fe fccf 	bl	b68cc <malloc>
            if (!d) {
   b7f2e:	4604      	mov	r4, r0
   b7f30:	b158      	cbz	r0, b7f4a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b7f32:	e9d5 1200 	ldrd	r1, r2, [r5]
   b7f36:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   b7f3a:	f7ff ffc7 	bl	b7ecc <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   b7f3e:	6828      	ldr	r0, [r5, #0]
   b7f40:	f7fe fccc 	bl	b68dc <free>
        data_ = d;
   b7f44:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b7f46:	60ae      	str	r6, [r5, #8]
        return true;
   b7f48:	2001      	movs	r0, #1
    }
   b7f4a:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b7f4c:	2400      	movs	r4, #0
   b7f4e:	e7f6      	b.n	b7f3e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x1e>

000b7f50 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   b7f50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7f54:	4690      	mov	r8, r2
   b7f56:	b095      	sub	sp, #84	; 0x54
        capacity_(0) {
   b7f58:	2300      	movs	r3, #0
   b7f5a:	9103      	str	r1, [sp, #12]
    return size_;
   b7f5c:	f8d8 1004 	ldr.w	r1, [r8, #4]
        capacity_(0) {
   b7f60:	930a      	str	r3, [sp, #40]	; 0x28
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   b7f62:	2246      	movs	r2, #70	; 0x46
    if (n > capacity_ && !realloc(n)) {
   b7f64:	4299      	cmp	r1, r3
        capacity_(0) {
   b7f66:	e9c0 3300 	strd	r3, r3, [r0]
   b7f6a:	e9c0 3302 	strd	r3, r3, [r0, #8]
   b7f6e:	e9c0 3304 	strd	r3, r3, [r0, #16]
   b7f72:	e9cd 3308 	strd	r3, r3, [sp, #32]
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   b7f76:	4604      	mov	r4, r0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   b7f78:	7602      	strb	r2, [r0, #24]
    if (n > capacity_ && !realloc(n)) {
   b7f7a:	dc23      	bgt.n	b7fc4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_ + size_;
   b7f7c:	e9d8 5700 	ldrd	r5, r7, [r8]
   b7f80:	2314      	movs	r3, #20
   b7f82:	fb03 5707 	mla	r7, r3, r7, r5
    for (LogCategoryFilter &filter: filters) {
   b7f86:	42af      	cmp	r7, r5
   b7f88:	d03b      	beq.n	b8002 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xb2>
        cats.append(std::move(filter.cat_));
   b7f8a:	4629      	mov	r1, r5
   b7f8c:	a80b      	add	r0, sp, #44	; 0x2c
   b7f8e:	f000 fc94 	bl	b88ba <_ZN6StringC1EOS_>
    return insert(size_, std::move(value));
   b7f92:	a90b      	add	r1, sp, #44	; 0x2c
   b7f94:	a80f      	add	r0, sp, #60	; 0x3c
   b7f96:	9e09      	ldr	r6, [sp, #36]	; 0x24
   b7f98:	f000 fc8f 	bl	b88ba <_ZN6StringC1EOS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b7f9c:	e9dd 1309 	ldrd	r1, r3, [sp, #36]	; 0x24
   b7fa0:	4299      	cmp	r1, r3
   b7fa2:	da1b      	bge.n	b7fdc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x8c>
    T* const p = data_ + i;
   b7fa4:	9b08      	ldr	r3, [sp, #32]
    move(p + 1, p, data_ + size_);
   b7fa6:	9a09      	ldr	r2, [sp, #36]	; 0x24
    T* const p = data_ + i;
   b7fa8:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
   b7fac:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   b7fb0:	4631      	mov	r1, r6
   b7fb2:	f106 0010 	add.w	r0, r6, #16
   b7fb6:	f7ff ff89 	bl	b7ecc <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
   b7fba:	b9ee      	cbnz	r6, b7ff8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa8>
    ++size_;
   b7fbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b7fbe:	3301      	adds	r3, #1
   b7fc0:	9309      	str	r3, [sp, #36]	; 0x24
    return true;
   b7fc2:	e011      	b.n	b7fe8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x98>
    if (n > capacity_ && !realloc(n)) {
   b7fc4:	a808      	add	r0, sp, #32
   b7fc6:	f7ff ffab 	bl	b7f20 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   b7fca:	2800      	cmp	r0, #0
   b7fcc:	d1d6      	bne.n	b7f7c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>
        return;
   b7fce:	a808      	add	r0, sp, #32
   b7fd0:	f7fe fd10 	bl	b69f4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   b7fd4:	4620      	mov	r0, r4
   b7fd6:	b015      	add	sp, #84	; 0x54
   b7fd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b7fdc:	3101      	adds	r1, #1
   b7fde:	a808      	add	r0, sp, #32
   b7fe0:	f7ff ff9e 	bl	b7f20 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   b7fe4:	2800      	cmp	r0, #0
   b7fe6:	d1dd      	bne.n	b7fa4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x54>
    return insert(size_, std::move(value));
   b7fe8:	a80f      	add	r0, sp, #60	; 0x3c
   b7fea:	f000 fbe9 	bl	b87c0 <_ZN6StringD1Ev>
        cats.append(std::move(filter.cat_));
   b7fee:	a80b      	add	r0, sp, #44	; 0x2c
   b7ff0:	f000 fbe6 	bl	b87c0 <_ZN6StringD1Ev>
    for (LogCategoryFilter &filter: filters) {
   b7ff4:	3514      	adds	r5, #20
   b7ff6:	e7c6      	b.n	b7f86 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x36>
    new(p) T(std::move(value));
   b7ff8:	a90f      	add	r1, sp, #60	; 0x3c
   b7ffa:	4630      	mov	r0, r6
   b7ffc:	f000 fc5d 	bl	b88ba <_ZN6StringC1EOS_>
   b8000:	e7dc      	b.n	b7fbc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x6c>
        capacity_(0) {
   b8002:	2600      	movs	r6, #0
   b8004:	e9cd 660b 	strd	r6, r6, [sp, #44]	; 0x2c
   b8008:	960d      	str	r6, [sp, #52]	; 0x34
    for (int i = 0; i < cats.size(); ++i) {
   b800a:	f04f 0914 	mov.w	r9, #20
    return data_[i];
   b800e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   b8012:	429e      	cmp	r6, r3
   b8014:	da7c      	bge.n	b8110 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1c0>
    char operator [] (unsigned int index) const;
    char& operator [] (unsigned int index);
    void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
    void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
        {getBytes((unsigned char *)buf, bufsize, index);}
    const char * c_str() const { return buffer; }
   b8016:	0133      	lsls	r3, r6, #4
   b8018:	58d3      	ldr	r3, [r2, r3]
        const char *category = cats.at(i).c_str();
   b801a:	9306      	str	r3, [sp, #24]
        if (!category) {
   b801c:	b90b      	cbnz	r3, b8022 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd2>
    for (int i = 0; i < cats.size(); ++i) {
   b801e:	3601      	adds	r6, #1
   b8020:	e7f5      	b.n	b800e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xbe>
        size_t size = 0; // Name length
   b8022:	2300      	movs	r3, #0
   b8024:	9307      	str	r3, [sp, #28]
   b8026:	fb09 f306 	mul.w	r3, r9, r6
   b802a:	9302      	str	r3, [sp, #8]
        Vector<Node> *pNodes = &nodes; // Root nodes
   b802c:	ad0b      	add	r5, sp, #44	; 0x2c
        while ((name = nextSubcategoryName(category, size))) {
   b802e:	a907      	add	r1, sp, #28
   b8030:	a806      	add	r0, sp, #24
   b8032:	f7ff fb22 	bl	b767a <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   b8036:	4682      	mov	sl, r0
   b8038:	2800      	cmp	r0, #0
   b803a:	d0f0      	beq.n	b801e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xce>
            bool found = false;
   b803c:	f04f 0300 	mov.w	r3, #0
   b8040:	f88d 3017 	strb.w	r3, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
   b8044:	4601      	mov	r1, r0
   b8046:	9a07      	ldr	r2, [sp, #28]
   b8048:	f10d 0317 	add.w	r3, sp, #23
   b804c:	4628      	mov	r0, r5
   b804e:	f7ff fbb1 	bl	b77b4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   b8052:	f89d 7017 	ldrb.w	r7, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
   b8056:	9001      	str	r0, [sp, #4]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   b8058:	2f00      	cmp	r7, #0
   b805a:	d14a      	bne.n	b80f2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
   b805c:	f8bd 301c 	ldrh.w	r3, [sp, #28]
            level(-1) {
   b8060:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
        capacity_(0) {
   b8064:	e9cd 7711 	strd	r7, r7, [sp, #68]	; 0x44
   b8068:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b806c:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
   b8070:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
   b8074:	9713      	str	r7, [sp, #76]	; 0x4c
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b8076:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
   b807a:	4293      	cmp	r3, r2
   b807c:	db17      	blt.n	b80ae <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x15e>
   b807e:	f103 0a01 	add.w	sl, r3, #1
        if (n > 0) {
   b8082:	f1ba 0f00 	cmp.w	sl, #0
   b8086:	dd30      	ble.n	b80ea <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19a>
    return ::malloc(size);
   b8088:	fb09 f00a 	mul.w	r0, r9, sl
   b808c:	f7fe fc1e 	bl	b68cc <malloc>
            if (!d) {
   b8090:	4683      	mov	fp, r0
   b8092:	b360      	cbz	r0, b80ee <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19e>
            move(d, data_, data_ + size_);
   b8094:	e9d5 1200 	ldrd	r1, r2, [r5]
   b8098:	fb09 1202 	mla	r2, r9, r2, r1
   b809c:	f7ff feea 	bl	b7e74 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    ::free(ptr);
   b80a0:	6828      	ldr	r0, [r5, #0]
   b80a2:	f7fe fc1b 	bl	b68dc <free>
        data_ = d;
   b80a6:	f8c5 b000 	str.w	fp, [r5]
        capacity_ = n;
   b80aa:	f8c5 a008 	str.w	sl, [r5, #8]
    T* const p = data_ + i;
   b80ae:	682b      	ldr	r3, [r5, #0]
   b80b0:	9a01      	ldr	r2, [sp, #4]
   b80b2:	fb09 3a02 	mla	sl, r9, r2, r3
    move(p + 1, p, data_ + size_);
   b80b6:	686a      	ldr	r2, [r5, #4]
   b80b8:	4651      	mov	r1, sl
   b80ba:	fb09 3202 	mla	r2, r9, r2, r3
   b80be:	f10a 0014 	add.w	r0, sl, #20
   b80c2:	f7ff fed7 	bl	b7e74 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
   b80c6:	f1ba 0f00 	cmp.w	sl, #0
   b80ca:	d003      	beq.n	b80d4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x184>
   b80cc:	a90f      	add	r1, sp, #60	; 0x3c
   b80ce:	4650      	mov	r0, sl
   b80d0:	f7ff fb5d 	bl	b778e <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
    ++size_;
   b80d4:	686b      	ldr	r3, [r5, #4]
   b80d6:	3301      	adds	r3, #1
   b80d8:	606b      	str	r3, [r5, #4]
struct spark::detail::LogFilter::Node {
   b80da:	a811      	add	r0, sp, #68	; 0x44
   b80dc:	f7ff fcdc 	bl	b7a98 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   b80e0:	b13f      	cbz	r7, b80f2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
    Vector<Node> nodes;
   b80e2:	a80b      	add	r0, sp, #44	; 0x2c
   b80e4:	f7ff fcd8 	bl	b7a98 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   b80e8:	e771      	b.n	b7fce <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x7e>
        T* d = nullptr;
   b80ea:	46bb      	mov	fp, r7
   b80ec:	e7d8      	b.n	b80a0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x150>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   b80ee:	2701      	movs	r7, #1
   b80f0:	e7f3      	b.n	b80da <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x18a>
    return data_[i];
   b80f2:	9b01      	ldr	r3, [sp, #4]
   b80f4:	682d      	ldr	r5, [r5, #0]
   b80f6:	fb09 5503 	mla	r5, r9, r3, r5
            if (!*category) { // Check if it's last subcategory
   b80fa:	9b06      	ldr	r3, [sp, #24]
   b80fc:	781b      	ldrb	r3, [r3, #0]
   b80fe:	b92b      	cbnz	r3, b810c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>
                node.level = filters.at(i).level_;
   b8100:	f8d8 3000 	ldr.w	r3, [r8]
   b8104:	9a02      	ldr	r2, [sp, #8]
   b8106:	4413      	add	r3, r2
   b8108:	7c1b      	ldrb	r3, [r3, #16]
   b810a:	80eb      	strh	r3, [r5, #6]
            pNodes = &node.nodes;
   b810c:	3508      	adds	r5, #8
        while ((name = nextSubcategoryName(category, size))) {
   b810e:	e78e      	b.n	b802e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xde>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b8110:	6821      	ldr	r1, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   b8112:	6022      	str	r2, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b8114:	6862      	ldr	r2, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
   b8116:	6063      	str	r3, [r4, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b8118:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b811a:	9209      	str	r2, [sp, #36]	; 0x24
      __a = _GLIBCXX_MOVE(__b);
   b811c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
      __b = _GLIBCXX_MOVE(__tmp);
   b811e:	930a      	str	r3, [sp, #40]	; 0x28
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b8120:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   b8122:	60a2      	str	r2, [r4, #8]
   b8124:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
      __b = _GLIBCXX_MOVE(__tmp);
   b8126:	930b      	str	r3, [sp, #44]	; 0x2c
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b8128:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   b812a:	60e2      	str	r2, [r4, #12]
   b812c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
   b812e:	930c      	str	r3, [sp, #48]	; 0x30
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b8130:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
   b8132:	6122      	str	r2, [r4, #16]
   b8134:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
   b8136:	930d      	str	r3, [sp, #52]	; 0x34
    level_ = level;
   b8138:	9b03      	ldr	r3, [sp, #12]
   b813a:	9108      	str	r1, [sp, #32]
      __a = _GLIBCXX_MOVE(__b);
   b813c:	6162      	str	r2, [r4, #20]
   b813e:	7623      	strb	r3, [r4, #24]
   b8140:	e7cf      	b.n	b80e2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x192>
	...

000b8144 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
   b8144:	b5f0      	push	{r4, r5, r6, r7, lr}
   b8146:	4604      	mov	r4, r0
   b8148:	b087      	sub	sp, #28
   b814a:	460d      	mov	r5, r1
        filter_(level, filters) {
   b814c:	4626      	mov	r6, r4
        stream_(&stream) {
   b814e:	4619      	mov	r1, r3
   b8150:	4668      	mov	r0, sp
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
   b8152:	4617      	mov	r7, r2
        stream_(&stream) {
   b8154:	f7fc fb1c 	bl	b4790 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   b8158:	4b0b      	ldr	r3, [pc, #44]	; (b8188 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x44>)
   b815a:	f846 3b04 	str.w	r3, [r6], #4
   b815e:	4669      	mov	r1, sp
   b8160:	a803      	add	r0, sp, #12
   b8162:	f7fc fb15 	bl	b4790 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b8166:	aa03      	add	r2, sp, #12
   b8168:	4639      	mov	r1, r7
   b816a:	4630      	mov	r0, r6
   b816c:	f7ff fef0 	bl	b7f50 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b8170:	a803      	add	r0, sp, #12
   b8172:	f7fc f97d 	bl	b4470 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   b8176:	4668      	mov	r0, sp
   b8178:	f7fc f97a 	bl	b4470 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b817c:	4b03      	ldr	r3, [pc, #12]	; (b818c <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x48>)
   b817e:	6023      	str	r3, [r4, #0]
}
   b8180:	4620      	mov	r0, r4
        stream_(&stream) {
   b8182:	6225      	str	r5, [r4, #32]
}
   b8184:	b007      	add	sp, #28
   b8186:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b8188:	000b9f64 	.word	0x000b9f64
   b818c:	000ba338 	.word	0x000ba338

000b8190 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:
            Print *stream, const JSONValue &params) {
   b8190:	b5f0      	push	{r4, r5, r6, r7, lr}
   b8192:	460f      	mov	r7, r1
   b8194:	b085      	sub	sp, #20
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   b8196:	491d      	ldr	r1, [pc, #116]	; (b820c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x7c>)
            Print *stream, const JSONValue &params) {
   b8198:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   b819a:	4638      	mov	r0, r7
            Print *stream, const JSONValue &params) {
   b819c:	4616      	mov	r6, r2
   b819e:	461d      	mov	r5, r3
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   b81a0:	f001 f85b 	bl	b925a <strcmp>
   b81a4:	b9c0      	cbnz	r0, b81d8 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x48>
        if (!stream) {
   b81a6:	b1a4      	cbz	r4, b81d2 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
   b81a8:	4629      	mov	r1, r5
   b81aa:	a801      	add	r0, sp, #4
   b81ac:	f7ff fcbc 	bl	b7b28 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   b81b0:	4917      	ldr	r1, [pc, #92]	; (b8210 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
   b81b2:	2024      	movs	r0, #36	; 0x24
   b81b4:	f000 fe0a 	bl	b8dcc <_ZnwjRKSt9nothrow_t>
   b81b8:	4605      	mov	r5, r0
   b81ba:	b130      	cbz	r0, b81ca <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
    using StreamLogHandler::StreamLogHandler;
   b81bc:	ab01      	add	r3, sp, #4
   b81be:	4632      	mov	r2, r6
   b81c0:	4621      	mov	r1, r4
   b81c2:	f7ff ffbf 	bl	b8144 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b81c6:	4b13      	ldr	r3, [pc, #76]	; (b8214 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x84>)
   b81c8:	602b      	str	r3, [r5, #0]
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   b81ca:	a801      	add	r0, sp, #4
   b81cc:	f7fc f950 	bl	b4470 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b81d0:	462c      	mov	r4, r5
}
   b81d2:	4620      	mov	r0, r4
   b81d4:	b005      	add	sp, #20
   b81d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (strcmp(type, "StreamLogHandler") == 0) {
   b81d8:	490f      	ldr	r1, [pc, #60]	; (b8218 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x88>)
   b81da:	4638      	mov	r0, r7
   b81dc:	f001 f83d 	bl	b925a <strcmp>
   b81e0:	b990      	cbnz	r0, b8208 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x78>
        if (!stream) {
   b81e2:	2c00      	cmp	r4, #0
   b81e4:	d0f5      	beq.n	b81d2 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   b81e6:	4629      	mov	r1, r5
   b81e8:	a801      	add	r0, sp, #4
   b81ea:	f7ff fc9d 	bl	b7b28 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   b81ee:	4908      	ldr	r1, [pc, #32]	; (b8210 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
   b81f0:	2024      	movs	r0, #36	; 0x24
   b81f2:	f000 fdeb 	bl	b8dcc <_ZnwjRKSt9nothrow_t>
   b81f6:	4605      	mov	r5, r0
   b81f8:	2800      	cmp	r0, #0
   b81fa:	d0e6      	beq.n	b81ca <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
   b81fc:	ab01      	add	r3, sp, #4
   b81fe:	4632      	mov	r2, r6
   b8200:	4621      	mov	r1, r4
   b8202:	f7ff ff9f 	bl	b8144 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b8206:	e7e0      	b.n	b81ca <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
            return nullptr; // Output stream is not specified
   b8208:	2400      	movs	r4, #0
   b820a:	e7e2      	b.n	b81d2 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
   b820c:	000ba2b9 	.word	0x000ba2b9
   b8210:	000ba448 	.word	0x000ba448
   b8214:	000ba350 	.word	0x000ba350
   b8218:	000ba2bd 	.word	0x000ba2bd

000b821c <_GLOBAL__sub_I__ZN5spark3LogE>:
        name_(name) {
   b821c:	4b01      	ldr	r3, [pc, #4]	; (b8224 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b821e:	4a02      	ldr	r2, [pc, #8]	; (b8228 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b8220:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b8222:	4770      	bx	lr
   b8224:	2003e6b0 	.word	0x2003e6b0
   b8228:	000ba2ce 	.word	0x000ba2ce

000b822c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   b822c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b8230:	9d08      	ldr	r5, [sp, #32]
    if (stream_ == &Serial && Network.listening()) {
   b8232:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   b8236:	4604      	mov	r4, r0
   b8238:	460e      	mov	r6, r1
   b823a:	4617      	mov	r7, r2
   b823c:	4698      	mov	r8, r3
    if (stream_ == &Serial && Network.listening()) {
   b823e:	f000 fc83 	bl	b8b48 <_Z16_fetch_usbserialv>
   b8242:	4581      	cmp	r9, r0
   b8244:	d04c      	beq.n	b82e0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb4>
    if (attr.has_time) {
   b8246:	792b      	ldrb	r3, [r5, #4]
   b8248:	0719      	lsls	r1, r3, #28
   b824a:	d504      	bpl.n	b8256 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x2a>
        printf("%010u ", (unsigned)attr.time);
   b824c:	696a      	ldr	r2, [r5, #20]
   b824e:	4954      	ldr	r1, [pc, #336]	; (b83a0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x174>)
   b8250:	4620      	mov	r0, r4
   b8252:	f7ff fa8d 	bl	b7770 <_ZN5spark16StreamLogHandler6printfEPKcz>
    if (category) {
   b8256:	f1b8 0f00 	cmp.w	r8, #0
   b825a:	d00d      	beq.n	b8278 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x4c>
        write('[');
   b825c:	215b      	movs	r1, #91	; 0x5b
   b825e:	4620      	mov	r0, r4
   b8260:	f7ff fa7a 	bl	b7758 <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
   b8264:	4641      	mov	r1, r8
   b8266:	4620      	mov	r0, r4
   b8268:	f7ff fa67 	bl	b773a <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
   b826c:	6823      	ldr	r3, [r4, #0]
   b826e:	494d      	ldr	r1, [pc, #308]	; (b83a4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
   b8270:	68db      	ldr	r3, [r3, #12]
   b8272:	2202      	movs	r2, #2
   b8274:	4620      	mov	r0, r4
   b8276:	4798      	blx	r3
    if (attr.has_file) {
   b8278:	792b      	ldrb	r3, [r5, #4]
   b827a:	07da      	lsls	r2, r3, #31
   b827c:	d523      	bpl.n	b82c6 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9a>
        s = extractFileName(attr.file); // Strip directory path
   b827e:	f8d5 8008 	ldr.w	r8, [r5, #8]
    const char *s1 = strrchr(s, '/');
   b8282:	212f      	movs	r1, #47	; 0x2f
   b8284:	4640      	mov	r0, r8
   b8286:	f001 f834 	bl	b92f2 <strrchr>
    if (s1) {
   b828a:	b108      	cbz	r0, b8290 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x64>
        return s1 + 1;
   b828c:	f100 0801 	add.w	r8, r0, #1
        write(s); // File name
   b8290:	4641      	mov	r1, r8
   b8292:	4620      	mov	r0, r4
   b8294:	f7ff fa51 	bl	b773a <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
   b8298:	792b      	ldrb	r3, [r5, #4]
   b829a:	079b      	lsls	r3, r3, #30
   b829c:	d508      	bpl.n	b82b0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x84>
            write(':');
   b829e:	213a      	movs	r1, #58	; 0x3a
   b82a0:	4620      	mov	r0, r4
   b82a2:	f7ff fa59 	bl	b7758 <_ZN5spark16StreamLogHandler5writeEc>
            printf("%d", (int)attr.line); // Line number
   b82a6:	68ea      	ldr	r2, [r5, #12]
   b82a8:	493f      	ldr	r1, [pc, #252]	; (b83a8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17c>)
   b82aa:	4620      	mov	r0, r4
   b82ac:	f7ff fa60 	bl	b7770 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_function) {
   b82b0:	792a      	ldrb	r2, [r5, #4]
            write(", ", 2);
   b82b2:	6823      	ldr	r3, [r4, #0]
        if (attr.has_function) {
   b82b4:	f012 0f04 	tst.w	r2, #4
            write(", ", 2);
   b82b8:	68db      	ldr	r3, [r3, #12]
   b82ba:	bf14      	ite	ne
   b82bc:	493b      	ldrne	r1, [pc, #236]	; (b83ac <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
            write(": ", 2);
   b82be:	493c      	ldreq	r1, [pc, #240]	; (b83b0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
            write(", ", 2);
   b82c0:	2202      	movs	r2, #2
            write(": ", 2);
   b82c2:	4620      	mov	r0, r4
   b82c4:	4798      	blx	r3
    if (attr.has_function) {
   b82c6:	792b      	ldrb	r3, [r5, #4]
   b82c8:	0758      	lsls	r0, r3, #29
   b82ca:	d51d      	bpl.n	b8308 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xdc>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   b82cc:	6929      	ldr	r1, [r5, #16]
const char* extractFuncName(const char *s, size_t *size) {
   b82ce:	460b      	mov	r3, r1
   b82d0:	461a      	mov	r2, r3
    for (; *s; ++s) {
   b82d2:	f813 0b01 	ldrb.w	r0, [r3], #1
   b82d6:	b160      	cbz	r0, b82f2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc6>
        if (*s == ' ') {
   b82d8:	2820      	cmp	r0, #32
   b82da:	d108      	bne.n	b82ee <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc2>
            s1 = s + 1; // Skip return type
   b82dc:	4619      	mov	r1, r3
   b82de:	e7f7      	b.n	b82d0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
    if (stream_ == &Serial && Network.listening()) {
   b82e0:	4834      	ldr	r0, [pc, #208]	; (b83b4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
   b82e2:	f000 f966 	bl	b85b2 <_ZN5spark12NetworkClass9listeningEv>
   b82e6:	2800      	cmp	r0, #0
   b82e8:	d0ad      	beq.n	b8246 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a>
}
   b82ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        } else if (*s == '(') {
   b82ee:	2828      	cmp	r0, #40	; 0x28
   b82f0:	d1ee      	bne.n	b82d0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
        write(s, n);
   b82f2:	6823      	ldr	r3, [r4, #0]
   b82f4:	1a52      	subs	r2, r2, r1
   b82f6:	68db      	ldr	r3, [r3, #12]
   b82f8:	4620      	mov	r0, r4
   b82fa:	4798      	blx	r3
        write("(): ", 4);
   b82fc:	6823      	ldr	r3, [r4, #0]
   b82fe:	492e      	ldr	r1, [pc, #184]	; (b83b8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
   b8300:	68db      	ldr	r3, [r3, #12]
   b8302:	2204      	movs	r2, #4
   b8304:	4620      	mov	r0, r4
   b8306:	4798      	blx	r3
    return log_level_name(level, nullptr);
   b8308:	2100      	movs	r1, #0
   b830a:	4638      	mov	r0, r7
   b830c:	f7fe fa22 	bl	b6754 <log_level_name>
   b8310:	4601      	mov	r1, r0
    write(s);
   b8312:	4620      	mov	r0, r4
   b8314:	f7ff fa11 	bl	b773a <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
   b8318:	6823      	ldr	r3, [r4, #0]
   b831a:	4925      	ldr	r1, [pc, #148]	; (b83b0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
   b831c:	68db      	ldr	r3, [r3, #12]
   b831e:	2202      	movs	r2, #2
   b8320:	4620      	mov	r0, r4
   b8322:	4798      	blx	r3
    if (msg) {
   b8324:	b11e      	cbz	r6, b832e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x102>
        write(msg);
   b8326:	4631      	mov	r1, r6
   b8328:	4620      	mov	r0, r4
   b832a:	f7ff fa06 	bl	b773a <_ZN5spark16StreamLogHandler5writeEPKc>
    if (attr.has_code || attr.has_details) {
   b832e:	792b      	ldrb	r3, [r5, #4]
   b8330:	f013 0f30 	tst.w	r3, #48	; 0x30
   b8334:	d02c      	beq.n	b8390 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>
        write(" [", 2);
   b8336:	6823      	ldr	r3, [r4, #0]
   b8338:	4920      	ldr	r1, [pc, #128]	; (b83bc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
   b833a:	68db      	ldr	r3, [r3, #12]
   b833c:	2202      	movs	r2, #2
   b833e:	4620      	mov	r0, r4
   b8340:	4798      	blx	r3
        if (attr.has_code) {
   b8342:	792b      	ldrb	r3, [r5, #4]
   b8344:	06d9      	lsls	r1, r3, #27
   b8346:	d50a      	bpl.n	b835e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x132>
            write("code = ", 7);
   b8348:	6823      	ldr	r3, [r4, #0]
   b834a:	491d      	ldr	r1, [pc, #116]	; (b83c0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
   b834c:	68db      	ldr	r3, [r3, #12]
   b834e:	2207      	movs	r2, #7
   b8350:	4620      	mov	r0, r4
   b8352:	4798      	blx	r3
            printf("%" PRIiPTR, (intptr_t)attr.code);
   b8354:	69aa      	ldr	r2, [r5, #24]
   b8356:	491b      	ldr	r1, [pc, #108]	; (b83c4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
   b8358:	4620      	mov	r0, r4
   b835a:	f7ff fa09 	bl	b7770 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_details) {
   b835e:	792b      	ldrb	r3, [r5, #4]
   b8360:	069a      	lsls	r2, r3, #26
   b8362:	d511      	bpl.n	b8388 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>
            if (attr.has_code) {
   b8364:	06db      	lsls	r3, r3, #27
   b8366:	d505      	bpl.n	b8374 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>
                write(", ", 2);
   b8368:	6823      	ldr	r3, [r4, #0]
   b836a:	4910      	ldr	r1, [pc, #64]	; (b83ac <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
   b836c:	68db      	ldr	r3, [r3, #12]
   b836e:	2202      	movs	r2, #2
   b8370:	4620      	mov	r0, r4
   b8372:	4798      	blx	r3
            write("details = ", 10);
   b8374:	6823      	ldr	r3, [r4, #0]
   b8376:	4914      	ldr	r1, [pc, #80]	; (b83c8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
   b8378:	68db      	ldr	r3, [r3, #12]
   b837a:	4620      	mov	r0, r4
   b837c:	220a      	movs	r2, #10
   b837e:	4798      	blx	r3
            write(attr.details);
   b8380:	69e9      	ldr	r1, [r5, #28]
   b8382:	4620      	mov	r0, r4
   b8384:	f7ff f9d9 	bl	b773a <_ZN5spark16StreamLogHandler5writeEPKc>
        write(']');
   b8388:	215d      	movs	r1, #93	; 0x5d
   b838a:	4620      	mov	r0, r4
   b838c:	f7ff f9e4 	bl	b7758 <_ZN5spark16StreamLogHandler5writeEc>
    write("\r\n", 2);
   b8390:	6823      	ldr	r3, [r4, #0]
   b8392:	490e      	ldr	r1, [pc, #56]	; (b83cc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
   b8394:	68db      	ldr	r3, [r3, #12]
   b8396:	4620      	mov	r0, r4
   b8398:	2202      	movs	r2, #2
}
   b839a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    write("\r\n", 2);
   b839e:	4718      	bx	r3
   b83a0:	000ba2d2 	.word	0x000ba2d2
   b83a4:	000ba2d9 	.word	0x000ba2d9
   b83a8:	000b9866 	.word	0x000b9866
   b83ac:	000ba2dc 	.word	0x000ba2dc
   b83b0:	000ba2e1 	.word	0x000ba2e1
   b83b4:	2003e6dc 	.word	0x2003e6dc
   b83b8:	000ba2df 	.word	0x000ba2df
   b83bc:	000ba2e4 	.word	0x000ba2e4
   b83c0:	000ba2e7 	.word	0x000ba2e7
   b83c4:	000ba2ef 	.word	0x000ba2ef
   b83c8:	000ba2f2 	.word	0x000ba2f2
   b83cc:	000ba2fd 	.word	0x000ba2fd

000b83d0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   b83d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b83d4:	b085      	sub	sp, #20
    return stream_;
   b83d6:	f8d0 9020 	ldr.w	r9, [r0, #32]
   b83da:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   b83dc:	4605      	mov	r5, r0
   b83de:	460f      	mov	r7, r1
   b83e0:	4690      	mov	r8, r2
   b83e2:	461e      	mov	r6, r3
    if (this->stream() == &Serial && Network.listening()) {
   b83e4:	f000 fbb0 	bl	b8b48 <_Z16_fetch_usbserialv>
   b83e8:	4581      	cmp	r9, r0
   b83ea:	d105      	bne.n	b83f8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
   b83ec:	4849      	ldr	r0, [pc, #292]	; (b8514 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x144>)
   b83ee:	f000 f8e0 	bl	b85b2 <_ZN5spark12NetworkClass9listeningEv>
   b83f2:	2800      	cmp	r0, #0
   b83f4:	f040 808a 	bne.w	b850c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
   b83f8:	6a2b      	ldr	r3, [r5, #32]
        strm_(stream) {
   b83fa:	4a47      	ldr	r2, [pc, #284]	; (b8518 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
   b83fc:	9201      	str	r2, [sp, #4]
        state_(BEGIN) {
   b83fe:	f04f 0900 	mov.w	r9, #0
    json.beginObject();
   b8402:	a801      	add	r0, sp, #4
        strm_(stream) {
   b8404:	9303      	str	r3, [sp, #12]
        state_(BEGIN) {
   b8406:	f88d 9008 	strb.w	r9, [sp, #8]
   b840a:	f7ff f878 	bl	b74fe <_ZN5spark10JSONWriter11beginObjectEv>
    return log_level_name(level, nullptr);
   b840e:	4649      	mov	r1, r9
   b8410:	4640      	mov	r0, r8
   b8412:	f7fe f99f 	bl	b6754 <log_level_name>
    json.name("l", 1).value(s);
   b8416:	4941      	ldr	r1, [pc, #260]	; (b851c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
   b8418:	4680      	mov	r8, r0
   b841a:	2201      	movs	r2, #1
   b841c:	a801      	add	r0, sp, #4
   b841e:	f7ff f8fd 	bl	b761c <_ZN5spark10JSONWriter4nameEPKcj>
   b8422:	4641      	mov	r1, r8
   b8424:	f7ff f97b 	bl	b771e <_ZN5spark10JSONWriter5valueEPKc>
    if (msg) {
   b8428:	b13f      	cbz	r7, b843a <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
   b842a:	493d      	ldr	r1, [pc, #244]	; (b8520 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
   b842c:	2201      	movs	r2, #1
   b842e:	a801      	add	r0, sp, #4
   b8430:	f7ff f8f4 	bl	b761c <_ZN5spark10JSONWriter4nameEPKcj>
   b8434:	4639      	mov	r1, r7
   b8436:	f7ff f972 	bl	b771e <_ZN5spark10JSONWriter5valueEPKc>
    if (category) {
   b843a:	b13e      	cbz	r6, b844c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
   b843c:	4939      	ldr	r1, [pc, #228]	; (b8524 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
   b843e:	2201      	movs	r2, #1
   b8440:	a801      	add	r0, sp, #4
   b8442:	f7ff f8eb 	bl	b761c <_ZN5spark10JSONWriter4nameEPKcj>
   b8446:	4631      	mov	r1, r6
   b8448:	f7ff f969 	bl	b771e <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_file) {
   b844c:	7923      	ldrb	r3, [r4, #4]
   b844e:	07df      	lsls	r7, r3, #31
   b8450:	d50e      	bpl.n	b8470 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
   b8452:	68a6      	ldr	r6, [r4, #8]
    const char *s1 = strrchr(s, '/');
   b8454:	212f      	movs	r1, #47	; 0x2f
   b8456:	4630      	mov	r0, r6
   b8458:	f000 ff4b 	bl	b92f2 <strrchr>
    if (s1) {
   b845c:	b100      	cbz	r0, b8460 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
   b845e:	1c46      	adds	r6, r0, #1
        json.name("f", 1).value(s);
   b8460:	4931      	ldr	r1, [pc, #196]	; (b8528 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
   b8462:	2201      	movs	r2, #1
   b8464:	a801      	add	r0, sp, #4
   b8466:	f7ff f8d9 	bl	b761c <_ZN5spark10JSONWriter4nameEPKcj>
   b846a:	4631      	mov	r1, r6
   b846c:	f7ff f957 	bl	b771e <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_line) {
   b8470:	7923      	ldrb	r3, [r4, #4]
   b8472:	079e      	lsls	r6, r3, #30
   b8474:	d507      	bpl.n	b8486 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
   b8476:	492d      	ldr	r1, [pc, #180]	; (b852c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
   b8478:	2202      	movs	r2, #2
   b847a:	a801      	add	r0, sp, #4
   b847c:	f7ff f8ce 	bl	b761c <_ZN5spark10JSONWriter4nameEPKcj>
   b8480:	68e1      	ldr	r1, [r4, #12]
   b8482:	f7ff f849 	bl	b7518 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_function) {
   b8486:	7923      	ldrb	r3, [r4, #4]
   b8488:	0758      	lsls	r0, r3, #29
   b848a:	d514      	bpl.n	b84b6 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe6>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   b848c:	6926      	ldr	r6, [r4, #16]
const char* extractFuncName(const char *s, size_t *size) {
   b848e:	4633      	mov	r3, r6
   b8490:	461f      	mov	r7, r3
    for (; *s; ++s) {
   b8492:	f813 2b01 	ldrb.w	r2, [r3], #1
   b8496:	b12a      	cbz	r2, b84a4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        if (*s == ' ') {
   b8498:	2a20      	cmp	r2, #32
   b849a:	d101      	bne.n	b84a0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
   b849c:	461e      	mov	r6, r3
   b849e:	e7f7      	b.n	b8490 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        } else if (*s == '(') {
   b84a0:	2a28      	cmp	r2, #40	; 0x28
   b84a2:	d1f5      	bne.n	b8490 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        json.name("fn", 2).value(s, n);
   b84a4:	4922      	ldr	r1, [pc, #136]	; (b8530 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
   b84a6:	2202      	movs	r2, #2
   b84a8:	a801      	add	r0, sp, #4
   b84aa:	f7ff f8b7 	bl	b761c <_ZN5spark10JSONWriter4nameEPKcj>
   b84ae:	1bba      	subs	r2, r7, r6
   b84b0:	4631      	mov	r1, r6
   b84b2:	f7ff f8c3 	bl	b763c <_ZN5spark10JSONWriter5valueEPKcj>
    if (attr.has_time) {
   b84b6:	7923      	ldrb	r3, [r4, #4]
   b84b8:	0719      	lsls	r1, r3, #28
   b84ba:	d507      	bpl.n	b84cc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xfc>
        json.name("t", 1).value((unsigned)attr.time);
   b84bc:	491d      	ldr	r1, [pc, #116]	; (b8534 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
   b84be:	2201      	movs	r2, #1
   b84c0:	a801      	add	r0, sp, #4
   b84c2:	f7ff f8ab 	bl	b761c <_ZN5spark10JSONWriter4nameEPKcj>
   b84c6:	6961      	ldr	r1, [r4, #20]
   b84c8:	f7ff f838 	bl	b753c <_ZN5spark10JSONWriter5valueEj>
    if (attr.has_code) {
   b84cc:	7923      	ldrb	r3, [r4, #4]
   b84ce:	06da      	lsls	r2, r3, #27
   b84d0:	d508      	bpl.n	b84e4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x114>
        json.name("code", 4).value((int)attr.code);
   b84d2:	2204      	movs	r2, #4
   b84d4:	4918      	ldr	r1, [pc, #96]	; (b8538 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
   b84d6:	eb0d 0002 	add.w	r0, sp, r2
   b84da:	f7ff f89f 	bl	b761c <_ZN5spark10JSONWriter4nameEPKcj>
   b84de:	69a1      	ldr	r1, [r4, #24]
   b84e0:	f7ff f81a 	bl	b7518 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_details) {
   b84e4:	7923      	ldrb	r3, [r4, #4]
   b84e6:	069b      	lsls	r3, r3, #26
   b84e8:	d507      	bpl.n	b84fa <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12a>
        json.name("detail", 6).value(attr.details);
   b84ea:	4914      	ldr	r1, [pc, #80]	; (b853c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
   b84ec:	2206      	movs	r2, #6
   b84ee:	a801      	add	r0, sp, #4
   b84f0:	f7ff f894 	bl	b761c <_ZN5spark10JSONWriter4nameEPKcj>
   b84f4:	69e1      	ldr	r1, [r4, #28]
   b84f6:	f7ff f912 	bl	b771e <_ZN5spark10JSONWriter5valueEPKc>
    json.endObject();
   b84fa:	a801      	add	r0, sp, #4
   b84fc:	f7fe ffe9 	bl	b74d2 <_ZN5spark10JSONWriter9endObjectEv>
    return stream_;
   b8500:	6a28      	ldr	r0, [r5, #32]
    this->stream()->write((const uint8_t*)"\r\n", 2);
   b8502:	490f      	ldr	r1, [pc, #60]	; (b8540 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
   b8504:	6803      	ldr	r3, [r0, #0]
   b8506:	2202      	movs	r2, #2
   b8508:	68db      	ldr	r3, [r3, #12]
   b850a:	4798      	blx	r3
}
   b850c:	b005      	add	sp, #20
   b850e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b8512:	bf00      	nop
   b8514:	2003e6dc 	.word	0x2003e6dc
   b8518:	000ba320 	.word	0x000ba320
   b851c:	000ba2af 	.word	0x000ba2af
   b8520:	000ba300 	.word	0x000ba300
   b8524:	000ba4b7 	.word	0x000ba4b7
   b8528:	000ba302 	.word	0x000ba302
   b852c:	000ba304 	.word	0x000ba304
   b8530:	000ba307 	.word	0x000ba307
   b8534:	000b98ed 	.word	0x000b98ed
   b8538:	000ba30a 	.word	0x000ba30a
   b853c:	000ba30f 	.word	0x000ba30f
   b8540:	000ba2fd 	.word	0x000ba2fd

000b8544 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b8544:	2300      	movs	r3, #0
   b8546:	6840      	ldr	r0, [r0, #4]
   b8548:	461a      	mov	r2, r3
   b854a:	f7fe b95f 	b.w	b680c <network_connect>

000b854e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b854e:	6840      	ldr	r0, [r0, #4]
   b8550:	2200      	movs	r2, #0
   b8552:	2102      	movs	r1, #2
   b8554:	f7fe b96a 	b.w	b682c <network_disconnect>

000b8558 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b8558:	2200      	movs	r2, #0
   b855a:	6840      	ldr	r0, [r0, #4]
   b855c:	4611      	mov	r1, r2
   b855e:	f7fe b95d 	b.w	b681c <network_connecting>

000b8562 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b8562:	2200      	movs	r2, #0
   b8564:	6840      	ldr	r0, [r0, #4]
   b8566:	4611      	mov	r1, r2
   b8568:	f7fe b968 	b.w	b683c <network_ready>

000b856c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b856c:	2300      	movs	r3, #0
   b856e:	6840      	ldr	r0, [r0, #4]
   b8570:	461a      	mov	r2, r3
   b8572:	4619      	mov	r1, r3
   b8574:	f7fe b96a 	b.w	b684c <network_on>

000b8578 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b8578:	2300      	movs	r3, #0
   b857a:	6840      	ldr	r0, [r0, #4]
   b857c:	461a      	mov	r2, r3
   b857e:	4619      	mov	r1, r3
   b8580:	f7fe b96c 	b.w	b685c <network_off>

000b8584 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b8584:	6840      	ldr	r0, [r0, #4]
   b8586:	2100      	movs	r1, #0
   b8588:	f7fe b990 	b.w	b68ac <network_is_on>

000b858c <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b858c:	6840      	ldr	r0, [r0, #4]
   b858e:	2100      	movs	r1, #0
   b8590:	f7fe b994 	b.w	b68bc <network_is_off>

000b8594 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b8594:	6840      	ldr	r0, [r0, #4]
   b8596:	2200      	movs	r2, #0
   b8598:	f081 0101 	eor.w	r1, r1, #1
   b859c:	f7fe b966 	b.w	b686c <network_listen>

000b85a0 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b85a0:	6840      	ldr	r0, [r0, #4]
   b85a2:	2200      	movs	r2, #0
   b85a4:	f7fe b972 	b.w	b688c <network_set_listen_timeout>

000b85a8 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b85a8:	2200      	movs	r2, #0
   b85aa:	6840      	ldr	r0, [r0, #4]
   b85ac:	4611      	mov	r1, r2
   b85ae:	f7fe b975 	b.w	b689c <network_get_listen_timeout>

000b85b2 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b85b2:	2200      	movs	r2, #0
   b85b4:	6840      	ldr	r0, [r0, #4]
   b85b6:	4611      	mov	r1, r2
   b85b8:	f7fe b960 	b.w	b687c <network_listening>

000b85bc <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b85bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b85c0:	b095      	sub	sp, #84	; 0x54
   b85c2:	4614      	mov	r4, r2
   b85c4:	460d      	mov	r5, r1
   b85c6:	4607      	mov	r7, r0
    IPAddress addr;
   b85c8:	f7fe fe32 	bl	b7230 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b85cc:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b85ce:	221c      	movs	r2, #28
   b85d0:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b85d2:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b85d4:	f000 fdf4 	bl	b91c0 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b85d8:	2340      	movs	r3, #64	; 0x40
   b85da:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b85dc:	4620      	mov	r0, r4
   b85de:	466b      	mov	r3, sp
   b85e0:	aa0c      	add	r2, sp, #48	; 0x30
   b85e2:	2100      	movs	r1, #0
   b85e4:	f7fe f806 	bl	b65f4 <netdb_getaddrinfo>
    if (!r) {
   b85e8:	4604      	mov	r4, r0
   b85ea:	2800      	cmp	r0, #0
   b85ec:	d14b      	bne.n	b8686 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b85ee:	4602      	mov	r2, r0
   b85f0:	2101      	movs	r1, #1
   b85f2:	6868      	ldr	r0, [r5, #4]
   b85f4:	f7fe f922 	bl	b683c <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b85f8:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b85fa:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b85fc:	4622      	mov	r2, r4
   b85fe:	6868      	ldr	r0, [r5, #4]
   b8600:	f7fe f91c 	bl	b683c <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b8604:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b8606:	4681      	mov	r9, r0
        bool ok = false;
   b8608:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b860a:	2e00      	cmp	r6, #0
   b860c:	d03b      	beq.n	b8686 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b860e:	2900      	cmp	r1, #0
   b8610:	d139      	bne.n	b8686 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b8612:	6873      	ldr	r3, [r6, #4]
   b8614:	2b02      	cmp	r3, #2
   b8616:	d003      	beq.n	b8620 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b8618:	2b0a      	cmp	r3, #10
   b861a:	d011      	beq.n	b8640 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b861c:	69f6      	ldr	r6, [r6, #28]
   b861e:	e7f4      	b.n	b860a <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b8620:	f1b8 0f00 	cmp.w	r8, #0
   b8624:	d0fa      	beq.n	b861c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b8626:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b8628:	a806      	add	r0, sp, #24
   b862a:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b862c:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b862e:	f7fe fe2d 	bl	b728c <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b8632:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b8634:	1d3c      	adds	r4, r7, #4
   b8636:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b8638:	682b      	ldr	r3, [r5, #0]
   b863a:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b863c:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b863e:	e7ed      	b.n	b861c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b8640:	f1b9 0f00 	cmp.w	r9, #0
   b8644:	d0ea      	beq.n	b861c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b8646:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b8648:	2210      	movs	r2, #16
   b864a:	a801      	add	r0, sp, #4
   b864c:	f000 fdb8 	bl	b91c0 <memset>
                    a.v = 6;
   b8650:	2306      	movs	r3, #6
   b8652:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b8656:	ad01      	add	r5, sp, #4
   b8658:	f104 0308 	add.w	r3, r4, #8
   b865c:	3418      	adds	r4, #24
   b865e:	6818      	ldr	r0, [r3, #0]
   b8660:	6859      	ldr	r1, [r3, #4]
   b8662:	462a      	mov	r2, r5
   b8664:	c203      	stmia	r2!, {r0, r1}
   b8666:	3308      	adds	r3, #8
   b8668:	42a3      	cmp	r3, r4
   b866a:	4615      	mov	r5, r2
   b866c:	d1f7      	bne.n	b865e <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b866e:	a901      	add	r1, sp, #4
   b8670:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b8672:	ad07      	add	r5, sp, #28
   b8674:	f7fe fdea 	bl	b724c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b8678:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b867a:	1d3c      	adds	r4, r7, #4
   b867c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b867e:	682b      	ldr	r3, [r5, #0]
   b8680:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b8682:	4649      	mov	r1, r9
   b8684:	e7ca      	b.n	b861c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b8686:	9800      	ldr	r0, [sp, #0]
   b8688:	f7fd ffac 	bl	b65e4 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b868c:	4638      	mov	r0, r7
   b868e:	b015      	add	sp, #84	; 0x54
   b8690:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b8694 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b8694:	4b02      	ldr	r3, [pc, #8]	; (b86a0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b8696:	4a03      	ldr	r2, [pc, #12]	; (b86a4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b8698:	601a      	str	r2, [r3, #0]
   b869a:	2200      	movs	r2, #0
   b869c:	605a      	str	r2, [r3, #4]

} // spark
   b869e:	4770      	bx	lr
   b86a0:	2003e6dc 	.word	0x2003e6dc
   b86a4:	000ba398 	.word	0x000ba398

000b86a8 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b86a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b86aa:	4606      	mov	r6, r0
   b86ac:	460d      	mov	r5, r1
  size_t n = 0;
   b86ae:	188f      	adds	r7, r1, r2
   b86b0:	2400      	movs	r4, #0
  while (size--) {
   b86b2:	42bd      	cmp	r5, r7
   b86b4:	d00c      	beq.n	b86d0 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b86b6:	6833      	ldr	r3, [r6, #0]
   b86b8:	f815 1b01 	ldrb.w	r1, [r5], #1
   b86bc:	689b      	ldr	r3, [r3, #8]
   b86be:	4630      	mov	r0, r6
   b86c0:	4798      	blx	r3
     if (chunk>=0)
   b86c2:	1e03      	subs	r3, r0, #0
   b86c4:	db01      	blt.n	b86ca <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b86c6:	441c      	add	r4, r3
  while (size--) {
   b86c8:	e7f3      	b.n	b86b2 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b86ca:	2c00      	cmp	r4, #0
   b86cc:	bf08      	it	eq
   b86ce:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b86d0:	4620      	mov	r0, r4
   b86d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b86d4 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b86d4:	b513      	push	{r0, r1, r4, lr}
   b86d6:	4604      	mov	r4, r0
    }
   b86d8:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b86da:	b159      	cbz	r1, b86f4 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b86dc:	9101      	str	r1, [sp, #4]
   b86de:	f000 fdec 	bl	b92ba <strlen>
   b86e2:	6823      	ldr	r3, [r4, #0]
   b86e4:	9901      	ldr	r1, [sp, #4]
   b86e6:	68db      	ldr	r3, [r3, #12]
   b86e8:	4602      	mov	r2, r0
   b86ea:	4620      	mov	r0, r4
    }
   b86ec:	b002      	add	sp, #8
   b86ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b86f2:	4718      	bx	r3
    }
   b86f4:	b002      	add	sp, #8
   b86f6:	bd10      	pop	{r4, pc}

000b86f8 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   b86f8:	6803      	ldr	r3, [r0, #0]
   b86fa:	689b      	ldr	r3, [r3, #8]
   b86fc:	4718      	bx	r3

000b86fe <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b86fe:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b8700:	210d      	movs	r1, #13
{
   b8702:	4605      	mov	r5, r0
  size_t n = print('\r');
   b8704:	f7ff fff8 	bl	b86f8 <_ZN5Print5printEc>
  n += print('\n');
   b8708:	210a      	movs	r1, #10
  size_t n = print('\r');
   b870a:	4604      	mov	r4, r0
  n += print('\n');
   b870c:	4628      	mov	r0, r5
   b870e:	f7ff fff3 	bl	b86f8 <_ZN5Print5printEc>
  return n;
}
   b8712:	4420      	add	r0, r4
   b8714:	bd38      	pop	{r3, r4, r5, pc}

000b8716 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b8716:	b530      	push	{r4, r5, lr}
   b8718:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b871a:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b871c:	2a01      	cmp	r2, #1
  *str = '\0';
   b871e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b8722:	bf98      	it	ls
   b8724:	220a      	movls	r2, #10
   b8726:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b8728:	460d      	mov	r5, r1
   b872a:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b872e:	fb01 5312 	mls	r3, r1, r2, r5
   b8732:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b8736:	2b09      	cmp	r3, #9
   b8738:	bf94      	ite	ls
   b873a:	3330      	addls	r3, #48	; 0x30
   b873c:	3337      	addhi	r3, #55	; 0x37
   b873e:	b2db      	uxtb	r3, r3
  } while(n);
   b8740:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b8742:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b8746:	d9ef      	bls.n	b8728 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b8748:	4621      	mov	r1, r4
   b874a:	f7ff ffc3 	bl	b86d4 <_ZN5Print5writeEPKc>
}
   b874e:	b00b      	add	sp, #44	; 0x2c
   b8750:	bd30      	pop	{r4, r5, pc}

000b8752 <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b8752:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b8756:	b086      	sub	sp, #24
   b8758:	af00      	add	r7, sp, #0
   b875a:	4605      	mov	r5, r0
   b875c:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b875e:	1d38      	adds	r0, r7, #4
   b8760:	2114      	movs	r1, #20
{
   b8762:	4614      	mov	r4, r2
    va_copy(args2, args);
   b8764:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b8766:	f7fe f8e1 	bl	b692c <vsnprintf>

    if (n<bufsize)
   b876a:	2813      	cmp	r0, #19
   b876c:	d80e      	bhi.n	b878c <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b876e:	1d39      	adds	r1, r7, #4
   b8770:	4628      	mov	r0, r5
   b8772:	f7ff ffaf 	bl	b86d4 <_ZN5Print5writeEPKc>
   b8776:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b8778:	b11e      	cbz	r6, b8782 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b877a:	4628      	mov	r0, r5
   b877c:	f7ff ffbf 	bl	b86fe <_ZN5Print7printlnEv>
   b8780:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b8782:	4620      	mov	r0, r4
   b8784:	3718      	adds	r7, #24
   b8786:	46bd      	mov	sp, r7
   b8788:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b878c:	f100 0308 	add.w	r3, r0, #8
   b8790:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b8794:	46e8      	mov	r8, sp
        char bigger[n+1];
   b8796:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b879a:	4622      	mov	r2, r4
   b879c:	1c41      	adds	r1, r0, #1
   b879e:	683b      	ldr	r3, [r7, #0]
   b87a0:	4668      	mov	r0, sp
   b87a2:	f7fe f8c3 	bl	b692c <vsnprintf>
  return write(str);
   b87a6:	4669      	mov	r1, sp
   b87a8:	4628      	mov	r0, r5
   b87aa:	f7ff ff93 	bl	b86d4 <_ZN5Print5writeEPKc>
   b87ae:	4604      	mov	r4, r0
   b87b0:	46c5      	mov	sp, r8
   b87b2:	e7e1      	b.n	b8778 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b87b4 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   b87b4:	4b01      	ldr	r3, [pc, #4]	; (b87bc <_GLOBAL__sub_I_RGB+0x8>)
   b87b6:	2200      	movs	r2, #0
   b87b8:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b87ba:	4770      	bx	lr
   b87bc:	2003e6e4 	.word	0x2003e6e4

000b87c0 <_ZN6StringD1Ev>:
    init();
    char buf[33] = {};
    dtoa(value, decimalPlaces, buf);
  *this = buf;
}
String::~String()
   b87c0:	b510      	push	{r4, lr}
   b87c2:	4604      	mov	r4, r0
{
    free(buffer);
   b87c4:	6800      	ldr	r0, [r0, #0]
   b87c6:	f7fe f889 	bl	b68dc <free>
}
   b87ca:	4620      	mov	r0, r4
   b87cc:	bd10      	pop	{r4, pc}

000b87ce <_ZN6String10invalidateEv>:
    len = 0;
    flags = 0;
}

void String::invalidate(void)
{
   b87ce:	b510      	push	{r4, lr}
   b87d0:	4604      	mov	r4, r0
    if (buffer) {
   b87d2:	6800      	ldr	r0, [r0, #0]
   b87d4:	b108      	cbz	r0, b87da <_ZN6String10invalidateEv+0xc>
        free(buffer);
   b87d6:	f7fe f881 	bl	b68dc <free>
    }
    buffer = nullptr;
   b87da:	2300      	movs	r3, #0
    capacity = len = 0;
   b87dc:	e9c4 3301 	strd	r3, r3, [r4, #4]
    buffer = nullptr;
   b87e0:	6023      	str	r3, [r4, #0]
}
   b87e2:	bd10      	pop	{r4, pc}

000b87e4 <_ZN6String12changeBufferEj>:
    }
    return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b87e4:	b538      	push	{r3, r4, r5, lr}
   b87e6:	4604      	mov	r4, r0
   b87e8:	460d      	mov	r5, r1
    char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b87ea:	6800      	ldr	r0, [r0, #0]
   b87ec:	3101      	adds	r1, #1
   b87ee:	f7fe f87d 	bl	b68ec <realloc>
    if (newbuffer) {
   b87f2:	b110      	cbz	r0, b87fa <_ZN6String12changeBufferEj+0x16>
        buffer = newbuffer;
        capacity = maxStrLen;
   b87f4:	e9c4 0500 	strd	r0, r5, [r4]
        return 1;
   b87f8:	2001      	movs	r0, #1
    }
    return 0;
}
   b87fa:	bd38      	pop	{r3, r4, r5, pc}

000b87fc <_ZN6String7reserveEj>:
{
   b87fc:	b510      	push	{r4, lr}
    if (buffer && capacity >= size) {
   b87fe:	6803      	ldr	r3, [r0, #0]
{
   b8800:	4604      	mov	r4, r0
    if (buffer && capacity >= size) {
   b8802:	b123      	cbz	r3, b880e <_ZN6String7reserveEj+0x12>
   b8804:	6843      	ldr	r3, [r0, #4]
   b8806:	428b      	cmp	r3, r1
   b8808:	d301      	bcc.n	b880e <_ZN6String7reserveEj+0x12>
   b880a:	2001      	movs	r0, #1
}
   b880c:	bd10      	pop	{r4, pc}
    if (changeBuffer(size)) {
   b880e:	4620      	mov	r0, r4
   b8810:	f7ff ffe8 	bl	b87e4 <_ZN6String12changeBufferEj>
   b8814:	2800      	cmp	r0, #0
   b8816:	d0f9      	beq.n	b880c <_ZN6String7reserveEj+0x10>
        if (len == 0) {
   b8818:	68a3      	ldr	r3, [r4, #8]
   b881a:	2b00      	cmp	r3, #0
   b881c:	d1f5      	bne.n	b880a <_ZN6String7reserveEj+0xe>
            buffer[0] = 0;
   b881e:	6822      	ldr	r2, [r4, #0]
   b8820:	7013      	strb	r3, [r2, #0]
   b8822:	e7f2      	b.n	b880a <_ZN6String7reserveEj+0xe>

000b8824 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b8824:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b8826:	460d      	mov	r5, r1
    if (!reserve(length)) {
   b8828:	4611      	mov	r1, r2
   b882a:	9201      	str	r2, [sp, #4]
{
   b882c:	4604      	mov	r4, r0
    if (!reserve(length)) {
   b882e:	f7ff ffe5 	bl	b87fc <_ZN6String7reserveEj>
   b8832:	9a01      	ldr	r2, [sp, #4]
   b8834:	b928      	cbnz	r0, b8842 <_ZN6String4copyEPKcj+0x1e>
        invalidate();
   b8836:	4620      	mov	r0, r4
   b8838:	f7ff ffc9 	bl	b87ce <_ZN6String10invalidateEv>
    }
    len = length;
    memcpy(buffer, cstr, length);
    buffer[len] = 0;
    return *this;
}
   b883c:	4620      	mov	r0, r4
   b883e:	b003      	add	sp, #12
   b8840:	bd30      	pop	{r4, r5, pc}
    len = length;
   b8842:	60a2      	str	r2, [r4, #8]
    memcpy(buffer, cstr, length);
   b8844:	4629      	mov	r1, r5
   b8846:	6820      	ldr	r0, [r4, #0]
   b8848:	f000 fc92 	bl	b9170 <memcpy>
    buffer[len] = 0;
   b884c:	6822      	ldr	r2, [r4, #0]
   b884e:	68a3      	ldr	r3, [r4, #8]
   b8850:	2100      	movs	r1, #0
   b8852:	54d1      	strb	r1, [r2, r3]
    return *this;
   b8854:	e7f2      	b.n	b883c <_ZN6String4copyEPKcj+0x18>

000b8856 <_ZN6StringC1EPK19__FlashStringHelper>:
    buffer = nullptr;
   b8856:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b8858:	b513      	push	{r0, r1, r4, lr}
    capacity = 0;
   b885a:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b885e:	4604      	mov	r4, r0
    len = 0;
   b8860:	6083      	str	r3, [r0, #8]
    flags = 0;
   b8862:	7303      	strb	r3, [r0, #12]
    if (cstr) {
   b8864:	b141      	cbz	r1, b8878 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
        copy(cstr, strlen(cstr));
   b8866:	4608      	mov	r0, r1
   b8868:	9101      	str	r1, [sp, #4]
   b886a:	f000 fd26 	bl	b92ba <strlen>
   b886e:	9901      	ldr	r1, [sp, #4]
   b8870:	4602      	mov	r2, r0
   b8872:	4620      	mov	r0, r4
   b8874:	f7ff ffd6 	bl	b8824 <_ZN6String4copyEPKcj>
}
   b8878:	4620      	mov	r0, r4
   b887a:	b002      	add	sp, #8
   b887c:	bd10      	pop	{r4, pc}

000b887e <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   b887e:	b538      	push	{r3, r4, r5, lr}
   b8880:	4605      	mov	r5, r0
    if (buffer) {
   b8882:	6800      	ldr	r0, [r0, #0]
{
   b8884:	460c      	mov	r4, r1
    if (buffer) {
   b8886:	b170      	cbz	r0, b88a6 <_ZN6String4moveERS_+0x28>
        if (capacity >= rhs.len && rhs.buffer) {
   b8888:	686a      	ldr	r2, [r5, #4]
   b888a:	688b      	ldr	r3, [r1, #8]
   b888c:	429a      	cmp	r2, r3
   b888e:	d308      	bcc.n	b88a2 <_ZN6String4moveERS_+0x24>
   b8890:	6809      	ldr	r1, [r1, #0]
   b8892:	b131      	cbz	r1, b88a2 <_ZN6String4moveERS_+0x24>
            strcpy(buffer, rhs.buffer);
   b8894:	f000 fceb 	bl	b926e <strcpy>
            len = rhs.len;
   b8898:	68a3      	ldr	r3, [r4, #8]
   b889a:	60ab      	str	r3, [r5, #8]
            rhs.len = 0;
   b889c:	2300      	movs	r3, #0
    buffer = rhs.buffer;
    capacity = rhs.capacity;
    len = rhs.len;
    rhs.buffer = nullptr;
    rhs.capacity = 0;
    rhs.len = 0;
   b889e:	60a3      	str	r3, [r4, #8]
}
   b88a0:	bd38      	pop	{r3, r4, r5, pc}
            free(buffer);
   b88a2:	f7fe f81b 	bl	b68dc <free>
    buffer = rhs.buffer;
   b88a6:	6823      	ldr	r3, [r4, #0]
   b88a8:	602b      	str	r3, [r5, #0]
    capacity = rhs.capacity;
   b88aa:	6863      	ldr	r3, [r4, #4]
   b88ac:	606b      	str	r3, [r5, #4]
    len = rhs.len;
   b88ae:	68a3      	ldr	r3, [r4, #8]
   b88b0:	60ab      	str	r3, [r5, #8]
    rhs.buffer = nullptr;
   b88b2:	2300      	movs	r3, #0
    rhs.capacity = 0;
   b88b4:	e9c4 3300 	strd	r3, r3, [r4]
   b88b8:	e7f1      	b.n	b889e <_ZN6String4moveERS_+0x20>

000b88ba <_ZN6StringC1EOS_>:
String::String(String &&rval)
   b88ba:	b510      	push	{r4, lr}
    buffer = nullptr;
   b88bc:	2300      	movs	r3, #0
    capacity = 0;
   b88be:	e9c0 3300 	strd	r3, r3, [r0]
String::String(String &&rval)
   b88c2:	4604      	mov	r4, r0
    len = 0;
   b88c4:	6083      	str	r3, [r0, #8]
    flags = 0;
   b88c6:	7303      	strb	r3, [r0, #12]
    move(rval);
   b88c8:	f7ff ffd9 	bl	b887e <_ZN6String4moveERS_>
}
   b88cc:	4620      	mov	r0, r4
   b88ce:	bd10      	pop	{r4, pc}

000b88d0 <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
    if (this == &rhs) {
   b88d0:	4288      	cmp	r0, r1
{
   b88d2:	b510      	push	{r4, lr}
   b88d4:	4604      	mov	r4, r0
    if (this == &rhs) {
   b88d6:	d005      	beq.n	b88e4 <_ZN6StringaSERKS_+0x14>
        return *this;
    }

    if (rhs.buffer) {
   b88d8:	680b      	ldr	r3, [r1, #0]
   b88da:	b12b      	cbz	r3, b88e8 <_ZN6StringaSERKS_+0x18>
        copy(rhs.buffer, rhs.len);
   b88dc:	688a      	ldr	r2, [r1, #8]
   b88de:	4619      	mov	r1, r3
   b88e0:	f7ff ffa0 	bl	b8824 <_ZN6String4copyEPKcj>
    else {
        invalidate();
    }

    return *this;
}
   b88e4:	4620      	mov	r0, r4
   b88e6:	bd10      	pop	{r4, pc}
        invalidate();
   b88e8:	f7ff ff71 	bl	b87ce <_ZN6String10invalidateEv>
   b88ec:	e7fa      	b.n	b88e4 <_ZN6StringaSERKS_+0x14>

000b88ee <_ZN6StringC1ERKS_>:
String::String(const String &value)
   b88ee:	b510      	push	{r4, lr}
    buffer = nullptr;
   b88f0:	2300      	movs	r3, #0
String::String(const String &value)
   b88f2:	4604      	mov	r4, r0
    capacity = 0;
   b88f4:	e9c0 3300 	strd	r3, r3, [r0]
    len = 0;
   b88f8:	6083      	str	r3, [r0, #8]
    flags = 0;
   b88fa:	7303      	strb	r3, [r0, #12]
    *this = value;
   b88fc:	f7ff ffe8 	bl	b88d0 <_ZN6StringaSERKS_>
}
   b8900:	4620      	mov	r0, r4
   b8902:	bd10      	pop	{r4, pc}

000b8904 <_ZN6StringaSEPKc>:
    return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   b8904:	b513      	push	{r0, r1, r4, lr}
   b8906:	4604      	mov	r4, r0
    if (cstr) {
   b8908:	b159      	cbz	r1, b8922 <_ZN6StringaSEPKc+0x1e>
        copy(cstr, strlen(cstr));
   b890a:	4608      	mov	r0, r1
   b890c:	9101      	str	r1, [sp, #4]
   b890e:	f000 fcd4 	bl	b92ba <strlen>
   b8912:	9901      	ldr	r1, [sp, #4]
   b8914:	4602      	mov	r2, r0
   b8916:	4620      	mov	r0, r4
   b8918:	f7ff ff84 	bl	b8824 <_ZN6String4copyEPKcj>
    else {
        invalidate();
    }

    return *this;
}
   b891c:	4620      	mov	r0, r4
   b891e:	b002      	add	sp, #8
   b8920:	bd10      	pop	{r4, pc}
        invalidate();
   b8922:	f7ff ff54 	bl	b87ce <_ZN6String10invalidateEv>
   b8926:	e7f9      	b.n	b891c <_ZN6StringaSEPKc+0x18>

000b8928 <_ZN6String6concatEPKcj>:
{
    return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   b8928:	b570      	push	{r4, r5, r6, lr}
   b892a:	4605      	mov	r5, r0
    unsigned int newlen = len + length;
    if (!cstr) {
   b892c:	460e      	mov	r6, r1
   b892e:	b909      	cbnz	r1, b8934 <_ZN6String6concatEPKcj+0xc>
        return 0;
   b8930:	2000      	movs	r0, #0
        return 0;
    }
    strcpy(buffer + len, cstr);
    len = newlen;
    return 1;
}
   b8932:	bd70      	pop	{r4, r5, r6, pc}
    if (length == 0) {
   b8934:	b16a      	cbz	r2, b8952 <_ZN6String6concatEPKcj+0x2a>
    unsigned int newlen = len + length;
   b8936:	6884      	ldr	r4, [r0, #8]
   b8938:	4414      	add	r4, r2
    if (!reserve(newlen)) {
   b893a:	4621      	mov	r1, r4
   b893c:	f7ff ff5e 	bl	b87fc <_ZN6String7reserveEj>
   b8940:	2800      	cmp	r0, #0
   b8942:	d0f5      	beq.n	b8930 <_ZN6String6concatEPKcj+0x8>
    strcpy(buffer + len, cstr);
   b8944:	6828      	ldr	r0, [r5, #0]
   b8946:	68ab      	ldr	r3, [r5, #8]
   b8948:	4631      	mov	r1, r6
   b894a:	4418      	add	r0, r3
   b894c:	f000 fc8f 	bl	b926e <strcpy>
    len = newlen;
   b8950:	60ac      	str	r4, [r5, #8]
        return 1;
   b8952:	2001      	movs	r0, #1
   b8954:	e7ed      	b.n	b8932 <_ZN6String6concatEPKcj+0xa>

000b8956 <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
    return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
   b8956:	b507      	push	{r0, r1, r2, lr}
    char buf[2] = {};
   b8958:	2300      	movs	r3, #0
   b895a:	f8ad 3004 	strh.w	r3, [sp, #4]
    buf[0] = c;
    buf[1] = 0;
    return concat(buf, 1);
   b895e:	2201      	movs	r2, #1
    buf[0] = c;
   b8960:	f88d 1004 	strb.w	r1, [sp, #4]
    return concat(buf, 1);
   b8964:	a901      	add	r1, sp, #4
   b8966:	f7ff ffdf 	bl	b8928 <_ZN6String6concatEPKcj>
}
   b896a:	b003      	add	sp, #12
   b896c:	f85d fb04 	ldr.w	pc, [sp], #4

000b8970 <_ZNK6String6equalsEPKc>:
{
    return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   b8970:	b508      	push	{r3, lr}
    if (len == 0) {
   b8972:	6882      	ldr	r2, [r0, #8]
   b8974:	b93a      	cbnz	r2, b8986 <_ZNK6String6equalsEPKc+0x16>
        return (cstr == nullptr || *cstr == 0);
   b8976:	b121      	cbz	r1, b8982 <_ZNK6String6equalsEPKc+0x12>
   b8978:	7808      	ldrb	r0, [r1, #0]
    }
    if (cstr == nullptr) {
        return buffer[0] == 0;
    }
    return strcmp(buffer, cstr) == 0;
   b897a:	fab0 f080 	clz	r0, r0
   b897e:	0940      	lsrs	r0, r0, #5
   b8980:	e000      	b.n	b8984 <_ZNK6String6equalsEPKc+0x14>
        return (cstr == nullptr || *cstr == 0);
   b8982:	2001      	movs	r0, #1
}
   b8984:	bd08      	pop	{r3, pc}
        return buffer[0] == 0;
   b8986:	6800      	ldr	r0, [r0, #0]
    if (cstr == nullptr) {
   b8988:	b909      	cbnz	r1, b898e <_ZNK6String6equalsEPKc+0x1e>
        return buffer[0] == 0;
   b898a:	7800      	ldrb	r0, [r0, #0]
   b898c:	e7f5      	b.n	b897a <_ZNK6String6equalsEPKc+0xa>
    return strcmp(buffer, cstr) == 0;
   b898e:	f000 fc64 	bl	b925a <strcmp>
   b8992:	e7f2      	b.n	b897a <_ZNK6String6equalsEPKc+0xa>

000b8994 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b8994:	4b05      	ldr	r3, [pc, #20]	; (b89ac <_GLOBAL__sub_I_System+0x18>)
   b8996:	2202      	movs	r2, #2
   b8998:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b899a:	4b05      	ldr	r3, [pc, #20]	; (b89b0 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b899c:	4a05      	ldr	r2, [pc, #20]	; (b89b4 <_GLOBAL__sub_I_System+0x20>)
   b899e:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b89a0:	2000      	movs	r0, #0
   b89a2:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b89a6:	f7fd bee5 	b.w	b6774 <set_system_mode>
   b89aa:	bf00      	nop
   b89ac:	2003e700 	.word	0x2003e700
   b89b0:	2003e6f4 	.word	0x2003e6f4
   b89b4:	ffff0000 	.word	0xffff0000

000b89b8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b89b8:	4b02      	ldr	r3, [pc, #8]	; (b89c4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b89ba:	681a      	ldr	r2, [r3, #0]
   b89bc:	4b02      	ldr	r3, [pc, #8]	; (b89c8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b89be:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b89c0:	4770      	bx	lr
   b89c2:	bf00      	nop
   b89c4:	2003b714 	.word	0x2003b714
   b89c8:	2003e704 	.word	0x2003e704

000b89cc <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b89cc:	4770      	bx	lr

000b89ce <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b89ce:	7441      	strb	r1, [r0, #17]
}
   b89d0:	4770      	bx	lr

000b89d2 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b89d2:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b89d4:	7c00      	ldrb	r0, [r0, #16]
   b89d6:	f7fd fe45 	bl	b6664 <hal_usart_available_data_for_write>
}
   b89da:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b89de:	bd08      	pop	{r3, pc}

000b89e0 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b89e0:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b89e2:	7c00      	ldrb	r0, [r0, #16]
   b89e4:	f7fd fe1e 	bl	b6624 <hal_usart_available>
}
   b89e8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b89ec:	bd08      	pop	{r3, pc}

000b89ee <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b89ee:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b89f0:	7c00      	ldrb	r0, [r0, #16]
   b89f2:	f7fd fe27 	bl	b6644 <hal_usart_peek>
}
   b89f6:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b89fa:	bd08      	pop	{r3, pc}

000b89fc <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b89fc:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b89fe:	7c00      	ldrb	r0, [r0, #16]
   b8a00:	f7fd fe18 	bl	b6634 <hal_usart_read>
}
   b8a04:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b8a08:	bd08      	pop	{r3, pc}

000b8a0a <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b8a0a:	7c00      	ldrb	r0, [r0, #16]
   b8a0c:	f7fd be22 	b.w	b6654 <hal_usart_flush>

000b8a10 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b8a10:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b8a12:	7c45      	ldrb	r5, [r0, #17]
{
   b8a14:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b8a16:	b12d      	cbz	r5, b8a24 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b8a18:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b8a1a:	b003      	add	sp, #12
   b8a1c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b8a20:	f7fd bdf8 	b.w	b6614 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b8a24:	7c00      	ldrb	r0, [r0, #16]
   b8a26:	9101      	str	r1, [sp, #4]
   b8a28:	f7fd fe1c 	bl	b6664 <hal_usart_available_data_for_write>
   b8a2c:	2800      	cmp	r0, #0
   b8a2e:	9901      	ldr	r1, [sp, #4]
   b8a30:	dcf2      	bgt.n	b8a18 <_ZN11USARTSerial5writeEh+0x8>
}
   b8a32:	4628      	mov	r0, r5
   b8a34:	b003      	add	sp, #12
   b8a36:	bd30      	pop	{r4, r5, pc}

000b8a38 <_ZN11USARTSerialD0Ev>:
   b8a38:	b510      	push	{r4, lr}
   b8a3a:	2114      	movs	r1, #20
   b8a3c:	4604      	mov	r4, r0
   b8a3e:	f7fb fb2c 	bl	b409a <_ZdlPvj>
   b8a42:	4620      	mov	r0, r4
   b8a44:	bd10      	pop	{r4, pc}
	...

000b8a48 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b8a48:	b510      	push	{r4, lr}
   b8a4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b8a4e:	4604      	mov	r4, r0
   b8a50:	4608      	mov	r0, r1
   b8a52:	4611      	mov	r1, r2
   b8a54:	2200      	movs	r2, #0
   b8a56:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b8a5a:	4b04      	ldr	r3, [pc, #16]	; (b8a6c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b8a5c:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b8a5e:	2301      	movs	r3, #1
  _serial = serial;
   b8a60:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b8a62:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b8a64:	f7fd fe0e 	bl	b6684 <hal_usart_init_ex>
}
   b8a68:	4620      	mov	r0, r4
   b8a6a:	bd10      	pop	{r4, pc}
   b8a6c:	000ba3f0 	.word	0x000ba3f0

000b8a70 <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
   b8a70:	7c00      	ldrb	r0, [r0, #16]
   b8a72:	2300      	movs	r3, #0
   b8a74:	f7fd bdfe 	b.w	b6674 <hal_usart_begin_config>

000b8a78 <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
   b8a78:	2200      	movs	r2, #0
   b8a7a:	f7ff bff9 	b.w	b8a70 <_ZN11USARTSerial5beginEmm>

000b8a7e <_ZN11USARTSerial3endEv>:
  hal_usart_end(_serial);
   b8a7e:	7c00      	ldrb	r0, [r0, #16]
   b8a80:	f7fd bdc0 	b.w	b6604 <hal_usart_end>

000b8a84 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b8a84:	7441      	strb	r1, [r0, #17]
}
   b8a86:	4770      	bx	lr

000b8a88 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b8a88:	4770      	bx	lr

000b8a8a <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b8a8a:	4770      	bx	lr

000b8a8c <_ZN9USBSerial4readEv>:
{
   b8a8c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b8a8e:	2100      	movs	r1, #0
   b8a90:	7c00      	ldrb	r0, [r0, #16]
   b8a92:	f7fd fe27 	bl	b66e4 <HAL_USB_USART_Receive_Data>
}
   b8a96:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b8a9a:	bd08      	pop	{r3, pc}

000b8a9c <_ZN9USBSerial4peekEv>:
{
   b8a9c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b8a9e:	2101      	movs	r1, #1
   b8aa0:	7c00      	ldrb	r0, [r0, #16]
   b8aa2:	f7fd fe1f 	bl	b66e4 <HAL_USB_USART_Receive_Data>
}
   b8aa6:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b8aaa:	bd08      	pop	{r3, pc}

000b8aac <_ZN9USBSerial17availableForWriteEv>:
{
   b8aac:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b8aae:	7c00      	ldrb	r0, [r0, #16]
   b8ab0:	f7fd fe10 	bl	b66d4 <HAL_USB_USART_Available_Data_For_Write>
}
   b8ab4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b8ab8:	bd08      	pop	{r3, pc}

000b8aba <_ZN9USBSerial9availableEv>:
{
   b8aba:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b8abc:	7c00      	ldrb	r0, [r0, #16]
   b8abe:	f7fd fe01 	bl	b66c4 <HAL_USB_USART_Available_Data>
}
   b8ac2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b8ac6:	bd08      	pop	{r3, pc}

000b8ac8 <_ZN9USBSerial5writeEh>:
{
   b8ac8:	b513      	push	{r0, r1, r4, lr}
   b8aca:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b8acc:	7c00      	ldrb	r0, [r0, #16]
{
   b8ace:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b8ad0:	f7fd fe00 	bl	b66d4 <HAL_USB_USART_Available_Data_For_Write>
   b8ad4:	2800      	cmp	r0, #0
   b8ad6:	9901      	ldr	r1, [sp, #4]
   b8ad8:	dc01      	bgt.n	b8ade <_ZN9USBSerial5writeEh+0x16>
   b8ada:	7c60      	ldrb	r0, [r4, #17]
   b8adc:	b120      	cbz	r0, b8ae8 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b8ade:	7c20      	ldrb	r0, [r4, #16]
   b8ae0:	f7fd fe08 	bl	b66f4 <HAL_USB_USART_Send_Data>
   b8ae4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b8ae8:	b002      	add	sp, #8
   b8aea:	bd10      	pop	{r4, pc}

000b8aec <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b8aec:	7c00      	ldrb	r0, [r0, #16]
   b8aee:	f7fd be09 	b.w	b6704 <HAL_USB_USART_Flush_Data>

000b8af2 <_ZN9USBSerialD0Ev>:
   b8af2:	b510      	push	{r4, lr}
   b8af4:	2114      	movs	r1, #20
   b8af6:	4604      	mov	r4, r0
   b8af8:	f7fb facf 	bl	b409a <_ZdlPvj>
   b8afc:	4620      	mov	r0, r4
   b8afe:	bd10      	pop	{r4, pc}

000b8b00 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b8b00:	b510      	push	{r4, lr}
   b8b02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b8b06:	4604      	mov	r4, r0
   b8b08:	4608      	mov	r0, r1
   b8b0a:	2100      	movs	r1, #0
   b8b0c:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b8b10:	4b04      	ldr	r3, [pc, #16]	; (b8b24 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b8b12:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b8b14:	2301      	movs	r3, #1
  _serial = serial;
   b8b16:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b8b18:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b8b1a:	4611      	mov	r1, r2
   b8b1c:	f7fd fdba 	bl	b6694 <HAL_USB_USART_Init>
}
   b8b20:	4620      	mov	r0, r4
   b8b22:	bd10      	pop	{r4, pc}
   b8b24:	000ba420 	.word	0x000ba420

000b8b28 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b8b28:	7c00      	ldrb	r0, [r0, #16]
   b8b2a:	2200      	movs	r2, #0
   b8b2c:	f7fd bdba 	b.w	b66a4 <HAL_USB_USART_Begin>

000b8b30 <_ZN9USBSerial3endEv>:
    HAL_USB_USART_End(_serial);
   b8b30:	7c00      	ldrb	r0, [r0, #16]
   b8b32:	f7fd bdbf 	b.w	b66b4 <HAL_USB_USART_End>

000b8b36 <_Z19acquireSerialBufferv>:
{
   b8b36:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b8b38:	2214      	movs	r2, #20
{
   b8b3a:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b8b3c:	2100      	movs	r1, #0
   b8b3e:	f000 fb3f 	bl	b91c0 <memset>
}
   b8b42:	4620      	mov	r0, r4
   b8b44:	bd10      	pop	{r4, pc}
	...

000b8b48 <_Z16_fetch_usbserialv>:
{
   b8b48:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b8b4a:	4c0f      	ldr	r4, [pc, #60]	; (b8b88 <_Z16_fetch_usbserialv+0x40>)
{
   b8b4c:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b8b4e:	a803      	add	r0, sp, #12
   b8b50:	f7ff fff1 	bl	b8b36 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b8b54:	7821      	ldrb	r1, [r4, #0]
   b8b56:	f3bf 8f5b 	dmb	ish
   b8b5a:	f011 0101 	ands.w	r1, r1, #1
   b8b5e:	d10f      	bne.n	b8b80 <_Z16_fetch_usbserialv+0x38>
   b8b60:	4620      	mov	r0, r4
   b8b62:	9101      	str	r1, [sp, #4]
   b8b64:	f7fb faa8 	bl	b40b8 <__cxa_guard_acquire>
   b8b68:	9901      	ldr	r1, [sp, #4]
   b8b6a:	b148      	cbz	r0, b8b80 <_Z16_fetch_usbserialv+0x38>
   b8b6c:	aa03      	add	r2, sp, #12
   b8b6e:	4807      	ldr	r0, [pc, #28]	; (b8b8c <_Z16_fetch_usbserialv+0x44>)
   b8b70:	f7ff ffc6 	bl	b8b00 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b8b74:	4620      	mov	r0, r4
   b8b76:	f7fb faa4 	bl	b40c2 <__cxa_guard_release>
   b8b7a:	4805      	ldr	r0, [pc, #20]	; (b8b90 <_Z16_fetch_usbserialv+0x48>)
   b8b7c:	f000 faea 	bl	b9154 <atexit>
	return _usbserial;
}
   b8b80:	4802      	ldr	r0, [pc, #8]	; (b8b8c <_Z16_fetch_usbserialv+0x44>)
   b8b82:	b008      	add	sp, #32
   b8b84:	bd10      	pop	{r4, pc}
   b8b86:	bf00      	nop
   b8b88:	2003e708 	.word	0x2003e708
   b8b8c:	2003e70c 	.word	0x2003e70c
   b8b90:	000b8a89 	.word	0x000b8a89

000b8b94 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b8b94:	4b01      	ldr	r3, [pc, #4]	; (b8b9c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b8b96:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b8b98:	4770      	bx	lr
   b8b9a:	bf00      	nop
   b8b9c:	2003b718 	.word	0x2003b718

000b8ba0 <serialEventRun>:
{
   b8ba0:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b8ba2:	4b0b      	ldr	r3, [pc, #44]	; (b8bd0 <serialEventRun+0x30>)
   b8ba4:	b143      	cbz	r3, b8bb8 <serialEventRun+0x18>
   b8ba6:	f7ff ffcf 	bl	b8b48 <_Z16_fetch_usbserialv>
   b8baa:	6803      	ldr	r3, [r0, #0]
   b8bac:	691b      	ldr	r3, [r3, #16]
   b8bae:	4798      	blx	r3
   b8bb0:	2800      	cmp	r0, #0
   b8bb2:	dd01      	ble.n	b8bb8 <serialEventRun+0x18>
        serialEvent();
   b8bb4:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b8bb8:	4b06      	ldr	r3, [pc, #24]	; (b8bd4 <serialEventRun+0x34>)
   b8bba:	b143      	cbz	r3, b8bce <serialEventRun+0x2e>
   b8bbc:	f000 f8e2 	bl	b8d84 <_Z22__fetch_global_Serial1v>
   b8bc0:	6803      	ldr	r3, [r0, #0]
   b8bc2:	691b      	ldr	r3, [r3, #16]
   b8bc4:	4798      	blx	r3
   b8bc6:	2800      	cmp	r0, #0
   b8bc8:	dd01      	ble.n	b8bce <serialEventRun+0x2e>
        serialEvent1();
   b8bca:	f3af 8000 	nop.w
}
   b8bce:	bd08      	pop	{r3, pc}
	...

000b8bd8 <_post_loop>:
{
   b8bd8:	b508      	push	{r3, lr}
	serialEventRun();
   b8bda:	f7ff ffe1 	bl	b8ba0 <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b8bde:	f7fd fc91 	bl	b6504 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b8be2:	4b01      	ldr	r3, [pc, #4]	; (b8be8 <_post_loop+0x10>)
   b8be4:	6018      	str	r0, [r3, #0]
}
   b8be6:	bd08      	pop	{r3, pc}
   b8be8:	2003e728 	.word	0x2003e728

000b8bec <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b8bec:	4805      	ldr	r0, [pc, #20]	; (b8c04 <_Z33system_initialize_user_backup_ramv+0x18>)
   b8bee:	4a06      	ldr	r2, [pc, #24]	; (b8c08 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b8bf0:	4906      	ldr	r1, [pc, #24]	; (b8c0c <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b8bf2:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b8bf4:	1a12      	subs	r2, r2, r0
   b8bf6:	f000 fabb 	bl	b9170 <memcpy>
    __backup_sram_signature = signature;
   b8bfa:	4b05      	ldr	r3, [pc, #20]	; (b8c10 <_Z33system_initialize_user_backup_ramv+0x24>)
   b8bfc:	4a05      	ldr	r2, [pc, #20]	; (b8c14 <_Z33system_initialize_user_backup_ramv+0x28>)
   b8bfe:	601a      	str	r2, [r3, #0]
}
   b8c00:	bd08      	pop	{r3, pc}
   b8c02:	bf00      	nop
   b8c04:	2003f400 	.word	0x2003f400
   b8c08:	2003f404 	.word	0x2003f404
   b8c0c:	000ba614 	.word	0x000ba614
   b8c10:	2003f400 	.word	0x2003f400
   b8c14:	9a271c1e 	.word	0x9a271c1e

000b8c18 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b8c18:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b8c1a:	2300      	movs	r3, #0
   b8c1c:	9300      	str	r3, [sp, #0]
   b8c1e:	461a      	mov	r2, r3
   b8c20:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b8c24:	f7fd fdd0 	bl	b67c8 <system_ctrl_set_result>
}
   b8c28:	b003      	add	sp, #12
   b8c2a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b8c30 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b8c30:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b8c32:	8843      	ldrh	r3, [r0, #2]
   b8c34:	2b0a      	cmp	r3, #10
   b8c36:	d008      	beq.n	b8c4a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b8c38:	2b50      	cmp	r3, #80	; 0x50
   b8c3a:	d10b      	bne.n	b8c54 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b8c3c:	4b09      	ldr	r3, [pc, #36]	; (b8c64 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b8c3e:	681b      	ldr	r3, [r3, #0]
   b8c40:	b14b      	cbz	r3, b8c56 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b8c42:	b003      	add	sp, #12
   b8c44:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b8c48:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b8c4a:	f7ff ffe5 	bl	b8c18 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b8c4e:	b003      	add	sp, #12
   b8c50:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b8c54:	2300      	movs	r3, #0
   b8c56:	9300      	str	r3, [sp, #0]
   b8c58:	461a      	mov	r2, r3
   b8c5a:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b8c5e:	f7fd fdb3 	bl	b67c8 <system_ctrl_set_result>
}
   b8c62:	e7f4      	b.n	b8c4e <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b8c64:	2003e724 	.word	0x2003e724

000b8c68 <module_user_init_hook>:
{
   b8c68:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b8c6a:	4812      	ldr	r0, [pc, #72]	; (b8cb4 <module_user_init_hook+0x4c>)
   b8c6c:	2100      	movs	r1, #0
   b8c6e:	f7fd fe85 	bl	b697c <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b8c72:	4b11      	ldr	r3, [pc, #68]	; (b8cb8 <module_user_init_hook+0x50>)
   b8c74:	681a      	ldr	r2, [r3, #0]
   b8c76:	4b11      	ldr	r3, [pc, #68]	; (b8cbc <module_user_init_hook+0x54>)
   b8c78:	429a      	cmp	r2, r3
   b8c7a:	4b11      	ldr	r3, [pc, #68]	; (b8cc0 <module_user_init_hook+0x58>)
   b8c7c:	bf0c      	ite	eq
   b8c7e:	2201      	moveq	r2, #1
   b8c80:	2200      	movne	r2, #0
   b8c82:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b8c84:	d001      	beq.n	b8c8a <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b8c86:	f7ff ffb1 	bl	b8bec <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b8c8a:	f7fd fc2b 	bl	b64e4 <HAL_RNG_GetRandomNumber>
   b8c8e:	4604      	mov	r4, r0
    srand(seed);
   b8c90:	f000 fa9e 	bl	b91d0 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b8c94:	4b0b      	ldr	r3, [pc, #44]	; (b8cc4 <module_user_init_hook+0x5c>)
   b8c96:	b113      	cbz	r3, b8c9e <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b8c98:	4620      	mov	r0, r4
   b8c9a:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b8c9e:	2100      	movs	r1, #0
   b8ca0:	4808      	ldr	r0, [pc, #32]	; (b8cc4 <module_user_init_hook+0x5c>)
   b8ca2:	f7fd fdab 	bl	b67fc <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b8ca6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b8caa:	4807      	ldr	r0, [pc, #28]	; (b8cc8 <module_user_init_hook+0x60>)
   b8cac:	2100      	movs	r1, #0
   b8cae:	f7fd bd81 	b.w	b67b4 <system_ctrl_set_app_request_handler>
   b8cb2:	bf00      	nop
   b8cb4:	000b8b95 	.word	0x000b8b95
   b8cb8:	2003f400 	.word	0x2003f400
   b8cbc:	9a271c1e 	.word	0x9a271c1e
   b8cc0:	2003e720 	.word	0x2003e720
   b8cc4:	00000000 	.word	0x00000000
   b8cc8:	000b8c31 	.word	0x000b8c31

000b8ccc <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b8ccc:	4770      	bx	lr
	...

000b8cd0 <_Z17acquireWireBufferv>:
{
   b8cd0:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b8cd2:	4b0a      	ldr	r3, [pc, #40]	; (b8cfc <_Z17acquireWireBufferv+0x2c>)
   b8cd4:	6003      	str	r3, [r0, #0]
   b8cd6:	2301      	movs	r3, #1
{
   b8cd8:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b8cda:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b8cdc:	4908      	ldr	r1, [pc, #32]	; (b8d00 <_Z17acquireWireBufferv+0x30>)
   b8cde:	2020      	movs	r0, #32
   b8ce0:	f000 f876 	bl	b8dd0 <_ZnajRKSt9nothrow_t>
	};
   b8ce4:	2520      	movs	r5, #32
   b8ce6:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b8ce8:	4905      	ldr	r1, [pc, #20]	; (b8d00 <_Z17acquireWireBufferv+0x30>)
	};
   b8cea:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b8cec:	4628      	mov	r0, r5
   b8cee:	f000 f86f 	bl	b8dd0 <_ZnajRKSt9nothrow_t>
	};
   b8cf2:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   b8cf6:	4620      	mov	r0, r4
   b8cf8:	bd38      	pop	{r3, r4, r5, pc}
   b8cfa:	bf00      	nop
   b8cfc:	00010018 	.word	0x00010018
   b8d00:	000ba448 	.word	0x000ba448

000b8d04 <_Z19__fetch_global_Wirev>:
{
   b8d04:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b8d06:	4d0e      	ldr	r5, [pc, #56]	; (b8d40 <_Z19__fetch_global_Wirev+0x3c>)
   b8d08:	7829      	ldrb	r1, [r5, #0]
   b8d0a:	f3bf 8f5b 	dmb	ish
   b8d0e:	f011 0401 	ands.w	r4, r1, #1
{
   b8d12:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b8d14:	d111      	bne.n	b8d3a <_Z19__fetch_global_Wirev+0x36>
   b8d16:	4628      	mov	r0, r5
   b8d18:	f7fb f9ce 	bl	b40b8 <__cxa_guard_acquire>
   b8d1c:	b168      	cbz	r0, b8d3a <_Z19__fetch_global_Wirev+0x36>
   b8d1e:	4668      	mov	r0, sp
   b8d20:	f7ff ffd6 	bl	b8cd0 <_Z17acquireWireBufferv>
   b8d24:	466a      	mov	r2, sp
   b8d26:	4621      	mov	r1, r4
   b8d28:	4806      	ldr	r0, [pc, #24]	; (b8d44 <_Z19__fetch_global_Wirev+0x40>)
   b8d2a:	f7fe f9dd 	bl	b70e8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b8d2e:	4628      	mov	r0, r5
   b8d30:	f7fb f9c7 	bl	b40c2 <__cxa_guard_release>
   b8d34:	4804      	ldr	r0, [pc, #16]	; (b8d48 <_Z19__fetch_global_Wirev+0x44>)
   b8d36:	f000 fa0d 	bl	b9154 <atexit>
	return wire;
}
   b8d3a:	4802      	ldr	r0, [pc, #8]	; (b8d44 <_Z19__fetch_global_Wirev+0x40>)
   b8d3c:	b007      	add	sp, #28
   b8d3e:	bd30      	pop	{r4, r5, pc}
   b8d40:	2003e72c 	.word	0x2003e72c
   b8d44:	2003e730 	.word	0x2003e730
   b8d48:	000b8ccd 	.word	0x000b8ccd

000b8d4c <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b8d4c:	4770      	bx	lr
	...

000b8d50 <_Z20acquireSerial1Bufferv>:
{
   b8d50:	b538      	push	{r3, r4, r5, lr}
   b8d52:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b8d54:	2514      	movs	r5, #20
   b8d56:	462a      	mov	r2, r5
   b8d58:	2100      	movs	r1, #0
   b8d5a:	f000 fa31 	bl	b91c0 <memset>
   b8d5e:	8025      	strh	r5, [r4, #0]
   b8d60:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b8d62:	4907      	ldr	r1, [pc, #28]	; (b8d80 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b8d64:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b8d66:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b8d68:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b8d6a:	f000 f831 	bl	b8dd0 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b8d6e:	4904      	ldr	r1, [pc, #16]	; (b8d80 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b8d70:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b8d72:	4628      	mov	r0, r5
   b8d74:	f000 f82c 	bl	b8dd0 <_ZnajRKSt9nothrow_t>
    };
   b8d78:	60e0      	str	r0, [r4, #12]
}
   b8d7a:	4620      	mov	r0, r4
   b8d7c:	bd38      	pop	{r3, r4, r5, pc}
   b8d7e:	bf00      	nop
   b8d80:	000ba448 	.word	0x000ba448

000b8d84 <_Z22__fetch_global_Serial1v>:
{
   b8d84:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b8d86:	4d0e      	ldr	r5, [pc, #56]	; (b8dc0 <_Z22__fetch_global_Serial1v+0x3c>)
   b8d88:	7829      	ldrb	r1, [r5, #0]
   b8d8a:	f3bf 8f5b 	dmb	ish
   b8d8e:	f011 0401 	ands.w	r4, r1, #1
{
   b8d92:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b8d94:	d111      	bne.n	b8dba <_Z22__fetch_global_Serial1v+0x36>
   b8d96:	4628      	mov	r0, r5
   b8d98:	f7fb f98e 	bl	b40b8 <__cxa_guard_acquire>
   b8d9c:	b168      	cbz	r0, b8dba <_Z22__fetch_global_Serial1v+0x36>
   b8d9e:	a801      	add	r0, sp, #4
   b8da0:	f7ff ffd6 	bl	b8d50 <_Z20acquireSerial1Bufferv>
   b8da4:	aa01      	add	r2, sp, #4
   b8da6:	4621      	mov	r1, r4
   b8da8:	4806      	ldr	r0, [pc, #24]	; (b8dc4 <_Z22__fetch_global_Serial1v+0x40>)
   b8daa:	f7ff fe4d 	bl	b8a48 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b8dae:	4628      	mov	r0, r5
   b8db0:	f7fb f987 	bl	b40c2 <__cxa_guard_release>
   b8db4:	4804      	ldr	r0, [pc, #16]	; (b8dc8 <_Z22__fetch_global_Serial1v+0x44>)
   b8db6:	f000 f9cd 	bl	b9154 <atexit>
    return serial1;
}
   b8dba:	4802      	ldr	r0, [pc, #8]	; (b8dc4 <_Z22__fetch_global_Serial1v+0x40>)
   b8dbc:	b007      	add	sp, #28
   b8dbe:	bd30      	pop	{r4, r5, pc}
   b8dc0:	2003e744 	.word	0x2003e744
   b8dc4:	2003e748 	.word	0x2003e748
   b8dc8:	000b8d4d 	.word	0x000b8d4d

000b8dcc <_ZnwjRKSt9nothrow_t>:
   b8dcc:	f7fb b961 	b.w	b4092 <_Znwj>

000b8dd0 <_ZnajRKSt9nothrow_t>:
   b8dd0:	f7fb b961 	b.w	b4096 <_Znaj>

000b8dd4 <_ZSt25__throw_bad_function_callv>:
   b8dd4:	b508      	push	{r3, lr}
   b8dd6:	f7fd fdb1 	bl	b693c <abort>
	...

000b8ddc <__aeabi_drsub>:
   b8ddc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   b8de0:	e002      	b.n	b8de8 <__adddf3>
   b8de2:	bf00      	nop

000b8de4 <__aeabi_dsub>:
   b8de4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000b8de8 <__adddf3>:
   b8de8:	b530      	push	{r4, r5, lr}
   b8dea:	ea4f 0441 	mov.w	r4, r1, lsl #1
   b8dee:	ea4f 0543 	mov.w	r5, r3, lsl #1
   b8df2:	ea94 0f05 	teq	r4, r5
   b8df6:	bf08      	it	eq
   b8df8:	ea90 0f02 	teqeq	r0, r2
   b8dfc:	bf1f      	itttt	ne
   b8dfe:	ea54 0c00 	orrsne.w	ip, r4, r0
   b8e02:	ea55 0c02 	orrsne.w	ip, r5, r2
   b8e06:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   b8e0a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b8e0e:	f000 80e2 	beq.w	b8fd6 <__adddf3+0x1ee>
   b8e12:	ea4f 5454 	mov.w	r4, r4, lsr #21
   b8e16:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   b8e1a:	bfb8      	it	lt
   b8e1c:	426d      	neglt	r5, r5
   b8e1e:	dd0c      	ble.n	b8e3a <__adddf3+0x52>
   b8e20:	442c      	add	r4, r5
   b8e22:	ea80 0202 	eor.w	r2, r0, r2
   b8e26:	ea81 0303 	eor.w	r3, r1, r3
   b8e2a:	ea82 0000 	eor.w	r0, r2, r0
   b8e2e:	ea83 0101 	eor.w	r1, r3, r1
   b8e32:	ea80 0202 	eor.w	r2, r0, r2
   b8e36:	ea81 0303 	eor.w	r3, r1, r3
   b8e3a:	2d36      	cmp	r5, #54	; 0x36
   b8e3c:	bf88      	it	hi
   b8e3e:	bd30      	pophi	{r4, r5, pc}
   b8e40:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b8e44:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b8e48:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   b8e4c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   b8e50:	d002      	beq.n	b8e58 <__adddf3+0x70>
   b8e52:	4240      	negs	r0, r0
   b8e54:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b8e58:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   b8e5c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b8e60:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   b8e64:	d002      	beq.n	b8e6c <__adddf3+0x84>
   b8e66:	4252      	negs	r2, r2
   b8e68:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b8e6c:	ea94 0f05 	teq	r4, r5
   b8e70:	f000 80a7 	beq.w	b8fc2 <__adddf3+0x1da>
   b8e74:	f1a4 0401 	sub.w	r4, r4, #1
   b8e78:	f1d5 0e20 	rsbs	lr, r5, #32
   b8e7c:	db0d      	blt.n	b8e9a <__adddf3+0xb2>
   b8e7e:	fa02 fc0e 	lsl.w	ip, r2, lr
   b8e82:	fa22 f205 	lsr.w	r2, r2, r5
   b8e86:	1880      	adds	r0, r0, r2
   b8e88:	f141 0100 	adc.w	r1, r1, #0
   b8e8c:	fa03 f20e 	lsl.w	r2, r3, lr
   b8e90:	1880      	adds	r0, r0, r2
   b8e92:	fa43 f305 	asr.w	r3, r3, r5
   b8e96:	4159      	adcs	r1, r3
   b8e98:	e00e      	b.n	b8eb8 <__adddf3+0xd0>
   b8e9a:	f1a5 0520 	sub.w	r5, r5, #32
   b8e9e:	f10e 0e20 	add.w	lr, lr, #32
   b8ea2:	2a01      	cmp	r2, #1
   b8ea4:	fa03 fc0e 	lsl.w	ip, r3, lr
   b8ea8:	bf28      	it	cs
   b8eaa:	f04c 0c02 	orrcs.w	ip, ip, #2
   b8eae:	fa43 f305 	asr.w	r3, r3, r5
   b8eb2:	18c0      	adds	r0, r0, r3
   b8eb4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   b8eb8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b8ebc:	d507      	bpl.n	b8ece <__adddf3+0xe6>
   b8ebe:	f04f 0e00 	mov.w	lr, #0
   b8ec2:	f1dc 0c00 	rsbs	ip, ip, #0
   b8ec6:	eb7e 0000 	sbcs.w	r0, lr, r0
   b8eca:	eb6e 0101 	sbc.w	r1, lr, r1
   b8ece:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   b8ed2:	d31b      	bcc.n	b8f0c <__adddf3+0x124>
   b8ed4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   b8ed8:	d30c      	bcc.n	b8ef4 <__adddf3+0x10c>
   b8eda:	0849      	lsrs	r1, r1, #1
   b8edc:	ea5f 0030 	movs.w	r0, r0, rrx
   b8ee0:	ea4f 0c3c 	mov.w	ip, ip, rrx
   b8ee4:	f104 0401 	add.w	r4, r4, #1
   b8ee8:	ea4f 5244 	mov.w	r2, r4, lsl #21
   b8eec:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   b8ef0:	f080 809a 	bcs.w	b9028 <__adddf3+0x240>
   b8ef4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b8ef8:	bf08      	it	eq
   b8efa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b8efe:	f150 0000 	adcs.w	r0, r0, #0
   b8f02:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b8f06:	ea41 0105 	orr.w	r1, r1, r5
   b8f0a:	bd30      	pop	{r4, r5, pc}
   b8f0c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   b8f10:	4140      	adcs	r0, r0
   b8f12:	eb41 0101 	adc.w	r1, r1, r1
   b8f16:	3c01      	subs	r4, #1
   b8f18:	bf28      	it	cs
   b8f1a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   b8f1e:	d2e9      	bcs.n	b8ef4 <__adddf3+0x10c>
   b8f20:	f091 0f00 	teq	r1, #0
   b8f24:	bf04      	itt	eq
   b8f26:	4601      	moveq	r1, r0
   b8f28:	2000      	moveq	r0, #0
   b8f2a:	fab1 f381 	clz	r3, r1
   b8f2e:	bf08      	it	eq
   b8f30:	3320      	addeq	r3, #32
   b8f32:	f1a3 030b 	sub.w	r3, r3, #11
   b8f36:	f1b3 0220 	subs.w	r2, r3, #32
   b8f3a:	da0c      	bge.n	b8f56 <__adddf3+0x16e>
   b8f3c:	320c      	adds	r2, #12
   b8f3e:	dd08      	ble.n	b8f52 <__adddf3+0x16a>
   b8f40:	f102 0c14 	add.w	ip, r2, #20
   b8f44:	f1c2 020c 	rsb	r2, r2, #12
   b8f48:	fa01 f00c 	lsl.w	r0, r1, ip
   b8f4c:	fa21 f102 	lsr.w	r1, r1, r2
   b8f50:	e00c      	b.n	b8f6c <__adddf3+0x184>
   b8f52:	f102 0214 	add.w	r2, r2, #20
   b8f56:	bfd8      	it	le
   b8f58:	f1c2 0c20 	rsble	ip, r2, #32
   b8f5c:	fa01 f102 	lsl.w	r1, r1, r2
   b8f60:	fa20 fc0c 	lsr.w	ip, r0, ip
   b8f64:	bfdc      	itt	le
   b8f66:	ea41 010c 	orrle.w	r1, r1, ip
   b8f6a:	4090      	lslle	r0, r2
   b8f6c:	1ae4      	subs	r4, r4, r3
   b8f6e:	bfa2      	ittt	ge
   b8f70:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   b8f74:	4329      	orrge	r1, r5
   b8f76:	bd30      	popge	{r4, r5, pc}
   b8f78:	ea6f 0404 	mvn.w	r4, r4
   b8f7c:	3c1f      	subs	r4, #31
   b8f7e:	da1c      	bge.n	b8fba <__adddf3+0x1d2>
   b8f80:	340c      	adds	r4, #12
   b8f82:	dc0e      	bgt.n	b8fa2 <__adddf3+0x1ba>
   b8f84:	f104 0414 	add.w	r4, r4, #20
   b8f88:	f1c4 0220 	rsb	r2, r4, #32
   b8f8c:	fa20 f004 	lsr.w	r0, r0, r4
   b8f90:	fa01 f302 	lsl.w	r3, r1, r2
   b8f94:	ea40 0003 	orr.w	r0, r0, r3
   b8f98:	fa21 f304 	lsr.w	r3, r1, r4
   b8f9c:	ea45 0103 	orr.w	r1, r5, r3
   b8fa0:	bd30      	pop	{r4, r5, pc}
   b8fa2:	f1c4 040c 	rsb	r4, r4, #12
   b8fa6:	f1c4 0220 	rsb	r2, r4, #32
   b8faa:	fa20 f002 	lsr.w	r0, r0, r2
   b8fae:	fa01 f304 	lsl.w	r3, r1, r4
   b8fb2:	ea40 0003 	orr.w	r0, r0, r3
   b8fb6:	4629      	mov	r1, r5
   b8fb8:	bd30      	pop	{r4, r5, pc}
   b8fba:	fa21 f004 	lsr.w	r0, r1, r4
   b8fbe:	4629      	mov	r1, r5
   b8fc0:	bd30      	pop	{r4, r5, pc}
   b8fc2:	f094 0f00 	teq	r4, #0
   b8fc6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   b8fca:	bf06      	itte	eq
   b8fcc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   b8fd0:	3401      	addeq	r4, #1
   b8fd2:	3d01      	subne	r5, #1
   b8fd4:	e74e      	b.n	b8e74 <__adddf3+0x8c>
   b8fd6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b8fda:	bf18      	it	ne
   b8fdc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b8fe0:	d029      	beq.n	b9036 <__adddf3+0x24e>
   b8fe2:	ea94 0f05 	teq	r4, r5
   b8fe6:	bf08      	it	eq
   b8fe8:	ea90 0f02 	teqeq	r0, r2
   b8fec:	d005      	beq.n	b8ffa <__adddf3+0x212>
   b8fee:	ea54 0c00 	orrs.w	ip, r4, r0
   b8ff2:	bf04      	itt	eq
   b8ff4:	4619      	moveq	r1, r3
   b8ff6:	4610      	moveq	r0, r2
   b8ff8:	bd30      	pop	{r4, r5, pc}
   b8ffa:	ea91 0f03 	teq	r1, r3
   b8ffe:	bf1e      	ittt	ne
   b9000:	2100      	movne	r1, #0
   b9002:	2000      	movne	r0, #0
   b9004:	bd30      	popne	{r4, r5, pc}
   b9006:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   b900a:	d105      	bne.n	b9018 <__adddf3+0x230>
   b900c:	0040      	lsls	r0, r0, #1
   b900e:	4149      	adcs	r1, r1
   b9010:	bf28      	it	cs
   b9012:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   b9016:	bd30      	pop	{r4, r5, pc}
   b9018:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   b901c:	bf3c      	itt	cc
   b901e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   b9022:	bd30      	popcc	{r4, r5, pc}
   b9024:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b9028:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   b902c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b9030:	f04f 0000 	mov.w	r0, #0
   b9034:	bd30      	pop	{r4, r5, pc}
   b9036:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b903a:	bf1a      	itte	ne
   b903c:	4619      	movne	r1, r3
   b903e:	4610      	movne	r0, r2
   b9040:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   b9044:	bf1c      	itt	ne
   b9046:	460b      	movne	r3, r1
   b9048:	4602      	movne	r2, r0
   b904a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b904e:	bf06      	itte	eq
   b9050:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   b9054:	ea91 0f03 	teqeq	r1, r3
   b9058:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   b905c:	bd30      	pop	{r4, r5, pc}
   b905e:	bf00      	nop

000b9060 <__aeabi_ui2d>:
   b9060:	f090 0f00 	teq	r0, #0
   b9064:	bf04      	itt	eq
   b9066:	2100      	moveq	r1, #0
   b9068:	4770      	bxeq	lr
   b906a:	b530      	push	{r4, r5, lr}
   b906c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b9070:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b9074:	f04f 0500 	mov.w	r5, #0
   b9078:	f04f 0100 	mov.w	r1, #0
   b907c:	e750      	b.n	b8f20 <__adddf3+0x138>
   b907e:	bf00      	nop

000b9080 <__aeabi_i2d>:
   b9080:	f090 0f00 	teq	r0, #0
   b9084:	bf04      	itt	eq
   b9086:	2100      	moveq	r1, #0
   b9088:	4770      	bxeq	lr
   b908a:	b530      	push	{r4, r5, lr}
   b908c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b9090:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b9094:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   b9098:	bf48      	it	mi
   b909a:	4240      	negmi	r0, r0
   b909c:	f04f 0100 	mov.w	r1, #0
   b90a0:	e73e      	b.n	b8f20 <__adddf3+0x138>
   b90a2:	bf00      	nop

000b90a4 <__aeabi_f2d>:
   b90a4:	0042      	lsls	r2, r0, #1
   b90a6:	ea4f 01e2 	mov.w	r1, r2, asr #3
   b90aa:	ea4f 0131 	mov.w	r1, r1, rrx
   b90ae:	ea4f 7002 	mov.w	r0, r2, lsl #28
   b90b2:	bf1f      	itttt	ne
   b90b4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   b90b8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   b90bc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   b90c0:	4770      	bxne	lr
   b90c2:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   b90c6:	bf08      	it	eq
   b90c8:	4770      	bxeq	lr
   b90ca:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   b90ce:	bf04      	itt	eq
   b90d0:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   b90d4:	4770      	bxeq	lr
   b90d6:	b530      	push	{r4, r5, lr}
   b90d8:	f44f 7460 	mov.w	r4, #896	; 0x380
   b90dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b90e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b90e4:	e71c      	b.n	b8f20 <__adddf3+0x138>
   b90e6:	bf00      	nop

000b90e8 <__aeabi_ul2d>:
   b90e8:	ea50 0201 	orrs.w	r2, r0, r1
   b90ec:	bf08      	it	eq
   b90ee:	4770      	bxeq	lr
   b90f0:	b530      	push	{r4, r5, lr}
   b90f2:	f04f 0500 	mov.w	r5, #0
   b90f6:	e00a      	b.n	b910e <__aeabi_l2d+0x16>

000b90f8 <__aeabi_l2d>:
   b90f8:	ea50 0201 	orrs.w	r2, r0, r1
   b90fc:	bf08      	it	eq
   b90fe:	4770      	bxeq	lr
   b9100:	b530      	push	{r4, r5, lr}
   b9102:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   b9106:	d502      	bpl.n	b910e <__aeabi_l2d+0x16>
   b9108:	4240      	negs	r0, r0
   b910a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b910e:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b9112:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b9116:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   b911a:	f43f aed8 	beq.w	b8ece <__adddf3+0xe6>
   b911e:	f04f 0203 	mov.w	r2, #3
   b9122:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b9126:	bf18      	it	ne
   b9128:	3203      	addne	r2, #3
   b912a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b912e:	bf18      	it	ne
   b9130:	3203      	addne	r2, #3
   b9132:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   b9136:	f1c2 0320 	rsb	r3, r2, #32
   b913a:	fa00 fc03 	lsl.w	ip, r0, r3
   b913e:	fa20 f002 	lsr.w	r0, r0, r2
   b9142:	fa01 fe03 	lsl.w	lr, r1, r3
   b9146:	ea40 000e 	orr.w	r0, r0, lr
   b914a:	fa21 f102 	lsr.w	r1, r1, r2
   b914e:	4414      	add	r4, r2
   b9150:	e6bd      	b.n	b8ece <__adddf3+0xe6>
   b9152:	bf00      	nop

000b9154 <atexit>:
   b9154:	2300      	movs	r3, #0
   b9156:	4601      	mov	r1, r0
   b9158:	461a      	mov	r2, r3
   b915a:	4618      	mov	r0, r3
   b915c:	f000 b96a 	b.w	b9434 <__register_exitproc>

000b9160 <isprint>:
   b9160:	4b02      	ldr	r3, [pc, #8]	; (b916c <isprint+0xc>)
   b9162:	4418      	add	r0, r3
   b9164:	7840      	ldrb	r0, [r0, #1]
   b9166:	f000 0097 	and.w	r0, r0, #151	; 0x97
   b916a:	4770      	bx	lr
   b916c:	000ba4b9 	.word	0x000ba4b9

000b9170 <memcpy>:
   b9170:	440a      	add	r2, r1
   b9172:	4291      	cmp	r1, r2
   b9174:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   b9178:	d100      	bne.n	b917c <memcpy+0xc>
   b917a:	4770      	bx	lr
   b917c:	b510      	push	{r4, lr}
   b917e:	f811 4b01 	ldrb.w	r4, [r1], #1
   b9182:	f803 4f01 	strb.w	r4, [r3, #1]!
   b9186:	4291      	cmp	r1, r2
   b9188:	d1f9      	bne.n	b917e <memcpy+0xe>
   b918a:	bd10      	pop	{r4, pc}

000b918c <memmove>:
   b918c:	4288      	cmp	r0, r1
   b918e:	b510      	push	{r4, lr}
   b9190:	eb01 0402 	add.w	r4, r1, r2
   b9194:	d902      	bls.n	b919c <memmove+0x10>
   b9196:	4284      	cmp	r4, r0
   b9198:	4623      	mov	r3, r4
   b919a:	d807      	bhi.n	b91ac <memmove+0x20>
   b919c:	1e43      	subs	r3, r0, #1
   b919e:	42a1      	cmp	r1, r4
   b91a0:	d008      	beq.n	b91b4 <memmove+0x28>
   b91a2:	f811 2b01 	ldrb.w	r2, [r1], #1
   b91a6:	f803 2f01 	strb.w	r2, [r3, #1]!
   b91aa:	e7f8      	b.n	b919e <memmove+0x12>
   b91ac:	4402      	add	r2, r0
   b91ae:	4601      	mov	r1, r0
   b91b0:	428a      	cmp	r2, r1
   b91b2:	d100      	bne.n	b91b6 <memmove+0x2a>
   b91b4:	bd10      	pop	{r4, pc}
   b91b6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   b91ba:	f802 4d01 	strb.w	r4, [r2, #-1]!
   b91be:	e7f7      	b.n	b91b0 <memmove+0x24>

000b91c0 <memset>:
   b91c0:	4402      	add	r2, r0
   b91c2:	4603      	mov	r3, r0
   b91c4:	4293      	cmp	r3, r2
   b91c6:	d100      	bne.n	b91ca <memset+0xa>
   b91c8:	4770      	bx	lr
   b91ca:	f803 1b01 	strb.w	r1, [r3], #1
   b91ce:	e7f9      	b.n	b91c4 <memset+0x4>

000b91d0 <srand>:
   b91d0:	b538      	push	{r3, r4, r5, lr}
   b91d2:	4b10      	ldr	r3, [pc, #64]	; (b9214 <srand+0x44>)
   b91d4:	681d      	ldr	r5, [r3, #0]
   b91d6:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b91d8:	4604      	mov	r4, r0
   b91da:	b9b3      	cbnz	r3, b920a <srand+0x3a>
   b91dc:	2018      	movs	r0, #24
   b91de:	f7fd fb75 	bl	b68cc <malloc>
   b91e2:	4602      	mov	r2, r0
   b91e4:	63a8      	str	r0, [r5, #56]	; 0x38
   b91e6:	b920      	cbnz	r0, b91f2 <srand+0x22>
   b91e8:	4b0b      	ldr	r3, [pc, #44]	; (b9218 <srand+0x48>)
   b91ea:	480c      	ldr	r0, [pc, #48]	; (b921c <srand+0x4c>)
   b91ec:	2142      	movs	r1, #66	; 0x42
   b91ee:	f7fd fbbd 	bl	b696c <__assert_func>
   b91f2:	490b      	ldr	r1, [pc, #44]	; (b9220 <srand+0x50>)
   b91f4:	4b0b      	ldr	r3, [pc, #44]	; (b9224 <srand+0x54>)
   b91f6:	e9c0 1300 	strd	r1, r3, [r0]
   b91fa:	4b0b      	ldr	r3, [pc, #44]	; (b9228 <srand+0x58>)
   b91fc:	6083      	str	r3, [r0, #8]
   b91fe:	230b      	movs	r3, #11
   b9200:	8183      	strh	r3, [r0, #12]
   b9202:	2100      	movs	r1, #0
   b9204:	2001      	movs	r0, #1
   b9206:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b920a:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b920c:	2200      	movs	r2, #0
   b920e:	611c      	str	r4, [r3, #16]
   b9210:	615a      	str	r2, [r3, #20]
   b9212:	bd38      	pop	{r3, r4, r5, pc}
   b9214:	2003b718 	.word	0x2003b718
   b9218:	000ba449 	.word	0x000ba449
   b921c:	000ba460 	.word	0x000ba460
   b9220:	abcd330e 	.word	0xabcd330e
   b9224:	e66d1234 	.word	0xe66d1234
   b9228:	0005deec 	.word	0x0005deec

000b922c <strchr>:
   b922c:	b2c9      	uxtb	r1, r1
   b922e:	4603      	mov	r3, r0
   b9230:	f810 2b01 	ldrb.w	r2, [r0], #1
   b9234:	b11a      	cbz	r2, b923e <strchr+0x12>
   b9236:	428a      	cmp	r2, r1
   b9238:	d1f9      	bne.n	b922e <strchr+0x2>
   b923a:	4618      	mov	r0, r3
   b923c:	4770      	bx	lr
   b923e:	2900      	cmp	r1, #0
   b9240:	bf18      	it	ne
   b9242:	2300      	movne	r3, #0
   b9244:	e7f9      	b.n	b923a <strchr+0xe>

000b9246 <strchrnul>:
   b9246:	b510      	push	{r4, lr}
   b9248:	4604      	mov	r4, r0
   b924a:	f7ff ffef 	bl	b922c <strchr>
   b924e:	b918      	cbnz	r0, b9258 <strchrnul+0x12>
   b9250:	4620      	mov	r0, r4
   b9252:	f000 f832 	bl	b92ba <strlen>
   b9256:	4420      	add	r0, r4
   b9258:	bd10      	pop	{r4, pc}

000b925a <strcmp>:
   b925a:	f810 2b01 	ldrb.w	r2, [r0], #1
   b925e:	f811 3b01 	ldrb.w	r3, [r1], #1
   b9262:	2a01      	cmp	r2, #1
   b9264:	bf28      	it	cs
   b9266:	429a      	cmpcs	r2, r3
   b9268:	d0f7      	beq.n	b925a <strcmp>
   b926a:	1ad0      	subs	r0, r2, r3
   b926c:	4770      	bx	lr

000b926e <strcpy>:
   b926e:	4603      	mov	r3, r0
   b9270:	f811 2b01 	ldrb.w	r2, [r1], #1
   b9274:	f803 2b01 	strb.w	r2, [r3], #1
   b9278:	2a00      	cmp	r2, #0
   b927a:	d1f9      	bne.n	b9270 <strcpy+0x2>
   b927c:	4770      	bx	lr
	...

000b9280 <strdup>:
   b9280:	4b02      	ldr	r3, [pc, #8]	; (b928c <strdup+0xc>)
   b9282:	4601      	mov	r1, r0
   b9284:	6818      	ldr	r0, [r3, #0]
   b9286:	f000 b803 	b.w	b9290 <_strdup_r>
   b928a:	bf00      	nop
   b928c:	2003b718 	.word	0x2003b718

000b9290 <_strdup_r>:
   b9290:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b9292:	4604      	mov	r4, r0
   b9294:	4608      	mov	r0, r1
   b9296:	460d      	mov	r5, r1
   b9298:	f000 f80f 	bl	b92ba <strlen>
   b929c:	1c42      	adds	r2, r0, #1
   b929e:	4611      	mov	r1, r2
   b92a0:	4620      	mov	r0, r4
   b92a2:	9201      	str	r2, [sp, #4]
   b92a4:	f7fd fb52 	bl	b694c <_malloc_r>
   b92a8:	4604      	mov	r4, r0
   b92aa:	b118      	cbz	r0, b92b4 <_strdup_r+0x24>
   b92ac:	9a01      	ldr	r2, [sp, #4]
   b92ae:	4629      	mov	r1, r5
   b92b0:	f7ff ff5e 	bl	b9170 <memcpy>
   b92b4:	4620      	mov	r0, r4
   b92b6:	b003      	add	sp, #12
   b92b8:	bd30      	pop	{r4, r5, pc}

000b92ba <strlen>:
   b92ba:	4603      	mov	r3, r0
   b92bc:	f813 2b01 	ldrb.w	r2, [r3], #1
   b92c0:	2a00      	cmp	r2, #0
   b92c2:	d1fb      	bne.n	b92bc <strlen+0x2>
   b92c4:	1a18      	subs	r0, r3, r0
   b92c6:	3801      	subs	r0, #1
   b92c8:	4770      	bx	lr

000b92ca <strncmp>:
   b92ca:	b510      	push	{r4, lr}
   b92cc:	b17a      	cbz	r2, b92ee <strncmp+0x24>
   b92ce:	4603      	mov	r3, r0
   b92d0:	3901      	subs	r1, #1
   b92d2:	1884      	adds	r4, r0, r2
   b92d4:	f813 0b01 	ldrb.w	r0, [r3], #1
   b92d8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   b92dc:	4290      	cmp	r0, r2
   b92de:	d101      	bne.n	b92e4 <strncmp+0x1a>
   b92e0:	42a3      	cmp	r3, r4
   b92e2:	d101      	bne.n	b92e8 <strncmp+0x1e>
   b92e4:	1a80      	subs	r0, r0, r2
   b92e6:	bd10      	pop	{r4, pc}
   b92e8:	2800      	cmp	r0, #0
   b92ea:	d1f3      	bne.n	b92d4 <strncmp+0xa>
   b92ec:	e7fa      	b.n	b92e4 <strncmp+0x1a>
   b92ee:	4610      	mov	r0, r2
   b92f0:	e7f9      	b.n	b92e6 <strncmp+0x1c>

000b92f2 <strrchr>:
   b92f2:	b538      	push	{r3, r4, r5, lr}
   b92f4:	4603      	mov	r3, r0
   b92f6:	460c      	mov	r4, r1
   b92f8:	b969      	cbnz	r1, b9316 <strrchr+0x24>
   b92fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b92fe:	f7ff bf95 	b.w	b922c <strchr>
   b9302:	1c43      	adds	r3, r0, #1
   b9304:	4605      	mov	r5, r0
   b9306:	4621      	mov	r1, r4
   b9308:	4618      	mov	r0, r3
   b930a:	f7ff ff8f 	bl	b922c <strchr>
   b930e:	2800      	cmp	r0, #0
   b9310:	d1f7      	bne.n	b9302 <strrchr+0x10>
   b9312:	4628      	mov	r0, r5
   b9314:	bd38      	pop	{r3, r4, r5, pc}
   b9316:	2500      	movs	r5, #0
   b9318:	e7f5      	b.n	b9306 <strrchr+0x14>
	...

000b931c <_strtol_l.constprop.0>:
   b931c:	2b01      	cmp	r3, #1
   b931e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b9322:	d001      	beq.n	b9328 <_strtol_l.constprop.0+0xc>
   b9324:	2b24      	cmp	r3, #36	; 0x24
   b9326:	d906      	bls.n	b9336 <_strtol_l.constprop.0+0x1a>
   b9328:	f7fd fb18 	bl	b695c <__errno>
   b932c:	2316      	movs	r3, #22
   b932e:	6003      	str	r3, [r0, #0]
   b9330:	2000      	movs	r0, #0
   b9332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b9336:	f8df c0e4 	ldr.w	ip, [pc, #228]	; b941c <_strtol_l.constprop.0+0x100>
   b933a:	460d      	mov	r5, r1
   b933c:	462e      	mov	r6, r5
   b933e:	f815 4b01 	ldrb.w	r4, [r5], #1
   b9342:	f814 700c 	ldrb.w	r7, [r4, ip]
   b9346:	f017 0708 	ands.w	r7, r7, #8
   b934a:	d1f7      	bne.n	b933c <_strtol_l.constprop.0+0x20>
   b934c:	2c2d      	cmp	r4, #45	; 0x2d
   b934e:	d132      	bne.n	b93b6 <_strtol_l.constprop.0+0x9a>
   b9350:	782c      	ldrb	r4, [r5, #0]
   b9352:	2701      	movs	r7, #1
   b9354:	1cb5      	adds	r5, r6, #2
   b9356:	2b00      	cmp	r3, #0
   b9358:	d05b      	beq.n	b9412 <_strtol_l.constprop.0+0xf6>
   b935a:	2b10      	cmp	r3, #16
   b935c:	d109      	bne.n	b9372 <_strtol_l.constprop.0+0x56>
   b935e:	2c30      	cmp	r4, #48	; 0x30
   b9360:	d107      	bne.n	b9372 <_strtol_l.constprop.0+0x56>
   b9362:	782c      	ldrb	r4, [r5, #0]
   b9364:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   b9368:	2c58      	cmp	r4, #88	; 0x58
   b936a:	d14d      	bne.n	b9408 <_strtol_l.constprop.0+0xec>
   b936c:	786c      	ldrb	r4, [r5, #1]
   b936e:	2310      	movs	r3, #16
   b9370:	3502      	adds	r5, #2
   b9372:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   b9376:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   b937a:	f04f 0c00 	mov.w	ip, #0
   b937e:	fbb8 f9f3 	udiv	r9, r8, r3
   b9382:	4666      	mov	r6, ip
   b9384:	fb03 8a19 	mls	sl, r3, r9, r8
   b9388:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   b938c:	f1be 0f09 	cmp.w	lr, #9
   b9390:	d816      	bhi.n	b93c0 <_strtol_l.constprop.0+0xa4>
   b9392:	4674      	mov	r4, lr
   b9394:	42a3      	cmp	r3, r4
   b9396:	dd24      	ble.n	b93e2 <_strtol_l.constprop.0+0xc6>
   b9398:	f1bc 0f00 	cmp.w	ip, #0
   b939c:	db1e      	blt.n	b93dc <_strtol_l.constprop.0+0xc0>
   b939e:	45b1      	cmp	r9, r6
   b93a0:	d31c      	bcc.n	b93dc <_strtol_l.constprop.0+0xc0>
   b93a2:	d101      	bne.n	b93a8 <_strtol_l.constprop.0+0x8c>
   b93a4:	45a2      	cmp	sl, r4
   b93a6:	db19      	blt.n	b93dc <_strtol_l.constprop.0+0xc0>
   b93a8:	fb06 4603 	mla	r6, r6, r3, r4
   b93ac:	f04f 0c01 	mov.w	ip, #1
   b93b0:	f815 4b01 	ldrb.w	r4, [r5], #1
   b93b4:	e7e8      	b.n	b9388 <_strtol_l.constprop.0+0x6c>
   b93b6:	2c2b      	cmp	r4, #43	; 0x2b
   b93b8:	bf04      	itt	eq
   b93ba:	782c      	ldrbeq	r4, [r5, #0]
   b93bc:	1cb5      	addeq	r5, r6, #2
   b93be:	e7ca      	b.n	b9356 <_strtol_l.constprop.0+0x3a>
   b93c0:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   b93c4:	f1be 0f19 	cmp.w	lr, #25
   b93c8:	d801      	bhi.n	b93ce <_strtol_l.constprop.0+0xb2>
   b93ca:	3c37      	subs	r4, #55	; 0x37
   b93cc:	e7e2      	b.n	b9394 <_strtol_l.constprop.0+0x78>
   b93ce:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   b93d2:	f1be 0f19 	cmp.w	lr, #25
   b93d6:	d804      	bhi.n	b93e2 <_strtol_l.constprop.0+0xc6>
   b93d8:	3c57      	subs	r4, #87	; 0x57
   b93da:	e7db      	b.n	b9394 <_strtol_l.constprop.0+0x78>
   b93dc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   b93e0:	e7e6      	b.n	b93b0 <_strtol_l.constprop.0+0x94>
   b93e2:	f1bc 0f00 	cmp.w	ip, #0
   b93e6:	da05      	bge.n	b93f4 <_strtol_l.constprop.0+0xd8>
   b93e8:	2322      	movs	r3, #34	; 0x22
   b93ea:	6003      	str	r3, [r0, #0]
   b93ec:	4646      	mov	r6, r8
   b93ee:	b942      	cbnz	r2, b9402 <_strtol_l.constprop.0+0xe6>
   b93f0:	4630      	mov	r0, r6
   b93f2:	e79e      	b.n	b9332 <_strtol_l.constprop.0+0x16>
   b93f4:	b107      	cbz	r7, b93f8 <_strtol_l.constprop.0+0xdc>
   b93f6:	4276      	negs	r6, r6
   b93f8:	2a00      	cmp	r2, #0
   b93fa:	d0f9      	beq.n	b93f0 <_strtol_l.constprop.0+0xd4>
   b93fc:	f1bc 0f00 	cmp.w	ip, #0
   b9400:	d000      	beq.n	b9404 <_strtol_l.constprop.0+0xe8>
   b9402:	1e69      	subs	r1, r5, #1
   b9404:	6011      	str	r1, [r2, #0]
   b9406:	e7f3      	b.n	b93f0 <_strtol_l.constprop.0+0xd4>
   b9408:	2430      	movs	r4, #48	; 0x30
   b940a:	2b00      	cmp	r3, #0
   b940c:	d1b1      	bne.n	b9372 <_strtol_l.constprop.0+0x56>
   b940e:	2308      	movs	r3, #8
   b9410:	e7af      	b.n	b9372 <_strtol_l.constprop.0+0x56>
   b9412:	2c30      	cmp	r4, #48	; 0x30
   b9414:	d0a5      	beq.n	b9362 <_strtol_l.constprop.0+0x46>
   b9416:	230a      	movs	r3, #10
   b9418:	e7ab      	b.n	b9372 <_strtol_l.constprop.0+0x56>
   b941a:	bf00      	nop
   b941c:	000ba4ba 	.word	0x000ba4ba

000b9420 <strtol>:
   b9420:	4613      	mov	r3, r2
   b9422:	460a      	mov	r2, r1
   b9424:	4601      	mov	r1, r0
   b9426:	4802      	ldr	r0, [pc, #8]	; (b9430 <strtol+0x10>)
   b9428:	6800      	ldr	r0, [r0, #0]
   b942a:	f7ff bf77 	b.w	b931c <_strtol_l.constprop.0>
   b942e:	bf00      	nop
   b9430:	2003b718 	.word	0x2003b718

000b9434 <__register_exitproc>:
   b9434:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b9438:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b94f4 <__register_exitproc+0xc0>
   b943c:	4606      	mov	r6, r0
   b943e:	f8d8 0000 	ldr.w	r0, [r8]
   b9442:	461f      	mov	r7, r3
   b9444:	460d      	mov	r5, r1
   b9446:	4691      	mov	r9, r2
   b9448:	f000 f856 	bl	b94f8 <__retarget_lock_acquire_recursive>
   b944c:	4b25      	ldr	r3, [pc, #148]	; (b94e4 <__register_exitproc+0xb0>)
   b944e:	681c      	ldr	r4, [r3, #0]
   b9450:	b934      	cbnz	r4, b9460 <__register_exitproc+0x2c>
   b9452:	4c25      	ldr	r4, [pc, #148]	; (b94e8 <__register_exitproc+0xb4>)
   b9454:	601c      	str	r4, [r3, #0]
   b9456:	4b25      	ldr	r3, [pc, #148]	; (b94ec <__register_exitproc+0xb8>)
   b9458:	b113      	cbz	r3, b9460 <__register_exitproc+0x2c>
   b945a:	681b      	ldr	r3, [r3, #0]
   b945c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b9460:	6863      	ldr	r3, [r4, #4]
   b9462:	2b1f      	cmp	r3, #31
   b9464:	dd07      	ble.n	b9476 <__register_exitproc+0x42>
   b9466:	f8d8 0000 	ldr.w	r0, [r8]
   b946a:	f000 f847 	bl	b94fc <__retarget_lock_release_recursive>
   b946e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b9472:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b9476:	b34e      	cbz	r6, b94cc <__register_exitproc+0x98>
   b9478:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b947c:	b988      	cbnz	r0, b94a2 <__register_exitproc+0x6e>
   b947e:	4b1c      	ldr	r3, [pc, #112]	; (b94f0 <__register_exitproc+0xbc>)
   b9480:	b923      	cbnz	r3, b948c <__register_exitproc+0x58>
   b9482:	f8d8 0000 	ldr.w	r0, [r8]
   b9486:	f000 f838 	bl	b94fa <__retarget_lock_release>
   b948a:	e7f0      	b.n	b946e <__register_exitproc+0x3a>
   b948c:	f44f 7084 	mov.w	r0, #264	; 0x108
   b9490:	f7fd fa1c 	bl	b68cc <malloc>
   b9494:	2800      	cmp	r0, #0
   b9496:	d0f4      	beq.n	b9482 <__register_exitproc+0x4e>
   b9498:	2300      	movs	r3, #0
   b949a:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b949e:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b94a2:	6863      	ldr	r3, [r4, #4]
   b94a4:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b94a8:	2201      	movs	r2, #1
   b94aa:	409a      	lsls	r2, r3
   b94ac:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b94b0:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b94b4:	4313      	orrs	r3, r2
   b94b6:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b94ba:	2e02      	cmp	r6, #2
   b94bc:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b94c0:	bf02      	ittt	eq
   b94c2:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b94c6:	4313      	orreq	r3, r2
   b94c8:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b94cc:	6863      	ldr	r3, [r4, #4]
   b94ce:	f8d8 0000 	ldr.w	r0, [r8]
   b94d2:	1c5a      	adds	r2, r3, #1
   b94d4:	3302      	adds	r3, #2
   b94d6:	6062      	str	r2, [r4, #4]
   b94d8:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b94dc:	f000 f80e 	bl	b94fc <__retarget_lock_release_recursive>
   b94e0:	2000      	movs	r0, #0
   b94e2:	e7c6      	b.n	b9472 <__register_exitproc+0x3e>
   b94e4:	2003e7e8 	.word	0x2003e7e8
   b94e8:	2003e75c 	.word	0x2003e75c
   b94ec:	00000000 	.word	0x00000000
   b94f0:	000b68cd 	.word	0x000b68cd
   b94f4:	2003b77c 	.word	0x2003b77c

000b94f8 <__retarget_lock_acquire_recursive>:
   b94f8:	4770      	bx	lr

000b94fa <__retarget_lock_release>:
   b94fa:	4770      	bx	lr

000b94fc <__retarget_lock_release_recursive>:
   b94fc:	4770      	bx	lr

000b94fe <link_code_end>:
	...

000b9500 <dynalib_user>:
   b9500:	401d 000b 4059 000b 4081 000b 4085 000b     .@..Y@...@...@..
   b9510:	0000 0000 6143 6c6c 6f20 206e 7570 6572     ....Call on pure
   b9520:	7620 7269 7574 6c61 4f00 4a42 4345 0054      virtual.OBJECT.
   b9530:	7974 6570 253d 2073 7473 7261 3d74 6425     type=%s start=%d
   b9540:	6520 646e 253d 2064 6f74 656b 736e 253d      end=%d tokens=%
   b9550:	2064 202d 7325 6e00 646f 7365 7400 7079     d - %s.nodes.typ
   b9560:	0065 7270 6e69 6974 676e 7420 6b6f 6e65     e.printing token
   b9570:	0073 754f 6574 2072 626f 656a 7463 7320     s.Outer object s
   b9580:	6174 7472 253d 2064 6e65 3d64 6425 7420     tart=%d end=%d t
   b9590:	6b6f 6e65 3d73 6425 2d20 2520 0073 6574     okens=%d - %s.te
   b95a0:	7473 2520 0073 6554 7473 5400 746f 6c61     st %s.Test.Total
   b95b0:	7420 6b6f 6e65 3d73 6425 2820 3425 322e      tokens=%d (%4.2
   b95c0:	2566 2025 7566 6c6c 2029 7473 726f 6761     f%% full) storag
   b95d0:	3d65 6425 2820 3425 322e 2566 2025 7566     e=%d (%4.2f%% fu
   b95e0:	6c6c 0029 6e55 6e6b 776f 206e 6573 736e     ll).Unknown sens
   b95f0:	726f 7420 7079 2065 6e69 7020 7261 6573     or type in parse
   b9600:	6f4a 6e69 6150 6c79 616f 5664 6c61 6575     JoinPayloadValue
   b9610:	2073 6425 5500 6b6e 6f6e 6e77 7320 6e65     s %d.Unknown sen
   b9620:	6f73 2072 7974 6570 6920 206e 6170 7372     sor type in pars
   b9630:	4a65 696f 506e 7961 6f6c 6461 6156 756c     eJoinPayloadValu
   b9640:	7365 4100 656c 7472 7500 4449 6e00 646f     es.Alert.uID.nod
   b9650:	0065 6570 646e 6300 6e6f 0074 636f 4e63     e.pend.cont.occN
   b9660:	6f00 6363 0047 6f4e 6564 2520 2c64 7520     .occG.Node %d, u
   b9670:	696e 7571 4965 2044 6c25 2c75 7420 7079     niqueID %lu, typ
   b9680:	2065 6425 202c 636f 7563 6170 636e 4e79     e %d, occupancyN
   b9690:	7465 2520 2c64 6f20 6363 7075 6e61 7963     et %d, occupancy
   b96a0:	7247 736f 2073 6425 202c 6170 6c79 616f     Gross %d, payloa
   b96b0:	2064 2528 2f64 6425 252f 2f64 6425 2029     d (%d/%d/%d/%d) 
   b96c0:	6977 6874 7020 6e65 6964 676e 6120 656c     with pending ale
   b96d0:	7472 2520 2064 6e61 2064 6c61 7265 2074     rt %d and alert 
   b96e0:	6f63 746e 7865 2074 6425 4e00 646f 2065     context %d.Node 
   b96f0:	6425 202c 6e75 7169 6575 4449 2520 756c     %d, uniqueID %lu
   b9700:	202c 7974 6570 2520 2c64 7020 7961 6f6c     , type %d, paylo
   b9710:	6461 2820 6425 252f 2f64 6425 252f 2964     ad (%d/%d/%d/%d)
   b9720:	7720 7469 2068 6570 646e 6e69 2067 6c61      with pending al
   b9730:	7265 2074 6425 6120 646e 6120 656c 7472     ert %d and alert
   b9740:	6320 6e6f 6574 7478 2520 0064 6e55 6e6b      context %d.Unkn
   b9750:	776f 206e 6573 736e 726f 7420 7079 2065     own sensor type 
   b9760:	6e69 7020 6972 746e 6f4e 6564 6144 6174     in printNodeData
   b9770:	2520 0064 6e55 6e6b 776f 206e 6573 736e      %d.Unknown sens
   b9780:	726f 7420 7079 2065 6e69 7020 6972 746e     or type in print
   b9790:	6f4e 6564 6144 6174 6e00 646f 4465 7461     NodeData.nodeDat
   b97a0:	0061 6c25 0075 6f46 6e75 2064 6874 2065     a.%lu.Found the 
   b97b0:	6e75 7169 6575 4449 202c 6f6e 6564 6f20     uniqueID, node o
   b97c0:	2066 6425 4400 6469 6e20 746f 6620 6e69     f %d.Did not fin
   b97d0:	2064 6874 2065 6e75 7169 6575 4449 202c     d the uniqueID, 
   b97e0:	656e 2077 6f6e 6564 6f20 2066 6425 4300     new node of %d.C
   b97f0:	6168 676e 6e69 2067 6573 736e 726f 7420     hanging sensor t
   b9800:	7079 2065 7266 6d6f 2520 2064 6f74 2520     ype from %d to %
   b9810:	0064 6552 6f6d 6976 676e 6120 7272 7961     d.Removing array
   b9820:	6920 646e 7865 6100 7070 6e65 2064 6f63      index.append co
   b9830:	706d 656c 6574 5500 616e 6c62 2065 6f74     mplete.Unable to
   b9840:	7520 6470 7461 2065 6f74 6e20 7765 7320      update to new s
   b9850:	6e65 6f73 5472 7079 2065 6e69 7320 7465     ensorType in set
   b9860:	7954 6570 203a 6425 5500 616e 6c62 2065     Type: %d.Unable 
   b9870:	6f74 7520 6470 7461 2065 6f74 6e20 7765     to update to new
   b9880:	7320 6e65 6f73 5472 7079 2065 6e69 7320      sensorType in s
   b9890:	7465 7954 6570 5300 6174 7472 6e69 2067     etType.Starting 
   b98a0:	6574 7473 0073 6946 7372 2074 6554 7473     tests.First Test
   b98b0:	202c 6577 7720 6c69 206c 6c63 6165 2072     , we will clear 
   b98c0:	6874 2065 6f4e 6564 4420 7461 6261 7361     the Node Databas
   b98d0:	2065 6e61 2064 6f6c 6461 7420 6568 7320     e and load the s
   b98e0:	6d61 6c70 2065 6164 6174 7320 7465 4e00     ample data set.N
   b98f0:	776f 7420 6168 2074 6874 2065 6f6e 6564     ow that the node
   b9900:	6144 6174 6162 6573 6920 2073 6d65 7470     Database is empt
   b9910:	2c79 7720 2065 6977 6c6c 6c20 616f 2064     y, we will load 
   b9920:	6874 2065 6173 706d 656c 6420 7461 2061     the sample data 
   b9930:	6573 0074 227b 6f6e 6564 2273 5b3a 7b09     set.{"nodes":[.{
   b9940:	6e22 646f 2265 313a 222c 4975 2244 323a     "node":1,"uID":2
   b9950:	3136 3433 3037 3535 2c39 7422 7079 2265     613470559,"type"
   b9960:	313a 202c 7022 3a22 2c30 2220 6570 646e     :1, "p":0, "pend
   b9970:	3a22 2c30 2220 6f63 746e 3a22 7d31 092c     ":0, "cont":1},.
   b9980:	227b 6f6e 6564 3a22 2c32 7522 4449 3a22     {"node":2,"uID":
   b9990:	3132 3132 3633 3330 3234 222c 7974 6570     2121360342,"type
   b99a0:	3a22 2c31 2220 2270 303a 202c 7022 6e65     ":1, "p":0, "pen
   b99b0:	2264 303a 202c 6322 6e6f 2274 323a 2c7d     d":0, "cont":2},
   b99c0:	7b09 6e22 646f 2265 333a 222c 4975 2244     .{"node":3,"uID"
   b99d0:	323a 3131 3333 3138 3938 2c31 7422 7079     :2113381891,"typ
   b99e0:	2265 313a 202c 7022 3a22 2c30 2220 6570     e":1, "p":0, "pe
   b99f0:	646e 3a22 2c30 2220 6f63 746e 3a22 7d33     nd":0, "cont":3}
   b9a00:	092c 227b 6f6e 6564 3a22 2c34 7522 4449     ,.{"node":4,"uID
   b9a10:	3a22 3232 3232 3930 3130 3432 222c 7974     ":2222090124,"ty
   b9a20:	6570 3a22 2c31 2220 2270 303a 202c 7022     pe":1, "p":0, "p
   b9a30:	6e65 2264 303a 202c 6322 6e6f 2274 343a     end":0, "cont":4
   b9a40:	2c7d 7b09 6e22 646f 2265 353a 222c 4975     },.{"node":5,"uI
   b9a50:	2244 323a 3338 3639 3933 3136 2c30 7422     D":2839639610,"t
   b9a60:	7079 2265 313a 202c 7022 3a22 2c30 2220     ype":1, "p":0, "
   b9a70:	6570 646e 3a22 2c30 2220 6f63 746e 3a22     pend":0, "cont":
   b9a80:	7d35 092c 227b 6f6e 6564 3a22 2c36 7522     5},.{"node":6,"u
   b9a90:	4449 3a22 3539 3338 3939 3236 222c 7974     ID":95839962,"ty
   b9aa0:	6570 3a22 2c31 2220 2270 303a 202c 7022     pe":1, "p":0, "p
   b9ab0:	6e65 2264 303a 202c 6322 6e6f 2274 363a     end":0, "cont":6
   b9ac0:	2c7d 7b09 6e22 646f 2265 373a 222c 4975     },.{"node":7,"uI
   b9ad0:	2244 333a 3138 3638 3837 3433 2c31 7422     D":3818678341,"t
   b9ae0:	7079 2265 313a 202c 7022 3a22 2c30 2220     ype":1, "p":0, "
   b9af0:	6570 646e 3a22 2c30 2220 6f63 746e 3a22     pend":0, "cont":
   b9b00:	7d37 092c 227b 6f6e 6564 3a22 2c38 7522     7},.{"node":8,"u
   b9b10:	4449 3a22 3832 3432 3330 3239 3939 222c     ID":2824039299,"
   b9b20:	7974 6570 3a22 2c31 2220 2270 303a 202c     type":1, "p":0, 
   b9b30:	7022 6e65 2264 303a 202c 6322 6e6f 2274     "pend":0, "cont"
   b9b40:	383a 2c7d 7b09 6e22 646f 2265 393a 222c     :8},.{"node":9,"
   b9b50:	4975 2244 323a 3635 3431 3533 3938 2c32     uID":2561435892,
   b9b60:	7422 7079 2265 313a 202c 7022 3a22 2c30     "type":1, "p":0,
   b9b70:	2220 6570 646e 3a22 2c30 2220 6f63 746e      "pend":0, "cont
   b9b80:	3a22 7d39 092c 227b 6f6e 6564 3a22 3031     ":9},.{"node":10
   b9b90:	222c 4975 2244 333a 3336 3933 3333 3035     ,"uID":363393350
   b9ba0:	2c37 7422 7079 2265 313a 202c 7022 3a22     7,"type":1, "p":
   b9bb0:	2c30 2220 6570 646e 3a22 2c30 2220 6f63     0, "pend":0, "co
   b9bc0:	746e 3a22 3031 2c7d 7b09 6e22 646f 2265     nt":10},.{"node"
   b9bd0:	313a 2c31 7522 4449 3a22 3632 3734 3437     :11,"uID":264774
   b9be0:	3434 3431 222c 7974 6570 3a22 2c31 2220     4414,"type":1, "
   b9bf0:	2270 303a 202c 7022 6e65 2264 303a 202c     p":0, "pend":0, 
   b9c00:	6322 6e6f 2274 313a 7d31 092c 227b 6f6e     "cont":11},.{"no
   b9c10:	6564 3a22 3231 222c 4975 2244 333a 3636     de":12,"uID":366
   b9c20:	3532 3330 3535 2c34 7422 7079 2265 313a     2503554,"type":1
   b9c30:	202c 7022 3a22 2c30 2220 6570 646e 3a22     , "p":0, "pend":
   b9c40:	2c30 2220 6f63 746e 3a22 3231 2c7d 7b09     0, "cont":12},.{
   b9c50:	6e22 646f 2265 313a 2c33 7522 4449 3a22     "node":13,"uID":
   b9c60:	3532 3538 3437 3536 3532 222c 7974 6570     2585746525,"type
   b9c70:	3a22 2c31 2220 2270 303a 202c 7022 6e65     ":1, "p":0, "pen
   b9c80:	2264 303a 202c 6322 6e6f 2274 313a 7d33     d":0, "cont":13}
   b9c90:	092c 227b 6f6e 6564 3a22 3431 222c 4975     ,.{"node":14,"uI
   b9ca0:	2244 363a 3036 3132 3138 3431 222c 7974     D":660218114,"ty
   b9cb0:	6570 3a22 2c31 2220 2270 303a 202c 7022     pe":1, "p":0, "p
   b9cc0:	6e65 2264 303a 202c 6322 6e6f 2274 313a     end":0, "cont":1
   b9cd0:	7d34 7d5d 4e00 7865 2c74 7720 2065 6977     4}]}.Next, we wi
   b9ce0:	6c6c 6c20 616f 2064 6e61 2064 7473 726f     ll load and stor
   b9cf0:	2065 6874 2065 6f6e 6564 6420 7461 6261     e the node datab
   b9d00:	7361 2065 6e69 6f74 6d20 6d65 726f 0079     ase into memory.
   b9d10:	6f4e 6574 7420 6168 2074 756f 2072 534a     Note that our JS
   b9d20:	4e4f 6f20 6a62 6365 2074 6c61 6f6c 6163     ON object alloca
   b9d30:	6974 6e6f 6920 2073 3425 322e 2566 2025     tion is %4.2f%% 
   b9d40:	666f 7420 6568 6d20 6d65 726f 2079 6c61     of the memory al
   b9d50:	6f6c 6163 6574 2064 6c28 7365 2073 6874     located (less th
   b9d60:	6e61 3120 3030 2525 6920 2073 4b4f 0029     an 100%% is OK).
   b9d70:	6854 2065 6f6e 6564 7320 7274 6e69 2067     The node string 
   b9d80:	7369 203a 7325 5000 7261 6573 2064 7553     is: %s.Parsed Su
   b9d90:	6363 7365 6673 6c75 796c 5000 7261 6973     ccessfully.Parsi
   b9da0:	676e 6520 7272 726f 4600 6e69 6c61 796c     ng error.Finally
   b9db0:	202c 6577 7720 6c69 206c 6461 2064 2061     , we will add a 
   b9dc0:	656e 2077 6f6e 6564 7420 206f 6874 2065     new node to the 
   b9dd0:	6164 6174 6162 6573 6120 646e 7020 6972     database and pri
   b9de0:	746e 7420 6568 6420 7461 6261 7361 0065     nt the database.
   b9df0:	6854 2065 6f6e 6564 6e20 6d75 6562 2072     The node number 
   b9e00:	7369 203a 6425 4e00 776f 7720 2065 6977     is: %d.Now we wi
   b9e10:	6c6c 6320 6168 676e 2065 6874 2065 7974     ll change the ty
   b9e20:	6570 6f20 2066 6874 2065 6f6e 6564 6120     pe of the node a
   b9e30:	646e 7020 6972 746e 7420 6568 6420 7461     nd print the dat
   b9e40:	6261 7361 0065 6854 2065 7563 7272 6e65     abase.The curren
   b9e50:	2074 7974 6570 6620 726f 6e20 646f 2065     t type for node 
   b9e60:	756e 626d 7265 2520 2064 7369 203a 6425     number %d is: %d
   b9e70:	5400 6568 6e20 7765 7420 7079 2065 6f66     .The new type fo
   b9e80:	2072 6f6e 6564 6e20 6d75 6562 2072 6425     r node number %d
   b9e90:	6920 3a73 2520 0064 6f4e 2077 6577 7720      is: %d.Now we w
   b9ea0:	6c69 206c 6863 6e61 6567 7420 6568 7420     ill change the t
   b9eb0:	7079 2065 6877 6369 2068 6977 6c6c 6120     ype which will a
   b9ec0:	746c 7265 6920 7374 7320 7274 6375 7574     lter its structu
   b9ed0:	6572 6120 646e 7020 6972 746e 7420 6568     re and print the
   b9ee0:	6420 7461 6261 7361 0065 6f4e 2077 6577      database.Now we
   b9ef0:	7720 6c69 206c 6863 6e61 6567 7420 6568      will change the
   b9f00:	7420 7079 2065 6e6f 6120 6e20 746f 2065      type on a note 
   b9f10:	6874 7461 6920 2073 6e69 7420 6568 6d20     that is in the m
   b9f20:	6469 6c64 2065 666f 7420 6568 7020 6361     iddle of the pac
   b9f30:	206b 6e61 2064 6874 6e65 6320 6168 676e     k and then chang
   b9f40:	2065 7469 6220 6361 2e6b 0020 6946 696e     e it back. .Fini
   b9f50:	6873 6465 7420 7365 0074 0000               shed test...

000b9f5c <_ZTVN5spark10LogHandlerE>:
	...
   b9f6c:	40a1 000b 40c9 000b                         .@...@..

000b9f74 <_ZTVN5spark16SerialLogHandlerE>:
	...
   b9f7c:	4125 000b 4159 000b 822d 000b 40cb 000b     %A..YA..-....@..

000b9f8c <_ZTV16JsonParserStaticILj3072ELj550EE>:
	...
   b9f94:	40d5 000b 40e9 000b 755c 3025 5834 0000     .@...@..\u%04X..

000b9fa4 <_ZTV10JsonBuffer>:
	...
   b9fac:	4ea1 000b 4ebd 000b                         .N...N..

000b9fb4 <_ZTV10JsonParser>:
	...
   b9fbc:	4f21 000b 4f45 000b                         !O..EO..

000b9fc4 <_ZTV10JsonWriter>:
	...
   b9fcc:	4ed1 000b 4ee5 000b                         .N...N..

000b9fd4 <_ZTV12JsonModifier>:
	...
   b9fdc:	4ef9 000b 4f0d 000b 6f6e 2074 6176 696c     .N...O..not vali
   b9fec:	0064 7563 7272 6e65 2074 6164 6174 6920     d.current data i
   b9ffc:	2073 7325 6e00 646f 4965 2044 6164 6174     s %s.nodeID data
   ba00c:	6920 2073 7325 2500 2a2e 0073 6f4e 6564      is %s.%.*s.Node
   ba01c:	4420 7461 6261 7361 2065 6562 6f66 6572      Database before
   ba02c:	7320 7465 003a 6f4e 6564 4420 7461 6261      set:.Node Datab
   ba03c:	7361 2065 6661 6574 2072 6573 3a74 7b00     ase after set:.{
   ba04c:	6e22 646f 7365 3a22 5d5b 007d 6552 6573     "nodes":[]}.Rese
   ba05c:	7474 6769 4e20 646f 4965 2044 6f63 666e     ttig NodeID conf
   ba06c:	6769 7420 3a6f 2520 0073 6f4e 6564 4449     ig to: %s.NodeID
   ba07c:	6420 7461 2061 7369 6e20 776f 2520 0073      data is now %s.
   ba08c:	7245 7361 6e69 2067 5246 4d41 7220 6765     Erasing FRAM reg
   ba09c:	6f69 006e 6e49 7469 6169 696c 697a 676e     ion.Initializing
   ba0ac:	6420 7461 0061 0000                          data...

000ba0b4 <_ZTV8MB85RC64>:
	...
   ba0bc:	5b9d 000b 5bb1 000b 5f71 000b 6007 000b     .[...[..q_...`..
   ba0cc:	6089 000b                                   .`..

000ba0d0 <_ZTV10nodeIDData>:
	...
   ba0d8:	5d09 000b 5c27 000b 5bff 000b 613f 000b     .]..'\...[..?a..
   ba0e8:	6167 000b 5bc5 000b 5eb1 000b 5c79 000b     ga...[...^..y\..
   ba0f8:	5c8d 000b                                   .\..

000ba0fc <_ZTV6MB85RC>:
	...
   ba104:	5f31 000b 5f33 000b 5f71 000b 6007 000b     1_..3_..q_...`..
   ba114:	6089 000b 6176 696c 6164 6974 676e 6420     .`..validating d
   ba124:	7461 2061 6973 657a 253d 0064 6f67 3a74     ata size=%d.got:
   ba134:	6d20 6761 6369 253d 3830 2078 6576 7372      magic=%08x vers
   ba144:	6f69 3d6e 3025 7834 7320 7a69 3d65 3025     ion=%04x size=%0
   ba154:	7834 6820 7361 3d68 3025 7838 6500 7078     4x hash=%08x.exp
   ba164:	203a 616d 6967 3d63 3025 7838 7620 7265     : magic=%08x ver
   ba174:	6973 6e6f 253d 3430 2078 6973 657a 253d     sion=%04x size=%
   ba184:	3430 2078 6168 6873 253d 3830 0078 6173     04x hash=%08x.sa
   ba194:	6976 676e 6420 7461 2061 6973 657a 253d     ving data size=%
   ba1a4:	0064 0000                                   d...

000ba1a8 <_ZTVN15StorageHelperRK18PersistentDataBaseE>:
	...
   ba1b0:	6139 000b 61d1 000b 6459 000b 613f 000b     9a...a..Yd..?a..
   ba1c0:	6167 000b 6355 000b 642d 000b               ga..Uc..-d..

000ba1cc <_ZTVN5spark13CellularClassE>:
	...
   ba1d4:	6aab 000b 6aa1 000b 6a97 000b 6a4d 000b     .j...j...j..Mj..
   ba1e4:	6a8b 000b 6a7f 000b 8585 000b 858d 000b     .j...j..........
   ba1f4:	6a73 000b 6a6b 000b 6a61 000b 6a57 000b     sj..kj..aj..Wj..
   ba204:	85bd 000b                                   ....

000ba208 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   ba210:	6ae5 000b 6aeb 000b 6b29 000b 6af9 000b     .j...j..)k...j..
   ba220:	6ae7 000b                                   .j..

000ba224 <_ZTVN5spark13EthernetClassE>:
	...
   ba22c:	7073 000b 7069 000b 705f 000b 7055 000b     sp..ip.._p..Up..
   ba23c:	7049 000b 703d 000b 8585 000b 858d 000b     Ip..=p..........
   ba24c:	7031 000b 7029 000b 701f 000b 7015 000b     1p..)p...p...p..
   ba25c:	85bd 000b                                   ....

000ba260 <_ZTV7TwoWire>:
	...
   ba268:	7091 000b 70db 000b 70b3 000b 7093 000b     .p...p...p...p..
   ba278:	70bb 000b 70c3 000b 70cb 000b 70d3 000b     .p...p...p...p..

000ba288 <_ZTV9IPAddress>:
	...
   ba290:	71cd 000b 71bd 000b 71bf 000b 7525 7500     .q...q...q..%u.u
   ba2a0:	3025 7834 6200 7561 0064 6553 6972 6c61     %04x.baud.Serial
   ba2b0:	5300 7265 6169 316c 4a00 4f53 534e 7274     .Serial1.JSONStr
   ba2c0:	6165 4c6d 676f 6148 646e 656c 0072 7061     eamLogHandler.ap
   ba2d0:	0070 3025 3031 2075 5d00 0020 202c 2800     p.%010u .] ., .(
   ba2e0:	3a29 0020 5b20 6300 646f 2065 203d 2500     ): . [.code = .%
   ba2f0:	0069 6564 6174 6c69 2073 203d 0d00 000a     i.details = ....
   ba300:	006d 0066 6e6c 6600 006e 6f63 6564 6400     m.f.ln.fn.code.d
   ba310:	7465 6961 006c 0000                         etail...

000ba318 <_ZTVN5spark16JSONStreamWriterE>:
	...
   ba320:	7679 000b 769f 000b 765d 000b 72db 000b     yv...v..]v...r..

000ba330 <_ZTVN5spark16StreamLogHandlerE>:
	...
   ba338:	7ad5 000b 7aed 000b 822d 000b 40cb 000b     .z...z..-....@..

000ba348 <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
   ba350:	7b01 000b 7b15 000b 83d1 000b 7665 000b     .{...{......ev..

000ba360 <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
   ba368:	7677 000b 76ad 000b 8191 000b 7667 000b     wv...v......gv..

000ba378 <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
   ba380:	7675 000b 76bb 000b 7a3d 000b 76dd 000b     uv...v..=z...v..

000ba390 <_ZTVN5spark12NetworkClassE>:
	...
   ba398:	8545 000b 854f 000b 8559 000b 8563 000b     E...O...Y...c...
   ba3a8:	856d 000b 8579 000b 8585 000b 858d 000b     m...y...........
   ba3b8:	8595 000b 85a1 000b 85a9 000b 85b3 000b     ................
   ba3c8:	85bd 000b 5925 252d 2d6d 6425 2554 3a48     ....%Y-%m-%dT%H:
   ba3d8:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

000ba3e8 <_ZTV11USARTSerial>:
	...
   ba3f0:	89cd 000b 8a39 000b 8a11 000b 86a9 000b     ....9...........
   ba400:	89e1 000b 89fd 000b 89ef 000b 8a0b 000b     ................
   ba410:	89cf 000b 89d3 000b                         ........

000ba418 <_ZTV9USBSerial>:
	...
   ba420:	8a8b 000b 8af3 000b 8ac9 000b 86a9 000b     ................
   ba430:	8abb 000b 8a8d 000b 8a9d 000b 8aed 000b     ................
   ba440:	8aad 000b 8a85 000b                         ........

000ba448 <_ZSt7nothrow>:
   ba448:	5200 4545 544e 6d20 6c61 6f6c 2063 7573     .REENT malloc su
   ba458:	6363 6565 6564 0064 742f 706d 6a2f 6e65     cceeded./tmp/jen
   ba468:	696b 736e 472d 4343 312d 2d30 6970 6570     kins-GCC-10-pipe
   ba478:	696c 656e 342d 5f38 3032 3032 3131 3432     line-48_20201124
   ba488:	315f 3036 3136 3038 3336 2f39 7273 2f63     _1606180639/src/
   ba498:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
   ba4a8:	6362 732f 6474 696c 2f62 6172 646e 632e     bc/stdlib/rand.c
	...

000ba4b9 <_ctype_>:
   ba4b9:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   ba4c9:	2020 2020 2020 2020 2020 2020 2020 2020                     
   ba4d9:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   ba4e9:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   ba4f9:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   ba509:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   ba519:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   ba529:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   ba539:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000ba5ba <link_const_variable_data_end>:
	...

000ba5bc <link_constructors_location>:
   ba5bc:	000b47f5 	.word	0x000b47f5
   ba5c0:	000b5f01 	.word	0x000b5f01
   ba5c4:	000b6a3d 	.word	0x000b6a3d
   ba5c8:	000b6ab5 	.word	0x000b6ab5
   ba5cc:	000b707d 	.word	0x000b707d
   ba5d0:	000b821d 	.word	0x000b821d
   ba5d4:	000b8695 	.word	0x000b8695
   ba5d8:	000b87b5 	.word	0x000b87b5
   ba5dc:	000b8995 	.word	0x000b8995
   ba5e0:	000b89b9 	.word	0x000b89b9

000ba5e4 <link_constructors_end>:
	...
