
/Users/chipmc/Documents/Maker/Particle/Utilities/JSON-Parser-Test/target/4.2.0/boron/JSON-Parser-Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00006754  000b401c  000b401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000ba770  000ba770  0000a770  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000ba794  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000088  2003b6f8  000ba798  0001b6f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00003070  2003b780  2003b780  0002b780  2**2
                  ALLOC
  7 .module_info_suffix 00000028  000ba820  000ba820  0002a820  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000ba848  000ba848  0002a848  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   0014bf5a  00000000  00000000  0002a84c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0001593e  00000000  00000000  001767a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    00047994  00000000  00000000  0018c0e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00003350  00000000  00000000  001d3a78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 0000c6d8  00000000  00000000  001d6dc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003a6b7  00000000  00000000  001e34a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00049059  00000000  00000000  0021db57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0013efb1  00000000  00000000  00266bb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  00009828  00000000  00000000  003a5b64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b401c:	4809      	ldr	r0, [pc, #36]	; (b4044 <module_user_pre_init+0x28>)
   b401e:	490a      	ldr	r1, [pc, #40]	; (b4048 <module_user_pre_init+0x2c>)
   b4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4024:	d005      	beq.n	b4032 <module_user_pre_init+0x16>
   b4026:	4a09      	ldr	r2, [pc, #36]	; (b404c <module_user_pre_init+0x30>)
   b4028:	4282      	cmp	r2, r0
   b402a:	d002      	beq.n	b4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b402c:	1a12      	subs	r2, r2, r0
   b402e:	f005 f8c9 	bl	b91c4 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4032:	4807      	ldr	r0, [pc, #28]	; (b4050 <module_user_pre_init+0x34>)
   b4034:	4a07      	ldr	r2, [pc, #28]	; (b4054 <module_user_pre_init+0x38>)
   b4036:	2100      	movs	r1, #0
   b4038:	1a12      	subs	r2, r2, r0
   b403a:	f005 f8eb 	bl	b9214 <memset>
    return &link_global_data_start;
}
   b403e:	4801      	ldr	r0, [pc, #4]	; (b4044 <module_user_pre_init+0x28>)
   b4040:	bd08      	pop	{r3, pc}
   b4042:	bf00      	nop
   b4044:	2003b6f8 	.word	0x2003b6f8
   b4048:	000ba798 	.word	0x000ba798
   b404c:	2003b780 	.word	0x2003b780
   b4050:	2003b780 	.word	0x2003b780
   b4054:	2003e7ed 	.word	0x2003e7ed

000b4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405a:	4e07      	ldr	r6, [pc, #28]	; (b4078 <module_user_init+0x20>)
   b405c:	4c07      	ldr	r4, [pc, #28]	; (b407c <module_user_init+0x24>)
    module_user_init_hook();
   b405e:	f004 fe2d 	bl	b8cbc <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4062:	1ba4      	subs	r4, r4, r6
   b4064:	08a4      	lsrs	r4, r4, #2
   b4066:	2500      	movs	r5, #0
   b4068:	42ac      	cmp	r4, r5
   b406a:	d100      	bne.n	b406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b406e:	f856 3b04 	ldr.w	r3, [r6], #4
   b4072:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4074:	3501      	adds	r5, #1
   b4076:	e7f7      	b.n	b4068 <module_user_init+0x10>
   b4078:	000ba740 	.word	0x000ba740
   b407c:	000ba768 	.word	0x000ba768

000b4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4080:	f000 bdf4 	b.w	b4c6c <setup>

000b4084 <module_user_loop>:
}

void module_user_loop() {
   b4084:	b508      	push	{r3, lr}
    loop();
   b4086:	f000 f8ad 	bl	b41e4 <loop>
    _post_loop();
}
   b408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b408e:	f004 bdcd 	b.w	b8c2c <_post_loop>

000b4092 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4092:	f002 bc45 	b.w	b6920 <malloc>

000b4096 <_Znaj>:
   b4096:	f002 bc43 	b.w	b6920 <malloc>

000b409a <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b409a:	f002 bc49 	b.w	b6930 <free>
	...

000b40a0 <__cxa_pure_virtual>:
int __wrap_printf(const char* fmt, ...) {
    return -1;
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   b40a0:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   b40a2:	4a03      	ldr	r2, [pc, #12]	; (b40b0 <__cxa_pure_virtual+0x10>)
   b40a4:	4903      	ldr	r1, [pc, #12]	; (b40b4 <__cxa_pure_virtual+0x14>)
   b40a6:	200c      	movs	r0, #12
   b40a8:	f002 fb5e 	bl	b6768 <panic_>
  while (1);
   b40ac:	e7fe      	b.n	b40ac <__cxa_pure_virtual+0xc>
   b40ae:	bf00      	nop
   b40b0:	000b6549 	.word	0x000b6549
   b40b4:	000b9568 	.word	0x000b9568

000b40b8 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40b8:	7800      	ldrb	r0, [r0, #0]
   b40ba:	fab0 f080 	clz	r0, r0
   b40be:	0940      	lsrs	r0, r0, #5
   b40c0:	4770      	bx	lr

000b40c2 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40c2:	2301      	movs	r3, #1
   b40c4:	7003      	strb	r3, [r0, #0]
   b40c6:	4770      	bx	lr

000b40c8 <_ZN5spark10LogHandler5writeEPKcj>:
    }
}

inline void spark::LogHandler::write(const char *data, size_t size) {
    // Default implementation does nothing
}
   b40c8:	4770      	bx	lr

000b40ca <_ZN5spark16StreamLogHandler5writeEPKcj>:
inline Print* spark::StreamLogHandler::stream() const {
    return stream_;
}

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
   b40ca:	6a00      	ldr	r0, [r0, #32]
   b40cc:	6803      	ldr	r3, [r0, #0]
   b40ce:	68db      	ldr	r3, [r3, #12]
   b40d0:	4718      	bx	r3
	...

000b40d4 <_ZN16JsonParserStaticILj3072ELj550EED1Ev>:
 *
 * @param MAX_TOKENS The maximum number of tokens you expect. Each object has a token and two for each key/value pair.
 * Each array is a token and one for each element in the array.
 */
template <size_t BUFFER_SIZE, size_t MAX_TOKENS>
class JsonParserStatic : public JsonParser {
   b40d4:	b510      	push	{r4, lr}
   b40d6:	4b03      	ldr	r3, [pc, #12]	; (b40e4 <_ZN16JsonParserStaticILj3072ELj550EED1Ev+0x10>)
   b40d8:	6003      	str	r3, [r0, #0]
   b40da:	4604      	mov	r4, r0
   b40dc:	f000 ff4a 	bl	b4f74 <_ZN10JsonParserD1Ev>
   b40e0:	4620      	mov	r0, r4
   b40e2:	bd10      	pop	{r4, pc}
   b40e4:	000ba11c 	.word	0x000ba11c

000b40e8 <_ZN16JsonParserStaticILj3072ELj550EED0Ev>:
   b40e8:	b510      	push	{r4, lr}
   b40ea:	4604      	mov	r4, r0
   b40ec:	f7ff fff2 	bl	b40d4 <_ZN16JsonParserStaticILj3072ELj550EED1Ev>
   b40f0:	4620      	mov	r0, r4
   b40f2:	f642 618c 	movw	r1, #11916	; 0x2e8c
   b40f6:	f7ff ffd0 	bl	b409a <_ZdlPvj>
   b40fa:	4620      	mov	r0, r4
   b40fc:	bd10      	pop	{r4, pc}

000b40fe <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>:
	bool getValueByKey(const JsonParserGeneratorRK::jsmntok_t *container, const char *name, T &result) const {
   b40fe:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b4100:	461d      	mov	r5, r3
		if (getValueTokenByKey(container, name, value)) {
   b4102:	ab01      	add	r3, sp, #4
	bool getValueByKey(const JsonParserGeneratorRK::jsmntok_t *container, const char *name, T &result) const {
   b4104:	4604      	mov	r4, r0
		if (getValueTokenByKey(container, name, value)) {
   b4106:	f001 f91b 	bl	b5340 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
   b410a:	b120      	cbz	r0, b4116 <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0+0x18>
			return getTokenValue(value, result);
   b410c:	9901      	ldr	r1, [sp, #4]
   b410e:	462a      	mov	r2, r5
   b4110:	4620      	mov	r0, r4
   b4112:	f001 f827 	bl	b5164 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tERi>
	}
   b4116:	b003      	add	sp, #12
   b4118:	bd30      	pop	{r4, r5, pc}

000b411a <_ZN10JsonWriter11startObjectEv.isra.0>:
	void init();

	/**
	 * @brief Start a new JSON object. Make sure you finish it with finishObjectOrArray()
	 */
	bool startObject() { return startObjectOrArray('{', '}'); };
   b411a:	227d      	movs	r2, #125	; 0x7d
   b411c:	217b      	movs	r1, #123	; 0x7b
   b411e:	f001 ba3e 	b.w	b559e <_ZN10JsonWriter18startObjectOrArrayEcc>
	...

000b4124 <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
   b4124:	4b0a      	ldr	r3, [pc, #40]	; (b4150 <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
   b4126:	b510      	push	{r4, lr}
   b4128:	4604      	mov	r4, r0
   b412a:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
   b412c:	f003 fc1c 	bl	b7968 <_ZN5spark10LogManager8instanceEv>
   b4130:	4621      	mov	r1, r4
   b4132:	f003 fe54 	bl	b7dde <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
   b4136:	f004 fd31 	bl	b8b9c <_Z16_fetch_usbserialv>
   b413a:	f004 fd23 	bl	b8b84 <_ZN9USBSerial3endEv>
    virtual ~LogHandler() = default;
   b413e:	4620      	mov	r0, r4
   b4140:	4b04      	ldr	r3, [pc, #16]	; (b4154 <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
   b4142:	f840 3b04 	str.w	r3, [r0], #4
   b4146:	f003 fce5 	bl	b7b14 <_ZN5spark6detail9LogFilterD1Ev>
    }
   b414a:	4620      	mov	r0, r4
   b414c:	bd10      	pop	{r4, pc}
   b414e:	bf00      	nop
   b4150:	000ba104 	.word	0x000ba104
   b4154:	000ba0ec 	.word	0x000ba0ec

000b4158 <_ZN5spark16SerialLogHandlerD0Ev>:
    virtual ~SerialLogHandler() {
   b4158:	b510      	push	{r4, lr}
   b415a:	4604      	mov	r4, r0
    }
   b415c:	f7ff ffe2 	bl	b4124 <_ZN5spark16SerialLogHandlerD1Ev>
   b4160:	4620      	mov	r0, r4
   b4162:	2124      	movs	r1, #36	; 0x24
   b4164:	f7ff ff99 	bl	b409a <_ZdlPvj>
   b4168:	4620      	mov	r0, r4
   b416a:	bd10      	pop	{r4, pc}

000b416c <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   b416c:	b40e      	push	{r1, r2, r3}
   b416e:	b500      	push	{lr}
   b4170:	b08c      	sub	sp, #48	; 0x30
   b4172:	aa0d      	add	r2, sp, #52	; 0x34
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   b4174:	f04f 0c20 	mov.w	ip, #32
inline void spark::Logger::info(const char *fmt, ...) const {
   b4178:	f852 1b04 	ldr.w	r1, [r2], #4
    va_start(args, fmt);
   b417c:	9203      	str	r2, [sp, #12]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b417e:	e9cd 1200 	strd	r1, r2, [sp]
    attr.flags = 0;
   b4182:	2300      	movs	r3, #0
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b4184:	6801      	ldr	r1, [r0, #0]
   b4186:	aa04      	add	r2, sp, #16
   b4188:	201e      	movs	r0, #30
    attr.flags = 0;
   b418a:	e9cd c304 	strd	ip, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b418e:	f002 faf3 	bl	b6778 <log_message_v>
}
   b4192:	b00c      	add	sp, #48	; 0x30
   b4194:	f85d eb04 	ldr.w	lr, [sp], #4
   b4198:	b003      	add	sp, #12
   b419a:	4770      	bx	lr

000b419c <_Z10printTokenR10JsonParserPKN21JsonParserGeneratorRK9jsmntok_tE.part.0>:
	}

	Log.info("Total tokens=%d (%4.2f%% full) storage=%d (%4.2f%% full)", tokenCount, (100*((float)tokenCount/(float)jp.getMaxTokens())), storageSize, (100*((float)storageSize/(float)jp.getBufferLen())));
}

void printToken(JsonParser &jp, const JsonParserGeneratorRK::jsmntok_t *tok) {
   b419c:	b5f0      	push	{r4, r5, r6, r7, lr}
		typeName = "UNDEFINED";
		break;

	case JsonParserGeneratorRK::JSMN_OBJECT:
		typeName = "OBJECT";
		memcpy(tempBuf, jp.getBuffer() + tok->start, tok->end - tok->start);
   b419e:	e9d1 5601 	ldrd	r5, r6, [r1, #4]
void printToken(JsonParser &jp, const JsonParserGeneratorRK::jsmntok_t *tok) {
   b41a2:	f2ad 4d14 	subw	sp, sp, #1044	; 0x414
   b41a6:	460c      	mov	r4, r1
		memcpy(tempBuf, jp.getBuffer() + tok->start, tok->end - tok->start);
   b41a8:	6841      	ldr	r1, [r0, #4]
   b41aa:	ab04      	add	r3, sp, #16
   b41ac:	1b77      	subs	r7, r6, r5
   b41ae:	463a      	mov	r2, r7
   b41b0:	4429      	add	r1, r5
   b41b2:	4618      	mov	r0, r3
   b41b4:	f005 f806 	bl	b91c4 <memcpy>
		tempBuf[tok->end - tok->start] = 0;
		Log.info("type=%s start=%d end=%d tokens=%d - %s", typeName, tok->start, tok->end, tok->size, tempBuf);
   b41b8:	68e3      	ldr	r3, [r4, #12]
   b41ba:	4907      	ldr	r1, [pc, #28]	; (b41d8 <_Z10printTokenR10JsonParserPKN21JsonParserGeneratorRK9jsmntok_tE.part.0+0x3c>)
		tempBuf[tok->end - tok->start] = 0;
   b41bc:	2200      	movs	r2, #0
   b41be:	55c2      	strb	r2, [r0, r7]
		Log.info("type=%s start=%d end=%d tokens=%d - %s", typeName, tok->start, tok->end, tok->size, tempBuf);
   b41c0:	e9cd 6300 	strd	r6, r3, [sp]
   b41c4:	9002      	str	r0, [sp, #8]
   b41c6:	4a05      	ldr	r2, [pc, #20]	; (b41dc <_Z10printTokenR10JsonParserPKN21JsonParserGeneratorRK9jsmntok_tE.part.0+0x40>)
   b41c8:	4805      	ldr	r0, [pc, #20]	; (b41e0 <_Z10printTokenR10JsonParserPKN21JsonParserGeneratorRK9jsmntok_tE.part.0+0x44>)
   b41ca:	462b      	mov	r3, r5
   b41cc:	f7ff ffce 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
	case JsonParserGeneratorRK::JSMN_PRIMITIVE:
		typeName = "PRIMITIVE";
		break;
	}

}
   b41d0:	f20d 4d14 	addw	sp, sp, #1044	; 0x414
   b41d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b41d6:	bf00      	nop
   b41d8:	000b9584 	.word	0x000b9584
   b41dc:	000b957d 	.word	0x000b957d
   b41e0:	2003e6b0 	.word	0x2003e6b0

000b41e4 <loop>:
void loop() {}
   b41e4:	4770      	bx	lr
	...

000b41e8 <_Z7getTypei>:
byte getType(int nodeNumber) {
   b41e8:	b513      	push	{r0, r1, r4, lr}
   b41ea:	4604      	mov	r4, r0
	jp.getValueTokenByKey(jp.getOuterObject(), "nodes", nodesArrayContainer);
   b41ec:	480c      	ldr	r0, [pc, #48]	; (b4220 <_Z7getTypei+0x38>)
   b41ee:	f000 ff3e 	bl	b506e <_ZNK10JsonParser14getOuterObjectEv>
   b41f2:	4a0c      	ldr	r2, [pc, #48]	; (b4224 <_Z7getTypei+0x3c>)
   b41f4:	4601      	mov	r1, r0
   b41f6:	ab01      	add	r3, sp, #4
   b41f8:	4809      	ldr	r0, [pc, #36]	; (b4220 <_Z7getTypei+0x38>)
   b41fa:	f001 f8a1 	bl	b5340 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
	nodeObjectContainer = jp.getTokenByIndex(nodesArrayContainer, nodeNumber-1);
   b41fe:	9901      	ldr	r1, [sp, #4]
   b4200:	4807      	ldr	r0, [pc, #28]	; (b4220 <_Z7getTypei+0x38>)
   b4202:	1e62      	subs	r2, r4, #1
   b4204:	f000 ff55 	bl	b50b2 <_ZNK10JsonParser15getTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj>
	if(nodeObjectContainer == NULL) return false;								// Ran out of entries
   b4208:	b138      	cbz	r0, b421a <_Z7getTypei+0x32>
	jp.getValueByKey(nodeObjectContainer, "type", type);
   b420a:	4601      	mov	r1, r0
   b420c:	4a06      	ldr	r2, [pc, #24]	; (b4228 <_Z7getTypei+0x40>)
   b420e:	4804      	ldr	r0, [pc, #16]	; (b4220 <_Z7getTypei+0x38>)
   b4210:	466b      	mov	r3, sp
   b4212:	f7ff ff74 	bl	b40fe <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
	return type;
   b4216:	f89d 0000 	ldrb.w	r0, [sp]
}
   b421a:	b002      	add	sp, #8
   b421c:	bd10      	pop	{r4, pc}
   b421e:	bf00      	nop
   b4220:	2003b7b4 	.word	0x2003b7b4
   b4224:	000b95ab 	.word	0x000b95ab
   b4228:	000b95b1 	.word	0x000b95b1

000b422c <_Z10printTokenR10JsonParserPKN21JsonParserGeneratorRK9jsmntok_tE>:
	switch(tok->type) {
   b422c:	780b      	ldrb	r3, [r1, #0]
   b422e:	2b01      	cmp	r3, #1
   b4230:	d101      	bne.n	b4236 <_Z10printTokenR10JsonParserPKN21JsonParserGeneratorRK9jsmntok_tE+0xa>
   b4232:	f7ff bfb3 	b.w	b419c <_Z10printTokenR10JsonParserPKN21JsonParserGeneratorRK9jsmntok_tE.part.0>
}
   b4236:	4770      	bx	lr

000b4238 <_Z14decompressDatahPhS_>:
        bitOffset += bitSizes[i];
    }
    return compressedData;
}

void decompressData(uint8_t compressedData, uint8_t data[], uint8_t bitSizes[]) {
   b4238:	b5f0      	push	{r4, r5, r6, r7, lr}
   b423a:	3901      	subs	r1, #1
   b423c:	1e55      	subs	r5, r2, #1
    uint8_t bitOffset = 0;
   b423e:	2400      	movs	r4, #0
   b4240:	3203      	adds	r2, #3
    for (uint8_t i = 0; i < 4; ++i) {
        data[i] = (compressedData >> bitOffset) & ((1 << bitSizes[i]) - 1);
   b4242:	2701      	movs	r7, #1
   b4244:	f815 3f01 	ldrb.w	r3, [r5, #1]!
   b4248:	fa07 f303 	lsl.w	r3, r7, r3
   b424c:	fa40 f604 	asr.w	r6, r0, r4
   b4250:	3b01      	subs	r3, #1
   b4252:	4033      	ands	r3, r6
   b4254:	f801 3f01 	strb.w	r3, [r1, #1]!
        bitOffset += bitSizes[i];
   b4258:	782b      	ldrb	r3, [r5, #0]
    for (uint8_t i = 0; i < 4; ++i) {
   b425a:	42aa      	cmp	r2, r5
        bitOffset += bitSizes[i];
   b425c:	441c      	add	r4, r3
   b425e:	b2e4      	uxtb	r4, r4
    for (uint8_t i = 0; i < 4; ++i) {
   b4260:	d1f0      	bne.n	b4244 <_Z14decompressDatahPhS_+0xc>
    }
}
   b4262:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b4264 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   b4264:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   b4266:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   b4268:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   b426a:	b17c      	cbz	r4, b428c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   b426c:	6863      	ldr	r3, [r4, #4]
   b426e:	3b01      	subs	r3, #1
   b4270:	6063      	str	r3, [r4, #4]
   b4272:	b95b      	cbnz	r3, b428c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   b4274:	6823      	ldr	r3, [r4, #0]
   b4276:	4620      	mov	r0, r4
   b4278:	689b      	ldr	r3, [r3, #8]
   b427a:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b427c:	68a3      	ldr	r3, [r4, #8]
   b427e:	3b01      	subs	r3, #1
   b4280:	60a3      	str	r3, [r4, #8]
   b4282:	b91b      	cbnz	r3, b428c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   b4284:	6823      	ldr	r3, [r4, #0]
   b4286:	4620      	mov	r0, r4
   b4288:	68db      	ldr	r3, [r3, #12]
   b428a:	4798      	blx	r3
	  _M_pi->_M_release();
      }
   b428c:	4628      	mov	r0, r5
   b428e:	bd38      	pop	{r3, r4, r5, pc}

000b4290 <_Z11printTokensR10JsonParserb>:
void printTokens(JsonParser &jp, bool verbose) {
   b4290:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b4294:	ed2d 8b02 	vpush	{d8}
   b4298:	4604      	mov	r4, r0
   b429a:	f2ad 4d24 	subw	sp, sp, #1060	; 0x424
	if (verbose) Log.info("printing tokens");
   b429e:	460e      	mov	r6, r1
   b42a0:	b119      	cbz	r1, b42aa <_Z11printTokensR10JsonParserb+0x1a>
   b42a2:	493b      	ldr	r1, [pc, #236]	; (b4390 <_Z11printTokensR10JsonParserb+0x100>)
   b42a4:	483b      	ldr	r0, [pc, #236]	; (b4394 <_Z11printTokensR10JsonParserb+0x104>)
   b42a6:	f7ff ff61 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
	JsonParserGeneratorRK::jsmntok_t *getTokens() { return tokens; };
   b42aa:	e9d4 5905 	ldrd	r5, r9, [r4, #20]
	memcpy(tempBuf, jp.getBuffer() + tok->start, tok->end - tok->start);
   b42ae:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
   b42b2:	6861      	ldr	r1, [r4, #4]
   b42b4:	1ad2      	subs	r2, r2, r3
   b42b6:	4419      	add	r1, r3
   b42b8:	a808      	add	r0, sp, #32
   b42ba:	f004 ff83 	bl	b91c4 <memcpy>
	tempBuf[tok->end - tok->start] = 0;
   b42be:	e9d5 2301 	ldrd	r2, r3, [r5, #4]
   b42c2:	a908      	add	r1, sp, #32
   b42c4:	1a9b      	subs	r3, r3, r2
   b42c6:	2200      	movs	r2, #0
   b42c8:	54ca      	strb	r2, [r1, r3]
	storageSize += tok->end;
   b42ca:	f8d5 8008 	ldr.w	r8, [r5, #8]
	if (verbose) Log.info("Outer object start=%d end=%d tokens=%d - %s", tok->start, tok->end, tok->size, tempBuf);
   b42ce:	b146      	cbz	r6, b42e2 <_Z11printTokensR10JsonParserb+0x52>
   b42d0:	9101      	str	r1, [sp, #4]
   b42d2:	68eb      	ldr	r3, [r5, #12]
   b42d4:	9300      	str	r3, [sp, #0]
   b42d6:	686a      	ldr	r2, [r5, #4]
   b42d8:	492f      	ldr	r1, [pc, #188]	; (b4398 <_Z11printTokensR10JsonParserb+0x108>)
   b42da:	482e      	ldr	r0, [pc, #184]	; (b4394 <_Z11printTokensR10JsonParserb+0x104>)
   b42dc:	4643      	mov	r3, r8
   b42de:	f7ff ff45 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
	sniprintf(tempBuf, sizeof(tempBuf), "test %s", charlike);
   b42e2:	4b2e      	ldr	r3, [pc, #184]	; (b439c <_Z11printTokensR10JsonParserb+0x10c>)
   b42e4:	4a2e      	ldr	r2, [pc, #184]	; (b43a0 <_Z11printTokensR10JsonParserb+0x110>)
   b42e6:	f44f 6180 	mov.w	r1, #1024	; 0x400
   b42ea:	a808      	add	r0, sp, #32
   b42ec:	f002 fb40 	bl	b6970 <sniprintf>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   b42f0:	4b2c      	ldr	r3, [pc, #176]	; (b43a4 <_Z11printTokensR10JsonParserb+0x114>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b42f2:	492d      	ldr	r1, [pc, #180]	; (b43a8 <_Z11printTokensR10JsonParserb+0x118>)
   b42f4:	781b      	ldrb	r3, [r3, #0]
   b42f6:	f88d 3000 	strb.w	r3, [sp]
   b42fa:	aa08      	add	r2, sp, #32
   b42fc:	233c      	movs	r3, #60	; 0x3c
   b42fe:	a806      	add	r0, sp, #24
   b4300:	f002 fd46 	bl	b6d90 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   b4304:	a807      	add	r0, sp, #28
   b4306:	f7ff ffad 	bl	b4264 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b430a:	6965      	ldr	r5, [r4, #20]
	int tokenCount = 0;
   b430c:	2700      	movs	r7, #0
	for(JsonParserGeneratorRK::jsmntok_t *tok = jp.getTokens(); tok < tokensEnd; tok++) {
   b430e:	454d      	cmp	r5, r9
   b4310:	d20b      	bcs.n	b432a <_Z11printTokensR10JsonParserb+0x9a>
		if (tok->start > 0) {
   b4312:	686b      	ldr	r3, [r5, #4]
   b4314:	2b00      	cmp	r3, #0
			tokenCount += tok->size;
   b4316:	bfc4      	itt	gt
   b4318:	68eb      	ldrgt	r3, [r5, #12]
   b431a:	18ff      	addgt	r7, r7, r3
		if (verbose) {
   b431c:	b11e      	cbz	r6, b4326 <_Z11printTokensR10JsonParserb+0x96>
			printToken(jp, tok);
   b431e:	4629      	mov	r1, r5
   b4320:	4620      	mov	r0, r4
   b4322:	f7ff ff83 	bl	b422c <_Z10printTokenR10JsonParserPKN21JsonParserGeneratorRK9jsmntok_tE>
	for(JsonParserGeneratorRK::jsmntok_t *tok = jp.getTokens(); tok < tokensEnd; tok++) {
   b4326:	3510      	adds	r5, #16
   b4328:	e7f1      	b.n	b430e <_Z11printTokensR10JsonParserb+0x7e>
	Log.info("Total tokens=%d (%4.2f%% full) storage=%d (%4.2f%% full)", tokenCount, (100*((float)tokenCount/(float)jp.getMaxTokens())), storageSize, (100*((float)storageSize/(float)jp.getBufferLen())));
   b432a:	ee07 8a90 	vmov	s15, r8
   b432e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
   b4332:	edd4 7a02 	vldr	s15, [r4, #8]
   b4336:	ed9f 8a1d 	vldr	s16, [pc, #116]	; b43ac <_Z11printTokensR10JsonParserb+0x11c>
   b433a:	eef8 7a67 	vcvt.f32.u32	s15, s15
   b433e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
   b4342:	ee67 7a08 	vmul.f32	s15, s14, s16
   b4346:	ee17 0a90 	vmov	r0, s15
   b434a:	f004 fed5 	bl	b90f8 <__aeabi_f2d>
   b434e:	ee07 7a90 	vmov	s15, r7
   b4352:	eef8 6ae7 	vcvt.f32.s32	s13, s15
   b4356:	edd4 7a07 	vldr	s15, [r4, #28]
   b435a:	f8cd 8008 	str.w	r8, [sp, #8]
   b435e:	eef8 7a67 	vcvt.f32.u32	s15, s15
   b4362:	e9cd 0104 	strd	r0, r1, [sp, #16]
   b4366:	ee86 7aa7 	vdiv.f32	s14, s13, s15
   b436a:	ee67 7a08 	vmul.f32	s15, s14, s16
   b436e:	ee17 0a90 	vmov	r0, s15
   b4372:	f004 fec1 	bl	b90f8 <__aeabi_f2d>
   b4376:	463a      	mov	r2, r7
   b4378:	e9cd 0100 	strd	r0, r1, [sp]
   b437c:	490c      	ldr	r1, [pc, #48]	; (b43b0 <_Z11printTokensR10JsonParserb+0x120>)
   b437e:	4805      	ldr	r0, [pc, #20]	; (b4394 <_Z11printTokensR10JsonParserb+0x104>)
   b4380:	f7ff fef4 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
}
   b4384:	f20d 4d24 	addw	sp, sp, #1060	; 0x424
   b4388:	ecbd 8b02 	vpop	{d8}
   b438c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b4390:	000b95b6 	.word	0x000b95b6
   b4394:	2003e6b0 	.word	0x2003e6b0
   b4398:	000b95c6 	.word	0x000b95c6
   b439c:	000ba0de 	.word	0x000ba0de
   b43a0:	000b95f2 	.word	0x000b95f2
   b43a4:	2003b7b0 	.word	0x2003b7b0
   b43a8:	000b95fa 	.word	0x000b95fa
   b43ac:	42c80000 	.word	0x42c80000
   b43b0:	000b95ff 	.word	0x000b95ff

000b43b4 <_Z22parseJoinPayloadValueshhRhS_S_S_>:
bool parseJoinPayloadValues(uint8_t sensorType, uint8_t compressedJoinPayload, uint8_t& payload1, uint8_t& payload2, uint8_t& payload3, uint8_t& payload4) {
   b43b4:	b570      	push	{r4, r5, r6, lr}
   b43b6:	4604      	mov	r4, r0
   b43b8:	b086      	sub	sp, #24
   b43ba:	461d      	mov	r5, r3
    switch (sensorType) {
   b43bc:	2c13      	cmp	r4, #19
    uint8_t data[4] = {0};
   b43be:	f04f 0300 	mov.w	r3, #0
    uint8_t bitSizes[4] = {0};
   b43c2:	e9cd 3302 	strd	r3, r3, [sp, #8]
bool parseJoinPayloadValues(uint8_t sensorType, uint8_t compressedJoinPayload, uint8_t& payload1, uint8_t& payload2, uint8_t& payload3, uint8_t& payload4) {
   b43c6:	4608      	mov	r0, r1
   b43c8:	4616      	mov	r6, r2
    switch (sensorType) {
   b43ca:	d81c      	bhi.n	b4406 <_Z22parseJoinPayloadValueshhRhS_S_S_+0x52>
   b43cc:	2c09      	cmp	r4, #9
   b43ce:	d83c      	bhi.n	b444a <_Z22parseJoinPayloadValueshhRhS_S_S_+0x96>
   b43d0:	1e63      	subs	r3, r4, #1
   b43d2:	2b08      	cmp	r3, #8
   b43d4:	d922      	bls.n	b441c <_Z22parseJoinPayloadValueshhRhS_S_S_+0x68>
            Log.info("Unknown sensor type in parseJoinPayloadValues %d", sensorType);
   b43d6:	4921      	ldr	r1, [pc, #132]	; (b445c <_Z22parseJoinPayloadValueshhRhS_S_S_+0xa8>)
   b43d8:	4821      	ldr	r0, [pc, #132]	; (b4460 <_Z22parseJoinPayloadValueshhRhS_S_S_+0xac>)
   b43da:	4622      	mov	r2, r4
   b43dc:	f7ff fec6 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   b43e0:	f002 fa26 	bl	b6830 <spark_cloud_flag_connected>
            if (Particle.connected()) Particle.publish("Alert", "Unknown sensor type in parseJoinPayloadValues", PRIVATE);
   b43e4:	b168      	cbz	r0, b4402 <_Z22parseJoinPayloadValueshhRhS_S_S_+0x4e>
   b43e6:	4b1f      	ldr	r3, [pc, #124]	; (b4464 <_Z22parseJoinPayloadValueshhRhS_S_S_+0xb0>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b43e8:	4a1f      	ldr	r2, [pc, #124]	; (b4468 <_Z22parseJoinPayloadValueshhRhS_S_S_+0xb4>)
   b43ea:	781b      	ldrb	r3, [r3, #0]
   b43ec:	491f      	ldr	r1, [pc, #124]	; (b446c <_Z22parseJoinPayloadValueshhRhS_S_S_+0xb8>)
   b43ee:	f88d 3000 	strb.w	r3, [sp]
   b43f2:	a804      	add	r0, sp, #16
   b43f4:	233c      	movs	r3, #60	; 0x3c
   b43f6:	f002 fccb 	bl	b6d90 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   b43fa:	a805      	add	r0, sp, #20
   b43fc:	f7ff ff32 	bl	b4264 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            return false;
   b4400:	2000      	movs	r0, #0
}
   b4402:	b006      	add	sp, #24
   b4404:	bd70      	pop	{r4, r5, r6, pc}
    switch (sensorType) {
   b4406:	f1a4 0314 	sub.w	r3, r4, #20
   b440a:	2b09      	cmp	r3, #9
   b440c:	d8e3      	bhi.n	b43d6 <_Z22parseJoinPayloadValueshhRhS_S_S_+0x22>
            bitSizes[0] = 6; // space (6 bits)
   b440e:	2306      	movs	r3, #6
   b4410:	f88d 300c 	strb.w	r3, [sp, #12]
            bitSizes[1] = 1; // placement (1 bit)
   b4414:	2301      	movs	r3, #1
   b4416:	f88d 300d 	strb.w	r3, [sp, #13]
        } break;
   b441a:	e002      	b.n	b4422 <_Z22parseJoinPayloadValueshhRhS_S_S_+0x6e>
            bitSizes[0] = 1; // 2-Way (1 bit)
   b441c:	2301      	movs	r3, #1
   b441e:	f88d 300c 	strb.w	r3, [sp, #12]
    decompressData(compressedJoinPayload, data, bitSizes);
   b4422:	aa03      	add	r2, sp, #12
   b4424:	a902      	add	r1, sp, #8
   b4426:	f7ff ff07 	bl	b4238 <_Z14decompressDatahPhS_>
    payload1 = data[0];
   b442a:	f89d 3008 	ldrb.w	r3, [sp, #8]
   b442e:	7033      	strb	r3, [r6, #0]
    payload2 = data[1];
   b4430:	f89d 3009 	ldrb.w	r3, [sp, #9]
   b4434:	702b      	strb	r3, [r5, #0]
    payload3 = data[2];
   b4436:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b4438:	f89d 200a 	ldrb.w	r2, [sp, #10]
   b443c:	701a      	strb	r2, [r3, #0]
    payload4 = data[3];
   b443e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b4440:	f89d 200b 	ldrb.w	r2, [sp, #11]
   b4444:	701a      	strb	r2, [r3, #0]
    return true;
   b4446:	2001      	movs	r0, #1
   b4448:	e7db      	b.n	b4402 <_Z22parseJoinPayloadValueshhRhS_S_S_+0x4e>
            bitSizes[0] = 6; // space (6 bits)
   b444a:	2306      	movs	r3, #6
   b444c:	f88d 300c 	strb.w	r3, [sp, #12]
            bitSizes[1] = 1; // placement (1 bit)
   b4450:	2301      	movs	r3, #1
   b4452:	f88d 300d 	strb.w	r3, [sp, #13]
            bitSizes[2] = 1; // multi (1 bit)
   b4456:	f88d 300e 	strb.w	r3, [sp, #14]
        } break;
   b445a:	e7e2      	b.n	b4422 <_Z22parseJoinPayloadValueshhRhS_S_S_+0x6e>
   b445c:	000b9638 	.word	0x000b9638
   b4460:	2003e6b0 	.word	0x2003e6b0
   b4464:	2003b7b0 	.word	0x2003b7b0
   b4468:	000b9669 	.word	0x000b9669
   b446c:	000b9697 	.word	0x000b9697

000b4470 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   b4470:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b4472:	e9d0 5300 	ldrd	r5, r3, [r0]
   b4476:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   b4478:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b447a:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b447e:	42ae      	cmp	r6, r5
   b4480:	d004      	beq.n	b448c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
class LogCategoryFilter {
   b4482:	4628      	mov	r0, r5
   b4484:	f004 f9c6 	bl	b8814 <_ZN6StringD1Ev>
   b4488:	3514      	adds	r5, #20
   b448a:	e7f8      	b.n	b447e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   b448c:	6820      	ldr	r0, [r4, #0]
   b448e:	f002 fa4f 	bl	b6930 <free>
    AllocatorT::free(data_);
}
   b4492:	4620      	mov	r0, r4
   b4494:	bd70      	pop	{r4, r5, r6, pc}

000b4496 <_ZNK10JsonParser13getValueByKeyImEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_>:
	bool getValueByKey(const JsonParserGeneratorRK::jsmntok_t *container, const char *name, T &result) const {
   b4496:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b4498:	461d      	mov	r5, r3
		if (getValueTokenByKey(container, name, value)) {
   b449a:	ab01      	add	r3, sp, #4
	bool getValueByKey(const JsonParserGeneratorRK::jsmntok_t *container, const char *name, T &result) const {
   b449c:	4604      	mov	r4, r0
		if (getValueTokenByKey(container, name, value)) {
   b449e:	f000 ff4f 	bl	b5340 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
   b44a2:	b120      	cbz	r0, b44ae <_ZNK10JsonParser13getValueByKeyImEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_+0x18>
			return getTokenValue(value, result);
   b44a4:	9901      	ldr	r1, [sp, #4]
   b44a6:	462a      	mov	r2, r5
   b44a8:	4620      	mov	r0, r4
   b44aa:	f000 fe6d 	bl	b5188 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tERm>
	}
   b44ae:	b003      	add	sp, #12
   b44b0:	bd30      	pop	{r4, r5, pc}
	...

000b44b4 <_Z13printNodeDatab>:
void printNodeData(bool publish) {
   b44b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b44b8:	4607      	mov	r7, r0
   b44ba:	f5ad 7d37 	sub.w	sp, sp, #732	; 0x2dc
	jp.getValueTokenByKey(jp.getOuterObject(), "nodes", nodesArrayContainer);
   b44be:	4877      	ldr	r0, [pc, #476]	; (b469c <_Z13printNodeDatab+0x1e8>)
		nodeObjectContainer = jp.getTokenByIndex(nodesArrayContainer, i);
   b44c0:	4d76      	ldr	r5, [pc, #472]	; (b469c <_Z13printNodeDatab+0x1e8>)
		jp.getValueByKey(nodeObjectContainer, "uID", uniqueID);
   b44c2:	f8df a218 	ldr.w	sl, [pc, #536]	; b46dc <_Z13printNodeDatab+0x228>
		jp.getValueByKey(nodeObjectContainer, "node", nodeNumber);
   b44c6:	f8df b218 	ldr.w	fp, [pc, #536]	; b46e0 <_Z13printNodeDatab+0x22c>
	jp.getValueTokenByKey(jp.getOuterObject(), "nodes", nodesArrayContainer);
   b44ca:	f000 fdd0 	bl	b506e <_ZNK10JsonParser14getOuterObjectEv>
   b44ce:	4a74      	ldr	r2, [pc, #464]	; (b46a0 <_Z13printNodeDatab+0x1ec>)
   b44d0:	4601      	mov	r1, r0
   b44d2:	ab14      	add	r3, sp, #80	; 0x50
   b44d4:	4871      	ldr	r0, [pc, #452]	; (b469c <_Z13printNodeDatab+0x1e8>)
   b44d6:	f000 ff33 	bl	b5340 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
	for (int i=0; i<100; i++) {												// Iterate through the array looking for a match
   b44da:	2600      	movs	r6, #0
		nodeObjectContainer = jp.getTokenByIndex(nodesArrayContainer, i);
   b44dc:	9914      	ldr	r1, [sp, #80]	; 0x50
   b44de:	4632      	mov	r2, r6
   b44e0:	4628      	mov	r0, r5
   b44e2:	f000 fde6 	bl	b50b2 <_ZNK10JsonParser15getTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj>
		if(nodeObjectContainer == NULL) {
   b44e6:	4604      	mov	r4, r0
   b44e8:	2800      	cmp	r0, #0
   b44ea:	f000 80ab 	beq.w	b4644 <_Z13printNodeDatab+0x190>
		jp.getValueByKey(nodeObjectContainer, "uID", uniqueID);
   b44ee:	4601      	mov	r1, r0
   b44f0:	ab0d      	add	r3, sp, #52	; 0x34
   b44f2:	4652      	mov	r2, sl
   b44f4:	4628      	mov	r0, r5
   b44f6:	f7ff ffce 	bl	b4496 <_ZNK10JsonParser13getValueByKeyImEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_>
		jp.getValueByKey(nodeObjectContainer, "node", nodeNumber);
   b44fa:	ab0c      	add	r3, sp, #48	; 0x30
   b44fc:	465a      	mov	r2, fp
   b44fe:	4621      	mov	r1, r4
   b4500:	4628      	mov	r0, r5
   b4502:	f7ff fdfc 	bl	b40fe <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
		jp.getValueByKey(nodeObjectContainer, "type", sensorType);
   b4506:	4a67      	ldr	r2, [pc, #412]	; (b46a4 <_Z13printNodeDatab+0x1f0>)
   b4508:	ab0e      	add	r3, sp, #56	; 0x38
   b450a:	4621      	mov	r1, r4
   b450c:	4628      	mov	r0, r5
   b450e:	f7ff fdf6 	bl	b40fe <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
		jp.getValueByKey(nodeObjectContainer, "p", compressedJoinPayload);
   b4512:	4a65      	ldr	r2, [pc, #404]	; (b46a8 <_Z13printNodeDatab+0x1f4>)
   b4514:	ab0f      	add	r3, sp, #60	; 0x3c
   b4516:	4621      	mov	r1, r4
   b4518:	4628      	mov	r0, r5
   b451a:	f7ff fdf0 	bl	b40fe <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
		jp.getValueByKey(nodeObjectContainer, "p1", uncompressedJoinPayload1);
   b451e:	4a63      	ldr	r2, [pc, #396]	; (b46ac <_Z13printNodeDatab+0x1f8>)
   b4520:	ab10      	add	r3, sp, #64	; 0x40
   b4522:	4621      	mov	r1, r4
   b4524:	4628      	mov	r0, r5
   b4526:	f7ff fdea 	bl	b40fe <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
		jp.getValueByKey(nodeObjectContainer, "p2", uncompressedJoinPayload2);
   b452a:	4a61      	ldr	r2, [pc, #388]	; (b46b0 <_Z13printNodeDatab+0x1fc>)
   b452c:	ab11      	add	r3, sp, #68	; 0x44
   b452e:	4621      	mov	r1, r4
   b4530:	4628      	mov	r0, r5
   b4532:	f7ff fde4 	bl	b40fe <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
		jp.getValueByKey(nodeObjectContainer, "pend", pendingAlertCode);
   b4536:	4a5f      	ldr	r2, [pc, #380]	; (b46b4 <_Z13printNodeDatab+0x200>)
   b4538:	ab12      	add	r3, sp, #72	; 0x48
   b453a:	4621      	mov	r1, r4
   b453c:	4628      	mov	r0, r5
   b453e:	f7ff fdde 	bl	b40fe <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
		parseJoinPayloadValues(sensorType, compressedJoinPayload, payload1, payload2, payload3, payload4);
   b4542:	f10d 092f 	add.w	r9, sp, #47	; 0x2f
		jp.getValueByKey(nodeObjectContainer, "cont", pendingAlertContext);
   b4546:	4a5c      	ldr	r2, [pc, #368]	; (b46b8 <_Z13printNodeDatab+0x204>)
   b4548:	ab13      	add	r3, sp, #76	; 0x4c
   b454a:	4621      	mov	r1, r4
   b454c:	4628      	mov	r0, r5
		parseJoinPayloadValues(sensorType, compressedJoinPayload, payload1, payload2, payload3, payload4);
   b454e:	f10d 082e 	add.w	r8, sp, #46	; 0x2e
		jp.getValueByKey(nodeObjectContainer, "cont", pendingAlertContext);
   b4552:	f7ff fdd4 	bl	b40fe <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
		parseJoinPayloadValues(sensorType, compressedJoinPayload, payload1, payload2, payload3, payload4);
   b4556:	aa0b      	add	r2, sp, #44	; 0x2c
   b4558:	f89d 103c 	ldrb.w	r1, [sp, #60]	; 0x3c
   b455c:	f89d 0038 	ldrb.w	r0, [sp, #56]	; 0x38
   b4560:	f8cd 9004 	str.w	r9, [sp, #4]
   b4564:	f8cd 8000 	str.w	r8, [sp]
   b4568:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
   b456c:	f7ff ff22 	bl	b43b4 <_Z22parseJoinPayloadValueshhRhS_S_S_>
		switch (sensorType) {
   b4570:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   b4572:	2a13      	cmp	r2, #19
   b4574:	dc1a      	bgt.n	b45ac <_Z13printNodeDatab+0xf8>
   b4576:	2a09      	cmp	r2, #9
   b4578:	dc1c      	bgt.n	b45b4 <_Z13printNodeDatab+0x100>
   b457a:	1e53      	subs	r3, r2, #1
   b457c:	2b08      	cmp	r3, #8
   b457e:	d972      	bls.n	b4666 <_Z13printNodeDatab+0x1b2>
				Log.info("Unknown sensor type in printNodeData %d", sensorType);
   b4580:	494e      	ldr	r1, [pc, #312]	; (b46bc <_Z13printNodeDatab+0x208>)
   b4582:	484f      	ldr	r0, [pc, #316]	; (b46c0 <_Z13printNodeDatab+0x20c>)
   b4584:	f7ff fdf2 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b4588:	f002 f952 	bl	b6830 <spark_cloud_flag_connected>
				if (Particle.connected()) Particle.publish("Alert", "Unknown sensor type in printNodeData", PRIVATE);
   b458c:	2800      	cmp	r0, #0
   b458e:	d03c      	beq.n	b460a <_Z13printNodeDatab+0x156>
   b4590:	4b4c      	ldr	r3, [pc, #304]	; (b46c4 <_Z13printNodeDatab+0x210>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b4592:	4a4d      	ldr	r2, [pc, #308]	; (b46c8 <_Z13printNodeDatab+0x214>)
   b4594:	781b      	ldrb	r3, [r3, #0]
   b4596:	f88d 3000 	strb.w	r3, [sp]
   b459a:	a816      	add	r0, sp, #88	; 0x58
   b459c:	494b      	ldr	r1, [pc, #300]	; (b46cc <_Z13printNodeDatab+0x218>)
   b459e:	233c      	movs	r3, #60	; 0x3c
   b45a0:	f002 fbf6 	bl	b6d90 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   b45a4:	a817      	add	r0, sp, #92	; 0x5c
   b45a6:	f7ff fe5d 	bl	b4264 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b45aa:	e02e      	b.n	b460a <_Z13printNodeDatab+0x156>
		switch (sensorType) {
   b45ac:	f1a2 0314 	sub.w	r3, r2, #20
   b45b0:	2b09      	cmp	r3, #9
   b45b2:	e7e4      	b.n	b457e <_Z13printNodeDatab+0xca>
				jp.getValueByKey(nodeObjectContainer, "p1", occupancyNet);
   b45b4:	4a3d      	ldr	r2, [pc, #244]	; (b46ac <_Z13printNodeDatab+0x1f8>)
   b45b6:	ab15      	add	r3, sp, #84	; 0x54
   b45b8:	4621      	mov	r1, r4
   b45ba:	4628      	mov	r0, r5
   b45bc:	f7ff fd9f 	bl	b40fe <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
				jp.getValueByKey(nodeObjectContainer, "p2", occupancyGross);
   b45c0:	4a3b      	ldr	r2, [pc, #236]	; (b46b0 <_Z13printNodeDatab+0x1fc>)
   b45c2:	ab16      	add	r3, sp, #88	; 0x58
   b45c4:	4621      	mov	r1, r4
   b45c6:	4628      	mov	r0, r5
   b45c8:	f7ff fd99 	bl	b40fe <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
				snprintf(data, sizeof(data), "Node %d, uniqueID %lu, type %d, occupancyNet %d, occupancyGross %d, payload (%d/%d/%d/%d) with pending alert %d and alert context %d", nodeNumber, uniqueID, sensorType, occupancyNet, occupancyGross, payload1, payload2, payload3, payload4, pendingAlertCode, pendingAlertContext);
   b45cc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   b45ce:	9309      	str	r3, [sp, #36]	; 0x24
   b45d0:	9b12      	ldr	r3, [sp, #72]	; 0x48
   b45d2:	9308      	str	r3, [sp, #32]
   b45d4:	f899 3000 	ldrb.w	r3, [r9]
   b45d8:	9307      	str	r3, [sp, #28]
   b45da:	f898 3000 	ldrb.w	r3, [r8]
   b45de:	9306      	str	r3, [sp, #24]
   b45e0:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   b45e4:	9305      	str	r3, [sp, #20]
   b45e6:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   b45ea:	9304      	str	r3, [sp, #16]
   b45ec:	9b16      	ldr	r3, [sp, #88]	; 0x58
   b45ee:	9303      	str	r3, [sp, #12]
   b45f0:	9b15      	ldr	r3, [sp, #84]	; 0x54
   b45f2:	9302      	str	r3, [sp, #8]
   b45f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   b45f6:	9301      	str	r3, [sp, #4]
   b45f8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   b45fa:	9300      	str	r3, [sp, #0]
   b45fc:	4a34      	ldr	r2, [pc, #208]	; (b46d0 <_Z13printNodeDatab+0x21c>)
   b45fe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b4600:	f240 216e 	movw	r1, #622	; 0x26e
   b4604:	a81a      	add	r0, sp, #104	; 0x68
   b4606:	f002 f9ab 	bl	b6960 <snprintf>
		Log.info(data);
   b460a:	482d      	ldr	r0, [pc, #180]	; (b46c0 <_Z13printNodeDatab+0x20c>)
   b460c:	a91a      	add	r1, sp, #104	; 0x68
   b460e:	f7ff fdad 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b4612:	f002 f90d 	bl	b6830 <spark_cloud_flag_connected>
		if (Particle.connected() && publish) {
   b4616:	b188      	cbz	r0, b463c <_Z13printNodeDatab+0x188>
   b4618:	b187      	cbz	r7, b463c <_Z13printNodeDatab+0x188>
   b461a:	4b2a      	ldr	r3, [pc, #168]	; (b46c4 <_Z13printNodeDatab+0x210>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b461c:	492d      	ldr	r1, [pc, #180]	; (b46d4 <_Z13printNodeDatab+0x220>)
   b461e:	781b      	ldrb	r3, [r3, #0]
   b4620:	f88d 3000 	strb.w	r3, [sp]
   b4624:	aa1a      	add	r2, sp, #104	; 0x68
   b4626:	233c      	movs	r3, #60	; 0x3c
   b4628:	a816      	add	r0, sp, #88	; 0x58
   b462a:	f002 fbb1 	bl	b6d90 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   b462e:	a817      	add	r0, sp, #92	; 0x5c
   b4630:	f7ff fe18 	bl	b4264 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
			delay(1000);
   b4634:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b4638:	f002 f9d2 	bl	b69e0 <delay>
	for (int i=0; i<100; i++) {												// Iterate through the array looking for a match
   b463c:	3601      	adds	r6, #1
   b463e:	2e64      	cmp	r6, #100	; 0x64
   b4640:	f47f af4c 	bne.w	b44dc <_Z13printNodeDatab+0x28>
	Log.info(nodeDatabase.get_nodeIDJson());  // See the raw JSON string
   b4644:	f001 fb78 	bl	b5d38 <_ZN10nodeIDData8instanceEv>
   b4648:	4601      	mov	r1, r0
   b464a:	a816      	add	r0, sp, #88	; 0x58
   b464c:	f001 fb98 	bl	b5d80 <_ZNK10nodeIDData14get_nodeIDJsonEv>
   b4650:	9916      	ldr	r1, [sp, #88]	; 0x58
   b4652:	481b      	ldr	r0, [pc, #108]	; (b46c0 <_Z13printNodeDatab+0x20c>)
   b4654:	f7ff fd8a 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
   b4658:	a816      	add	r0, sp, #88	; 0x58
   b465a:	f004 f8db 	bl	b8814 <_ZN6StringD1Ev>
}
   b465e:	f50d 7d37 	add.w	sp, sp, #732	; 0x2dc
   b4662:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				snprintf(data, sizeof(data), "Node %d, uniqueID %lu, type %d, payload (%d/%d/%d/%d) with pending alert %d and alert context %d", nodeNumber, uniqueID, sensorType, payload1, payload2, payload3, payload4, pendingAlertCode, pendingAlertContext);
   b4666:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   b4668:	9307      	str	r3, [sp, #28]
   b466a:	9b12      	ldr	r3, [sp, #72]	; 0x48
   b466c:	9306      	str	r3, [sp, #24]
   b466e:	f899 3000 	ldrb.w	r3, [r9]
   b4672:	9305      	str	r3, [sp, #20]
   b4674:	f898 3000 	ldrb.w	r3, [r8]
   b4678:	9304      	str	r3, [sp, #16]
   b467a:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   b467e:	9303      	str	r3, [sp, #12]
   b4680:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   b4684:	e9cd 2301 	strd	r2, r3, [sp, #4]
   b4688:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   b468a:	9300      	str	r3, [sp, #0]
   b468c:	4a12      	ldr	r2, [pc, #72]	; (b46d8 <_Z13printNodeDatab+0x224>)
   b468e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b4690:	f240 216e 	movw	r1, #622	; 0x26e
   b4694:	a81a      	add	r0, sp, #104	; 0x68
   b4696:	f002 f963 	bl	b6960 <snprintf>
			} break;
   b469a:	e7b6      	b.n	b460a <_Z13printNodeDatab+0x156>
   b469c:	2003b7b4 	.word	0x2003b7b4
   b46a0:	000b95ab 	.word	0x000b95ab
   b46a4:	000b95b1 	.word	0x000b95b1
   b46a8:	000ba458 	.word	0x000ba458
   b46ac:	000b96a6 	.word	0x000b96a6
   b46b0:	000b96a9 	.word	0x000b96a9
   b46b4:	000b96ac 	.word	0x000b96ac
   b46b8:	000b96b1 	.word	0x000b96b1
   b46bc:	000b979c 	.word	0x000b979c
   b46c0:	2003e6b0 	.word	0x2003e6b0
   b46c4:	2003b7b0 	.word	0x2003b7b0
   b46c8:	000b97c4 	.word	0x000b97c4
   b46cc:	000b9697 	.word	0x000b9697
   b46d0:	000b96b6 	.word	0x000b96b6
   b46d4:	000b97e9 	.word	0x000b97e9
   b46d8:	000b973b 	.word	0x000b973b
   b46dc:	000b969d 	.word	0x000b969d
   b46e0:	000b96a1 	.word	0x000b96a1

000b46e4 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>:
	 *
	 * Uses templates so you can pass any type object that's supported by insertValue() overloads,
	 * for example: bool, int, float, double, const char *.
	 */
	template<class T>
	void insertKeyValue(const char *key, T value) {
   b46e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b46e6:	4604      	mov	r4, r0
   b46e8:	4615      	mov	r5, r2
   b46ea:	9101      	str	r1, [sp, #4]
		insertCheckSeparator();
   b46ec:	f000 ff4c 	bl	b5588 <_ZN10JsonWriter20insertCheckSeparatorEv>
	void insertValue(const char *value) { insertString(value, true); }
   b46f0:	9901      	ldr	r1, [sp, #4]
   b46f2:	2201      	movs	r2, #1
   b46f4:	4620      	mov	r0, r4
   b46f6:	f000 feb5 	bl	b5464 <_ZN10JsonWriter12insertStringEPKcb>
		insertValue(key);
		insertChar(':');
   b46fa:	4620      	mov	r0, r4
   b46fc:	213a      	movs	r1, #58	; 0x3a
   b46fe:	f000 fe65 	bl	b53cc <_ZN10JsonWriter10insertCharEc>
	void insertValue(int value) { insertsprintf("%d", value); }
   b4702:	4904      	ldr	r1, [pc, #16]	; (b4714 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_+0x30>)
   b4704:	462a      	mov	r2, r5
   b4706:	4620      	mov	r0, r4
		insertValue(value);
	}
   b4708:	b003      	add	sp, #12
   b470a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	void insertValue(int value) { insertsprintf("%d", value); }
   b470e:	f000 be9c 	b.w	b544a <_ZN10JsonWriter13insertsprintfEPKcz>
   b4712:	bf00      	nop
   b4714:	000b98b6 	.word	0x000b98b6

000b4718 <_ZN10JsonWriter14insertKeyValueImEEvPKcT_>:
	void insertKeyValue(const char *key, T value) {
   b4718:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b471a:	4604      	mov	r4, r0
   b471c:	4615      	mov	r5, r2
   b471e:	9101      	str	r1, [sp, #4]
		insertCheckSeparator();
   b4720:	f000 ff32 	bl	b5588 <_ZN10JsonWriter20insertCheckSeparatorEv>
	void insertValue(const char *value) { insertString(value, true); }
   b4724:	9901      	ldr	r1, [sp, #4]
   b4726:	2201      	movs	r2, #1
   b4728:	4620      	mov	r0, r4
   b472a:	f000 fe9b 	bl	b5464 <_ZN10JsonWriter12insertStringEPKcb>
		insertChar(':');
   b472e:	4620      	mov	r0, r4
   b4730:	213a      	movs	r1, #58	; 0x3a
   b4732:	f000 fe4b 	bl	b53cc <_ZN10JsonWriter10insertCharEc>
	void insertValue(unsigned long value) { insertsprintf("%lu", value); }
   b4736:	4904      	ldr	r1, [pc, #16]	; (b4748 <_ZN10JsonWriter14insertKeyValueImEEvPKcT_+0x30>)
   b4738:	462a      	mov	r2, r5
   b473a:	4620      	mov	r0, r4
	}
   b473c:	b003      	add	sp, #12
   b473e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	void insertValue(unsigned long value) { insertsprintf("%lu", value); }
   b4742:	f000 be82 	b.w	b544a <_ZN10JsonWriter13insertsprintfEPKcz>
   b4746:	bf00      	nop
   b4748:	000b97f2 	.word	0x000b97f2

000b474c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   b474c:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b474e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4750:	4604      	mov	r4, r0
   b4752:	460d      	mov	r5, r1
   b4754:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b4756:	d916      	bls.n	b4786 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
   b4758:	4290      	cmp	r0, r2
   b475a:	d215      	bcs.n	b4788 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            --end;
   b475c:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   b4760:	1a75      	subs	r5, r6, r1
   b4762:	f1a1 0714 	sub.w	r7, r1, #20
   b4766:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b4768:	42b7      	cmp	r7, r6
   b476a:	d01c      	beq.n	b47a6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
   b476c:	b12c      	cbz	r4, b477a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
   b476e:	4631      	mov	r1, r6
   b4770:	4620      	mov	r0, r4
   b4772:	f004 f8cc 	bl	b890e <_ZN6StringC1EOS_>
   b4776:	7c33      	ldrb	r3, [r6, #16]
   b4778:	7423      	strb	r3, [r4, #16]
   b477a:	4630      	mov	r0, r6
   b477c:	f004 f84a 	bl	b8814 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   b4780:	3e14      	subs	r6, #20
   b4782:	3c14      	subs	r4, #20
   b4784:	e7f0      	b.n	b4768 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   b4786:	d00e      	beq.n	b47a6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
   b4788:	42b5      	cmp	r5, r6
   b478a:	d00c      	beq.n	b47a6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
   b478c:	b12c      	cbz	r4, b479a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
   b478e:	4629      	mov	r1, r5
   b4790:	4620      	mov	r0, r4
   b4792:	f004 f8bc 	bl	b890e <_ZN6StringC1EOS_>
   b4796:	7c2b      	ldrb	r3, [r5, #16]
   b4798:	7423      	strb	r3, [r4, #16]
   b479a:	4628      	mov	r0, r5
   b479c:	f004 f83a 	bl	b8814 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   b47a0:	3514      	adds	r5, #20
   b47a2:	3414      	adds	r4, #20
   b47a4:	e7f0      	b.n	b4788 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
    }
   b47a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b47a8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b47a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   b47ac:	2300      	movs	r3, #0
   b47ae:	e9c0 3300 	strd	r3, r3, [r0]
   b47b2:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b47b4:	684f      	ldr	r7, [r1, #4]
   b47b6:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b47b8:	4604      	mov	r4, r0
   b47ba:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b47bc:	dd23      	ble.n	b4806 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
   b47be:	f04f 0814 	mov.w	r8, #20
    return ::malloc(size);
   b47c2:	fb08 f007 	mul.w	r0, r8, r7
   b47c6:	f002 f8ab 	bl	b6920 <malloc>
            if (!d) {
   b47ca:	4605      	mov	r5, r0
   b47cc:	b1d8      	cbz	r0, b4806 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            move(d, data_, data_ + size_);
   b47ce:	e9d4 1200 	ldrd	r1, r2, [r4]
   b47d2:	fb08 1202 	mla	r2, r8, r2, r1
   b47d6:	f7ff ffb9 	bl	b474c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   b47da:	6820      	ldr	r0, [r4, #0]
   b47dc:	f002 f8a8 	bl	b6930 <free>
        data_ = d;
   b47e0:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   b47e2:	60a7      	str	r7, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b47e4:	e9d6 7300 	ldrd	r7, r3, [r6]
   b47e8:	fb08 7803 	mla	r8, r8, r3, r7
        for (; it != end; ++it, ++dest) {
   b47ec:	45b8      	cmp	r8, r7
   b47ee:	d008      	beq.n	b4802 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5a>
   b47f0:	4639      	mov	r1, r7
   b47f2:	4628      	mov	r0, r5
   b47f4:	f004 f8a5 	bl	b8942 <_ZN6StringC1ERKS_>
   b47f8:	7c3b      	ldrb	r3, [r7, #16]
   b47fa:	742b      	strb	r3, [r5, #16]
   b47fc:	3714      	adds	r7, #20
   b47fe:	3514      	adds	r5, #20
   b4800:	e7f4      	b.n	b47ec <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>
        size_ = vector.size_;
   b4802:	6873      	ldr	r3, [r6, #4]
   b4804:	6063      	str	r3, [r4, #4]
}
   b4806:	4620      	mov	r0, r4
   b4808:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b480c <_GLOBAL__sub_I_LogHandler>:
}
   b480c:	b5f0      	push	{r4, r5, r6, r7, lr}
        val_(val) {
   b480e:	4b2d      	ldr	r3, [pc, #180]	; (b48c4 <_GLOBAL__sub_I_LogHandler+0xb8>)
        filter_(level, filters) {
   b4810:	4d2d      	ldr	r5, [pc, #180]	; (b48c8 <_GLOBAL__sub_I_LogHandler+0xbc>)
   b4812:	b08f      	sub	sp, #60	; 0x3c
   b4814:	2201      	movs	r2, #1
   b4816:	701a      	strb	r2, [r3, #0]
        capacity_(0) {
   b4818:	2400      	movs	r4, #0
   b481a:	e9cd 4402 	strd	r4, r4, [sp, #8]
   b481e:	9404      	str	r4, [sp, #16]
            StreamLogHandler(Serial, level, filters) {
   b4820:	f004 f9bc 	bl	b8b9c <_Z16_fetch_usbserialv>
   b4824:	a902      	add	r1, sp, #8
   b4826:	4606      	mov	r6, r0
   b4828:	a805      	add	r0, sp, #20
   b482a:	f7ff ffbd 	bl	b47a8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b482e:	462f      	mov	r7, r5
        stream_(&stream) {
   b4830:	a905      	add	r1, sp, #20
   b4832:	a808      	add	r0, sp, #32
   b4834:	f7ff ffb8 	bl	b47a8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   b4838:	4b24      	ldr	r3, [pc, #144]	; (b48cc <_GLOBAL__sub_I_LogHandler+0xc0>)
   b483a:	f847 3b04 	str.w	r3, [r7], #4
   b483e:	a908      	add	r1, sp, #32
   b4840:	a80b      	add	r0, sp, #44	; 0x2c
   b4842:	f7ff ffb1 	bl	b47a8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b4846:	aa0b      	add	r2, sp, #44	; 0x2c
   b4848:	211e      	movs	r1, #30
   b484a:	4638      	mov	r0, r7
   b484c:	f003 fbaa 	bl	b7fa4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b4850:	a80b      	add	r0, sp, #44	; 0x2c
   b4852:	f7ff fe0d 	bl	b4470 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   b4856:	a808      	add	r0, sp, #32
   b4858:	f7ff fe0a 	bl	b4470 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b485c:	4b1c      	ldr	r3, [pc, #112]	; (b48d0 <_GLOBAL__sub_I_LogHandler+0xc4>)
   b485e:	602b      	str	r3, [r5, #0]
   b4860:	a805      	add	r0, sp, #20
   b4862:	622e      	str	r6, [r5, #32]
   b4864:	f7ff fe04 	bl	b4470 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b4868:	4b1a      	ldr	r3, [pc, #104]	; (b48d4 <_GLOBAL__sub_I_LogHandler+0xc8>)
   b486a:	602b      	str	r3, [r5, #0]
        Serial.begin();
   b486c:	f004 f996 	bl	b8b9c <_Z16_fetch_usbserialv>
   b4870:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b4874:	f004 f982 	bl	b8b7c <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
   b4878:	f003 f876 	bl	b7968 <_ZN5spark10LogManager8instanceEv>
   b487c:	4629      	mov	r1, r5
   b487e:	f003 fa67 	bl	b7d50 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
SerialLogHandler LogHandler;
   b4882:	a802      	add	r0, sp, #8
   b4884:	f7ff fdf4 	bl	b4470 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b4888:	4b13      	ldr	r3, [pc, #76]	; (b48d8 <_GLOBAL__sub_I_LogHandler+0xcc>)
    SleepResult() {}
   b488a:	4a14      	ldr	r2, [pc, #80]	; (b48dc <_GLOBAL__sub_I_LogHandler+0xd0>)
   b488c:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b488e:	e9c3 4400 	strd	r4, r4, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b4892:	2003      	movs	r0, #3
   b4894:	f001 ff98 	bl	b67c8 <set_system_mode>
	explicit JsonParserStatic() : JsonParser(staticBuffer, BUFFER_SIZE, staticTokens, MAX_TOKENS) {};
   b4898:	4b11      	ldr	r3, [pc, #68]	; (b48e0 <_GLOBAL__sub_I_LogHandler+0xd4>)
   b489a:	f240 2226 	movw	r2, #550	; 0x226
   b489e:	f6a3 442c 	subw	r4, r3, #3116	; 0xc2c
   b48a2:	9200      	str	r2, [sp, #0]
   b48a4:	f5a3 6140 	sub.w	r1, r3, #3072	; 0xc00
   b48a8:	f44f 6240 	mov.w	r2, #3072	; 0xc00
   b48ac:	4620      	mov	r0, r4
   b48ae:	f000 fbc3 	bl	b5038 <_ZN10JsonParserC1EPcjPN21JsonParserGeneratorRK9jsmntok_tEj>
   b48b2:	4b0c      	ldr	r3, [pc, #48]	; (b48e4 <_GLOBAL__sub_I_LogHandler+0xd8>)
String s;
   b48b4:	490c      	ldr	r1, [pc, #48]	; (b48e8 <_GLOBAL__sub_I_LogHandler+0xdc>)
   b48b6:	480d      	ldr	r0, [pc, #52]	; (b48ec <_GLOBAL__sub_I_LogHandler+0xe0>)
   b48b8:	6023      	str	r3, [r4, #0]
}
   b48ba:	b00f      	add	sp, #60	; 0x3c
   b48bc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
String s;
   b48c0:	f003 bff3 	b.w	b88aa <_ZN6StringC1EPK19__FlashStringHelper>
   b48c4:	2003b7b0 	.word	0x2003b7b0
   b48c8:	2003b780 	.word	0x2003b780
   b48cc:	000ba0ec 	.word	0x000ba0ec
   b48d0:	000ba4bc 	.word	0x000ba4bc
   b48d4:	000ba104 	.word	0x000ba104
   b48d8:	2003b7a4 	.word	0x2003b7a4
   b48dc:	ffff0000 	.word	0xffff0000
   b48e0:	2003c3e0 	.word	0x2003c3e0
   b48e4:	000ba11c 	.word	0x000ba11c
   b48e8:	000ba487 	.word	0x000ba487
   b48ec:	2003e640 	.word	0x2003e640

000b48f0 <_Z14findNodeNumberm>:
byte findNodeNumber(uint32_t uniqueID) {
   b48f0:	b5f0      	push	{r4, r5, r6, r7, lr}
   b48f2:	b097      	sub	sp, #92	; 0x5c
	int node = 0;
   b48f4:	2300      	movs	r3, #0
byte findNodeNumber(uint32_t uniqueID) {
   b48f6:	4605      	mov	r5, r0
	jp.getValueTokenByKey(jp.getOuterObject(), "nodes", nodesArrayContainer);
   b48f8:	483b      	ldr	r0, [pc, #236]	; (b49e8 <_Z14findNodeNumberm+0xf8>)
	int node = 0;
   b48fa:	9304      	str	r3, [sp, #16]
	jp.getValueTokenByKey(jp.getOuterObject(), "nodes", nodesArrayContainer);
   b48fc:	f000 fbb7 	bl	b506e <_ZNK10JsonParser14getOuterObjectEv>
   b4900:	4a3a      	ldr	r2, [pc, #232]	; (b49ec <_Z14findNodeNumberm+0xfc>)
		nodeObjectContainer = jp.getTokenByIndex(nodesArrayContainer, i);
   b4902:	4e39      	ldr	r6, [pc, #228]	; (b49e8 <_Z14findNodeNumberm+0xf8>)
		jp.getValueByKey(nodeObjectContainer, "uID", nodeUniqueID);			// Get the uniqueID and compare
   b4904:	4f3a      	ldr	r7, [pc, #232]	; (b49f0 <_Z14findNodeNumberm+0x100>)
	jp.getValueTokenByKey(jp.getOuterObject(), "nodes", nodesArrayContainer);
   b4906:	4601      	mov	r1, r0
   b4908:	ab05      	add	r3, sp, #20
   b490a:	4837      	ldr	r0, [pc, #220]	; (b49e8 <_Z14findNodeNumberm+0xf8>)
   b490c:	f000 fd18 	bl	b5340 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
	int index = 1;				// Start at one since node zero is the gateway
   b4910:	2401      	movs	r4, #1
		nodeObjectContainer = jp.getTokenByIndex(nodesArrayContainer, i);
   b4912:	9905      	ldr	r1, [sp, #20]
   b4914:	1e62      	subs	r2, r4, #1
   b4916:	4630      	mov	r0, r6
   b4918:	f000 fbcb 	bl	b50b2 <_ZNK10JsonParser15getTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj>
		if(nodeObjectContainer == NULL) break;								// Ran out of entries - no match found
   b491c:	4601      	mov	r1, r0
   b491e:	b1d8      	cbz	r0, b4958 <_Z14findNodeNumberm+0x68>
		jp.getValueByKey(nodeObjectContainer, "uID", nodeUniqueID);			// Get the uniqueID and compare
   b4920:	ab03      	add	r3, sp, #12
   b4922:	9001      	str	r0, [sp, #4]
   b4924:	463a      	mov	r2, r7
   b4926:	4630      	mov	r0, r6
   b4928:	f7ff fdb5 	bl	b4496 <_ZNK10JsonParser13getValueByKeyImEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_>
		if (nodeUniqueID == uniqueID) {
   b492c:	9b03      	ldr	r3, [sp, #12]
   b492e:	9901      	ldr	r1, [sp, #4]
   b4930:	42ab      	cmp	r3, r5
   b4932:	d10e      	bne.n	b4952 <_Z14findNodeNumberm+0x62>
			jp.getValueByKey(nodeObjectContainer, "node", node);		// A match!
   b4934:	4a2f      	ldr	r2, [pc, #188]	; (b49f4 <_Z14findNodeNumberm+0x104>)
   b4936:	482c      	ldr	r0, [pc, #176]	; (b49e8 <_Z14findNodeNumberm+0xf8>)
   b4938:	ab04      	add	r3, sp, #16
   b493a:	f7ff fbe0 	bl	b40fe <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
			Log.info("Found the uniqueID, node of %d",node);
   b493e:	9a04      	ldr	r2, [sp, #16]
   b4940:	492d      	ldr	r1, [pc, #180]	; (b49f8 <_Z14findNodeNumberm+0x108>)
   b4942:	482e      	ldr	r0, [pc, #184]	; (b49fc <_Z14findNodeNumberm+0x10c>)
   b4944:	f7ff fc12 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
			return node;
   b4948:	f89d 4010 	ldrb.w	r4, [sp, #16]
}
   b494c:	4620      	mov	r0, r4
   b494e:	b017      	add	sp, #92	; 0x5c
   b4950:	bdf0      	pop	{r4, r5, r6, r7, pc}
		index++;															// This will be the node number for the next node if no match is found
   b4952:	3401      	adds	r4, #1
	for (int i=0; i<50; i++) {												// Iterate through the array looking for a match
   b4954:	2c33      	cmp	r4, #51	; 0x33
   b4956:	d1dc      	bne.n	b4912 <_Z14findNodeNumberm+0x22>
	JsonModifier mod(jp);
   b4958:	4923      	ldr	r1, [pc, #140]	; (b49e8 <_Z14findNodeNumberm+0xf8>)
   b495a:	a806      	add	r0, sp, #24
   b495c:	f000 fe38 	bl	b55d0 <_ZN12JsonModifierC1ER10JsonParser>
	Log.info("Did not find the uniqueID, new node of %d",index);
   b4960:	4622      	mov	r2, r4
   b4962:	4927      	ldr	r1, [pc, #156]	; (b4a00 <_Z14findNodeNumberm+0x110>)
   b4964:	4825      	ldr	r0, [pc, #148]	; (b49fc <_Z14findNodeNumberm+0x10c>)
   b4966:	f7ff fc01 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
	mod.startAppend(jp.getOuterArray());
   b496a:	481f      	ldr	r0, [pc, #124]	; (b49e8 <_Z14findNodeNumberm+0xf8>)
   b496c:	f000 fb74 	bl	b5058 <_ZNK10JsonParser13getOuterArrayEv>
   b4970:	4601      	mov	r1, r0
   b4972:	a806      	add	r0, sp, #24
   b4974:	f000 fe3e 	bl	b55f4 <_ZN12JsonModifier11startAppendEPKN21JsonParserGeneratorRK9jsmntok_tE>
		mod.startObject();
   b4978:	a806      	add	r0, sp, #24
   b497a:	f7ff fbce 	bl	b411a <_ZN10JsonWriter11startObjectEv.isra.0>
		mod.insertKeyValue("node", (int)index);
   b497e:	4622      	mov	r2, r4
   b4980:	a806      	add	r0, sp, #24
   b4982:	491c      	ldr	r1, [pc, #112]	; (b49f4 <_Z14findNodeNumberm+0x104>)
   b4984:	f7ff feae 	bl	b46e4 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>
		mod.insertKeyValue("uID", (uint32_t)uniqueID);
   b4988:	462a      	mov	r2, r5
   b498a:	a806      	add	r0, sp, #24
   b498c:	4918      	ldr	r1, [pc, #96]	; (b49f0 <_Z14findNodeNumberm+0x100>)
   b498e:	f7ff fec3 	bl	b4718 <_ZN10JsonWriter14insertKeyValueImEEvPKcT_>
		mod.insertKeyValue("type", (int)sensorType_1);
   b4992:	4b1c      	ldr	r3, [pc, #112]	; (b4a04 <_Z14findNodeNumberm+0x114>)
   b4994:	491c      	ldr	r1, [pc, #112]	; (b4a08 <_Z14findNodeNumberm+0x118>)
   b4996:	681a      	ldr	r2, [r3, #0]
   b4998:	a806      	add	r0, sp, #24
   b499a:	f7ff fea3 	bl	b46e4 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>
		mod.insertKeyValue("p", 0);
   b499e:	a806      	add	r0, sp, #24
   b49a0:	491a      	ldr	r1, [pc, #104]	; (b4a0c <_Z14findNodeNumberm+0x11c>)
   b49a2:	2200      	movs	r2, #0
   b49a4:	f7ff fe9e 	bl	b46e4 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>
		mod.insertKeyValue("p1", 0);
   b49a8:	a806      	add	r0, sp, #24
   b49aa:	4919      	ldr	r1, [pc, #100]	; (b4a10 <_Z14findNodeNumberm+0x120>)
   b49ac:	2200      	movs	r2, #0
   b49ae:	f7ff fe99 	bl	b46e4 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>
		mod.insertKeyValue("p2", 0);
   b49b2:	a806      	add	r0, sp, #24
   b49b4:	4917      	ldr	r1, [pc, #92]	; (b4a14 <_Z14findNodeNumberm+0x124>)
   b49b6:	2200      	movs	r2, #0
   b49b8:	f7ff fe94 	bl	b46e4 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>
		mod.insertKeyValue("pend", 0);	
   b49bc:	a806      	add	r0, sp, #24
   b49be:	4916      	ldr	r1, [pc, #88]	; (b4a18 <_Z14findNodeNumberm+0x128>)
   b49c0:	2200      	movs	r2, #0
   b49c2:	f7ff fe8f 	bl	b46e4 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>
		mod.insertKeyValue("cont", 0);
   b49c6:	4915      	ldr	r1, [pc, #84]	; (b4a1c <_Z14findNodeNumberm+0x12c>)
   b49c8:	2200      	movs	r2, #0
   b49ca:	a806      	add	r0, sp, #24
   b49cc:	f7ff fe8a 	bl	b46e4 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>
		mod.finishObjectOrArray();
   b49d0:	a806      	add	r0, sp, #24
   b49d2:	f000 fd09 	bl	b53e8 <_ZN10JsonWriter19finishObjectOrArrayEv>
	mod.finish();
   b49d6:	a806      	add	r0, sp, #24
   b49d8:	f001 f8ea 	bl	b5bb0 <_ZN12JsonModifier6finishEv>
	JsonModifier mod(jp);
   b49dc:	a806      	add	r0, sp, #24
	return index;
   b49de:	b2e4      	uxtb	r4, r4
	JsonModifier mod(jp);
   b49e0:	f000 fab4 	bl	b4f4c <_ZN12JsonModifierD1Ev>
   b49e4:	e7b2      	b.n	b494c <_Z14findNodeNumberm+0x5c>
   b49e6:	bf00      	nop
   b49e8:	2003b7b4 	.word	0x2003b7b4
   b49ec:	000b95ab 	.word	0x000b95ab
   b49f0:	000b969d 	.word	0x000b969d
   b49f4:	000b96a1 	.word	0x000b96a1
   b49f8:	000b97f6 	.word	0x000b97f6
   b49fc:	2003e6b0 	.word	0x2003e6b0
   b4a00:	000b9815 	.word	0x000b9815
   b4a04:	2003b6f8 	.word	0x2003b6f8
   b4a08:	000b95b1 	.word	0x000b95b1
   b4a0c:	000ba458 	.word	0x000ba458
   b4a10:	000b96a6 	.word	0x000b96a6
   b4a14:	000b96a9 	.word	0x000b96a9
   b4a18:	000b96ac 	.word	0x000b96ac
   b4a1c:	000b96b1 	.word	0x000b96b1

000b4a20 <_Z7setTypeii>:
bool setType(int nodeNumber, int newType) {
   b4a20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b4a24:	460d      	mov	r5, r1
   b4a26:	b09a      	sub	sp, #104	; 0x68
	if (nodeNumber == 0 || nodeNumber == 255) return false;
   b4a28:	4604      	mov	r4, r0
   b4a2a:	2800      	cmp	r0, #0
   b4a2c:	f000 80f7 	beq.w	b4c1e <_Z7setTypeii+0x1fe>
   b4a30:	28ff      	cmp	r0, #255	; 0xff
   b4a32:	f000 80f4 	beq.w	b4c1e <_Z7setTypeii+0x1fe>
	jp.getValueTokenByKey(jp.getOuterObject(), "nodes", nodesArrayContainer);
   b4a36:	487b      	ldr	r0, [pc, #492]	; (b4c24 <_Z7setTypeii+0x204>)
   b4a38:	4e7a      	ldr	r6, [pc, #488]	; (b4c24 <_Z7setTypeii+0x204>)
   b4a3a:	f000 fb18 	bl	b506e <_ZNK10JsonParser14getOuterObjectEv>
	nodeObjectContainer = jp.getTokenByIndex(nodesArrayContainer, nodeNumber-1);
   b4a3e:	f104 38ff 	add.w	r8, r4, #4294967295	; 0xffffffff
	jp.getValueTokenByKey(jp.getOuterObject(), "nodes", nodesArrayContainer);
   b4a42:	4601      	mov	r1, r0
   b4a44:	4a78      	ldr	r2, [pc, #480]	; (b4c28 <_Z7setTypeii+0x208>)
   b4a46:	4877      	ldr	r0, [pc, #476]	; (b4c24 <_Z7setTypeii+0x204>)
   b4a48:	ab07      	add	r3, sp, #28
   b4a4a:	f000 fc79 	bl	b5340 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
	nodeObjectContainer = jp.getTokenByIndex(nodesArrayContainer, nodeNumber-1);
   b4a4e:	9907      	ldr	r1, [sp, #28]
   b4a50:	4874      	ldr	r0, [pc, #464]	; (b4c24 <_Z7setTypeii+0x204>)
   b4a52:	4642      	mov	r2, r8
   b4a54:	f000 fb2d 	bl	b50b2 <_ZNK10JsonParser15getTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj>
	if(nodeObjectContainer == NULL) return false;								// Ran out of entries 
   b4a58:	4607      	mov	r7, r0
   b4a5a:	2800      	cmp	r0, #0
   b4a5c:	f000 80df 	beq.w	b4c1e <_Z7setTypeii+0x1fe>
	JsonModifier mod(jp);
   b4a60:	4631      	mov	r1, r6
   b4a62:	a80a      	add	r0, sp, #40	; 0x28
   b4a64:	f000 fdb4 	bl	b55d0 <_ZN12JsonModifierC1ER10JsonParser>
	jp.getValueByKey(nodeObjectContainer, "uID", uniqueID);
   b4a68:	4a70      	ldr	r2, [pc, #448]	; (b4c2c <_Z7setTypeii+0x20c>)
   b4a6a:	ab03      	add	r3, sp, #12
   b4a6c:	4639      	mov	r1, r7
   b4a6e:	4630      	mov	r0, r6
   b4a70:	f7ff fd11 	bl	b4496 <_ZNK10JsonParser13getValueByKeyImEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_>
	jp.getValueByKey(nodeObjectContainer, "type", type);
   b4a74:	4a6e      	ldr	r2, [pc, #440]	; (b4c30 <_Z7setTypeii+0x210>)
   b4a76:	ab02      	add	r3, sp, #8
   b4a78:	4639      	mov	r1, r7
   b4a7a:	4630      	mov	r0, r6
   b4a7c:	f7ff fb3f 	bl	b40fe <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
	jp.getValueByKey(nodeObjectContainer, "p", compressedJoinPayload);
   b4a80:	4a6c      	ldr	r2, [pc, #432]	; (b4c34 <_Z7setTypeii+0x214>)
   b4a82:	ab04      	add	r3, sp, #16
   b4a84:	4639      	mov	r1, r7
   b4a86:	4630      	mov	r0, r6
   b4a88:	f7ff fb39 	bl	b40fe <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
	jp.getValueByKey(nodeObjectContainer, "pend", pendingAlert);
   b4a8c:	4a6a      	ldr	r2, [pc, #424]	; (b4c38 <_Z7setTypeii+0x218>)
   b4a8e:	ab05      	add	r3, sp, #20
   b4a90:	4639      	mov	r1, r7
   b4a92:	4630      	mov	r0, r6
   b4a94:	f7ff fb33 	bl	b40fe <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
	jp.getValueByKey(nodeObjectContainer, "cont", pendingAlertContext);
   b4a98:	4a68      	ldr	r2, [pc, #416]	; (b4c3c <_Z7setTypeii+0x21c>)
   b4a9a:	ab06      	add	r3, sp, #24
   b4a9c:	4639      	mov	r1, r7
   b4a9e:	4630      	mov	r0, r6
   b4aa0:	f7ff fb2d 	bl	b40fe <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
	Log.info("Changing sensor type from %d to %d", type, newType);
   b4aa4:	9a02      	ldr	r2, [sp, #8]
   b4aa6:	4966      	ldr	r1, [pc, #408]	; (b4c40 <_Z7setTypeii+0x220>)
   b4aa8:	4866      	ldr	r0, [pc, #408]	; (b4c44 <_Z7setTypeii+0x224>)
   b4aaa:	462b      	mov	r3, r5
   b4aac:	f7ff fb5e 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
	switch (newType) {
   b4ab0:	2d13      	cmp	r5, #19
   b4ab2:	dc1b      	bgt.n	b4aec <_Z7setTypeii+0xcc>
   b4ab4:	2d09      	cmp	r5, #9
   b4ab6:	dc1d      	bgt.n	b4af4 <_Z7setTypeii+0xd4>
   b4ab8:	1e6b      	subs	r3, r5, #1
   b4aba:	2b08      	cmp	r3, #8
   b4abc:	d971      	bls.n	b4ba2 <_Z7setTypeii+0x182>
			Log.info("Unable to update to new sensorType in setType: %d", newType);
   b4abe:	4962      	ldr	r1, [pc, #392]	; (b4c48 <_Z7setTypeii+0x228>)
   b4ac0:	4860      	ldr	r0, [pc, #384]	; (b4c44 <_Z7setTypeii+0x224>)
   b4ac2:	462a      	mov	r2, r5
   b4ac4:	f7ff fb52 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b4ac8:	f001 feb2 	bl	b6830 <spark_cloud_flag_connected>
			if (Particle.connected()) Particle.publish("Alert", "Unable to update to new sensorType in setType", PRIVATE);
   b4acc:	2800      	cmp	r0, #0
   b4ace:	d056      	beq.n	b4b7e <_Z7setTypeii+0x15e>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   b4ad0:	4b5e      	ldr	r3, [pc, #376]	; (b4c4c <_Z7setTypeii+0x22c>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b4ad2:	4a5f      	ldr	r2, [pc, #380]	; (b4c50 <_Z7setTypeii+0x230>)
   b4ad4:	781b      	ldrb	r3, [r3, #0]
   b4ad6:	f88d 3000 	strb.w	r3, [sp]
   b4ada:	a808      	add	r0, sp, #32
   b4adc:	495d      	ldr	r1, [pc, #372]	; (b4c54 <_Z7setTypeii+0x234>)
   b4ade:	233c      	movs	r3, #60	; 0x3c
   b4ae0:	f002 f956 	bl	b6d90 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   b4ae4:	a809      	add	r0, sp, #36	; 0x24
   b4ae6:	f7ff fbbd 	bl	b4264 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b4aea:	e048      	b.n	b4b7e <_Z7setTypeii+0x15e>
	switch (newType) {
   b4aec:	f1a5 0314 	sub.w	r3, r5, #20
   b4af0:	2b09      	cmp	r3, #9
   b4af2:	e7e3      	b.n	b4abc <_Z7setTypeii+0x9c>
			Log.info("Removing array index");
   b4af4:	4958      	ldr	r1, [pc, #352]	; (b4c58 <_Z7setTypeii+0x238>)
   b4af6:	4853      	ldr	r0, [pc, #332]	; (b4c44 <_Z7setTypeii+0x224>)
   b4af8:	f7ff fb38 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
			mod.removeArrayIndex(nodesArrayContainer, nodeNumber-1);	// remove the JSON as it was
   b4afc:	4642      	mov	r2, r8
   b4afe:	9907      	ldr	r1, [sp, #28]
   b4b00:	a80a      	add	r0, sp, #40	; 0x28
   b4b02:	f001 f81c 	bl	b5b3e <_ZN12JsonModifier16removeArrayIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj>
			mod.startAppend(jp.getOuterArray());						// insert it back, but with the type specific variables for counter
   b4b06:	4630      	mov	r0, r6
   b4b08:	f000 faa6 	bl	b5058 <_ZNK10JsonParser13getOuterArrayEv>
   b4b0c:	4601      	mov	r1, r0
   b4b0e:	a80a      	add	r0, sp, #40	; 0x28
   b4b10:	f000 fd70 	bl	b55f4 <_ZN12JsonModifier11startAppendEPKN21JsonParserGeneratorRK9jsmntok_tE>
				mod.startObject();
   b4b14:	a80a      	add	r0, sp, #40	; 0x28
   b4b16:	f7ff fb00 	bl	b411a <_ZN10JsonWriter11startObjectEv.isra.0>
					mod.insertKeyValue("node", nodeNumber);
   b4b1a:	4950      	ldr	r1, [pc, #320]	; (b4c5c <_Z7setTypeii+0x23c>)
   b4b1c:	4622      	mov	r2, r4
   b4b1e:	a80a      	add	r0, sp, #40	; 0x28
   b4b20:	f7ff fde0 	bl	b46e4 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>
					mod.insertKeyValue("uID", uniqueID);
   b4b24:	9a03      	ldr	r2, [sp, #12]
   b4b26:	4941      	ldr	r1, [pc, #260]	; (b4c2c <_Z7setTypeii+0x20c>)
   b4b28:	a80a      	add	r0, sp, #40	; 0x28
   b4b2a:	f7ff fdf5 	bl	b4718 <_ZN10JsonWriter14insertKeyValueImEEvPKcT_>
					mod.insertKeyValue("type", newType);					
   b4b2e:	4940      	ldr	r1, [pc, #256]	; (b4c30 <_Z7setTypeii+0x210>)
   b4b30:	462a      	mov	r2, r5
   b4b32:	a80a      	add	r0, sp, #40	; 0x28
   b4b34:	f7ff fdd6 	bl	b46e4 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>
					mod.insertKeyValue("p", compressedJoinPayload);
   b4b38:	9a04      	ldr	r2, [sp, #16]
   b4b3a:	493e      	ldr	r1, [pc, #248]	; (b4c34 <_Z7setTypeii+0x214>)
   b4b3c:	a80a      	add	r0, sp, #40	; 0x28
   b4b3e:	f7ff fdd1 	bl	b46e4 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>
					mod.insertKeyValue("p1", 0);
   b4b42:	4947      	ldr	r1, [pc, #284]	; (b4c60 <_Z7setTypeii+0x240>)
   b4b44:	2200      	movs	r2, #0
   b4b46:	a80a      	add	r0, sp, #40	; 0x28
   b4b48:	f7ff fdcc 	bl	b46e4 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>
					mod.insertKeyValue("p2", 0);		
   b4b4c:	4945      	ldr	r1, [pc, #276]	; (b4c64 <_Z7setTypeii+0x244>)
   b4b4e:	2200      	movs	r2, #0
   b4b50:	a80a      	add	r0, sp, #40	; 0x28
   b4b52:	f7ff fdc7 	bl	b46e4 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>
					mod.insertKeyValue("pend",pendingAlert);
   b4b56:	9a05      	ldr	r2, [sp, #20]
   b4b58:	4937      	ldr	r1, [pc, #220]	; (b4c38 <_Z7setTypeii+0x218>)
   b4b5a:	a80a      	add	r0, sp, #40	; 0x28
   b4b5c:	f7ff fdc2 	bl	b46e4 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>
					mod.insertKeyValue("cont",pendingAlertContext);
   b4b60:	4936      	ldr	r1, [pc, #216]	; (b4c3c <_Z7setTypeii+0x21c>)
   b4b62:	9a06      	ldr	r2, [sp, #24]
   b4b64:	a80a      	add	r0, sp, #40	; 0x28
   b4b66:	f7ff fdbd 	bl	b46e4 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>
				mod.finishObjectOrArray();
   b4b6a:	a80a      	add	r0, sp, #40	; 0x28
   b4b6c:	f000 fc3c 	bl	b53e8 <_ZN10JsonWriter19finishObjectOrArrayEv>
			mod.finish();
   b4b70:	a80a      	add	r0, sp, #40	; 0x28
   b4b72:	f001 f81d 	bl	b5bb0 <_ZN12JsonModifier6finishEv>
			Log.info("append complete");
   b4b76:	493c      	ldr	r1, [pc, #240]	; (b4c68 <_Z7setTypeii+0x248>)
   b4b78:	4832      	ldr	r0, [pc, #200]	; (b4c44 <_Z7setTypeii+0x224>)
   b4b7a:	f7ff faf7 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
	nodeDatabase.set_nodeIDJson(jp.getBuffer());									// This should backup the nodeID database - now updated to persistent storage
   b4b7e:	f001 f8db 	bl	b5d38 <_ZN10nodeIDData8instanceEv>
   b4b82:	6871      	ldr	r1, [r6, #4]
   b4b84:	f001 f90e 	bl	b5da4 <_ZN10nodeIDData14set_nodeIDJsonEPKc>
	nodeDatabase.flush(false);													// Store the nodeDatabase into memory
   b4b88:	f001 f8d6 	bl	b5d38 <_ZN10nodeIDData8instanceEv>
   b4b8c:	6803      	ldr	r3, [r0, #0]
   b4b8e:	2100      	movs	r1, #0
   b4b90:	68db      	ldr	r3, [r3, #12]
   b4b92:	4798      	blx	r3
	JsonModifier mod(jp);
   b4b94:	a80a      	add	r0, sp, #40	; 0x28
   b4b96:	f000 f9d9 	bl	b4f4c <_ZN12JsonModifierD1Ev>
	return true;
   b4b9a:	2001      	movs	r0, #1
}
   b4b9c:	b01a      	add	sp, #104	; 0x68
   b4b9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			mod.removeArrayIndex(nodesArrayContainer, nodeNumber-1);	// remove the JSON as it was
   b4ba2:	4642      	mov	r2, r8
   b4ba4:	9907      	ldr	r1, [sp, #28]
   b4ba6:	a80a      	add	r0, sp, #40	; 0x28
   b4ba8:	f000 ffc9 	bl	b5b3e <_ZN12JsonModifier16removeArrayIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj>
			mod.startAppend(jp.getOuterArray());						// insert it back, but with the type specific variables for counter
   b4bac:	4630      	mov	r0, r6
   b4bae:	f000 fa53 	bl	b5058 <_ZNK10JsonParser13getOuterArrayEv>
   b4bb2:	4601      	mov	r1, r0
   b4bb4:	a80a      	add	r0, sp, #40	; 0x28
   b4bb6:	f000 fd1d 	bl	b55f4 <_ZN12JsonModifier11startAppendEPKN21JsonParserGeneratorRK9jsmntok_tE>
				mod.startObject();
   b4bba:	a80a      	add	r0, sp, #40	; 0x28
   b4bbc:	f7ff faad 	bl	b411a <_ZN10JsonWriter11startObjectEv.isra.0>
					mod.insertKeyValue("node", nodeNumber);
   b4bc0:	4622      	mov	r2, r4
   b4bc2:	a80a      	add	r0, sp, #40	; 0x28
   b4bc4:	4925      	ldr	r1, [pc, #148]	; (b4c5c <_Z7setTypeii+0x23c>)
   b4bc6:	f7ff fd8d 	bl	b46e4 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>
					mod.insertKeyValue("uID", uniqueID);
   b4bca:	9a03      	ldr	r2, [sp, #12]
   b4bcc:	4917      	ldr	r1, [pc, #92]	; (b4c2c <_Z7setTypeii+0x20c>)
   b4bce:	a80a      	add	r0, sp, #40	; 0x28
   b4bd0:	f7ff fda2 	bl	b4718 <_ZN10JsonWriter14insertKeyValueImEEvPKcT_>
					mod.insertKeyValue("type", newType);					
   b4bd4:	462a      	mov	r2, r5
   b4bd6:	a80a      	add	r0, sp, #40	; 0x28
   b4bd8:	4915      	ldr	r1, [pc, #84]	; (b4c30 <_Z7setTypeii+0x210>)
   b4bda:	f7ff fd83 	bl	b46e4 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>
					mod.insertKeyValue("p", compressedJoinPayload);
   b4bde:	9a04      	ldr	r2, [sp, #16]
   b4be0:	4914      	ldr	r1, [pc, #80]	; (b4c34 <_Z7setTypeii+0x214>)
   b4be2:	a80a      	add	r0, sp, #40	; 0x28
   b4be4:	f7ff fd7e 	bl	b46e4 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>
					mod.insertKeyValue("p1", 0);
   b4be8:	a80a      	add	r0, sp, #40	; 0x28
   b4bea:	491d      	ldr	r1, [pc, #116]	; (b4c60 <_Z7setTypeii+0x240>)
   b4bec:	2200      	movs	r2, #0
   b4bee:	f7ff fd79 	bl	b46e4 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>
					mod.insertKeyValue("p2", 0);		
   b4bf2:	a80a      	add	r0, sp, #40	; 0x28
   b4bf4:	491b      	ldr	r1, [pc, #108]	; (b4c64 <_Z7setTypeii+0x244>)
   b4bf6:	2200      	movs	r2, #0
   b4bf8:	f7ff fd74 	bl	b46e4 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>
					mod.insertKeyValue("pend",pendingAlert);
   b4bfc:	9a05      	ldr	r2, [sp, #20]
   b4bfe:	490e      	ldr	r1, [pc, #56]	; (b4c38 <_Z7setTypeii+0x218>)
   b4c00:	a80a      	add	r0, sp, #40	; 0x28
   b4c02:	f7ff fd6f 	bl	b46e4 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>
					mod.insertKeyValue("cont",pendingAlertContext);
   b4c06:	9a06      	ldr	r2, [sp, #24]
   b4c08:	490c      	ldr	r1, [pc, #48]	; (b4c3c <_Z7setTypeii+0x21c>)
   b4c0a:	a80a      	add	r0, sp, #40	; 0x28
   b4c0c:	f7ff fd6a 	bl	b46e4 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>
				mod.finishObjectOrArray();
   b4c10:	a80a      	add	r0, sp, #40	; 0x28
   b4c12:	f000 fbe9 	bl	b53e8 <_ZN10JsonWriter19finishObjectOrArrayEv>
			mod.finish();
   b4c16:	a80a      	add	r0, sp, #40	; 0x28
   b4c18:	f000 ffca 	bl	b5bb0 <_ZN12JsonModifier6finishEv>
		} break;
   b4c1c:	e7af      	b.n	b4b7e <_Z7setTypeii+0x15e>
	if (nodeNumber == 0 || nodeNumber == 255) return false;
   b4c1e:	2000      	movs	r0, #0
   b4c20:	e7bc      	b.n	b4b9c <_Z7setTypeii+0x17c>
   b4c22:	bf00      	nop
   b4c24:	2003b7b4 	.word	0x2003b7b4
   b4c28:	000b95ab 	.word	0x000b95ab
   b4c2c:	000b969d 	.word	0x000b969d
   b4c30:	000b95b1 	.word	0x000b95b1
   b4c34:	000ba458 	.word	0x000ba458
   b4c38:	000b96ac 	.word	0x000b96ac
   b4c3c:	000b96b1 	.word	0x000b96b1
   b4c40:	000b983f 	.word	0x000b983f
   b4c44:	2003e6b0 	.word	0x2003e6b0
   b4c48:	000b9887 	.word	0x000b9887
   b4c4c:	2003b7b0 	.word	0x2003b7b0
   b4c50:	000b98b9 	.word	0x000b98b9
   b4c54:	000b9697 	.word	0x000b9697
   b4c58:	000b9862 	.word	0x000b9862
   b4c5c:	000b96a1 	.word	0x000b96a1
   b4c60:	000b96a6 	.word	0x000b96a6
   b4c64:	000b96a9 	.word	0x000b96a9
   b4c68:	000b9877 	.word	0x000b9877

000b4c6c <setup>:
void setup() {
   b4c6c:	b570      	push	{r4, r5, r6, lr}
   b4c6e:	ed2d 8b02 	vpush	{d8}
	delay(2000);                        // Give the serial port time to connect
   b4c72:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
void setup() {
   b4c76:	b086      	sub	sp, #24
	delay(2000);                        // Give the serial port time to connect
   b4c78:	f001 feb2 	bl	b69e0 <delay>
	nodeIDData::instance().setup();		// Initialize the nodeDatabase
   b4c7c:	f001 f85c 	bl	b5d38 <_ZN10nodeIDData8instanceEv>
   b4c80:	6803      	ldr	r3, [r0, #0]
	printTokens(jp, false);
   b4c82:	4c83      	ldr	r4, [pc, #524]	; (b4e90 <setup+0x224>)
	nodeIDData::instance().setup();		// Initialize the nodeDatabase
   b4c84:	681b      	ldr	r3, [r3, #0]
   b4c86:	4798      	blx	r3
	Log.info("Starting tests");
   b4c88:	4982      	ldr	r1, [pc, #520]	; (b4e94 <setup+0x228>)
   b4c8a:	4883      	ldr	r0, [pc, #524]	; (b4e98 <setup+0x22c>)
   b4c8c:	f7ff fa6e 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
	Log.info("First Test, we will clear the Node Database and load the sample data set");
   b4c90:	4982      	ldr	r1, [pc, #520]	; (b4e9c <setup+0x230>)
   b4c92:	4881      	ldr	r0, [pc, #516]	; (b4e98 <setup+0x22c>)
   b4c94:	f7ff fa6a 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
	nodeDatabase.resetNodeIDs();	// Clear the Node Database
   b4c98:	f001 f84e 	bl	b5d38 <_ZN10nodeIDData8instanceEv>
   b4c9c:	f001 f900 	bl	b5ea0 <_ZN10nodeIDData12resetNodeIDsEv>
	printTokens(jp, false);
   b4ca0:	2100      	movs	r1, #0
   b4ca2:	4620      	mov	r0, r4
   b4ca4:	f7ff faf4 	bl	b4290 <_Z11printTokensR10JsonParserb>
	Log.info("Now that the nodeDatabase is empty, we will load the sample data set");
   b4ca8:	497d      	ldr	r1, [pc, #500]	; (b4ea0 <setup+0x234>)
   b4caa:	487b      	ldr	r0, [pc, #492]	; (b4e98 <setup+0x22c>)
   b4cac:	f7ff fa5e 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
	bool addString(const char *data) { return addData(data, strlen(data)); }
   b4cb0:	f44f 6290 	mov.w	r2, #1152	; 0x480
   b4cb4:	497b      	ldr	r1, [pc, #492]	; (b4ea4 <setup+0x238>)
   b4cb6:	4620      	mov	r0, r4
   b4cb8:	f000 f997 	bl	b4fea <_ZN10JsonBuffer7addDataEPKcj>
	jp.parse();
   b4cbc:	4620      	mov	r0, r4
   b4cbe:	f000 fef1 	bl	b5aa4 <_ZN10JsonParser5parseEv>
	printTokens(jp, false);
   b4cc2:	2100      	movs	r1, #0
   b4cc4:	4620      	mov	r0, r4
   b4cc6:	f7ff fae3 	bl	b4290 <_Z11printTokensR10JsonParserb>
	Log.info("Next, we will load and store the node database into memory");
   b4cca:	4977      	ldr	r1, [pc, #476]	; (b4ea8 <setup+0x23c>)
   b4ccc:	4872      	ldr	r0, [pc, #456]	; (b4e98 <setup+0x22c>)
   b4cce:	f7ff fa4d 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
	nodeDatabase.set_nodeIDJson(data);				// Load the text object from this sketch into the nodeDatabase
   b4cd2:	f001 f831 	bl	b5d38 <_ZN10nodeIDData8instanceEv>
   b4cd6:	4973      	ldr	r1, [pc, #460]	; (b4ea4 <setup+0x238>)
   b4cd8:	f001 f864 	bl	b5da4 <_ZN10nodeIDData14set_nodeIDJsonEPKc>
	nodeDatabase.flush(false);						// Store the nodeDatabase into memory
   b4cdc:	f001 f82c 	bl	b5d38 <_ZN10nodeIDData8instanceEv>
   b4ce0:	6803      	ldr	r3, [r0, #0]
   b4ce2:	2100      	movs	r1, #0
   b4ce4:	68db      	ldr	r3, [r3, #12]
   b4ce6:	4798      	blx	r3
	Log.info("Note that our JSON object allocation is %4.2f%% of the memory allocated (less than 100%% is OK)", 100*(float)jp.getBufferLen()/(float)nodeDatabase.nodeDataStorageSize());
   b4ce8:	edd4 7a02 	vldr	s15, [r4, #8]
   b4cec:	eeb8 8a67 	vcvt.f32.u32	s16, s15
   b4cf0:	eddf 7a6e 	vldr	s15, [pc, #440]	; b4eac <setup+0x240>
   b4cf4:	ee28 8a27 	vmul.f32	s16, s16, s15
   b4cf8:	f001 f81e 	bl	b5d38 <_ZN10nodeIDData8instanceEv>
   b4cfc:	f001 f83c 	bl	b5d78 <_ZN10nodeIDData19nodeDataStorageSizeEv>
   b4d00:	ee07 0a90 	vmov	s15, r0
   b4d04:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b4d08:	eec8 7a27 	vdiv.f32	s15, s16, s15
   b4d0c:	ee17 0a90 	vmov	r0, s15
   b4d10:	f004 f9f2 	bl	b90f8 <__aeabi_f2d>
   b4d14:	460b      	mov	r3, r1
   b4d16:	4602      	mov	r2, r0
   b4d18:	4965      	ldr	r1, [pc, #404]	; (b4eb0 <setup+0x244>)
   b4d1a:	485f      	ldr	r0, [pc, #380]	; (b4e98 <setup+0x22c>)
   b4d1c:	f7ff fa26 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
	jp.clear();										// Clear the JSON object from memory
   b4d20:	4620      	mov	r0, r4
   b4d22:	f000 f97f 	bl	b5024 <_ZN10JsonBuffer5clearEv>
	jp.addString(nodeDatabase.get_nodeIDJson());	// Read in the JSON string from memory
   b4d26:	f001 f807 	bl	b5d38 <_ZN10nodeIDData8instanceEv>
   b4d2a:	4601      	mov	r1, r0
   b4d2c:	a802      	add	r0, sp, #8
   b4d2e:	f001 f827 	bl	b5d80 <_ZNK10nodeIDData14get_nodeIDJsonEv>
    char operator [] (unsigned int index) const;
    char& operator [] (unsigned int index);
    void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
    void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
        {getBytes((unsigned char *)buf, bufsize, index);}
    const char * c_str() const { return buffer; }
   b4d32:	9902      	ldr	r1, [sp, #8]
   b4d34:	9101      	str	r1, [sp, #4]
   b4d36:	4608      	mov	r0, r1
   b4d38:	f004 fae9 	bl	b930e <strlen>
   b4d3c:	9901      	ldr	r1, [sp, #4]
   b4d3e:	4602      	mov	r2, r0
   b4d40:	4620      	mov	r0, r4
   b4d42:	f000 f952 	bl	b4fea <_ZN10JsonBuffer7addDataEPKcj>
   b4d46:	a802      	add	r0, sp, #8
   b4d48:	f003 fd64 	bl	b8814 <_ZN6StringD1Ev>
	Log.info("The node string is: %s",nodeDatabase.get_nodeIDJson().c_str());
   b4d4c:	f000 fff4 	bl	b5d38 <_ZN10nodeIDData8instanceEv>
   b4d50:	4601      	mov	r1, r0
   b4d52:	a802      	add	r0, sp, #8
   b4d54:	f001 f814 	bl	b5d80 <_ZNK10nodeIDData14get_nodeIDJsonEv>
   b4d58:	9a02      	ldr	r2, [sp, #8]
   b4d5a:	4956      	ldr	r1, [pc, #344]	; (b4eb4 <setup+0x248>)
   b4d5c:	484e      	ldr	r0, [pc, #312]	; (b4e98 <setup+0x22c>)
   b4d5e:	f7ff fa05 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
   b4d62:	a802      	add	r0, sp, #8
   b4d64:	f003 fd56 	bl	b8814 <_ZN6StringD1Ev>
	if (jp.parse()) Log.info("Parsed Successfully");
   b4d68:	4620      	mov	r0, r4
   b4d6a:	f000 fe9b 	bl	b5aa4 <_ZN10JsonParser5parseEv>
   b4d6e:	2800      	cmp	r0, #0
   b4d70:	f000 8088 	beq.w	b4e84 <setup+0x218>
   b4d74:	4950      	ldr	r1, [pc, #320]	; (b4eb8 <setup+0x24c>)
		Log.info("Parsing error");
   b4d76:	4848      	ldr	r0, [pc, #288]	; (b4e98 <setup+0x22c>)
	byte nodeNumber = findNodeNumber(uniqueID_1);
   b4d78:	4c50      	ldr	r4, [pc, #320]	; (b4ebc <setup+0x250>)
	setType(nodeNumber, sensorType_2);
   b4d7a:	4e51      	ldr	r6, [pc, #324]	; (b4ec0 <setup+0x254>)
	setType(nodeNumber, sensorType_3);
   b4d7c:	4d51      	ldr	r5, [pc, #324]	; (b4ec4 <setup+0x258>)
		Log.info("Parsing error");
   b4d7e:	f7ff f9f5 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
	printTokens(jp, false);
   b4d82:	4843      	ldr	r0, [pc, #268]	; (b4e90 <setup+0x224>)
   b4d84:	2100      	movs	r1, #0
   b4d86:	f7ff fa83 	bl	b4290 <_Z11printTokensR10JsonParserb>
	Log.info("Finally, we will add a new node to the database and print the database");
   b4d8a:	494f      	ldr	r1, [pc, #316]	; (b4ec8 <setup+0x25c>)
   b4d8c:	4842      	ldr	r0, [pc, #264]	; (b4e98 <setup+0x22c>)
   b4d8e:	f7ff f9ed 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
	byte nodeNumber = findNodeNumber(uniqueID_1);
   b4d92:	6820      	ldr	r0, [r4, #0]
   b4d94:	f7ff fdac 	bl	b48f0 <_Z14findNodeNumberm>
	Log.info("The node number is: %d",nodeNumber);
   b4d98:	494c      	ldr	r1, [pc, #304]	; (b4ecc <setup+0x260>)
	byte nodeNumber = findNodeNumber(uniqueID_1);
   b4d9a:	4602      	mov	r2, r0
	Log.info("The node number is: %d",nodeNumber);
   b4d9c:	483e      	ldr	r0, [pc, #248]	; (b4e98 <setup+0x22c>)
   b4d9e:	f7ff f9e5 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
	printTokens(jp, false);
   b4da2:	2100      	movs	r1, #0
   b4da4:	483a      	ldr	r0, [pc, #232]	; (b4e90 <setup+0x224>)
   b4da6:	f7ff fa73 	bl	b4290 <_Z11printTokensR10JsonParserb>
	printNodeData(false);
   b4daa:	2000      	movs	r0, #0
   b4dac:	f7ff fb82 	bl	b44b4 <_Z13printNodeDatab>
	Log.info("Now we will change the type of the node and print the database");
   b4db0:	4947      	ldr	r1, [pc, #284]	; (b4ed0 <setup+0x264>)
   b4db2:	4839      	ldr	r0, [pc, #228]	; (b4e98 <setup+0x22c>)
   b4db4:	f7ff f9da 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
	nodeNumber = findNodeNumber(uniqueID_1);
   b4db8:	6820      	ldr	r0, [r4, #0]
   b4dba:	f7ff fd99 	bl	b48f0 <_Z14findNodeNumberm>
   b4dbe:	4604      	mov	r4, r0
	byte currentType = getType(nodeNumber);
   b4dc0:	f7ff fa12 	bl	b41e8 <_Z7getTypei>
	Log.info("The current type for node number %d is: %d",nodeNumber, currentType);
   b4dc4:	4622      	mov	r2, r4
	byte currentType = getType(nodeNumber);
   b4dc6:	4603      	mov	r3, r0
	Log.info("The current type for node number %d is: %d",nodeNumber, currentType);
   b4dc8:	4942      	ldr	r1, [pc, #264]	; (b4ed4 <setup+0x268>)
   b4dca:	4833      	ldr	r0, [pc, #204]	; (b4e98 <setup+0x22c>)
   b4dcc:	f7ff f9ce 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
	setType(nodeNumber, sensorType_2);
   b4dd0:	6831      	ldr	r1, [r6, #0]
   b4dd2:	4620      	mov	r0, r4
   b4dd4:	f7ff fe24 	bl	b4a20 <_Z7setTypeii>
	currentType = getType(nodeNumber);
   b4dd8:	4620      	mov	r0, r4
   b4dda:	f7ff fa05 	bl	b41e8 <_Z7getTypei>
	Log.info("The new type for node number %d is: %d",nodeNumber, currentType);
   b4dde:	4622      	mov	r2, r4
	currentType = getType(nodeNumber);
   b4de0:	4603      	mov	r3, r0
	Log.info("The new type for node number %d is: %d",nodeNumber, currentType);
   b4de2:	493d      	ldr	r1, [pc, #244]	; (b4ed8 <setup+0x26c>)
   b4de4:	482c      	ldr	r0, [pc, #176]	; (b4e98 <setup+0x22c>)
   b4de6:	f7ff f9c1 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
	Log.info("Now we will change the type which will alter its structure and print the database");
   b4dea:	493c      	ldr	r1, [pc, #240]	; (b4edc <setup+0x270>)
   b4dec:	482a      	ldr	r0, [pc, #168]	; (b4e98 <setup+0x22c>)
   b4dee:	f7ff f9bd 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
	setType(nodeNumber, sensorType_3);
   b4df2:	6829      	ldr	r1, [r5, #0]
   b4df4:	4620      	mov	r0, r4
   b4df6:	f7ff fe13 	bl	b4a20 <_Z7setTypeii>
	printTokens(jp, false);
   b4dfa:	2100      	movs	r1, #0
   b4dfc:	4824      	ldr	r0, [pc, #144]	; (b4e90 <setup+0x224>)
   b4dfe:	f7ff fa47 	bl	b4290 <_Z11printTokensR10JsonParserb>
	printNodeData(false);
   b4e02:	2000      	movs	r0, #0
   b4e04:	f7ff fb56 	bl	b44b4 <_Z13printNodeDatab>
	Log.info("Now we will change the type on a note that is in the middle of the pack and then change it back. ");
   b4e08:	4935      	ldr	r1, [pc, #212]	; (b4ee0 <setup+0x274>)
   b4e0a:	4823      	ldr	r0, [pc, #140]	; (b4e98 <setup+0x22c>)
   b4e0c:	f7ff f9ae 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
	nodeNumber = findNodeNumber(uniqueID_2);
   b4e10:	4b34      	ldr	r3, [pc, #208]	; (b4ee4 <setup+0x278>)
   b4e12:	6818      	ldr	r0, [r3, #0]
   b4e14:	f7ff fd6c 	bl	b48f0 <_Z14findNodeNumberm>
   b4e18:	4604      	mov	r4, r0
	currentType = getType(nodeNumber);
   b4e1a:	f7ff f9e5 	bl	b41e8 <_Z7getTypei>
	Log.info("The current type for node number %d is: %d",nodeNumber, currentType);
   b4e1e:	4622      	mov	r2, r4
	currentType = getType(nodeNumber);
   b4e20:	4603      	mov	r3, r0
	Log.info("The current type for node number %d is: %d",nodeNumber, currentType);
   b4e22:	492c      	ldr	r1, [pc, #176]	; (b4ed4 <setup+0x268>)
   b4e24:	481c      	ldr	r0, [pc, #112]	; (b4e98 <setup+0x22c>)
   b4e26:	f7ff f9a1 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
	setType(nodeNumber, sensorType_2);
   b4e2a:	6831      	ldr	r1, [r6, #0]
   b4e2c:	4620      	mov	r0, r4
   b4e2e:	f7ff fdf7 	bl	b4a20 <_Z7setTypeii>
	printNodeData(false);
   b4e32:	2000      	movs	r0, #0
   b4e34:	f7ff fb3e 	bl	b44b4 <_Z13printNodeDatab>
	currentType = getType(nodeNumber);
   b4e38:	4620      	mov	r0, r4
   b4e3a:	f7ff f9d5 	bl	b41e8 <_Z7getTypei>
	Log.info("The new type for node number %d is: %d",nodeNumber, currentType);
   b4e3e:	4622      	mov	r2, r4
	currentType = getType(nodeNumber);
   b4e40:	4603      	mov	r3, r0
	Log.info("The new type for node number %d is: %d",nodeNumber, currentType);
   b4e42:	4925      	ldr	r1, [pc, #148]	; (b4ed8 <setup+0x26c>)
   b4e44:	4814      	ldr	r0, [pc, #80]	; (b4e98 <setup+0x22c>)
   b4e46:	f7ff f991 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
	setType(nodeNumber, sensorType_3);
   b4e4a:	6829      	ldr	r1, [r5, #0]
   b4e4c:	4620      	mov	r0, r4
   b4e4e:	f7ff fde7 	bl	b4a20 <_Z7setTypeii>
	currentType = getType(nodeNumber);
   b4e52:	4620      	mov	r0, r4
   b4e54:	f7ff f9c8 	bl	b41e8 <_Z7getTypei>
	Log.info("The new type for node number %d is: %d",nodeNumber, currentType);
   b4e58:	4622      	mov	r2, r4
	currentType = getType(nodeNumber);
   b4e5a:	4603      	mov	r3, r0
	Log.info("The new type for node number %d is: %d",nodeNumber, currentType);
   b4e5c:	491e      	ldr	r1, [pc, #120]	; (b4ed8 <setup+0x26c>)
   b4e5e:	480e      	ldr	r0, [pc, #56]	; (b4e98 <setup+0x22c>)
   b4e60:	f7ff f984 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
	printTokens(jp, false);
   b4e64:	480a      	ldr	r0, [pc, #40]	; (b4e90 <setup+0x224>)
   b4e66:	2100      	movs	r1, #0
   b4e68:	f7ff fa12 	bl	b4290 <_Z11printTokensR10JsonParserb>
	Log.info("Notice how the new node is now at the end of the outer ojbect - this will break our code");
   b4e6c:	491e      	ldr	r1, [pc, #120]	; (b4ee8 <setup+0x27c>)
   b4e6e:	480a      	ldr	r0, [pc, #40]	; (b4e98 <setup+0x22c>)
   b4e70:	f7ff f97c 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
	Log.info("Finished test");
   b4e74:	491d      	ldr	r1, [pc, #116]	; (b4eec <setup+0x280>)
   b4e76:	4808      	ldr	r0, [pc, #32]	; (b4e98 <setup+0x22c>)
   b4e78:	f7ff f978 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
}
   b4e7c:	b006      	add	sp, #24
   b4e7e:	ecbd 8b02 	vpop	{d8}
   b4e82:	bd70      	pop	{r4, r5, r6, pc}
		nodeDatabase.resetNodeIDs();
   b4e84:	f000 ff58 	bl	b5d38 <_ZN10nodeIDData8instanceEv>
   b4e88:	f001 f80a 	bl	b5ea0 <_ZN10nodeIDData12resetNodeIDsEv>
		Log.info("Parsing error");
   b4e8c:	4918      	ldr	r1, [pc, #96]	; (b4ef0 <setup+0x284>)
   b4e8e:	e772      	b.n	b4d76 <setup+0x10a>
   b4e90:	2003b7b4 	.word	0x2003b7b4
   b4e94:	000b98e7 	.word	0x000b98e7
   b4e98:	2003e6b0 	.word	0x2003e6b0
   b4e9c:	000b98f6 	.word	0x000b98f6
   b4ea0:	000b993f 	.word	0x000b993f
   b4ea4:	000b9984 	.word	0x000b9984
   b4ea8:	000b9e05 	.word	0x000b9e05
   b4eac:	42c80000 	.word	0x42c80000
   b4eb0:	000b9e40 	.word	0x000b9e40
   b4eb4:	000b9ea0 	.word	0x000b9ea0
   b4eb8:	000b9eb7 	.word	0x000b9eb7
   b4ebc:	2003b704 	.word	0x2003b704
   b4ec0:	2003b6fc 	.word	0x2003b6fc
   b4ec4:	2003b700 	.word	0x2003b700
   b4ec8:	000b9ed9 	.word	0x000b9ed9
   b4ecc:	000b9f20 	.word	0x000b9f20
   b4ed0:	000b9f37 	.word	0x000b9f37
   b4ed4:	000b9f76 	.word	0x000b9f76
   b4ed8:	000b9fa1 	.word	0x000b9fa1
   b4edc:	000b9fc8 	.word	0x000b9fc8
   b4ee0:	000ba01a 	.word	0x000ba01a
   b4ee4:	2003b708 	.word	0x2003b708
   b4ee8:	000ba07c 	.word	0x000ba07c
   b4eec:	000ba0d5 	.word	0x000ba0d5
   b4ef0:	000b9ecb 	.word	0x000b9ecb

000b4ef4 <_ZN10JsonBufferD1Ev>:


JsonBuffer::JsonBuffer()  : buffer(0), bufferLen(0), offset(0), staticBuffers(false) {

}
JsonBuffer::~JsonBuffer() {
   b4ef4:	b510      	push	{r4, lr}
   b4ef6:	4b05      	ldr	r3, [pc, #20]	; (b4f0c <_ZN10JsonBufferD1Ev+0x18>)
   b4ef8:	6003      	str	r3, [r0, #0]
	if (!staticBuffers && buffer) {
   b4efa:	7c03      	ldrb	r3, [r0, #16]
JsonBuffer::~JsonBuffer() {
   b4efc:	4604      	mov	r4, r0
	if (!staticBuffers && buffer) {
   b4efe:	b91b      	cbnz	r3, b4f08 <_ZN10JsonBufferD1Ev+0x14>
   b4f00:	6840      	ldr	r0, [r0, #4]
   b4f02:	b108      	cbz	r0, b4f08 <_ZN10JsonBufferD1Ev+0x14>
		free(buffer);
   b4f04:	f001 fd14 	bl	b6930 <free>
	}
}
   b4f08:	4620      	mov	r0, r4
   b4f0a:	bd10      	pop	{r4, pc}
   b4f0c:	000ba134 	.word	0x000ba134

000b4f10 <_ZN10JsonBufferD0Ev>:
JsonBuffer::~JsonBuffer() {
   b4f10:	b510      	push	{r4, lr}
   b4f12:	4604      	mov	r4, r0
}
   b4f14:	f7ff ffee 	bl	b4ef4 <_ZN10JsonBufferD1Ev>
   b4f18:	4620      	mov	r0, r4
   b4f1a:	2114      	movs	r1, #20
   b4f1c:	f7ff f8bd 	bl	b409a <_ZdlPvj>
   b4f20:	4620      	mov	r0, r4
   b4f22:	bd10      	pop	{r4, pc}

000b4f24 <_ZN10JsonWriterD1Ev>:
//
JsonWriter::JsonWriter() : JsonBuffer(), floatPlaces(-1) {
	init();
}

JsonWriter::~JsonWriter() {
   b4f24:	b510      	push	{r4, lr}
   b4f26:	4b03      	ldr	r3, [pc, #12]	; (b4f34 <_ZN10JsonWriterD1Ev+0x10>)
   b4f28:	6003      	str	r3, [r0, #0]
   b4f2a:	4604      	mov	r4, r0
   b4f2c:	f7ff ffe2 	bl	b4ef4 <_ZN10JsonBufferD1Ev>

}
   b4f30:	4620      	mov	r0, r4
   b4f32:	bd10      	pop	{r4, pc}
   b4f34:	000ba154 	.word	0x000ba154

000b4f38 <_ZN10JsonWriterD0Ev>:
JsonWriter::~JsonWriter() {
   b4f38:	b510      	push	{r4, lr}
   b4f3a:	4604      	mov	r4, r0
}
   b4f3c:	f7ff fff2 	bl	b4f24 <_ZN10JsonWriterD1Ev>
   b4f40:	4620      	mov	r0, r4
   b4f42:	2130      	movs	r1, #48	; 0x30
   b4f44:	f7ff f8a9 	bl	b409a <_ZdlPvj>
   b4f48:	4620      	mov	r0, r4
   b4f4a:	bd10      	pop	{r4, pc}

000b4f4c <_ZN12JsonModifierD1Ev>:

JsonModifier::JsonModifier(JsonParser &jp) : jp(jp) {

}

JsonModifier::~JsonModifier() {
   b4f4c:	b510      	push	{r4, lr}
   b4f4e:	4b03      	ldr	r3, [pc, #12]	; (b4f5c <_ZN12JsonModifierD1Ev+0x10>)
   b4f50:	6003      	str	r3, [r0, #0]
   b4f52:	4604      	mov	r4, r0
   b4f54:	f7ff ffe6 	bl	b4f24 <_ZN10JsonWriterD1Ev>

}
   b4f58:	4620      	mov	r0, r4
   b4f5a:	bd10      	pop	{r4, pc}
   b4f5c:	000ba164 	.word	0x000ba164

000b4f60 <_ZN12JsonModifierD0Ev>:
JsonModifier::~JsonModifier() {
   b4f60:	b510      	push	{r4, lr}
   b4f62:	4604      	mov	r4, r0
}
   b4f64:	f7ff fff2 	bl	b4f4c <_ZN12JsonModifierD1Ev>
   b4f68:	4620      	mov	r0, r4
   b4f6a:	2140      	movs	r1, #64	; 0x40
   b4f6c:	f7ff f895 	bl	b409a <_ZdlPvj>
   b4f70:	4620      	mov	r0, r4
   b4f72:	bd10      	pop	{r4, pc}

000b4f74 <_ZN10JsonParserD1Ev>:
JsonParser::~JsonParser() {
   b4f74:	b510      	push	{r4, lr}
   b4f76:	4b07      	ldr	r3, [pc, #28]	; (b4f94 <_ZN10JsonParserD1Ev+0x20>)
   b4f78:	6003      	str	r3, [r0, #0]
	if (!staticBuffers && tokens) {
   b4f7a:	7c03      	ldrb	r3, [r0, #16]
JsonParser::~JsonParser() {
   b4f7c:	4604      	mov	r4, r0
	if (!staticBuffers && tokens) {
   b4f7e:	b91b      	cbnz	r3, b4f88 <_ZN10JsonParserD1Ev+0x14>
   b4f80:	6940      	ldr	r0, [r0, #20]
   b4f82:	b108      	cbz	r0, b4f88 <_ZN10JsonParserD1Ev+0x14>
		free(tokens);
   b4f84:	f001 fcd4 	bl	b6930 <free>
JsonParser::~JsonParser() {
   b4f88:	4620      	mov	r0, r4
   b4f8a:	f7ff ffb3 	bl	b4ef4 <_ZN10JsonBufferD1Ev>
}
   b4f8e:	4620      	mov	r0, r4
   b4f90:	bd10      	pop	{r4, pc}
   b4f92:	bf00      	nop
   b4f94:	000ba144 	.word	0x000ba144

000b4f98 <_ZN10JsonParserD0Ev>:
JsonParser::~JsonParser() {
   b4f98:	b510      	push	{r4, lr}
   b4f9a:	4604      	mov	r4, r0
}
   b4f9c:	f7ff ffea 	bl	b4f74 <_ZN10JsonParserD1Ev>
   b4fa0:	4620      	mov	r0, r4
   b4fa2:	212c      	movs	r1, #44	; 0x2c
   b4fa4:	f7ff f879 	bl	b409a <_ZdlPvj>
   b4fa8:	4620      	mov	r0, r4
   b4faa:	bd10      	pop	{r4, pc}

000b4fac <_ZN10JsonBufferC1Ev>:
JsonBuffer::JsonBuffer()  : buffer(0), bufferLen(0), offset(0), staticBuffers(false) {
   b4fac:	4a03      	ldr	r2, [pc, #12]	; (b4fbc <_ZN10JsonBufferC1Ev+0x10>)
   b4fae:	6002      	str	r2, [r0, #0]
   b4fb0:	2200      	movs	r2, #0
   b4fb2:	e9c0 2201 	strd	r2, r2, [r0, #4]
   b4fb6:	60c2      	str	r2, [r0, #12]
   b4fb8:	7402      	strb	r2, [r0, #16]
}
   b4fba:	4770      	bx	lr
   b4fbc:	000ba134 	.word	0x000ba134

000b4fc0 <_ZN10JsonBuffer8allocateEj>:
bool JsonBuffer::allocate(size_t len) {
   b4fc0:	b538      	push	{r3, r4, r5, lr}
	if (!staticBuffers) {
   b4fc2:	7c03      	ldrb	r3, [r0, #16]
bool JsonBuffer::allocate(size_t len) {
   b4fc4:	4604      	mov	r4, r0
   b4fc6:	460d      	mov	r5, r1
	if (!staticBuffers) {
   b4fc8:	b10b      	cbz	r3, b4fce <_ZN10JsonBuffer8allocateEj+0xe>
		return false;
   b4fca:	2000      	movs	r0, #0
}
   b4fcc:	bd38      	pop	{r3, r4, r5, pc}
		if (buffer) {
   b4fce:	6840      	ldr	r0, [r0, #4]
   b4fd0:	b138      	cbz	r0, b4fe2 <_ZN10JsonBuffer8allocateEj+0x22>
			newBuffer = (char *) realloc(buffer, len);
   b4fd2:	f001 fcb5 	bl	b6940 <realloc>
		if (newBuffer) {
   b4fd6:	2800      	cmp	r0, #0
   b4fd8:	d0f7      	beq.n	b4fca <_ZN10JsonBuffer8allocateEj+0xa>
			bufferLen = len;
   b4fda:	e9c4 0501 	strd	r0, r5, [r4, #4]
			return true;
   b4fde:	2001      	movs	r0, #1
   b4fe0:	e7f4      	b.n	b4fcc <_ZN10JsonBuffer8allocateEj+0xc>
			newBuffer = (char *) malloc(len);
   b4fe2:	4608      	mov	r0, r1
   b4fe4:	f001 fc9c 	bl	b6920 <malloc>
   b4fe8:	e7f5      	b.n	b4fd6 <_ZN10JsonBuffer8allocateEj+0x16>

000b4fea <_ZN10JsonBuffer7addDataEPKcj>:
bool JsonBuffer::addData(const char *data, size_t dataLen) {
   b4fea:	b570      	push	{r4, r5, r6, lr}
	if (!buffer || (offset + dataLen) > bufferLen) {
   b4fec:	68c3      	ldr	r3, [r0, #12]
bool JsonBuffer::addData(const char *data, size_t dataLen) {
   b4fee:	460e      	mov	r6, r1
   b4ff0:	4615      	mov	r5, r2
	if (!buffer || (offset + dataLen) > bufferLen) {
   b4ff2:	18d1      	adds	r1, r2, r3
   b4ff4:	6842      	ldr	r2, [r0, #4]
bool JsonBuffer::addData(const char *data, size_t dataLen) {
   b4ff6:	4604      	mov	r4, r0
	if (!buffer || (offset + dataLen) > bufferLen) {
   b4ff8:	b172      	cbz	r2, b5018 <_ZN10JsonBuffer7addDataEPKcj+0x2e>
   b4ffa:	6882      	ldr	r2, [r0, #8]
   b4ffc:	428a      	cmp	r2, r1
   b4ffe:	d30b      	bcc.n	b5018 <_ZN10JsonBuffer7addDataEPKcj+0x2e>
	memcpy(&buffer[offset], data, dataLen);
   b5000:	6860      	ldr	r0, [r4, #4]
   b5002:	68e3      	ldr	r3, [r4, #12]
   b5004:	462a      	mov	r2, r5
   b5006:	4631      	mov	r1, r6
   b5008:	4418      	add	r0, r3
   b500a:	f004 f8db 	bl	b91c4 <memcpy>
	offset += dataLen;
   b500e:	68e2      	ldr	r2, [r4, #12]
   b5010:	442a      	add	r2, r5
   b5012:	60e2      	str	r2, [r4, #12]
	return true;
   b5014:	2001      	movs	r0, #1
}
   b5016:	bd70      	pop	{r4, r5, r6, pc}
		if (!allocate(offset + dataLen)) {
   b5018:	4620      	mov	r0, r4
   b501a:	f7ff ffd1 	bl	b4fc0 <_ZN10JsonBuffer8allocateEj>
   b501e:	2800      	cmp	r0, #0
   b5020:	d1ee      	bne.n	b5000 <_ZN10JsonBuffer7addDataEPKcj+0x16>
   b5022:	e7f8      	b.n	b5016 <_ZN10JsonBuffer7addDataEPKcj+0x2c>

000b5024 <_ZN10JsonBuffer5clearEv>:
	if (buffer && bufferLen) {
   b5024:	6843      	ldr	r3, [r0, #4]
	offset = 0;
   b5026:	2100      	movs	r1, #0
   b5028:	60c1      	str	r1, [r0, #12]
	if (buffer && bufferLen) {
   b502a:	b123      	cbz	r3, b5036 <_ZN10JsonBuffer5clearEv+0x12>
   b502c:	6882      	ldr	r2, [r0, #8]
   b502e:	b112      	cbz	r2, b5036 <_ZN10JsonBuffer5clearEv+0x12>
		memset(buffer, 0, bufferLen);
   b5030:	4618      	mov	r0, r3
   b5032:	f004 b8ef 	b.w	b9214 <memset>
}
   b5036:	4770      	bx	lr

000b5038 <_ZN10JsonParserC1EPcjPN21JsonParserGeneratorRK9jsmntok_tEj>:
JsonParser::JsonParser(char *buffer, size_t bufferLen, JsonParserGeneratorRK::jsmntok_t *tokens, size_t maxTokens) :
   b5038:	b510      	push	{r4, lr}
JsonBuffer::JsonBuffer(char *buffer, size_t bufferLen)  : buffer(buffer), bufferLen(bufferLen), offset(0), staticBuffers(true) {
   b503a:	e9c0 1201 	strd	r1, r2, [r0, #4]
   b503e:	2200      	movs	r2, #0
   b5040:	60c2      	str	r2, [r0, #12]
   b5042:	2201      	movs	r2, #1
   b5044:	7402      	strb	r2, [r0, #16]
		JsonBuffer(buffer, bufferLen), tokens(tokens), maxTokens(maxTokens) {
   b5046:	6143      	str	r3, [r0, #20]
   b5048:	4a02      	ldr	r2, [pc, #8]	; (b5054 <_ZN10JsonParserC1EPcjPN21JsonParserGeneratorRK9jsmntok_tEj+0x1c>)
   b504a:	9b02      	ldr	r3, [sp, #8]
   b504c:	6002      	str	r2, [r0, #0]
   b504e:	61c3      	str	r3, [r0, #28]
}
   b5050:	bd10      	pop	{r4, pc}
   b5052:	bf00      	nop
   b5054:	000ba144 	.word	0x000ba144

000b5058 <_ZNK10JsonParser13getOuterArrayEv>:
	for(const JsonParserGeneratorRK::jsmntok_t *token = tokens; token < tokensEnd; token++) {
   b5058:	e9d0 0305 	ldrd	r0, r3, [r0, #20]
   b505c:	4283      	cmp	r3, r0
   b505e:	d904      	bls.n	b506a <_ZNK10JsonParser13getOuterArrayEv+0x12>
		if (token->type == JsonParserGeneratorRK::JSMN_ARRAY) {
   b5060:	7802      	ldrb	r2, [r0, #0]
   b5062:	2a02      	cmp	r2, #2
   b5064:	d002      	beq.n	b506c <_ZNK10JsonParser13getOuterArrayEv+0x14>
	for(const JsonParserGeneratorRK::jsmntok_t *token = tokens; token < tokensEnd; token++) {
   b5066:	3010      	adds	r0, #16
   b5068:	e7f8      	b.n	b505c <_ZNK10JsonParser13getOuterArrayEv+0x4>
	return 0;
   b506a:	2000      	movs	r0, #0
}
   b506c:	4770      	bx	lr

000b506e <_ZNK10JsonParser14getOuterObjectEv>:
	if (tokens < tokensEnd && tokens[0].type == JsonParserGeneratorRK::JSMN_OBJECT) {
   b506e:	e9d0 0305 	ldrd	r0, r3, [r0, #20]
   b5072:	4298      	cmp	r0, r3
   b5074:	d204      	bcs.n	b5080 <_ZNK10JsonParser14getOuterObjectEv+0x12>
   b5076:	7803      	ldrb	r3, [r0, #0]
		return 0;
   b5078:	2b01      	cmp	r3, #1
   b507a:	bf18      	it	ne
   b507c:	2000      	movne	r0, #0
   b507e:	4770      	bx	lr
   b5080:	2000      	movs	r0, #0
}
   b5082:	4770      	bx	lr

000b5084 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>:
bool JsonParser::skipObject(const JsonParserGeneratorRK::jsmntok_t *container, const JsonParserGeneratorRK::jsmntok_t *&obj) const {
   b5084:	b570      	push	{r4, r5, r6, lr}
	int curObjectEnd = obj->end;
   b5086:	6813      	ldr	r3, [r2, #0]
   b5088:	689d      	ldr	r5, [r3, #8]
	while(++obj < tokensEnd && obj->end < container->end && obj->end <= curObjectEnd) {
   b508a:	6813      	ldr	r3, [r2, #0]
   b508c:	f103 0410 	add.w	r4, r3, #16
   b5090:	6014      	str	r4, [r2, #0]
   b5092:	6986      	ldr	r6, [r0, #24]
   b5094:	42b4      	cmp	r4, r6
   b5096:	d20a      	bcs.n	b50ae <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_+0x2a>
   b5098:	699b      	ldr	r3, [r3, #24]
   b509a:	688c      	ldr	r4, [r1, #8]
   b509c:	42a3      	cmp	r3, r4
   b509e:	da01      	bge.n	b50a4 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_+0x20>
   b50a0:	42ab      	cmp	r3, r5
   b50a2:	ddf2      	ble.n	b508a <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_+0x6>
	if (obj >= tokensEnd || obj->end > container->end) {
   b50a4:	42a3      	cmp	r3, r4
   b50a6:	bfcc      	ite	gt
   b50a8:	2000      	movgt	r0, #0
   b50aa:	2001      	movle	r0, #1
   b50ac:	e000      	b.n	b50b0 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_+0x2c>
		return false;
   b50ae:	2000      	movs	r0, #0
}
   b50b0:	bd70      	pop	{r4, r5, r6, pc}

000b50b2 <_ZNK10JsonParser15getTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj>:
const JsonParserGeneratorRK::jsmntok_t *JsonParser::getTokenByIndex(const JsonParserGeneratorRK::jsmntok_t *container, size_t desiredIndex) const {
   b50b2:	b573      	push	{r0, r1, r4, r5, r6, lr}
	const JsonParserGeneratorRK::jsmntok_t *token = container + 1;
   b50b4:	f101 0310 	add.w	r3, r1, #16
const JsonParserGeneratorRK::jsmntok_t *JsonParser::getTokenByIndex(const JsonParserGeneratorRK::jsmntok_t *container, size_t desiredIndex) const {
   b50b8:	4604      	mov	r4, r0
   b50ba:	4616      	mov	r6, r2
	const JsonParserGeneratorRK::jsmntok_t *token = container + 1;
   b50bc:	9301      	str	r3, [sp, #4]
	size_t index = 0;
   b50be:	2500      	movs	r5, #0
	while(token < tokensEnd && token->end < container->end) {
   b50c0:	9801      	ldr	r0, [sp, #4]
   b50c2:	69a3      	ldr	r3, [r4, #24]
   b50c4:	4283      	cmp	r3, r0
   b50c6:	d90b      	bls.n	b50e0 <_ZNK10JsonParser15getTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj+0x2e>
   b50c8:	6882      	ldr	r2, [r0, #8]
   b50ca:	688b      	ldr	r3, [r1, #8]
   b50cc:	429a      	cmp	r2, r3
   b50ce:	da07      	bge.n	b50e0 <_ZNK10JsonParser15getTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj+0x2e>
		if (desiredIndex == index) {
   b50d0:	42b5      	cmp	r5, r6
   b50d2:	d006      	beq.n	b50e2 <_ZNK10JsonParser15getTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj+0x30>
		skipObject(container, token);
   b50d4:	aa01      	add	r2, sp, #4
   b50d6:	4620      	mov	r0, r4
		index++;
   b50d8:	3501      	adds	r5, #1
		skipObject(container, token);
   b50da:	f7ff ffd3 	bl	b5084 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>
	while(token < tokensEnd && token->end < container->end) {
   b50de:	e7ef      	b.n	b50c0 <_ZNK10JsonParser15getTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj+0xe>
	return 0;
   b50e0:	2000      	movs	r0, #0
}
   b50e2:	b002      	add	sp, #8
   b50e4:	bd70      	pop	{r4, r5, r6, pc}

000b50e6 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j>:
bool JsonParser::getKeyValueTokenByIndex(const JsonParserGeneratorRK::jsmntok_t *container, const JsonParserGeneratorRK::jsmntok_t *&key, const JsonParserGeneratorRK::jsmntok_t *&value, size_t desiredIndex) const {
   b50e6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b50ea:	9d08      	ldr	r5, [sp, #32]
   b50ec:	4698      	mov	r8, r3
	const JsonParserGeneratorRK::jsmntok_t *token = container + 1;
   b50ee:	f101 0310 	add.w	r3, r1, #16
bool JsonParser::getKeyValueTokenByIndex(const JsonParserGeneratorRK::jsmntok_t *container, const JsonParserGeneratorRK::jsmntok_t *&key, const JsonParserGeneratorRK::jsmntok_t *&value, size_t desiredIndex) const {
   b50f2:	4604      	mov	r4, r0
   b50f4:	4617      	mov	r7, r2
	const JsonParserGeneratorRK::jsmntok_t *token = container + 1;
   b50f6:	9301      	str	r3, [sp, #4]
	size_t index = 0;
   b50f8:	2600      	movs	r6, #0
	while(token < tokensEnd && token->end < container->end) {
   b50fa:	9801      	ldr	r0, [sp, #4]
   b50fc:	69a3      	ldr	r3, [r4, #24]
   b50fe:	4283      	cmp	r3, r0
   b5100:	d91a      	bls.n	b5138 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x52>
   b5102:	6882      	ldr	r2, [r0, #8]
   b5104:	688b      	ldr	r3, [r1, #8]
   b5106:	429a      	cmp	r2, r3
   b5108:	da16      	bge.n	b5138 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x52>
		if (desiredIndex == index) {
   b510a:	42ae      	cmp	r6, r5
   b510c:	d10b      	bne.n	b5126 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x40>
			key = token;
   b510e:	6038      	str	r0, [r7, #0]
			if (skipObject(container, token)) {
   b5110:	aa01      	add	r2, sp, #4
   b5112:	4620      	mov	r0, r4
   b5114:	f7ff ffb6 	bl	b5084 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>
   b5118:	b128      	cbz	r0, b5126 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x40>
				value = token;
   b511a:	9b01      	ldr	r3, [sp, #4]
   b511c:	f8c8 3000 	str.w	r3, [r8]
}
   b5120:	b002      	add	sp, #8
   b5122:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		skipObject(container, token);
   b5126:	aa01      	add	r2, sp, #4
   b5128:	4620      	mov	r0, r4
   b512a:	f7ff ffab 	bl	b5084 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>
		skipObject(container, token);
   b512e:	4620      	mov	r0, r4
		index++;
   b5130:	3601      	adds	r6, #1
		skipObject(container, token);
   b5132:	f7ff ffa7 	bl	b5084 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>
	while(token < tokensEnd && token->end < container->end) {
   b5136:	e7e0      	b.n	b50fa <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x14>
	return false;
   b5138:	2000      	movs	r0, #0
   b513a:	e7f1      	b.n	b5120 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x3a>

000b513c <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj>:
void JsonParser::copyTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, char *dst, size_t dstLen) const {
   b513c:	b5f0      	push	{r4, r5, r6, r7, lr}
	for(ii = 0; ii < (token->end - token->start) && ii < ((int)dstLen - 1); ii++) {
   b513e:	3b01      	subs	r3, #1
   b5140:	2400      	movs	r4, #0
   b5142:	e9d1 7601 	ldrd	r7, r6, [r1, #4]
   b5146:	1bf6      	subs	r6, r6, r7
   b5148:	42a6      	cmp	r6, r4
   b514a:	dd08      	ble.n	b515e <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj+0x22>
   b514c:	42a3      	cmp	r3, r4
   b514e:	dd06      	ble.n	b515e <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj+0x22>
		dst[ii] = buffer[token->start + ii];
   b5150:	6845      	ldr	r5, [r0, #4]
   b5152:	443d      	add	r5, r7
   b5154:	5d2d      	ldrb	r5, [r5, r4]
   b5156:	f802 5b01 	strb.w	r5, [r2], #1
	for(ii = 0; ii < (token->end - token->start) && ii < ((int)dstLen - 1); ii++) {
   b515a:	3401      	adds	r4, #1
   b515c:	e7f1      	b.n	b5142 <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj+0x6>
	dst[ii] = 0;
   b515e:	2300      	movs	r3, #0
   b5160:	7013      	strb	r3, [r2, #0]
}
   b5162:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b5164 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tERi>:
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, int &result) const {
   b5164:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b5166:	4614      	mov	r4, r2
	copyTokenValue(token, tmp, sizeof(tmp));
   b5168:	2310      	movs	r3, #16
   b516a:	466a      	mov	r2, sp
   b516c:	f7ff ffe6 	bl	b513c <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj>
	if (sscanf(tmp, "%d", &result) == 1) {
   b5170:	4904      	ldr	r1, [pc, #16]	; (b5184 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tERi+0x20>)
   b5172:	4622      	mov	r2, r4
   b5174:	4668      	mov	r0, sp
   b5176:	f001 fbeb 	bl	b6950 <sscanf>
}
   b517a:	1e43      	subs	r3, r0, #1
   b517c:	4258      	negs	r0, r3
   b517e:	4158      	adcs	r0, r3
   b5180:	b004      	add	sp, #16
   b5182:	bd10      	pop	{r4, pc}
   b5184:	000b98b6 	.word	0x000b98b6

000b5188 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tERm>:
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, unsigned long &result) const {
   b5188:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b518a:	4614      	mov	r4, r2
	copyTokenValue(token, tmp, sizeof(tmp));
   b518c:	2310      	movs	r3, #16
   b518e:	466a      	mov	r2, sp
   b5190:	f7ff ffd4 	bl	b513c <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj>
	if (sscanf(tmp, "%lu", &result) == 1) {
   b5194:	4904      	ldr	r1, [pc, #16]	; (b51a8 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tERm+0x20>)
   b5196:	4622      	mov	r2, r4
   b5198:	4668      	mov	r0, sp
   b519a:	f001 fbd9 	bl	b6950 <sscanf>
}
   b519e:	1e43      	subs	r3, r0, #1
   b51a0:	4258      	negs	r0, r3
   b51a2:	4158      	adcs	r0, r3
   b51a4:	b004      	add	sp, #16
   b51a6:	bd10      	pop	{r4, pc}
   b51a8:	000b97f2 	.word	0x000b97f2

000b51ac <_ZN16JsonParserString6appendEc>:
void JsonParserString::append(char ch) {
   b51ac:	b510      	push	{r4, lr}
   b51ae:	4604      	mov	r4, r0
	if (str) {
   b51b0:	6800      	ldr	r0, [r0, #0]
void JsonParserString::append(char ch) {
   b51b2:	460b      	mov	r3, r1
	if (str) {
   b51b4:	b128      	cbz	r0, b51c2 <_ZN16JsonParserString6appendEc+0x16>
		str->concat(ch);
   b51b6:	f003 fbf8 	bl	b89aa <_ZN6String6concatEc>
		length++;
   b51ba:	68e3      	ldr	r3, [r4, #12]
   b51bc:	3301      	adds	r3, #1
   b51be:	60e3      	str	r3, [r4, #12]
}
   b51c0:	bd10      	pop	{r4, pc}
		if (buf && length < (bufLen - 1)) {
   b51c2:	6860      	ldr	r0, [r4, #4]
   b51c4:	2800      	cmp	r0, #0
   b51c6:	d0f8      	beq.n	b51ba <_ZN16JsonParserString6appendEc+0xe>
   b51c8:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
   b51cc:	3a01      	subs	r2, #1
   b51ce:	428a      	cmp	r2, r1
			buf[length] = ch;
   b51d0:	bf88      	it	hi
   b51d2:	5443      	strbhi	r3, [r0, r1]
   b51d4:	e7f1      	b.n	b51ba <_ZN16JsonParserString6appendEc+0xe>

000b51d6 <_ZN10JsonParser10appendUtf8EtR16JsonParserString>:
void JsonParser::appendUtf8(uint16_t unicode, JsonParserString &str) {
   b51d6:	4603      	mov	r3, r0
	if (unicode <= 0x007f) {
   b51d8:	2b7f      	cmp	r3, #127	; 0x7f
void JsonParser::appendUtf8(uint16_t unicode, JsonParserString &str) {
   b51da:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b51dc:	4608      	mov	r0, r1
		str.append((char)unicode);
   b51de:	b2d9      	uxtb	r1, r3
	if (unicode <= 0x007f) {
   b51e0:	d804      	bhi.n	b51ec <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0x16>
}
   b51e2:	b003      	add	sp, #12
   b51e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		str.append((char)value);
   b51e8:	f7ff bfe0 	b.w	b51ac <_ZN16JsonParserString6appendEc>
		value = (0b10000000 | (unicode & 0b111111));
   b51ec:	f001 013f 	and.w	r1, r1, #63	; 0x3f
	if (unicode <= 0x7ff) {
   b51f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
		value = (0b11000000 | ((unicode >> 6) & 0b11111));
   b51f4:	f3c3 1587 	ubfx	r5, r3, #6, #8
		value = (0b10000000 | (unicode & 0b111111));
   b51f8:	f041 0480 	orr.w	r4, r1, #128	; 0x80
	if (unicode <= 0x7ff) {
   b51fc:	d207      	bcs.n	b520e <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0x38>
		str.append((char)value);
   b51fe:	f045 01c0 	orr.w	r1, r5, #192	; 0xc0
   b5202:	9001      	str	r0, [sp, #4]
		str.append((char)value);
   b5204:	f7ff ffd2 	bl	b51ac <_ZN16JsonParserString6appendEc>
		str.append((char)value);
   b5208:	9801      	ldr	r0, [sp, #4]
   b520a:	4621      	mov	r1, r4
   b520c:	e7e9      	b.n	b51e2 <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0xc>
		value = 0b11100000 | ((unicode >> 12) & 0b1111);
   b520e:	0b1b      	lsrs	r3, r3, #12
		str.append((char)value);
   b5210:	f043 01e0 	orr.w	r1, r3, #224	; 0xe0
   b5214:	9001      	str	r0, [sp, #4]
   b5216:	f7ff ffc9 	bl	b51ac <_ZN16JsonParserString6appendEc>
		value = 0b10000000 | ((unicode >> 6) & 0b111111);
   b521a:	f005 013f 	and.w	r1, r5, #63	; 0x3f
		str.append((char)value);
   b521e:	9801      	ldr	r0, [sp, #4]
   b5220:	f041 0180 	orr.w	r1, r1, #128	; 0x80
   b5224:	e7ee      	b.n	b5204 <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0x2e>
	...

000b5228 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString>:
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, JsonParserString &str) const {
   b5228:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
	bool escape = false;
   b522c:	2400      	movs	r4, #0
	for(int ii = token->start; ii < token->end; ii++) {
   b522e:	684e      	ldr	r6, [r1, #4]
					if (sscanf(tmp, "%04x", &unicode) == 1) {
   b5230:	f8df a0cc 	ldr.w	sl, [pc, #204]	; b5300 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xd8>
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, JsonParserString &str) const {
   b5234:	4680      	mov	r8, r0
   b5236:	460f      	mov	r7, r1
   b5238:	4615      	mov	r5, r2
			escape = false;
   b523a:	46a1      	mov	r9, r4
	for(int ii = token->start; ii < token->end; ii++) {
   b523c:	68b8      	ldr	r0, [r7, #8]
   b523e:	42b0      	cmp	r0, r6
   b5240:	dd5a      	ble.n	b52f8 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xd0>
			switch(buffer[ii]) {
   b5242:	f8d8 3004 	ldr.w	r3, [r8, #4]
   b5246:	5d99      	ldrb	r1, [r3, r6]
   b5248:	199a      	adds	r2, r3, r6
		if (escape) {
   b524a:	2c00      	cmp	r4, #0
   b524c:	d04b      	beq.n	b52e6 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xbe>
			switch(buffer[ii]) {
   b524e:	2975      	cmp	r1, #117	; 0x75
   b5250:	d805      	bhi.n	b525e <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
   b5252:	296d      	cmp	r1, #109	; 0x6d
   b5254:	d807      	bhi.n	b5266 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x3e>
   b5256:	2962      	cmp	r1, #98	; 0x62
   b5258:	d01e      	beq.n	b5298 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x70>
   b525a:	2966      	cmp	r1, #102	; 0x66
   b525c:	d01e      	beq.n	b529c <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x74>
				str.append(buffer[ii]);
   b525e:	4628      	mov	r0, r5
   b5260:	f7ff ffa4 	bl	b51ac <_ZN16JsonParserString6appendEc>
				break;
   b5264:	e03d      	b.n	b52e2 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xba>
   b5266:	f1a1 046e 	sub.w	r4, r1, #110	; 0x6e
   b526a:	2c07      	cmp	r4, #7
   b526c:	d8f7      	bhi.n	b525e <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
   b526e:	f20f 0c08 	addw	ip, pc, #8
   b5272:	f85c f024 	ldr.w	pc, [ip, r4, lsl #2]
   b5276:	bf00      	nop
   b5278:	000b52a1 	.word	0x000b52a1
   b527c:	000b525f 	.word	0x000b525f
   b5280:	000b525f 	.word	0x000b525f
   b5284:	000b525f 	.word	0x000b525f
   b5288:	000b52a5 	.word	0x000b52a5
   b528c:	000b525f 	.word	0x000b525f
   b5290:	000b52a9 	.word	0x000b52a9
   b5294:	000b52ad 	.word	0x000b52ad
				str.append('\b');
   b5298:	2108      	movs	r1, #8
   b529a:	e7e0      	b.n	b525e <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				str.append('\f');
   b529c:	210c      	movs	r1, #12
   b529e:	e7de      	b.n	b525e <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				str.append('\n');
   b52a0:	210a      	movs	r1, #10
   b52a2:	e7dc      	b.n	b525e <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				str.append('\r');
   b52a4:	210d      	movs	r1, #13
   b52a6:	e7da      	b.n	b525e <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				str.append('\t');
   b52a8:	2109      	movs	r1, #9
   b52aa:	e7d8      	b.n	b525e <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				if ((ii + 4) < token->end) {
   b52ac:	1d31      	adds	r1, r6, #4
   b52ae:	4288      	cmp	r0, r1
   b52b0:	dd17      	ble.n	b52e2 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xba>
   b52b2:	a902      	add	r1, sp, #8
   b52b4:	3304      	adds	r3, #4
   b52b6:	4433      	add	r3, r6
   b52b8:	4608      	mov	r0, r1
						tmp[jj] = buffer[ii + jj + 1];
   b52ba:	f812 4f01 	ldrb.w	r4, [r2, #1]!
   b52be:	f801 4b01 	strb.w	r4, [r1], #1
					for(size_t jj = 0; jj < 4; jj++) {
   b52c2:	429a      	cmp	r2, r3
   b52c4:	d1f9      	bne.n	b52ba <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x92>
					if (sscanf(tmp, "%04x", &unicode) == 1) {
   b52c6:	aa01      	add	r2, sp, #4
   b52c8:	4651      	mov	r1, sl
					tmp[4] = 0;
   b52ca:	f88d 900c 	strb.w	r9, [sp, #12]
					if (sscanf(tmp, "%04x", &unicode) == 1) {
   b52ce:	f001 fb3f 	bl	b6950 <sscanf>
   b52d2:	2801      	cmp	r0, #1
   b52d4:	d105      	bne.n	b52e2 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xba>
						appendUtf8((uint16_t)unicode, str);
   b52d6:	f8bd 0004 	ldrh.w	r0, [sp, #4]
   b52da:	4629      	mov	r1, r5
   b52dc:	f7ff ff7b 	bl	b51d6 <_ZN10JsonParser10appendUtf8EtR16JsonParserString>
						ii += 5; // also increments in loop
   b52e0:	3605      	adds	r6, #5
			escape = false;
   b52e2:	2400      	movs	r4, #0
   b52e4:	e004      	b.n	b52f0 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xc8>
		if (buffer[ii] == '\\') {
   b52e6:	295c      	cmp	r1, #92	; 0x5c
   b52e8:	d004      	beq.n	b52f4 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xcc>
			str.append(buffer[ii]);
   b52ea:	4628      	mov	r0, r5
   b52ec:	f7ff ff5e 	bl	b51ac <_ZN16JsonParserString6appendEc>
	for(int ii = token->start; ii < token->end; ii++) {
   b52f0:	3601      	adds	r6, #1
   b52f2:	e7a3      	b.n	b523c <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x14>
			escape = true;
   b52f4:	2401      	movs	r4, #1
   b52f6:	e7fb      	b.n	b52f0 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xc8>
}
   b52f8:	2001      	movs	r0, #1
   b52fa:	b004      	add	sp, #16
   b52fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b5300:	000ba428 	.word	0x000ba428

000b5304 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER6String>:
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, String &result) const {
   b5304:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b5306:	460c      	mov	r4, r1
   b5308:	4606      	mov	r6, r0
	result = "";
   b530a:	490c      	ldr	r1, [pc, #48]	; (b533c <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER6String+0x38>)
   b530c:	4610      	mov	r0, r2
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, String &result) const {
   b530e:	4615      	mov	r5, r2
	result = "";
   b5310:	f003 fb22 	bl	b8958 <_ZN6StringaSEPKc>
	result.reserve(token->end - token->start + 1);
   b5314:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
   b5318:	1ac9      	subs	r1, r1, r3
   b531a:	3101      	adds	r1, #1
   b531c:	4628      	mov	r0, r5
   b531e:	f003 fa97 	bl	b8850 <_ZN6String7reserveEj>
JsonParserString::JsonParserString(String *str) : str(str), buf(0), bufLen(0), length(0){
   b5322:	2300      	movs	r3, #0
	return getTokenValue(token, strWrapper);
   b5324:	466a      	mov	r2, sp
   b5326:	4621      	mov	r1, r4
   b5328:	4630      	mov	r0, r6
JsonParserString::JsonParserString(String *str) : str(str), buf(0), bufLen(0), length(0){
   b532a:	e9cd 3301 	strd	r3, r3, [sp, #4]
   b532e:	9500      	str	r5, [sp, #0]
   b5330:	9303      	str	r3, [sp, #12]
	return getTokenValue(token, strWrapper);
   b5332:	f7ff ff79 	bl	b5228 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString>
}
   b5336:	b004      	add	sp, #16
   b5338:	bd70      	pop	{r4, r5, r6, pc}
   b533a:	bf00      	nop
   b533c:	000ba487 	.word	0x000ba487

000b5340 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>:
bool JsonParser::getValueTokenByKey(const JsonParserGeneratorRK::jsmntok_t *container, const char *name, const JsonParserGeneratorRK::jsmntok_t *&value) const {
   b5340:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b5344:	b089      	sub	sp, #36	; 0x24
   b5346:	4605      	mov	r5, r0
   b5348:	4688      	mov	r8, r1
	String keyName;
   b534a:	a804      	add	r0, sp, #16
   b534c:	4912      	ldr	r1, [pc, #72]	; (b5398 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x58>)
bool JsonParser::getValueTokenByKey(const JsonParserGeneratorRK::jsmntok_t *container, const char *name, const JsonParserGeneratorRK::jsmntok_t *&value) const {
   b534e:	4616      	mov	r6, r2
   b5350:	4699      	mov	r9, r3
	String keyName;
   b5352:	f003 faaa 	bl	b88aa <_ZN6StringC1EPK19__FlashStringHelper>
	for(size_t ii = 0; getKeyValueTokenByIndex(container, key, value, ii); ii++) {
   b5356:	2700      	movs	r7, #0
   b5358:	9700      	str	r7, [sp, #0]
   b535a:	464b      	mov	r3, r9
   b535c:	aa03      	add	r2, sp, #12
   b535e:	4641      	mov	r1, r8
   b5360:	4628      	mov	r0, r5
   b5362:	f7ff fec0 	bl	b50e6 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j>
   b5366:	4604      	mov	r4, r0
   b5368:	b170      	cbz	r0, b5388 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x48>
		if (getTokenValue(key, keyName) && keyName == name) {
   b536a:	9903      	ldr	r1, [sp, #12]
   b536c:	aa04      	add	r2, sp, #16
   b536e:	4628      	mov	r0, r5
   b5370:	f7ff ffc8 	bl	b5304 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER6String>
   b5374:	4604      	mov	r4, r0
   b5376:	b908      	cbnz	r0, b537c <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x3c>
	for(size_t ii = 0; getKeyValueTokenByIndex(container, key, value, ii); ii++) {
   b5378:	3701      	adds	r7, #1
   b537a:	e7ed      	b.n	b5358 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x18>
    unsigned char operator == (const char *cstr) const {return equals(cstr);}
   b537c:	4631      	mov	r1, r6
   b537e:	a804      	add	r0, sp, #16
   b5380:	f003 fb20 	bl	b89c4 <_ZNK6String6equalsEPKc>
		if (getTokenValue(key, keyName) && keyName == name) {
   b5384:	2800      	cmp	r0, #0
   b5386:	d0f7      	beq.n	b5378 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x38>
	String keyName;
   b5388:	a804      	add	r0, sp, #16
   b538a:	f003 fa43 	bl	b8814 <_ZN6StringD1Ev>
}
   b538e:	4620      	mov	r0, r4
   b5390:	b009      	add	sp, #36	; 0x24
   b5392:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b5396:	bf00      	nop
   b5398:	000ba487 	.word	0x000ba487

000b539c <_ZN10JsonWriter4initEv>:
	offset = 0;
   b539c:	2300      	movs	r3, #0
	context[contextIndex].isFirst = true;
   b539e:	2201      	movs	r2, #1
	offset = 0;
   b53a0:	60c3      	str	r3, [r0, #12]
	contextIndex = 0;
   b53a2:	6143      	str	r3, [r0, #20]
	context[contextIndex].isFirst = true;
   b53a4:	8302      	strh	r2, [r0, #24]
	truncated = false;
   b53a6:	f880 302a 	strb.w	r3, [r0, #42]	; 0x2a
}
   b53aa:	4770      	bx	lr

000b53ac <_ZN10JsonWriterC1Ev>:
JsonWriter::JsonWriter() : JsonBuffer(), floatPlaces(-1) {
   b53ac:	b508      	push	{r3, lr}
   b53ae:	4603      	mov	r3, r0
   b53b0:	f7ff fdfc 	bl	b4fac <_ZN10JsonBufferC1Ev>
   b53b4:	4a04      	ldr	r2, [pc, #16]	; (b53c8 <_ZN10JsonWriterC1Ev+0x1c>)
   b53b6:	601a      	str	r2, [r3, #0]
   b53b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	init();
   b53bc:	4618      	mov	r0, r3
JsonWriter::JsonWriter() : JsonBuffer(), floatPlaces(-1) {
   b53be:	62da      	str	r2, [r3, #44]	; 0x2c
	init();
   b53c0:	f7ff ffec 	bl	b539c <_ZN10JsonWriter4initEv>
}
   b53c4:	bd08      	pop	{r3, pc}
   b53c6:	bf00      	nop
   b53c8:	000ba154 	.word	0x000ba154

000b53cc <_ZN10JsonWriter10insertCharEc>:
	if (offset < bufferLen) {
   b53cc:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
void JsonWriter::insertChar(char ch) {
   b53d0:	b510      	push	{r4, lr}
	if (offset < bufferLen) {
   b53d2:	4293      	cmp	r3, r2
		buffer[offset++] = ch;
   b53d4:	bf3f      	itttt	cc
   b53d6:	6842      	ldrcc	r2, [r0, #4]
   b53d8:	1c5c      	addcc	r4, r3, #1
   b53da:	60c4      	strcc	r4, [r0, #12]
   b53dc:	54d1      	strbcc	r1, [r2, r3]
		truncated = true;
   b53de:	bf24      	itt	cs
   b53e0:	2301      	movcs	r3, #1
   b53e2:	f880 302a 	strbcs.w	r3, [r0, #42]	; 0x2a
}
   b53e6:	bd10      	pop	{r4, pc}

000b53e8 <_ZN10JsonWriter19finishObjectOrArrayEv>:
void JsonWriter::finishObjectOrArray() {
   b53e8:	b510      	push	{r4, lr}
	if (contextIndex > 0) {
   b53ea:	6943      	ldr	r3, [r0, #20]
void JsonWriter::finishObjectOrArray() {
   b53ec:	4604      	mov	r4, r0
	if (contextIndex > 0) {
   b53ee:	b143      	cbz	r3, b5402 <_ZN10JsonWriter19finishObjectOrArrayEv+0x1a>
		if (context[contextIndex].terminator != 0) {
   b53f0:	eb00 0343 	add.w	r3, r0, r3, lsl #1
   b53f4:	7e59      	ldrb	r1, [r3, #25]
   b53f6:	b109      	cbz	r1, b53fc <_ZN10JsonWriter19finishObjectOrArrayEv+0x14>
			insertChar(context[contextIndex].terminator);
   b53f8:	f7ff ffe8 	bl	b53cc <_ZN10JsonWriter10insertCharEc>
		contextIndex--;
   b53fc:	6963      	ldr	r3, [r4, #20]
   b53fe:	3b01      	subs	r3, #1
   b5400:	6163      	str	r3, [r4, #20]
	if (offset < bufferLen) {
   b5402:	e9d4 1002 	ldrd	r1, r0, [r4, #8]
		buffer[offset] = 0;
   b5406:	6863      	ldr	r3, [r4, #4]
	if (offset < bufferLen) {
   b5408:	4288      	cmp	r0, r1
   b540a:	f04f 0200 	mov.w	r2, #0
		buffer[bufferLen - 1] = 0;
   b540e:	bf2a      	itet	cs
   b5410:	185b      	addcs	r3, r3, r1
		buffer[offset] = 0;
   b5412:	541a      	strbcc	r2, [r3, r0]
		buffer[bufferLen - 1] = 0;
   b5414:	f803 2c01 	strbcs.w	r2, [r3, #-1]
}
   b5418:	bd10      	pop	{r4, pc}

000b541a <_ZN10JsonWriter14insertvsprintfEPKcSt9__va_list>:
void JsonWriter::insertvsprintf(const char *fmt, va_list ap) {
   b541a:	b570      	push	{r4, r5, r6, lr}
   b541c:	4604      	mov	r4, r0
	size_t spaceAvailable = bufferLen - offset;
   b541e:	e9d0 5002 	ldrd	r5, r0, [r0, #8]
	size_t count = vsnprintf(&buffer[offset], spaceAvailable, fmt, ap);
   b5422:	6866      	ldr	r6, [r4, #4]
	size_t spaceAvailable = bufferLen - offset;
   b5424:	1a2d      	subs	r5, r5, r0
void JsonWriter::insertvsprintf(const char *fmt, va_list ap) {
   b5426:	4613      	mov	r3, r2
	size_t count = vsnprintf(&buffer[offset], spaceAvailable, fmt, ap);
   b5428:	4430      	add	r0, r6
   b542a:	460a      	mov	r2, r1
   b542c:	4629      	mov	r1, r5
   b542e:	f001 faa7 	bl	b6980 <vsnprintf>
	if (count <= spaceAvailable) {
   b5432:	4285      	cmp	r5, r0
		offset += count;
   b5434:	bf2d      	iteet	cs
   b5436:	68e3      	ldrcs	r3, [r4, #12]
		offset = bufferLen;
   b5438:	68a3      	ldrcc	r3, [r4, #8]
   b543a:	60e3      	strcc	r3, [r4, #12]
		offset += count;
   b543c:	18c0      	addcs	r0, r0, r3
		truncated = true;
   b543e:	bf36      	itet	cc
   b5440:	2301      	movcc	r3, #1
		offset += count;
   b5442:	60e0      	strcs	r0, [r4, #12]
		truncated = true;
   b5444:	f884 302a 	strbcc.w	r3, [r4, #42]	; 0x2a
}
   b5448:	bd70      	pop	{r4, r5, r6, pc}

000b544a <_ZN10JsonWriter13insertsprintfEPKcz>:
void JsonWriter::insertsprintf(const char *fmt, ...) {
   b544a:	b40e      	push	{r1, r2, r3}
   b544c:	b503      	push	{r0, r1, lr}
   b544e:	aa03      	add	r2, sp, #12
   b5450:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(ap, fmt);
   b5454:	9201      	str	r2, [sp, #4]
	insertvsprintf(fmt, ap);
   b5456:	f7ff ffe0 	bl	b541a <_ZN10JsonWriter14insertvsprintfEPKcSt9__va_list>
}
   b545a:	b002      	add	sp, #8
   b545c:	f85d eb04 	ldr.w	lr, [sp], #4
   b5460:	b003      	add	sp, #12
   b5462:	4770      	bx	lr

000b5464 <_ZN10JsonWriter12insertStringEPKcb>:
void JsonWriter::insertString(const char *s, bool quoted) {
   b5464:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b5468:	4604      	mov	r4, r0
   b546a:	460e      	mov	r6, r1
	if (quoted) {
   b546c:	4617      	mov	r7, r2
   b546e:	b112      	cbz	r2, b5476 <_ZN10JsonWriter12insertStringEPKcb+0x12>
		insertChar('"');
   b5470:	2122      	movs	r1, #34	; 0x22
   b5472:	f7ff ffab 	bl	b53cc <_ZN10JsonWriter10insertCharEc>
				insertsprintf("\\u%04X", utf16);
   b5476:	f8df 810c 	ldr.w	r8, [pc, #268]	; b5584 <_ZN10JsonWriter12insertStringEPKcb+0x120>
void JsonWriter::insertString(const char *s, bool quoted) {
   b547a:	2500      	movs	r5, #0
	for(size_t ii = 0; s[ii] && offset < bufferLen; ii++) {
   b547c:	5d71      	ldrb	r1, [r6, r5]
   b547e:	eb06 0905 	add.w	r9, r6, r5
   b5482:	2900      	cmp	r1, #0
   b5484:	d074      	beq.n	b5570 <_ZN10JsonWriter12insertStringEPKcb+0x10c>
   b5486:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   b548a:	429a      	cmp	r2, r3
   b548c:	d270      	bcs.n	b5570 <_ZN10JsonWriter12insertStringEPKcb+0x10c>
		if (s[ii] & 0x80) {
   b548e:	060b      	lsls	r3, r1, #24
   b5490:	d534      	bpl.n	b54fc <_ZN10JsonWriter12insertStringEPKcb+0x98>
			if (((s[ii] & 0b11110000) == 0b11100000) && ((s[ii+1] & 0b11000000) == 0b10000000) && ((s[ii+2] & 0b11000000) == 0b10000000)) {
   b5492:	f001 03f0 	and.w	r3, r1, #240	; 0xf0
   b5496:	2be0      	cmp	r3, #224	; 0xe0
   b5498:	f105 0901 	add.w	r9, r5, #1
   b549c:	d11d      	bne.n	b54da <_ZN10JsonWriter12insertStringEPKcb+0x76>
   b549e:	f816 2009 	ldrb.w	r2, [r6, r9]
   b54a2:	f002 03c0 	and.w	r3, r2, #192	; 0xc0
   b54a6:	2b80      	cmp	r3, #128	; 0x80
   b54a8:	d139      	bne.n	b551e <_ZN10JsonWriter12insertStringEPKcb+0xba>
   b54aa:	f105 0902 	add.w	r9, r5, #2
   b54ae:	f816 3009 	ldrb.w	r3, [r6, r9]
   b54b2:	f003 00c0 	and.w	r0, r3, #192	; 0xc0
   b54b6:	2880      	cmp	r0, #128	; 0x80
   b54b8:	d131      	bne.n	b551e <_ZN10JsonWriter12insertStringEPKcb+0xba>
				uint16_t utf16 = ((s[ii] & 0b1111) << 12) | ((s[ii+1] & 0b111111) << 6) | (s[ii+2] & 0b111111);
   b54ba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   b54be:	0192      	lsls	r2, r2, #6
   b54c0:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
   b54c4:	f402 627c 	and.w	r2, r2, #4032	; 0xfc0
   b54c8:	431a      	orrs	r2, r3
				insertsprintf("\\u%04X", utf16);
   b54ca:	b292      	uxth	r2, r2
				insertsprintf("\\u%04X", utf16);
   b54cc:	4641      	mov	r1, r8
   b54ce:	4620      	mov	r0, r4
   b54d0:	f7ff ffbb 	bl	b544a <_ZN10JsonWriter13insertsprintfEPKcz>
				ii++; // plus one more in loop increment
   b54d4:	464d      	mov	r5, r9
	for(size_t ii = 0; s[ii] && offset < bufferLen; ii++) {
   b54d6:	3501      	adds	r5, #1
   b54d8:	e7d0      	b.n	b547c <_ZN10JsonWriter12insertStringEPKcb+0x18>
			if (((s[ii] & 0b11100000) == 0b11000000) && ((s[ii+1] & 0b11000000) == 0b10000000)) {
   b54da:	f001 03e0 	and.w	r3, r1, #224	; 0xe0
   b54de:	2bc0      	cmp	r3, #192	; 0xc0
   b54e0:	d11d      	bne.n	b551e <_ZN10JsonWriter12insertStringEPKcb+0xba>
   b54e2:	f816 3009 	ldrb.w	r3, [r6, r9]
   b54e6:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
   b54ea:	2a80      	cmp	r2, #128	; 0x80
   b54ec:	d117      	bne.n	b551e <_ZN10JsonWriter12insertStringEPKcb+0xba>
				uint16_t utf16 = ((s[ii] & 0b11111) << 6) | (s[ii+1] & 0b111111);
   b54ee:	0189      	lsls	r1, r1, #6
   b54f0:	f401 62f8 	and.w	r2, r1, #1984	; 0x7c0
   b54f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
				insertsprintf("\\u%04X", utf16);
   b54f8:	431a      	orrs	r2, r3
   b54fa:	e7e7      	b.n	b54cc <_ZN10JsonWriter12insertStringEPKcb+0x68>
			switch(s[ii]) {
   b54fc:	290d      	cmp	r1, #13
   b54fe:	d80a      	bhi.n	b5516 <_ZN10JsonWriter12insertStringEPKcb+0xb2>
   b5500:	2907      	cmp	r1, #7
   b5502:	d90c      	bls.n	b551e <_ZN10JsonWriter12insertStringEPKcb+0xba>
   b5504:	f1a1 0308 	sub.w	r3, r1, #8
   b5508:	2b05      	cmp	r3, #5
   b550a:	d808      	bhi.n	b551e <_ZN10JsonWriter12insertStringEPKcb+0xba>
   b550c:	e8df f003 	tbb	[pc, r3]
   b5510:	07172309 	.word	0x07172309
   b5514:	1d11      	.short	0x1d11
   b5516:	2922      	cmp	r1, #34	; 0x22
   b5518:	d023      	beq.n	b5562 <_ZN10JsonWriter12insertStringEPKcb+0xfe>
   b551a:	295c      	cmp	r1, #92	; 0x5c
   b551c:	d021      	beq.n	b5562 <_ZN10JsonWriter12insertStringEPKcb+0xfe>
				insertChar(s[ii]);
   b551e:	4620      	mov	r0, r4
   b5520:	e004      	b.n	b552c <_ZN10JsonWriter12insertStringEPKcb+0xc8>
				insertChar('\\');
   b5522:	215c      	movs	r1, #92	; 0x5c
   b5524:	4620      	mov	r0, r4
   b5526:	f7ff ff51 	bl	b53cc <_ZN10JsonWriter10insertCharEc>
				insertChar('b');
   b552a:	2162      	movs	r1, #98	; 0x62
				insertChar(s[ii]);
   b552c:	f7ff ff4e 	bl	b53cc <_ZN10JsonWriter10insertCharEc>
				break;
   b5530:	e7d1      	b.n	b54d6 <_ZN10JsonWriter12insertStringEPKcb+0x72>
				insertChar('\\');
   b5532:	215c      	movs	r1, #92	; 0x5c
   b5534:	4620      	mov	r0, r4
   b5536:	f7ff ff49 	bl	b53cc <_ZN10JsonWriter10insertCharEc>
				insertChar('f');
   b553a:	2166      	movs	r1, #102	; 0x66
   b553c:	e7f6      	b.n	b552c <_ZN10JsonWriter12insertStringEPKcb+0xc8>
				insertChar('\\');
   b553e:	215c      	movs	r1, #92	; 0x5c
   b5540:	4620      	mov	r0, r4
   b5542:	f7ff ff43 	bl	b53cc <_ZN10JsonWriter10insertCharEc>
				insertChar('n');
   b5546:	216e      	movs	r1, #110	; 0x6e
   b5548:	e7f0      	b.n	b552c <_ZN10JsonWriter12insertStringEPKcb+0xc8>
				insertChar('\\');
   b554a:	215c      	movs	r1, #92	; 0x5c
   b554c:	4620      	mov	r0, r4
   b554e:	f7ff ff3d 	bl	b53cc <_ZN10JsonWriter10insertCharEc>
				insertChar('r');
   b5552:	2172      	movs	r1, #114	; 0x72
   b5554:	e7ea      	b.n	b552c <_ZN10JsonWriter12insertStringEPKcb+0xc8>
				insertChar('\\');
   b5556:	215c      	movs	r1, #92	; 0x5c
   b5558:	4620      	mov	r0, r4
   b555a:	f7ff ff37 	bl	b53cc <_ZN10JsonWriter10insertCharEc>
				insertChar('t');
   b555e:	2174      	movs	r1, #116	; 0x74
   b5560:	e7e4      	b.n	b552c <_ZN10JsonWriter12insertStringEPKcb+0xc8>
				insertChar('\\');
   b5562:	215c      	movs	r1, #92	; 0x5c
   b5564:	4620      	mov	r0, r4
   b5566:	f7ff ff31 	bl	b53cc <_ZN10JsonWriter10insertCharEc>
				insertChar(s[ii]);
   b556a:	f899 1000 	ldrb.w	r1, [r9]
   b556e:	e7dd      	b.n	b552c <_ZN10JsonWriter12insertStringEPKcb+0xc8>
	if (quoted) {
   b5570:	b12f      	cbz	r7, b557e <_ZN10JsonWriter12insertStringEPKcb+0x11a>
		insertChar('"');
   b5572:	4620      	mov	r0, r4
   b5574:	2122      	movs	r1, #34	; 0x22
}
   b5576:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		insertChar('"');
   b557a:	f7ff bf27 	b.w	b53cc <_ZN10JsonWriter10insertCharEc>
}
   b557e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b5582:	bf00      	nop
   b5584:	000ba124 	.word	0x000ba124

000b5588 <_ZN10JsonWriter20insertCheckSeparatorEv>:
	if (context[contextIndex].isFirst) {
   b5588:	6942      	ldr	r2, [r0, #20]
   b558a:	eb00 0342 	add.w	r3, r0, r2, lsl #1
   b558e:	7e1a      	ldrb	r2, [r3, #24]
   b5590:	b112      	cbz	r2, b5598 <_ZN10JsonWriter20insertCheckSeparatorEv+0x10>
		context[contextIndex].isFirst = false;
   b5592:	2200      	movs	r2, #0
   b5594:	761a      	strb	r2, [r3, #24]
}
   b5596:	4770      	bx	lr
		insertChar(',');
   b5598:	212c      	movs	r1, #44	; 0x2c
   b559a:	f7ff bf17 	b.w	b53cc <_ZN10JsonWriter10insertCharEc>

000b559e <_ZN10JsonWriter18startObjectOrArrayEcc>:
bool JsonWriter::startObjectOrArray(char startChar, char endChar) {
   b559e:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if ((contextIndex + 1) >= MAX_NESTED_CONTEXT) {
   b55a0:	6943      	ldr	r3, [r0, #20]
bool JsonWriter::startObjectOrArray(char startChar, char endChar) {
   b55a2:	9101      	str	r1, [sp, #4]
	if ((contextIndex + 1) >= MAX_NESTED_CONTEXT) {
   b55a4:	3301      	adds	r3, #1
   b55a6:	2b08      	cmp	r3, #8
bool JsonWriter::startObjectOrArray(char startChar, char endChar) {
   b55a8:	4616      	mov	r6, r2
	if ((contextIndex + 1) >= MAX_NESTED_CONTEXT) {
   b55aa:	d80f      	bhi.n	b55cc <_ZN10JsonWriter18startObjectOrArrayEcc+0x2e>
	insertCheckSeparator();
   b55ac:	f7ff ffec 	bl	b5588 <_ZN10JsonWriter20insertCheckSeparatorEv>
	contextIndex++;
   b55b0:	6943      	ldr	r3, [r0, #20]
	insertChar(startChar);
   b55b2:	9901      	ldr	r1, [sp, #4]
   b55b4:	eb00 0443 	add.w	r4, r0, r3, lsl #1
	contextIndex++;
   b55b8:	1c5a      	adds	r2, r3, #1
	context[contextIndex].isFirst = true;
   b55ba:	2501      	movs	r5, #1
	contextIndex++;
   b55bc:	6142      	str	r2, [r0, #20]
	context[contextIndex].isFirst = true;
   b55be:	76a5      	strb	r5, [r4, #26]
	context[contextIndex].terminator = endChar;
   b55c0:	76e6      	strb	r6, [r4, #27]
	insertChar(startChar);
   b55c2:	f7ff ff03 	bl	b53cc <_ZN10JsonWriter10insertCharEc>
   b55c6:	4628      	mov	r0, r5
}
   b55c8:	b002      	add	sp, #8
   b55ca:	bd70      	pop	{r4, r5, r6, pc}
		return false;
   b55cc:	2000      	movs	r0, #0
   b55ce:	e7fb      	b.n	b55c8 <_ZN10JsonWriter18startObjectOrArrayEcc+0x2a>

000b55d0 <_ZN12JsonModifierC1ER10JsonParser>:
JsonModifier::JsonModifier(JsonParser &jp) : jp(jp) {
   b55d0:	b510      	push	{r4, lr}
   b55d2:	4604      	mov	r4, r0
   b55d4:	f7ff feea 	bl	b53ac <_ZN10JsonWriterC1Ev>
   b55d8:	4b05      	ldr	r3, [pc, #20]	; (b55f0 <_ZN12JsonModifierC1ER10JsonParser+0x20>)
   b55da:	6023      	str	r3, [r4, #0]
   b55dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b55e0:	2300      	movs	r3, #0
   b55e2:	e9c4 230d 	strd	r2, r3, [r4, #52]	; 0x34
   b55e6:	6321      	str	r1, [r4, #48]	; 0x30
   b55e8:	63e3      	str	r3, [r4, #60]	; 0x3c
}
   b55ea:	4620      	mov	r0, r4
   b55ec:	bd10      	pop	{r4, pc}
   b55ee:	bf00      	nop
   b55f0:	000ba164 	.word	0x000ba164

000b55f4 <_ZN12JsonModifier11startAppendEPKN21JsonParserGeneratorRK9jsmntok_tE>:
	init();

	return true;
}

bool JsonModifier::startAppend(const JsonParserGeneratorRK::jsmntok_t *arrayOrObjectToken) {
   b55f4:	b570      	push	{r4, r5, r6, lr}
	if (start != -1) {
   b55f6:	6b43      	ldr	r3, [r0, #52]	; 0x34
   b55f8:	3301      	adds	r3, #1
bool JsonModifier::startAppend(const JsonParserGeneratorRK::jsmntok_t *arrayOrObjectToken) {
   b55fa:	4604      	mov	r4, r0
   b55fc:	460e      	mov	r6, r1
	if (start != -1) {
   b55fe:	d129      	bne.n	b5654 <_ZN12JsonModifier11startAppendEPKN21JsonParserGeneratorRK9jsmntok_tE+0x60>
		// Modification or insertion already in progress
		return false;
	}

	start = arrayOrObjectToken->end - 1; // Before the closing ] or }
   b5600:	688d      	ldr	r5, [r1, #8]
	origAfter = jp.getOffset() - start;
   b5602:	6b01      	ldr	r1, [r0, #48]	; 0x30
	start = arrayOrObjectToken->end - 1; // Before the closing ] or }
   b5604:	3d01      	subs	r5, #1
   b5606:	6345      	str	r5, [r0, #52]	; 0x34
	size_t getOffset() const { return offset; }
   b5608:	68cb      	ldr	r3, [r1, #12]
	origAfter = jp.getOffset() - start;
   b560a:	1b5a      	subs	r2, r3, r5
   b560c:	6382      	str	r2, [r0, #56]	; 0x38
	saveLoc = jp.getBufferLen() - origAfter;
   b560e:	6888      	ldr	r0, [r1, #8]
   b5610:	4428      	add	r0, r5
   b5612:	1ac3      	subs	r3, r0, r3

	if (origAfter > 0) {
   b5614:	2a00      	cmp	r2, #0
	saveLoc = jp.getBufferLen() - origAfter;
   b5616:	63e3      	str	r3, [r4, #60]	; 0x3c
	if (origAfter > 0) {
   b5618:	dd04      	ble.n	b5624 <_ZN12JsonModifier11startAppendEPKN21JsonParserGeneratorRK9jsmntok_tE+0x30>
	char *getBuffer() const { return buffer; }
   b561a:	6848      	ldr	r0, [r1, #4]
		memmove(jp.getBuffer() + saveLoc, jp.getBuffer() + start, origAfter);
   b561c:	1941      	adds	r1, r0, r5
   b561e:	4418      	add	r0, r3
   b5620:	f003 fdde 	bl	b91e0 <memmove>
   b5624:	6b22      	ldr	r2, [r4, #48]	; 0x30
	}

	setBuffer(jp.getBuffer() + start, saveLoc - start);
   b5626:	6b61      	ldr	r1, [r4, #52]	; 0x34
   b5628:	6852      	ldr	r2, [r2, #4]
   b562a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   b562c:	440a      	add	r2, r1
   b562e:	1a5b      	subs	r3, r3, r1
	this->staticBuffers = true;
   b5630:	2501      	movs	r5, #1
	this->bufferLen = bufferLen;
   b5632:	e9c4 2301 	strd	r2, r3, [r4, #4]
	init();
   b5636:	4620      	mov	r0, r4
	this->staticBuffers = true;
   b5638:	7425      	strb	r5, [r4, #16]
	init();
   b563a:	f7ff feaf 	bl	b539c <_ZN10JsonWriter4initEv>
	context[contextIndex].isFirst = isFirst;
   b563e:	6963      	ldr	r3, [r4, #20]
   b5640:	f103 020c 	add.w	r2, r3, #12

	// If array is not empty, add a separator
	setIsFirst(arrayOrObjectToken->size == 0);
   b5644:	68f3      	ldr	r3, [r6, #12]
   b5646:	fab3 f383 	clz	r3, r3
   b564a:	095b      	lsrs	r3, r3, #5
   b564c:	f804 3012 	strb.w	r3, [r4, r2, lsl #1]
	context[contextIndex].isFirst = isFirst;
   b5650:	4628      	mov	r0, r5

	return true;
}
   b5652:	bd70      	pop	{r4, r5, r6, pc}
		return false;
   b5654:	2000      	movs	r0, #0
   b5656:	e7fc      	b.n	b5652 <_ZN12JsonModifier11startAppendEPKN21JsonParserGeneratorRK9jsmntok_tE+0x5e>

000b5658 <_ZNK12JsonModifier15tokenWithQuotesEPKN21JsonParserGeneratorRK9jsmntok_tE>:
	jp.parse();
	start = -1;
}


JsonParserGeneratorRK::jsmntok_t JsonModifier::tokenWithQuotes(const JsonParserGeneratorRK::jsmntok_t *tok) const {
   b5658:	b530      	push	{r4, r5, lr}
   b565a:	4604      	mov	r4, r0
   b565c:	4615      	mov	r5, r2
	JsonParserGeneratorRK::jsmntok_t expandedToken = *tok;
   b565e:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
   b5660:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	if (tok->type == JsonParserGeneratorRK::JSMN_STRING) {
   b5664:	782b      	ldrb	r3, [r5, #0]
   b5666:	2b03      	cmp	r3, #3
		expandedToken.start--;
   b5668:	bf01      	itttt	eq
   b566a:	f101 31ff 	addeq.w	r1, r1, #4294967295	; 0xffffffff
		expandedToken.end++;
   b566e:	3201      	addeq	r2, #1
		expandedToken.start--;
   b5670:	6061      	streq	r1, [r4, #4]
		expandedToken.end++;
   b5672:	60a2      	streq	r2, [r4, #8]
	}
	return expandedToken;
}
   b5674:	4620      	mov	r0, r4
   b5676:	bd30      	pop	{r4, r5, pc}

000b5678 <_ZNK12JsonModifier13findLeftCommaEPKN21JsonParserGeneratorRK9jsmntok_tE>:

int JsonModifier::findLeftComma(const JsonParserGeneratorRK::jsmntok_t *tok) const {
   b5678:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b567a:	460a      	mov	r2, r1
   b567c:	4604      	mov	r4, r0

	JsonParserGeneratorRK::jsmntok_t expandedToken = tokenWithQuotes(tok);
   b567e:	4601      	mov	r1, r0
   b5680:	4668      	mov	r0, sp
   b5682:	f7ff ffe9 	bl	b5658 <_ZNK12JsonModifier15tokenWithQuotesEPKN21JsonParserGeneratorRK9jsmntok_tE>

	int ii = expandedToken.start - 1;
   b5686:	9b01      	ldr	r3, [sp, #4]
   b5688:	1e58      	subs	r0, r3, #1
	while(ii >= 0 && jp.getBuffer()[ii] == ' ') {
   b568a:	2800      	cmp	r0, #0
   b568c:	db06      	blt.n	b569c <_ZNK12JsonModifier13findLeftCommaEPKN21JsonParserGeneratorRK9jsmntok_tE+0x24>
   b568e:	6b23      	ldr	r3, [r4, #48]	; 0x30
   b5690:	685b      	ldr	r3, [r3, #4]
   b5692:	5c1b      	ldrb	r3, [r3, r0]
   b5694:	2b20      	cmp	r3, #32
   b5696:	d105      	bne.n	b56a4 <_ZNK12JsonModifier13findLeftCommaEPKN21JsonParserGeneratorRK9jsmntok_tE+0x2c>
		// Whitespace
		ii--;
   b5698:	3801      	subs	r0, #1
	while(ii >= 0 && jp.getBuffer()[ii] == ' ') {
   b569a:	e7f6      	b.n	b568a <_ZNK12JsonModifier13findLeftCommaEPKN21JsonParserGeneratorRK9jsmntok_tE+0x12>
	}
	// printf("after whitespace check ii=%d c=%c\n", ii, jp.getBuffer()[ii]);

	if (ii < 0 || jp.getBuffer()[ii] != ',') {
		return -1;
   b569c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}


	return ii;
}
   b56a0:	b004      	add	sp, #16
   b56a2:	bd10      	pop	{r4, pc}
		return -1;
   b56a4:	2b2c      	cmp	r3, #44	; 0x2c
   b56a6:	bf18      	it	ne
   b56a8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   b56ac:	e7f8      	b.n	b56a0 <_ZNK12JsonModifier13findLeftCommaEPKN21JsonParserGeneratorRK9jsmntok_tE+0x28>

000b56ae <_ZNK12JsonModifier14findRightCommaEPKN21JsonParserGeneratorRK9jsmntok_tE>:

int JsonModifier::findRightComma(const JsonParserGeneratorRK::jsmntok_t *tok) const {
   b56ae:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b56b0:	4604      	mov	r4, r0
   b56b2:	460a      	mov	r2, r1
	JsonParserGeneratorRK::jsmntok_t expandedToken = tokenWithQuotes(tok);
   b56b4:	4601      	mov	r1, r0
   b56b6:	4668      	mov	r0, sp
   b56b8:	f7ff ffce 	bl	b5658 <_ZNK12JsonModifier15tokenWithQuotesEPKN21JsonParserGeneratorRK9jsmntok_tE>

	int ii = expandedToken.end;
	while(ii < jp.getOffset() && jp.getBuffer()[ii] == ' ') {
   b56bc:	6b23      	ldr	r3, [r4, #48]	; 0x30
	int ii = expandedToken.end;
   b56be:	9802      	ldr	r0, [sp, #8]
	size_t getOffset() const { return offset; }
   b56c0:	68da      	ldr	r2, [r3, #12]
	while(ii < jp.getOffset() && jp.getBuffer()[ii] == ' ') {
   b56c2:	4282      	cmp	r2, r0
   b56c4:	d905      	bls.n	b56d2 <_ZNK12JsonModifier14findRightCommaEPKN21JsonParserGeneratorRK9jsmntok_tE+0x24>
   b56c6:	6859      	ldr	r1, [r3, #4]
   b56c8:	5c09      	ldrb	r1, [r1, r0]
   b56ca:	2920      	cmp	r1, #32
   b56cc:	d101      	bne.n	b56d2 <_ZNK12JsonModifier14findRightCommaEPKN21JsonParserGeneratorRK9jsmntok_tE+0x24>
		// Whitespace
		ii++;
   b56ce:	3001      	adds	r0, #1
	while(ii < jp.getOffset() && jp.getBuffer()[ii] == ' ') {
   b56d0:	e7f7      	b.n	b56c2 <_ZNK12JsonModifier14findRightCommaEPKN21JsonParserGeneratorRK9jsmntok_tE+0x14>
	}

	if (ii < 0 || jp.getBuffer()[ii] != ',') {
   b56d2:	2800      	cmp	r0, #0
   b56d4:	db07      	blt.n	b56e6 <_ZNK12JsonModifier14findRightCommaEPKN21JsonParserGeneratorRK9jsmntok_tE+0x38>
   b56d6:	685b      	ldr	r3, [r3, #4]
   b56d8:	5c1b      	ldrb	r3, [r3, r0]
		return -1;
   b56da:	2b2c      	cmp	r3, #44	; 0x2c
   b56dc:	bf18      	it	ne
   b56de:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
	}

	return ii;
}
   b56e2:	b004      	add	sp, #16
   b56e4:	bd10      	pop	{r4, pc}
		return -1;
   b56e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b56ea:	e7fa      	b.n	b56e2 <_ZNK12JsonModifier14findRightCommaEPKN21JsonParserGeneratorRK9jsmntok_tE+0x34>

000b56ec <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>:

/**
 * Parse JSON string and fill tokens.
 */
int jsmn_parse(jsmn_parser *parser, const char *js, size_t len,
		jsmntok_t *tokens, unsigned int num_tokens) {
   b56ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int r;
	int i;
	jsmntok_t *token;
	int count = parser->toknext;
   b56f0:	6844      	ldr	r4, [r0, #4]
   b56f2:	f04f 0c01 	mov.w	ip, #1
	tok->start = tok->end = -1;
   b56f6:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff

	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b56fa:	f8d0 e000 	ldr.w	lr, [r0]
   b56fe:	4596      	cmp	lr, r2
   b5700:	f080 81b9 	bcs.w	b5a76 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x38a>
   b5704:	f811 800e 	ldrb.w	r8, [r1, lr]
   b5708:	f1b8 0f00 	cmp.w	r8, #0
   b570c:	f000 81b3 	beq.w	b5a76 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x38a>
		char c;
		jsmntype_t type;

		c = js[parser->pos];
		switch (c) {
   b5710:	f1b8 0f3a 	cmp.w	r8, #58	; 0x3a
   b5714:	f000 8098 	beq.w	b5848 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x15c>
   b5718:	d833      	bhi.n	b5782 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x96>
   b571a:	f1b8 0f22 	cmp.w	r8, #34	; 0x22
   b571e:	f000 80a6 	beq.w	b586e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x182>
   b5722:	d810      	bhi.n	b5746 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x5a>
   b5724:	f1a8 0809 	sub.w	r8, r8, #9
   b5728:	fa5f f888 	uxtb.w	r8, r8
   b572c:	f1b8 0f17 	cmp.w	r8, #23
   b5730:	d80d      	bhi.n	b574e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x62>
   b5732:	4d9f      	ldr	r5, [pc, #636]	; (b59b0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2c4>)
   b5734:	fa0c f808 	lsl.w	r8, ip, r8
   b5738:	ea18 0f05 	tst.w	r8, r5
   b573c:	d007      	beq.n	b574e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x62>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b573e:	6805      	ldr	r5, [r0, #0]
   b5740:	3501      	adds	r5, #1
   b5742:	6005      	str	r5, [r0, #0]
   b5744:	e7d9      	b.n	b56fa <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xe>
		switch (c) {
   b5746:	f1b8 0f2c 	cmp.w	r8, #44	; 0x2c
   b574a:	f000 8133 	beq.w	b59b4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2c8>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b574e:	f8d0 8000 	ldr.w	r8, [r0]
   b5752:	4542      	cmp	r2, r8
   b5754:	d90e      	bls.n	b5774 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x88>
   b5756:	f811 5008 	ldrb.w	r5, [r1, r8]
   b575a:	b15d      	cbz	r5, b5774 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x88>
		switch (js[parser->pos]) {
   b575c:	2d3a      	cmp	r5, #58	; 0x3a
   b575e:	f200 8169 	bhi.w	b5a34 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x348>
   b5762:	2d1f      	cmp	r5, #31
   b5764:	f200 8151 	bhi.w	b5a0a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x31e>
   b5768:	2d0a      	cmp	r5, #10
   b576a:	f200 8160 	bhi.w	b5a2e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x342>
   b576e:	2d08      	cmp	r5, #8
   b5770:	f240 8156 	bls.w	b5a20 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x334>
	if (tokens == NULL) {
   b5774:	2b00      	cmp	r3, #0
   b5776:	f040 8162 	bne.w	b5a3e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x352>
		parser->pos--;
   b577a:	f108 35ff 	add.w	r5, r8, #4294967295	; 0xffffffff
	parser->pos--;
   b577e:	6005      	str	r5, [r0, #0]
   b5780:	e0a5      	b.n	b58ce <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1e2>
		switch (c) {
   b5782:	f1b8 0f7b 	cmp.w	r8, #123	; 0x7b
   b5786:	d037      	beq.n	b57f8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x10c>
   b5788:	d82e      	bhi.n	b57e8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xfc>
   b578a:	f1b8 0f5b 	cmp.w	r8, #91	; 0x5b
   b578e:	d033      	beq.n	b57f8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x10c>
   b5790:	f1b8 0f5d 	cmp.w	r8, #93	; 0x5d
   b5794:	d1db      	bne.n	b574e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x62>
				token->type = (c == '{' ? JSMN_OBJECT : JSMN_ARRAY);
				token->start = parser->pos;
				parser->toksuper = parser->toknext - 1;
				break;
			case '}': case ']':
				if (tokens == NULL)
   b5796:	2b00      	cmp	r3, #0
   b5798:	d0d1      	beq.n	b573e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
					break;
				type = (c == '}' ? JSMN_OBJECT : JSMN_ARRAY);
   b579a:	f04f 0902 	mov.w	r9, #2
						break;
					}
					token = &tokens[token->parent];
				}
#else
				for (i = parser->toknext - 1; i >= 0; i--) {
   b579e:	6845      	ldr	r5, [r0, #4]
   b57a0:	3d01      	subs	r5, #1
   b57a2:	eb03 1805 	add.w	r8, r3, r5, lsl #4
   b57a6:	2d00      	cmp	r5, #0
   b57a8:	db55      	blt.n	b5856 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x16a>
					token = &tokens[i];
					if (token->start != -1 && token->end == -1) {
   b57aa:	f8d8 7004 	ldr.w	r7, [r8, #4]
   b57ae:	3701      	adds	r7, #1
   b57b0:	d04d      	beq.n	b584e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x162>
   b57b2:	f8d8 a008 	ldr.w	sl, [r8, #8]
   b57b6:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
   b57ba:	d148      	bne.n	b584e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x162>
						if (token->type != type) {
   b57bc:	f898 b000 	ldrb.w	fp, [r8]
   b57c0:	45cb      	cmp	fp, r9
   b57c2:	d14b      	bne.n	b585c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x170>
							return JSMN_ERROR_INVAL;
						}
						parser->toksuper = -1;
						token->end = parser->pos + 1;
   b57c4:	f10e 0e01 	add.w	lr, lr, #1
						parser->toksuper = -1;
   b57c8:	f8c0 a008 	str.w	sl, [r0, #8]
						token->end = parser->pos + 1;
   b57cc:	f8c8 e008 	str.w	lr, [r8, #8]
						break;
					}
				}
				/* Error if unmatched closing bracket */
				if (i == -1) return JSMN_ERROR_INVAL;
   b57d0:	eb03 1e05 	add.w	lr, r3, r5, lsl #4
				for (; i >= 0; i--) {
					token = &tokens[i];
					if (token->start != -1 && token->end == -1) {
   b57d4:	f8de 7004 	ldr.w	r7, [lr, #4]
   b57d8:	3701      	adds	r7, #1
   b57da:	d042      	beq.n	b5862 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x176>
   b57dc:	f8de 7008 	ldr.w	r7, [lr, #8]
   b57e0:	3701      	adds	r7, #1
   b57e2:	d13e      	bne.n	b5862 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x176>
					tokens[parser->toksuper].size++;
				break;
			case '\t' : case '\r' : case '\n' : case ' ':
				break;
			case ':':
				parser->toksuper = parser->toknext - 1;
   b57e4:	6085      	str	r5, [r0, #8]
				break;
   b57e6:	e7aa      	b.n	b573e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
		switch (c) {
   b57e8:	f1b8 0f7d 	cmp.w	r8, #125	; 0x7d
   b57ec:	d1af      	bne.n	b574e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x62>
				if (tokens == NULL)
   b57ee:	2b00      	cmp	r3, #0
   b57f0:	d0a5      	beq.n	b573e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
				type = (c == '}' ? JSMN_OBJECT : JSMN_ARRAY);
   b57f2:	f04f 0901 	mov.w	r9, #1
   b57f6:	e7d2      	b.n	b579e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xb2>
				count++;
   b57f8:	3401      	adds	r4, #1
				if (tokens == NULL) {
   b57fa:	2b00      	cmp	r3, #0
   b57fc:	d09f      	beq.n	b573e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
	if (parser->toknext >= num_tokens) {
   b57fe:	6845      	ldr	r5, [r0, #4]
   b5800:	9f09      	ldr	r7, [sp, #36]	; 0x24
   b5802:	42af      	cmp	r7, r5
   b5804:	d94a      	bls.n	b589c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1b0>
	tok = &tokens[parser->toknext++];
   b5806:	f105 0e01 	add.w	lr, r5, #1
   b580a:	f8c0 e004 	str.w	lr, [r0, #4]
   b580e:	eb03 1e05 	add.w	lr, r3, r5, lsl #4
	tok->start = tok->end = -1;
   b5812:	e9ce 6601 	strd	r6, r6, [lr, #4]
	tok = &tokens[parser->toknext++];
   b5816:	ea4f 1a05 	mov.w	sl, r5, lsl #4
	tok->size = 0;
   b581a:	2500      	movs	r5, #0
   b581c:	f8ce 500c 	str.w	r5, [lr, #12]
				if (parser->toksuper != -1) {
   b5820:	6885      	ldr	r5, [r0, #8]
   b5822:	1c6f      	adds	r7, r5, #1
					tokens[parser->toksuper].size++;
   b5824:	bf1f      	itttt	ne
   b5826:	eb03 1905 	addne.w	r9, r3, r5, lsl #4
   b582a:	f8d9 500c 	ldrne.w	r5, [r9, #12]
   b582e:	3501      	addne	r5, #1
   b5830:	f8c9 500c 	strne.w	r5, [r9, #12]
				token->type = (c == '{' ? JSMN_OBJECT : JSMN_ARRAY);
   b5834:	f1b8 0f7b 	cmp.w	r8, #123	; 0x7b
   b5838:	bf0c      	ite	eq
   b583a:	2501      	moveq	r5, #1
   b583c:	2502      	movne	r5, #2
   b583e:	f803 500a 	strb.w	r5, [r3, sl]
				token->start = parser->pos;
   b5842:	6805      	ldr	r5, [r0, #0]
   b5844:	f8ce 5004 	str.w	r5, [lr, #4]
				parser->toksuper = parser->toknext - 1;
   b5848:	6845      	ldr	r5, [r0, #4]
   b584a:	3d01      	subs	r5, #1
   b584c:	e7ca      	b.n	b57e4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xf8>
				for (i = parser->toknext - 1; i >= 0; i--) {
   b584e:	3d01      	subs	r5, #1
   b5850:	f1a8 0810 	sub.w	r8, r8, #16
   b5854:	e7a7      	b.n	b57a6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xba>
				if (i == -1) return JSMN_ERROR_INVAL;
   b5856:	3501      	adds	r5, #1
   b5858:	f47f af71 	bne.w	b573e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
							return JSMN_ERROR_INVAL;
   b585c:	f06f 0401 	mvn.w	r4, #1
   b5860:	e01e      	b.n	b58a0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1b4>
				for (; i >= 0; i--) {
   b5862:	3d01      	subs	r5, #1
   b5864:	1c6f      	adds	r7, r5, #1
   b5866:	f1ae 0e10 	sub.w	lr, lr, #16
   b586a:	d1b3      	bne.n	b57d4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xe8>
   b586c:	e767      	b.n	b573e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
	parser->pos++;
   b586e:	f10e 0901 	add.w	r9, lr, #1
   b5872:	f8c0 9000 	str.w	r9, [r0]
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b5876:	f8d0 8000 	ldr.w	r8, [r0]
   b587a:	4542      	cmp	r2, r8
   b587c:	f240 8093 	bls.w	b59a6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ba>
   b5880:	f811 5008 	ldrb.w	r5, [r1, r8]
   b5884:	2d00      	cmp	r5, #0
   b5886:	f000 808e 	beq.w	b59a6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ba>
		if (c == '\"') {
   b588a:	2d22      	cmp	r5, #34	; 0x22
   b588c:	d130      	bne.n	b58f0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x204>
			if (tokens == NULL) {
   b588e:	b1f3      	cbz	r3, b58ce <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1e2>
	if (parser->toknext >= num_tokens) {
   b5890:	6845      	ldr	r5, [r0, #4]
   b5892:	9f09      	ldr	r7, [sp, #36]	; 0x24
   b5894:	42af      	cmp	r7, r5
   b5896:	d806      	bhi.n	b58a6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1ba>
		parser->pos = start;
   b5898:	f8c0 e000 	str.w	lr, [r0]
					return JSMN_ERROR_NOMEM;
   b589c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
			}
		}
	}

	return count;
}
   b58a0:	4620      	mov	r0, r4
   b58a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	tok = &tokens[parser->toknext++];
   b58a6:	f105 0e01 	add.w	lr, r5, #1
   b58aa:	ea4f 1805 	mov.w	r8, r5, lsl #4
   b58ae:	eb03 1505 	add.w	r5, r3, r5, lsl #4
   b58b2:	f8c0 e004 	str.w	lr, [r0, #4]
	tok->start = tok->end = -1;
   b58b6:	e9c5 6601 	strd	r6, r6, [r5, #4]
	tok->size = 0;
   b58ba:	2700      	movs	r7, #0
   b58bc:	60ef      	str	r7, [r5, #12]
			jsmn_fill_token(token, JSMN_STRING, start+1, parser->pos);
   b58be:	f8d0 e000 	ldr.w	lr, [r0]
	token->type = type;
   b58c2:	f04f 0a03 	mov.w	sl, #3
   b58c6:	f803 a008 	strb.w	sl, [r3, r8]
	token->end = end;
   b58ca:	e9c5 9e01 	strd	r9, lr, [r5, #4]
				if (parser->toksuper != -1 && tokens != NULL)
   b58ce:	6885      	ldr	r5, [r0, #8]
   b58d0:	1c6f      	adds	r7, r5, #1
				count++;
   b58d2:	f104 0401 	add.w	r4, r4, #1
				if (parser->toksuper != -1 && tokens != NULL)
   b58d6:	f43f af32 	beq.w	b573e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
   b58da:	2b00      	cmp	r3, #0
   b58dc:	f43f af2f 	beq.w	b573e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
					tokens[parser->toksuper].size++;
   b58e0:	eb03 1e05 	add.w	lr, r3, r5, lsl #4
   b58e4:	f8de 500c 	ldr.w	r5, [lr, #12]
   b58e8:	3501      	adds	r5, #1
   b58ea:	f8ce 500c 	str.w	r5, [lr, #12]
   b58ee:	e726      	b.n	b573e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
		if (c == '\\' && parser->pos + 1 < len) {
   b58f0:	2d5c      	cmp	r5, #92	; 0x5c
   b58f2:	d111      	bne.n	b5918 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x22c>
   b58f4:	f108 0501 	add.w	r5, r8, #1
   b58f8:	42aa      	cmp	r2, r5
   b58fa:	d90d      	bls.n	b5918 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x22c>
			parser->pos++;
   b58fc:	6005      	str	r5, [r0, #0]
			switch (js[parser->pos]) {
   b58fe:	5d4d      	ldrb	r5, [r1, r5]
   b5900:	2d75      	cmp	r5, #117	; 0x75
   b5902:	d82b      	bhi.n	b595c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
   b5904:	2d6d      	cmp	r5, #109	; 0x6d
   b5906:	d80b      	bhi.n	b5920 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x234>
   b5908:	2d66      	cmp	r5, #102	; 0x66
   b590a:	d827      	bhi.n	b595c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
   b590c:	2d5b      	cmp	r5, #91	; 0x5b
   b590e:	d81d      	bhi.n	b594c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x260>
   b5910:	2d22      	cmp	r5, #34	; 0x22
   b5912:	d001      	beq.n	b5918 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x22c>
   b5914:	2d2f      	cmp	r5, #47	; 0x2f
   b5916:	d121      	bne.n	b595c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b5918:	6805      	ldr	r5, [r0, #0]
   b591a:	3501      	adds	r5, #1
   b591c:	6005      	str	r5, [r0, #0]
   b591e:	e7aa      	b.n	b5876 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x18a>
   b5920:	3d6e      	subs	r5, #110	; 0x6e
   b5922:	2d07      	cmp	r5, #7
   b5924:	d81a      	bhi.n	b595c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
   b5926:	a701      	add	r7, pc, #4	; (adr r7, b592c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x240>)
   b5928:	f857 f025 	ldr.w	pc, [r7, r5, lsl #2]
   b592c:	000b5919 	.word	0x000b5919
   b5930:	000b595d 	.word	0x000b595d
   b5934:	000b595d 	.word	0x000b595d
   b5938:	000b595d 	.word	0x000b595d
   b593c:	000b5919 	.word	0x000b5919
   b5940:	000b595d 	.word	0x000b595d
   b5944:	000b5919 	.word	0x000b5919
   b5948:	000b5963 	.word	0x000b5963
   b594c:	3d5c      	subs	r5, #92	; 0x5c
   b594e:	b2ed      	uxtb	r5, r5
   b5950:	fa0c f505 	lsl.w	r5, ip, r5
   b5954:	f240 4741 	movw	r7, #1089	; 0x441
   b5958:	423d      	tst	r5, r7
   b595a:	d1dd      	bne.n	b5918 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x22c>
			parser->pos = start;
   b595c:	f8c0 e000 	str.w	lr, [r0]
				if (r < 0) return r;
   b5960:	e77c      	b.n	b585c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x170>
					parser->pos++;
   b5962:	f108 0502 	add.w	r5, r8, #2
   b5966:	6005      	str	r5, [r0, #0]
   b5968:	f04f 0a04 	mov.w	sl, #4
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
   b596c:	f8d0 8000 	ldr.w	r8, [r0]
   b5970:	4542      	cmp	r2, r8
   b5972:	d803      	bhi.n	b597c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x290>
					parser->pos--;
   b5974:	6805      	ldr	r5, [r0, #0]
   b5976:	3d01      	subs	r5, #1
   b5978:	6005      	str	r5, [r0, #0]
					break;
   b597a:	e7cd      	b.n	b5918 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x22c>
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
   b597c:	f811 5008 	ldrb.w	r5, [r1, r8]
   b5980:	2d00      	cmp	r5, #0
   b5982:	d0f7      	beq.n	b5974 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x288>
						if(!((js[parser->pos] >= 48 && js[parser->pos] <= 57) || /* 0-9 */
   b5984:	f1a5 0b30 	sub.w	fp, r5, #48	; 0x30
   b5988:	f1bb 0f09 	cmp.w	fp, #9
   b598c:	d904      	bls.n	b5998 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ac>
   b598e:	f025 0520 	bic.w	r5, r5, #32
   b5992:	3d41      	subs	r5, #65	; 0x41
   b5994:	2d05      	cmp	r5, #5
   b5996:	d8e1      	bhi.n	b595c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
						parser->pos++;
   b5998:	f108 0501 	add.w	r5, r8, #1
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
   b599c:	f1ba 0a01 	subs.w	sl, sl, #1
						parser->pos++;
   b59a0:	6005      	str	r5, [r0, #0]
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
   b59a2:	d1e3      	bne.n	b596c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x280>
   b59a4:	e7e6      	b.n	b5974 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x288>
	parser->pos = start;
   b59a6:	f8c0 e000 	str.w	lr, [r0]
				return JSMN_ERROR_PART;
   b59aa:	f06f 0402 	mvn.w	r4, #2
   b59ae:	e777      	b.n	b58a0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1b4>
   b59b0:	00800013 	.word	0x00800013
				if (tokens != NULL && parser->toksuper != -1 &&
   b59b4:	2b00      	cmp	r3, #0
   b59b6:	f43f aec2 	beq.w	b573e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
   b59ba:	6885      	ldr	r5, [r0, #8]
   b59bc:	1c6f      	adds	r7, r5, #1
   b59be:	f43f aebe 	beq.w	b573e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
						tokens[parser->toksuper].type != JSMN_ARRAY &&
   b59c2:	012d      	lsls	r5, r5, #4
   b59c4:	5d5d      	ldrb	r5, [r3, r5]
   b59c6:	3d01      	subs	r5, #1
   b59c8:	2d01      	cmp	r5, #1
   b59ca:	f67f aeb8 	bls.w	b573e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
					for (i = parser->toknext - 1; i >= 0; i--) {
   b59ce:	6845      	ldr	r5, [r0, #4]
   b59d0:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
   b59d4:	eb03 1e05 	add.w	lr, r3, r5, lsl #4
   b59d8:	f1b8 0f00 	cmp.w	r8, #0
   b59dc:	f6ff aeaf 	blt.w	b573e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
						if (tokens[i].type == JSMN_ARRAY || tokens[i].type == JSMN_OBJECT) {
   b59e0:	f81e 5c10 	ldrb.w	r5, [lr, #-16]
   b59e4:	3d01      	subs	r5, #1
   b59e6:	2d01      	cmp	r5, #1
   b59e8:	d80a      	bhi.n	b5a00 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x314>
							if (tokens[i].start != -1 && tokens[i].end == -1) {
   b59ea:	f85e 5c0c 	ldr.w	r5, [lr, #-12]
   b59ee:	3501      	adds	r5, #1
   b59f0:	d006      	beq.n	b5a00 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x314>
   b59f2:	f85e 5c08 	ldr.w	r5, [lr, #-8]
   b59f6:	3501      	adds	r5, #1
   b59f8:	d102      	bne.n	b5a00 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x314>
								parser->toksuper = i;
   b59fa:	f8c0 8008 	str.w	r8, [r0, #8]
								break;
   b59fe:	e69e      	b.n	b573e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
					for (i = parser->toknext - 1; i >= 0; i--) {
   b5a00:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   b5a04:	f1ae 0e10 	sub.w	lr, lr, #16
   b5a08:	e7e6      	b.n	b59d8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ec>
   b5a0a:	f1a5 0920 	sub.w	r9, r5, #32
   b5a0e:	4f24      	ldr	r7, [pc, #144]	; (b5aa0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x3b4>)
   b5a10:	fa5f f989 	uxtb.w	r9, r9
   b5a14:	fa0c f909 	lsl.w	r9, ip, r9
   b5a18:	ea19 0f07 	tst.w	r9, r7
   b5a1c:	f47f aeaa 	bne.w	b5774 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x88>
		if (js[parser->pos] < 32 || js[parser->pos] >= 127) {
   b5a20:	3d20      	subs	r5, #32
   b5a22:	2d5e      	cmp	r5, #94	; 0x5e
   b5a24:	d89a      	bhi.n	b595c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b5a26:	f108 0501 	add.w	r5, r8, #1
   b5a2a:	6005      	str	r5, [r0, #0]
   b5a2c:	e68f      	b.n	b574e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x62>
		switch (js[parser->pos]) {
   b5a2e:	2d0d      	cmp	r5, #13
   b5a30:	d1f6      	bne.n	b5a20 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x334>
   b5a32:	e69f      	b.n	b5774 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x88>
   b5a34:	f005 09df 	and.w	r9, r5, #223	; 0xdf
   b5a38:	f1b9 0f5d 	cmp.w	r9, #93	; 0x5d
   b5a3c:	e7f8      	b.n	b5a30 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x344>
	if (parser->toknext >= num_tokens) {
   b5a3e:	6845      	ldr	r5, [r0, #4]
   b5a40:	9f09      	ldr	r7, [sp, #36]	; 0x24
   b5a42:	42af      	cmp	r7, r5
   b5a44:	f67f af28 	bls.w	b5898 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1ac>
	tok = &tokens[parser->toknext++];
   b5a48:	f105 0801 	add.w	r8, r5, #1
   b5a4c:	ea4f 1905 	mov.w	r9, r5, lsl #4
   b5a50:	eb03 1505 	add.w	r5, r3, r5, lsl #4
   b5a54:	f8c0 8004 	str.w	r8, [r0, #4]
	tok->start = tok->end = -1;
   b5a58:	e9c5 6601 	strd	r6, r6, [r5, #4]
	tok->size = 0;
   b5a5c:	2700      	movs	r7, #0
   b5a5e:	60ef      	str	r7, [r5, #12]
	jsmn_fill_token(token, JSMN_PRIMITIVE, start, parser->pos);
   b5a60:	f8d0 8000 	ldr.w	r8, [r0]
	token->type = type;
   b5a64:	f04f 0a04 	mov.w	sl, #4
   b5a68:	f803 a009 	strb.w	sl, [r3, r9]
	token->end = end;
   b5a6c:	e9c5 e801 	strd	lr, r8, [r5, #4]
	parser->pos--;
   b5a70:	6805      	ldr	r5, [r0, #0]
   b5a72:	3d01      	subs	r5, #1
   b5a74:	e683      	b.n	b577e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x92>
	if (tokens != NULL) {
   b5a76:	2b00      	cmp	r3, #0
   b5a78:	f43f af12 	beq.w	b58a0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1b4>
		for (i = parser->toknext - 1; i >= 0; i--) {
   b5a7c:	6842      	ldr	r2, [r0, #4]
   b5a7e:	1e51      	subs	r1, r2, #1
   b5a80:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   b5a84:	2900      	cmp	r1, #0
   b5a86:	f6ff af0b 	blt.w	b58a0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1b4>
			if (tokens[i].start != -1 && tokens[i].end == -1) {
   b5a8a:	f853 2c0c 	ldr.w	r2, [r3, #-12]
   b5a8e:	3201      	adds	r2, #1
   b5a90:	d003      	beq.n	b5a9a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x3ae>
   b5a92:	f853 2c08 	ldr.w	r2, [r3, #-8]
   b5a96:	3201      	adds	r2, #1
   b5a98:	d087      	beq.n	b59aa <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2be>
		for (i = parser->toknext - 1; i >= 0; i--) {
   b5a9a:	3901      	subs	r1, #1
   b5a9c:	3b10      	subs	r3, #16
   b5a9e:	e7f1      	b.n	b5a84 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x398>
   b5aa0:	04001001 	.word	0x04001001

000b5aa4 <_ZN10JsonParser5parseEv>:
bool JsonParser::parse() {
   b5aa4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (offset == 0) {
   b5aa6:	68c2      	ldr	r2, [r0, #12]
bool JsonParser::parse() {
   b5aa8:	4604      	mov	r4, r0
	if (offset == 0) {
   b5aaa:	b912      	cbnz	r2, b5ab2 <_ZN10JsonParser5parseEv+0xe>
		return false;
   b5aac:	2000      	movs	r0, #0
}
   b5aae:	b003      	add	sp, #12
   b5ab0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (tokens) {
   b5ab2:	6943      	ldr	r3, [r0, #20]
		JsonParserGeneratorRK::jsmn_init(&parser);
   b5ab4:	f100 0620 	add.w	r6, r0, #32
	if (tokens) {
   b5ab8:	b1ab      	cbz	r3, b5ae6 <_ZN10JsonParser5parseEv+0x42>
/**
 * Creates a new parser based over a given  buffer with an array of tokens
 * available.
 */
void jsmn_init(jsmn_parser *parser) {
	parser->pos = 0;
   b5aba:	2100      	movs	r1, #0
	parser->toknext = 0;
   b5abc:	e9c0 1108 	strd	r1, r1, [r0, #32]
	parser->toksuper = -1;
   b5ac0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   b5ac4:	6281      	str	r1, [r0, #40]	; 0x28
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   b5ac6:	69c1      	ldr	r1, [r0, #28]
   b5ac8:	9100      	str	r1, [sp, #0]
   b5aca:	6841      	ldr	r1, [r0, #4]
   b5acc:	4630      	mov	r0, r6
   b5ace:	f7ff fe0d 	bl	b56ec <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>
		if (result == JsonParserGeneratorRK::JSMN_ERROR_NOMEM) {
   b5ad2:	1c43      	adds	r3, r0, #1
   b5ad4:	d128      	bne.n	b5b28 <_ZN10JsonParser5parseEv+0x84>
			if (staticBuffers) {
   b5ad6:	7c25      	ldrb	r5, [r4, #16]
   b5ad8:	2d00      	cmp	r5, #0
   b5ada:	d1e7      	bne.n	b5aac <_ZN10JsonParser5parseEv+0x8>
			free(tokens);
   b5adc:	6960      	ldr	r0, [r4, #20]
   b5ade:	f000 ff27 	bl	b6930 <free>
			tokens = 0;
   b5ae2:	6165      	str	r5, [r4, #20]
			maxTokens = 0;
   b5ae4:	61e5      	str	r5, [r4, #28]
	parser->pos = 0;
   b5ae6:	2500      	movs	r5, #0
	parser->toksuper = -1;
   b5ae8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
	parser->toknext = 0;
   b5aec:	e9c4 5508 	strd	r5, r5, [r4, #32]
	int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, 0, 0);
   b5af0:	68e2      	ldr	r2, [r4, #12]
   b5af2:	6861      	ldr	r1, [r4, #4]
	parser->toksuper = -1;
   b5af4:	62a7      	str	r7, [r4, #40]	; 0x28
	int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, 0, 0);
   b5af6:	9500      	str	r5, [sp, #0]
   b5af8:	462b      	mov	r3, r5
   b5afa:	4630      	mov	r0, r6
   b5afc:	f7ff fdf6 	bl	b56ec <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>
	if (result < 0) {
   b5b00:	2800      	cmp	r0, #0
   b5b02:	dbd3      	blt.n	b5aac <_ZN10JsonParser5parseEv+0x8>
	maxTokens = (size_t) result;
   b5b04:	61e0      	str	r0, [r4, #28]
	if (maxTokens > 0) {
   b5b06:	d017      	beq.n	b5b38 <_ZN10JsonParser5parseEv+0x94>
		tokens = (JsonParserGeneratorRK::jsmntok_t *)malloc(sizeof(JsonParserGeneratorRK::jsmntok_t) * maxTokens);
   b5b08:	0100      	lsls	r0, r0, #4
   b5b0a:	f000 ff09 	bl	b6920 <malloc>
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   b5b0e:	69e2      	ldr	r2, [r4, #28]
		tokens = (JsonParserGeneratorRK::jsmntok_t *)malloc(sizeof(JsonParserGeneratorRK::jsmntok_t) * maxTokens);
   b5b10:	6160      	str	r0, [r4, #20]
   b5b12:	4603      	mov	r3, r0
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   b5b14:	9200      	str	r2, [sp, #0]
	parser->toknext = 0;
   b5b16:	e9c4 5508 	strd	r5, r5, [r4, #32]
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   b5b1a:	68e2      	ldr	r2, [r4, #12]
   b5b1c:	6861      	ldr	r1, [r4, #4]
	parser->toksuper = -1;
   b5b1e:	62a7      	str	r7, [r4, #40]	; 0x28
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   b5b20:	4630      	mov	r0, r6
   b5b22:	f7ff fde3 	bl	b56ec <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>
   b5b26:	e001      	b.n	b5b2c <_ZN10JsonParser5parseEv+0x88>
		if (result < 0) {
   b5b28:	2800      	cmp	r0, #0
   b5b2a:	dbbf      	blt.n	b5aac <_ZN10JsonParser5parseEv+0x8>
		tokensEnd = &tokens[result];
   b5b2c:	6963      	ldr	r3, [r4, #20]
   b5b2e:	eb03 1000 	add.w	r0, r3, r0, lsl #4
   b5b32:	61a0      	str	r0, [r4, #24]
	return true;
   b5b34:	2001      	movs	r0, #1
   b5b36:	e7ba      	b.n	b5aae <_ZN10JsonParser5parseEv+0xa>
		tokensEnd = tokens;
   b5b38:	6963      	ldr	r3, [r4, #20]
   b5b3a:	61a3      	str	r3, [r4, #24]
   b5b3c:	e7fa      	b.n	b5b34 <_ZN10JsonParser5parseEv+0x90>

000b5b3e <_ZN12JsonModifier16removeArrayIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj>:
bool JsonModifier::removeArrayIndex(const JsonParserGeneratorRK::jsmntok_t *container, size_t index) {
   b5b3e:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   b5b42:	4604      	mov	r4, r0
	const JsonParserGeneratorRK::jsmntok_t *tok = jp.getTokenByIndex(container, index);
   b5b44:	6b00      	ldr	r0, [r0, #48]	; 0x30
   b5b46:	f7ff fab4 	bl	b50b2 <_ZNK10JsonParser15getTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj>
	if (!tok) {
   b5b4a:	4605      	mov	r5, r0
   b5b4c:	b348      	cbz	r0, b5ba2 <_ZN12JsonModifier16removeArrayIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj+0x64>
	const JsonParserGeneratorRK::jsmntok_t expandedToken = tokenWithQuotes(tok);
   b5b4e:	4602      	mov	r2, r0
   b5b50:	4621      	mov	r1, r4
   b5b52:	4668      	mov	r0, sp
   b5b54:	f7ff fd80 	bl	b5658 <_ZNK12JsonModifier15tokenWithQuotesEPKN21JsonParserGeneratorRK9jsmntok_tE>
	int left = findLeftComma(tok);
   b5b58:	4629      	mov	r1, r5
   b5b5a:	4620      	mov	r0, r4
   b5b5c:	f7ff fd8c 	bl	b5678 <_ZNK12JsonModifier13findLeftCommaEPKN21JsonParserGeneratorRK9jsmntok_tE>
	int right = findRightComma(tok);
   b5b60:	4629      	mov	r1, r5
	int left = findLeftComma(tok);
   b5b62:	4680      	mov	r8, r0
	int right = findRightComma(tok);
   b5b64:	4620      	mov	r0, r4
   b5b66:	f7ff fda2 	bl	b56ae <_ZNK12JsonModifier14findRightCommaEPKN21JsonParserGeneratorRK9jsmntok_tE>
	if (left >= 0 && right >= 0) {
   b5b6a:	f1b8 0f00 	cmp.w	r8, #0
	const JsonParserGeneratorRK::jsmntok_t expandedToken = tokenWithQuotes(tok);
   b5b6e:	e9dd 7601 	ldrd	r7, r6, [sp, #4]
	if (left >= 0 && right >= 0) {
   b5b72:	db19      	blt.n	b5ba8 <_ZN12JsonModifier16removeArrayIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj+0x6a>
   b5b74:	2800      	cmp	r0, #0
   b5b76:	bfac      	ite	ge
   b5b78:	4606      	movge	r6, r0
   b5b7a:	4647      	movlt	r7, r8
	origAfter = jp.getOffset() - right;
   b5b7c:	6b23      	ldr	r3, [r4, #48]	; 0x30
   b5b7e:	68da      	ldr	r2, [r3, #12]
   b5b80:	1b92      	subs	r2, r2, r6
	if (origAfter > 0) {
   b5b82:	2a00      	cmp	r2, #0
	origAfter = jp.getOffset() - right;
   b5b84:	63a2      	str	r2, [r4, #56]	; 0x38
	if (origAfter > 0) {
   b5b86:	dd04      	ble.n	b5b92 <_ZN12JsonModifier16removeArrayIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj+0x54>
	char *getBuffer() const { return buffer; }
   b5b88:	6858      	ldr	r0, [r3, #4]
		memmove(jp.getBuffer() + left, jp.getBuffer() + right, origAfter);
   b5b8a:	1981      	adds	r1, r0, r6
   b5b8c:	4438      	add	r0, r7
   b5b8e:	f003 fb27 	bl	b91e0 <memmove>
	jp.setOffset(left + origAfter);
   b5b92:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   b5b94:	6b22      	ldr	r2, [r4, #48]	; 0x30
   b5b96:	443b      	add	r3, r7
	void setOffset(size_t offset) { this->offset = offset; };
   b5b98:	60d3      	str	r3, [r2, #12]
	jp.parse();
   b5b9a:	6b20      	ldr	r0, [r4, #48]	; 0x30
   b5b9c:	f7ff ff82 	bl	b5aa4 <_ZN10JsonParser5parseEv>
	return true;
   b5ba0:	2001      	movs	r0, #1
}
   b5ba2:	b004      	add	sp, #16
   b5ba4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (right >= 0) {
   b5ba8:	2800      	cmp	r0, #0
		right++;
   b5baa:	bfa8      	it	ge
   b5bac:	1c46      	addge	r6, r0, #1
		left = expandedToken.start;
   b5bae:	e7e5      	b.n	b5b7c <_ZN12JsonModifier16removeArrayIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj+0x3e>

000b5bb0 <_ZN12JsonModifier6finishEv>:
void JsonModifier::finish() {
   b5bb0:	b538      	push	{r3, r4, r5, lr}
	if (start == -1) {
   b5bb2:	6b43      	ldr	r3, [r0, #52]	; 0x34
   b5bb4:	1c5a      	adds	r2, r3, #1
void JsonModifier::finish() {
   b5bb6:	4604      	mov	r4, r0
	if (start == -1) {
   b5bb8:	d018      	beq.n	b5bec <_ZN12JsonModifier6finishEv+0x3c>
	if (origAfter > 0) {
   b5bba:	6b82      	ldr	r2, [r0, #56]	; 0x38
   b5bbc:	2a00      	cmp	r2, #0
   b5bbe:	dd08      	ble.n	b5bd2 <_ZN12JsonModifier6finishEv+0x22>
	char *getBuffer() const { return buffer; }
   b5bc0:	6b01      	ldr	r1, [r0, #48]	; 0x30
		memmove(jp.getBuffer() + start + getOffset(), jp.getBuffer() + saveLoc, origAfter);
   b5bc2:	68e5      	ldr	r5, [r4, #12]
   b5bc4:	6848      	ldr	r0, [r1, #4]
   b5bc6:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   b5bc8:	442b      	add	r3, r5
   b5bca:	4401      	add	r1, r0
   b5bcc:	4418      	add	r0, r3
   b5bce:	f003 fb07 	bl	b91e0 <memmove>
	jp.setOffset(start + getOffset() + origAfter);
   b5bd2:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	; 0x30
   b5bd6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   b5bd8:	440b      	add	r3, r1
   b5bda:	68e1      	ldr	r1, [r4, #12]
   b5bdc:	440b      	add	r3, r1
	void setOffset(size_t offset) { this->offset = offset; };
   b5bde:	60d3      	str	r3, [r2, #12]
	jp.parse();
   b5be0:	6b20      	ldr	r0, [r4, #48]	; 0x30
   b5be2:	f7ff ff5f 	bl	b5aa4 <_ZN10JsonParser5parseEv>
	start = -1;
   b5be6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b5bea:	6363      	str	r3, [r4, #52]	; 0x34
}
   b5bec:	bd38      	pop	{r3, r4, r5, pc}
	...

000b5bf0 <_ZN8MB85RC64D1Ev>:
	size_t memorySize;
	int addr; // This is just 0-7, the (0b1010000 of the 7-bit address is ORed in later)

};

class MB85RC64 : public MB85RC {
   b5bf0:	b510      	push	{r4, lr}
   b5bf2:	4b03      	ldr	r3, [pc, #12]	; (b5c00 <_ZN8MB85RC64D1Ev+0x10>)
   b5bf4:	6003      	str	r3, [r0, #0]
   b5bf6:	4604      	mov	r4, r0
   b5bf8:	f000 f9c4 	bl	b5f84 <_ZN6MB85RCD1Ev>
   b5bfc:	4620      	mov	r0, r4
   b5bfe:	bd10      	pop	{r4, pc}
   b5c00:	000ba244 	.word	0x000ba244

000b5c04 <_ZN8MB85RC64D0Ev>:
   b5c04:	b510      	push	{r4, lr}
   b5c06:	4604      	mov	r4, r0
   b5c08:	f7ff fff2 	bl	b5bf0 <_ZN8MB85RC64D1Ev>
   b5c0c:	4620      	mov	r0, r4
   b5c0e:	2110      	movs	r1, #16
   b5c10:	f7fe fa43 	bl	b409a <_ZdlPvj>
   b5c14:	4620      	mov	r0, r4
   b5c16:	bd10      	pop	{r4, pc}

000b5c18 <_ZN10nodeIDData8validateEj>:
    nodeDatabase.set_nodeIDJson(blank);
    nodeDatabase.flush(true);
    Log.info("NodeID data is now %s", nodeDatabase.get_nodeIDJson().c_str());
}

bool nodeIDData::validate(size_t dataSize) {
   b5c18:	b510      	push	{r4, lr}
    bool valid = PersistentDataFRAM::validate(dataSize);
   b5c1a:	f000 fbc5 	bl	b63a8 <_ZN15StorageHelperRK18PersistentDataBase8validateEj>
    if (!valid) Log.info("nodeID data is %s",(valid) ? "valid": "not valid");
   b5c1e:	4604      	mov	r4, r0
   b5c20:	b920      	cbnz	r0, b5c2c <_ZN10nodeIDData8validateEj+0x14>
   b5c22:	4a03      	ldr	r2, [pc, #12]	; (b5c30 <_ZN10nodeIDData8validateEj+0x18>)
   b5c24:	4903      	ldr	r1, [pc, #12]	; (b5c34 <_ZN10nodeIDData8validateEj+0x1c>)
   b5c26:	4804      	ldr	r0, [pc, #16]	; (b5c38 <_ZN10nodeIDData8validateEj+0x20>)
   b5c28:	f7fe faa0 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
    return valid;
}
   b5c2c:	4620      	mov	r0, r4
   b5c2e:	bd10      	pop	{r4, pc}
   b5c30:	000ba16c 	.word	0x000ba16c
   b5c34:	000ba189 	.word	0x000ba189
   b5c38:	2003e6b0 	.word	0x2003e6b0

000b5c3c <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>:
         * 
         * Blocks if another thread has obtained the mutex, continues when the other thread releases it.
         * 
         * Never call lock from a SINGLE_THREADED_BLOCK since deadlock can occur.
         */
        void lock() const { 
   b5c3c:	b510      	push	{r4, lr}
            if (!handle_) {
   b5c3e:	6803      	ldr	r3, [r0, #0]
        void lock() const { 
   b5c40:	4604      	mov	r4, r0
            if (!handle_) {
   b5c42:	b90b      	cbnz	r3, b5c48 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv+0xc>
                os_mutex_recursive_create(&handle_);
   b5c44:	f000 fc58 	bl	b64f8 <os_mutex_recursive_create>
            }
            os_mutex_recursive_lock(handle_); 
   b5c48:	6820      	ldr	r0, [r4, #0]
        }
   b5c4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            os_mutex_recursive_lock(handle_); 
   b5c4e:	f000 bc63 	b.w	b6518 <os_mutex_recursive_lock>

000b5c52 <_ZN15StorageHelperRK18PersistentDataFRAM4saveEv>:
        }

        /**
         * @brief Save the persistent data file. You normally do not need to call this; it will be saved automatically.
         */
        virtual void save() {
   b5c52:	b538      	push	{r3, r4, r5, lr}
   b5c54:	4604      	mov	r4, r0
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
      { _M_device.lock(); }
   b5c56:	3004      	adds	r0, #4
   b5c58:	f7ff fff0 	bl	b5c3c <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
            WITH_LOCK(*this) {
                fram.writeData(framOffset, (const uint8_t*)savedDataHeader, savedDataSize);
   b5c5c:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b5c5e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   b5c60:	6803      	ldr	r3, [r0, #0]
   b5c62:	68dd      	ldr	r5, [r3, #12]
   b5c64:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   b5c68:	47a8      	blx	r5
            os_mutex_recursive_unlock(handle_); 
   b5c6a:	6860      	ldr	r0, [r4, #4]
   b5c6c:	f000 fc5c 	bl	b6528 <os_mutex_recursive_unlock>
            }
            PersistentDataBase::save();
   b5c70:	4620      	mov	r0, r4
        } 
   b5c72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            PersistentDataBase::save();
   b5c76:	f000 bc19 	b.w	b64ac <_ZN15StorageHelperRK18PersistentDataBase4saveEv>

000b5c7a <_ZN15StorageHelperRK18PersistentDataFRAM4loadEv>:
        virtual bool load() {
   b5c7a:	b538      	push	{r3, r4, r5, lr}
   b5c7c:	4604      	mov	r4, r0
   b5c7e:	3004      	adds	r0, #4
   b5c80:	f7ff ffdc 	bl	b5c3c <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                fram.readData(framOffset, (uint8_t*)savedDataHeader, savedDataSize);
   b5c84:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b5c86:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   b5c88:	6803      	ldr	r3, [r0, #0]
   b5c8a:	689d      	ldr	r5, [r3, #8]
   b5c8c:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   b5c90:	47a8      	blx	r5
                if (!validate(savedDataHeader->size)) {
   b5c92:	68a2      	ldr	r2, [r4, #8]
   b5c94:	6823      	ldr	r3, [r4, #0]
   b5c96:	88d1      	ldrh	r1, [r2, #6]
   b5c98:	695b      	ldr	r3, [r3, #20]
   b5c9a:	4620      	mov	r0, r4
   b5c9c:	4798      	blx	r3
   b5c9e:	b918      	cbnz	r0, b5ca8 <_ZN15StorageHelperRK18PersistentDataFRAM4loadEv+0x2e>
                    initialize();
   b5ca0:	6823      	ldr	r3, [r4, #0]
   b5ca2:	4620      	mov	r0, r4
   b5ca4:	699b      	ldr	r3, [r3, #24]
   b5ca6:	4798      	blx	r3
            os_mutex_recursive_unlock(handle_); 
   b5ca8:	6860      	ldr	r0, [r4, #4]
   b5caa:	f000 fc3d 	bl	b6528 <os_mutex_recursive_unlock>
        }
   b5cae:	2001      	movs	r0, #1
   b5cb0:	bd38      	pop	{r3, r4, r5, pc}
	...

000b5cb4 <_ZN15StorageHelperRK18PersistentDataFRAMD1Ev>:
    class PersistentDataFRAM : public PersistentDataBase {
   b5cb4:	b510      	push	{r4, lr}
    class PersistentDataBase : public CustomRecursiveMutex {
   b5cb6:	4b04      	ldr	r3, [pc, #16]	; (b5cc8 <_ZN15StorageHelperRK18PersistentDataFRAMD1Ev+0x14>)
   b5cb8:	6003      	str	r3, [r0, #0]
    class PersistentDataFRAM : public PersistentDataBase {
   b5cba:	4604      	mov	r4, r0
            if (handle_) {
   b5cbc:	6840      	ldr	r0, [r0, #4]
   b5cbe:	b108      	cbz	r0, b5cc4 <_ZN15StorageHelperRK18PersistentDataFRAMD1Ev+0x10>
                os_mutex_recursive_destroy(handle_);
   b5cc0:	f000 fc22 	bl	b6508 <os_mutex_recursive_destroy>
    class PersistentDataFRAM : public PersistentDataBase {
   b5cc4:	4620      	mov	r0, r4
   b5cc6:	bd10      	pop	{r4, pc}
   b5cc8:	000ba338 	.word	0x000ba338

000b5ccc <_ZN10nodeIDDataD1Ev>:
nodeIDData::~nodeIDData() {
   b5ccc:	b510      	push	{r4, lr}
   b5cce:	4b03      	ldr	r3, [pc, #12]	; (b5cdc <_ZN10nodeIDDataD1Ev+0x10>)
   b5cd0:	6003      	str	r3, [r0, #0]
   b5cd2:	4604      	mov	r4, r0
   b5cd4:	f7ff ffee 	bl	b5cb4 <_ZN15StorageHelperRK18PersistentDataFRAMD1Ev>
}
   b5cd8:	4620      	mov	r0, r4
   b5cda:	bd10      	pop	{r4, pc}
   b5cdc:	000ba260 	.word	0x000ba260

000b5ce0 <_ZN10nodeIDDataD0Ev>:
nodeIDData::~nodeIDData() {
   b5ce0:	b510      	push	{r4, lr}
   b5ce2:	4604      	mov	r4, r0
}
   b5ce4:	f7ff fff2 	bl	b5ccc <_ZN10nodeIDDataD1Ev>
   b5ce8:	4620      	mov	r0, r4
   b5cea:	f640 413c 	movw	r1, #3132	; 0xc3c
   b5cee:	f7fe f9d4 	bl	b409a <_ZdlPvj>
   b5cf2:	4620      	mov	r0, r4
   b5cf4:	bd10      	pop	{r4, pc}
	...

000b5cf8 <_ZN10nodeIDDataC1Ev>:
nodeIDData::nodeIDData() : StorageHelperRK::PersistentDataFRAM(::fram, 200, &nodeData.nodeHeader, sizeof(NodeData), NODEID_DATA_MAGIC, NODEID_DATA_VERSION) {
   b5cf8:	f100 012c 	add.w	r1, r0, #44	; 0x2c
        CustomRecursiveMutex() : handle_(nullptr) {
   b5cfc:	2200      	movs	r2, #0
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b5cfe:	6081      	str	r1, [r0, #8]
   b5d00:	490a      	ldr	r1, [pc, #40]	; (b5d2c <_ZN10nodeIDDataC1Ev+0x34>)
        CustomRecursiveMutex() : handle_(nullptr) {
   b5d02:	6042      	str	r2, [r0, #4]
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b5d04:	f44f 6c41 	mov.w	ip, #3088	; 0xc10
   b5d08:	6182      	str	r2, [r0, #24]
   b5d0a:	f880 2020 	strb.w	r2, [r0, #32]
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion), fram(fram), framOffset(framOffset) {
   b5d0e:	4a08      	ldr	r2, [pc, #32]	; (b5d30 <_ZN10nodeIDDataC1Ev+0x38>)
   b5d10:	6242      	str	r2, [r0, #36]	; 0x24
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b5d12:	e9c0 c103 	strd	ip, r1, [r0, #12]
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion), fram(fram), framOffset(framOffset) {
   b5d16:	22c8      	movs	r2, #200	; 0xc8
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b5d18:	2102      	movs	r1, #2
   b5d1a:	8281      	strh	r1, [r0, #20]
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion), fram(fram), framOffset(framOffset) {
   b5d1c:	6282      	str	r2, [r0, #40]	; 0x28
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b5d1e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   b5d22:	4a04      	ldr	r2, [pc, #16]	; (b5d34 <_ZN10nodeIDDataC1Ev+0x3c>)
   b5d24:	61c1      	str	r1, [r0, #28]
   b5d26:	6002      	str	r2, [r0, #0]
};
   b5d28:	4770      	bx	lr
   b5d2a:	bf00      	nop
   b5d2c:	20a99e60 	.word	0x20a99e60
   b5d30:	2003e658 	.word	0x2003e658
   b5d34:	000ba260 	.word	0x000ba260

000b5d38 <_ZN10nodeIDData8instanceEv>:
nodeIDData &nodeIDData::instance() {
   b5d38:	b510      	push	{r4, lr}
    if (!_instance) {
   b5d3a:	4c07      	ldr	r4, [pc, #28]	; (b5d58 <_ZN10nodeIDData8instanceEv+0x20>)
   b5d3c:	6823      	ldr	r3, [r4, #0]
   b5d3e:	b943      	cbnz	r3, b5d52 <_ZN10nodeIDData8instanceEv+0x1a>
        _instance = new nodeIDData();
   b5d40:	f640 403c 	movw	r0, #3132	; 0xc3c
   b5d44:	f7fe f9a5 	bl	b4092 <_Znwj>
   b5d48:	4603      	mov	r3, r0
   b5d4a:	b108      	cbz	r0, b5d50 <_ZN10nodeIDData8instanceEv+0x18>
   b5d4c:	f7ff ffd4 	bl	b5cf8 <_ZN10nodeIDDataC1Ev>
   b5d50:	6023      	str	r3, [r4, #0]
}
   b5d52:	6820      	ldr	r0, [r4, #0]
   b5d54:	bd10      	pop	{r4, pc}
   b5d56:	bf00      	nop
   b5d58:	2003e654 	.word	0x2003e654

000b5d5c <_ZN10nodeIDData5setupEv>:
void nodeIDData::setup() {
   b5d5c:	b510      	push	{r4, lr}
    fram.begin();
   b5d5e:	6a40      	ldr	r0, [r0, #36]	; 0x24
   b5d60:	f000 f926 	bl	b5fb0 <_ZN6MB85RC5beginEv>
    nodeDatabase
   b5d64:	f7ff ffe8 	bl	b5d38 <_ZN10nodeIDData8instanceEv>
            saveDelayMs = value;
   b5d68:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
        .load();
   b5d6c:	6803      	ldr	r3, [r0, #0]
   b5d6e:	61c2      	str	r2, [r0, #28]
}
   b5d70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        .load();
   b5d74:	685b      	ldr	r3, [r3, #4]
   b5d76:	4718      	bx	r3

000b5d78 <_ZN10nodeIDData19nodeDataStorageSizeEv>:
}
   b5d78:	f44f 6041 	mov.w	r0, #3088	; 0xc10
   b5d7c:	4770      	bx	lr
	...

000b5d80 <_ZNK10nodeIDData14get_nodeIDJsonEv>:
    nodeIDData::resetNodeIDs();
    updateHash();                                       // If you manually update fields here, be sure to update the hash
}


String nodeIDData::get_nodeIDJson() const {
   b5d80:	b538      	push	{r3, r4, r5, lr}
   b5d82:	4604      	mov	r4, r0
   b5d84:	460d      	mov	r5, r1
	String result;
   b5d86:	4906      	ldr	r1, [pc, #24]	; (b5da0 <_ZNK10nodeIDData14get_nodeIDJsonEv+0x20>)
   b5d88:	f002 fd8f 	bl	b88aa <_ZN6StringC1EPK19__FlashStringHelper>
	getValueString(offsetof(NodeData, nodeIDJson), sizeof(NodeData::nodeIDJson), result);
   b5d8c:	4623      	mov	r3, r4
   b5d8e:	f44f 6240 	mov.w	r2, #3072	; 0xc00
   b5d92:	2110      	movs	r1, #16
   b5d94:	4628      	mov	r0, r5
   b5d96:	f000 fa59 	bl	b624c <_ZNK15StorageHelperRK18PersistentDataBase14getValueStringEjjR6String>
	return result;
}
   b5d9a:	4620      	mov	r0, r4
   b5d9c:	bd38      	pop	{r3, r4, r5, pc}
   b5d9e:	bf00      	nop
   b5da0:	000ba487 	.word	0x000ba487

000b5da4 <_ZN10nodeIDData14set_nodeIDJsonEPKc>:

bool nodeIDData::set_nodeIDJson(const char* str) {
   b5da4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5da8:	f5ad 7d21 	sub.w	sp, sp, #644	; 0x284
   b5dac:	4680      	mov	r8, r0
   b5dae:	460c      	mov	r4, r1
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b5db0:	f000 fd3e 	bl	b6830 <spark_cloud_flag_connected>

    if (Particle.connected()) {
   b5db4:	b360      	cbz	r0, b5e10 <_ZN10nodeIDData14set_nodeIDJsonEPKc+0x6c>
        const size_t maxChunkSize = 622; // max report size
        size_t messageLength = strlen(str);
   b5db6:	4620      	mov	r0, r4
   b5db8:	f003 faa9 	bl	b930e <strlen>
            // Calculate chunk size for the current iteration
            size_t chunkSize = std::min(maxChunkSize, messageLength - offset);

            // Create a buffer for the current chunk
            char chunk[maxChunkSize + 1]; // +1 for null terminator
            snprintf(chunk, sizeof(chunk), "%.*s", static_cast<int>(chunkSize), str + offset);
   b5dbc:	f8df b0d0 	ldr.w	fp, [pc, #208]	; b5e90 <_ZN10nodeIDData14set_nodeIDJsonEPKc+0xec>
   b5dc0:	f8df a0d0 	ldr.w	sl, [pc, #208]	; b5e94 <_ZN10nodeIDData14set_nodeIDJsonEPKc+0xf0>
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b5dc4:	f8df 90d0 	ldr.w	r9, [pc, #208]	; b5e98 <_ZN10nodeIDData14set_nodeIDJsonEPKc+0xf4>
        size_t messageLength = strlen(str);
   b5dc8:	4607      	mov	r7, r0
        size_t offset = 0;
   b5dca:	2500      	movs	r5, #0
        while (offset < messageLength) {
   b5dcc:	42bd      	cmp	r5, r7
   b5dce:	d21f      	bcs.n	b5e10 <_ZN10nodeIDData14set_nodeIDJsonEPKc+0x6c>
            size_t chunkSize = std::min(maxChunkSize, messageLength - offset);
   b5dd0:	1b7e      	subs	r6, r7, r5
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return __b < __a ? __b : __a;
      if (__b < __a)
	return __b;
      return __a;
   b5dd2:	f240 226d 	movw	r2, #621	; 0x26d
   b5dd6:	f240 236e 	movw	r3, #622	; 0x26e
   b5dda:	4296      	cmp	r6, r2
   b5ddc:	bf88      	it	hi
   b5dde:	461e      	movhi	r6, r3
            snprintf(chunk, sizeof(chunk), "%.*s", static_cast<int>(chunkSize), str + offset);
   b5de0:	1963      	adds	r3, r4, r5
   b5de2:	9300      	str	r3, [sp, #0]
   b5de4:	465a      	mov	r2, fp
   b5de6:	4633      	mov	r3, r6
   b5de8:	f240 216f 	movw	r1, #623	; 0x26f
   b5dec:	a804      	add	r0, sp, #16
   b5dee:	f000 fdb7 	bl	b6960 <snprintf>
   b5df2:	f89a 3000 	ldrb.w	r3, [sl]
   b5df6:	f88d 3000 	strb.w	r3, [sp]
   b5dfa:	aa04      	add	r2, sp, #16
   b5dfc:	233c      	movs	r3, #60	; 0x3c
   b5dfe:	4649      	mov	r1, r9
   b5e00:	a802      	add	r0, sp, #8
   b5e02:	f000 ffc5 	bl	b6d90 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   b5e06:	a803      	add	r0, sp, #12
   b5e08:	f7fe fa2c 	bl	b4264 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>

            // Publish the current chunk
            Particle.publish("Node Database before set:", chunk, PRIVATE);

            // Move to the next chunk
            offset += chunkSize;
   b5e0c:	4435      	add	r5, r6
        while (offset < messageLength) {
   b5e0e:	e7dd      	b.n	b5dcc <_ZN10nodeIDData14set_nodeIDJsonEPKc+0x28>
    // char cleanedJson[3072];
    // strcpy(cleanedJson, str);
    // cleanJSON(cleanedJson);

    // Set the cleaned JSON value
    bool result = setValueString(offsetof(NodeData, nodeIDJson), sizeof(NodeData::nodeIDJson), str);
   b5e10:	4623      	mov	r3, r4
   b5e12:	f44f 6240 	mov.w	r2, #3072	; 0xc00
   b5e16:	2110      	movs	r1, #16
   b5e18:	4640      	mov	r0, r8
   b5e1a:	f000 fa95 	bl	b6348 <_ZN15StorageHelperRK18PersistentDataBase14setValueStringEjjPKc>

    if (result && Particle.connected()) {
   b5e1e:	4607      	mov	r7, r0
   b5e20:	b380      	cbz	r0, b5e84 <_ZN10nodeIDData14set_nodeIDJsonEPKc+0xe0>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b5e22:	f000 fd05 	bl	b6830 <spark_cloud_flag_connected>
   b5e26:	b368      	cbz	r0, b5e84 <_ZN10nodeIDData14set_nodeIDJsonEPKc+0xe0>
        const size_t maxChunkSize = 622; // max report size
        size_t messageLength = strlen(str);
   b5e28:	4620      	mov	r0, r4
   b5e2a:	f003 fa70 	bl	b930e <strlen>
            // Calculate chunk size for the current iteration
            size_t chunkSize = std::min(maxChunkSize, messageLength - offset);

            // Create a buffer for the current chunk
            char chunk[maxChunkSize + 1]; // +1 for null terminator
            snprintf(chunk, sizeof(chunk), "%.*s", static_cast<int>(chunkSize), str + offset);
   b5e2e:	f8df b060 	ldr.w	fp, [pc, #96]	; b5e90 <_ZN10nodeIDData14set_nodeIDJsonEPKc+0xec>
   b5e32:	f8df a060 	ldr.w	sl, [pc, #96]	; b5e94 <_ZN10nodeIDData14set_nodeIDJsonEPKc+0xf0>
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b5e36:	f8df 9064 	ldr.w	r9, [pc, #100]	; b5e9c <_ZN10nodeIDData14set_nodeIDJsonEPKc+0xf8>
        size_t messageLength = strlen(str);
   b5e3a:	4680      	mov	r8, r0
        size_t offset = 0;
   b5e3c:	2500      	movs	r5, #0
        while (offset < messageLength) {
   b5e3e:	4545      	cmp	r5, r8
   b5e40:	d220      	bcs.n	b5e84 <_ZN10nodeIDData14set_nodeIDJsonEPKc+0xe0>
            size_t chunkSize = std::min(maxChunkSize, messageLength - offset);
   b5e42:	eba8 0605 	sub.w	r6, r8, r5
   b5e46:	f240 226d 	movw	r2, #621	; 0x26d
   b5e4a:	f240 236e 	movw	r3, #622	; 0x26e
   b5e4e:	4296      	cmp	r6, r2
   b5e50:	bf88      	it	hi
   b5e52:	461e      	movhi	r6, r3
            snprintf(chunk, sizeof(chunk), "%.*s", static_cast<int>(chunkSize), str + offset);
   b5e54:	1963      	adds	r3, r4, r5
   b5e56:	9300      	str	r3, [sp, #0]
   b5e58:	465a      	mov	r2, fp
   b5e5a:	4633      	mov	r3, r6
   b5e5c:	f240 216f 	movw	r1, #623	; 0x26f
   b5e60:	a804      	add	r0, sp, #16
   b5e62:	f000 fd7d 	bl	b6960 <snprintf>
   b5e66:	f89a 3000 	ldrb.w	r3, [sl]
   b5e6a:	f88d 3000 	strb.w	r3, [sp]
   b5e6e:	aa04      	add	r2, sp, #16
   b5e70:	233c      	movs	r3, #60	; 0x3c
   b5e72:	4649      	mov	r1, r9
   b5e74:	a802      	add	r0, sp, #8
   b5e76:	f000 ff8b 	bl	b6d90 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   b5e7a:	a803      	add	r0, sp, #12
   b5e7c:	f7fe f9f2 	bl	b4264 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>

            // Publish the current chunk
            Particle.publish("Node Database after set:", chunk, PRIVATE);

            // Move to the next chunk
            offset += chunkSize;
   b5e80:	4435      	add	r5, r6
        while (offset < messageLength) {
   b5e82:	e7dc      	b.n	b5e3e <_ZN10nodeIDData14set_nodeIDJsonEPKc+0x9a>
        }
    }

    return result;
}
   b5e84:	4638      	mov	r0, r7
   b5e86:	f50d 7d21 	add.w	sp, sp, #644	; 0x284
   b5e8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b5e8e:	bf00      	nop
   b5e90:	000ba19b 	.word	0x000ba19b
   b5e94:	2003e650 	.word	0x2003e650
   b5e98:	000ba1a0 	.word	0x000ba1a0
   b5e9c:	000ba1ba 	.word	0x000ba1ba

000b5ea0 <_ZN10nodeIDData12resetNodeIDsEv>:
void nodeIDData::resetNodeIDs() {
   b5ea0:	b510      	push	{r4, lr}
    Log.info("Resettig NodeID config to: %s", blank.c_str());
   b5ea2:	4c14      	ldr	r4, [pc, #80]	; (b5ef4 <_ZN10nodeIDData12resetNodeIDsEv+0x54>)
    String blank = "{\"nodes\":[]}";
   b5ea4:	4914      	ldr	r1, [pc, #80]	; (b5ef8 <_ZN10nodeIDData12resetNodeIDsEv+0x58>)
void nodeIDData::resetNodeIDs() {
   b5ea6:	b088      	sub	sp, #32
    String blank = "{\"nodes\":[]}";
   b5ea8:	4668      	mov	r0, sp
   b5eaa:	f002 fcfe 	bl	b88aa <_ZN6StringC1EPK19__FlashStringHelper>
    Log.info("Resettig NodeID config to: %s", blank.c_str());
   b5eae:	9a00      	ldr	r2, [sp, #0]
   b5eb0:	4912      	ldr	r1, [pc, #72]	; (b5efc <_ZN10nodeIDData12resetNodeIDsEv+0x5c>)
   b5eb2:	4620      	mov	r0, r4
   b5eb4:	f7fe f95a 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
    nodeDatabase.set_nodeIDJson(blank);
   b5eb8:	f7ff ff3e 	bl	b5d38 <_ZN10nodeIDData8instanceEv>
   b5ebc:	9900      	ldr	r1, [sp, #0]
   b5ebe:	f7ff ff71 	bl	b5da4 <_ZN10nodeIDData14set_nodeIDJsonEPKc>
    nodeDatabase.flush(true);
   b5ec2:	f7ff ff39 	bl	b5d38 <_ZN10nodeIDData8instanceEv>
   b5ec6:	6803      	ldr	r3, [r0, #0]
   b5ec8:	2101      	movs	r1, #1
   b5eca:	68db      	ldr	r3, [r3, #12]
   b5ecc:	4798      	blx	r3
    Log.info("NodeID data is now %s", nodeDatabase.get_nodeIDJson().c_str());
   b5ece:	f7ff ff33 	bl	b5d38 <_ZN10nodeIDData8instanceEv>
   b5ed2:	4601      	mov	r1, r0
   b5ed4:	a804      	add	r0, sp, #16
   b5ed6:	f7ff ff53 	bl	b5d80 <_ZNK10nodeIDData14get_nodeIDJsonEv>
   b5eda:	9a04      	ldr	r2, [sp, #16]
   b5edc:	4908      	ldr	r1, [pc, #32]	; (b5f00 <_ZN10nodeIDData12resetNodeIDsEv+0x60>)
   b5ede:	4620      	mov	r0, r4
   b5ee0:	f7fe f944 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
   b5ee4:	a804      	add	r0, sp, #16
   b5ee6:	f002 fc95 	bl	b8814 <_ZN6StringD1Ev>
    String blank = "{\"nodes\":[]}";
   b5eea:	4668      	mov	r0, sp
   b5eec:	f002 fc92 	bl	b8814 <_ZN6StringD1Ev>
}
   b5ef0:	b008      	add	sp, #32
   b5ef2:	bd10      	pop	{r4, pc}
   b5ef4:	2003e6b0 	.word	0x2003e6b0
   b5ef8:	000ba1d3 	.word	0x000ba1d3
   b5efc:	000ba1e0 	.word	0x000ba1e0
   b5f00:	000ba1fe 	.word	0x000ba1fe

000b5f04 <_ZN10nodeIDData10initializeEv>:
void nodeIDData::initialize() {
   b5f04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    Log.info("Erasing FRAM region");
   b5f06:	4910      	ldr	r1, [pc, #64]	; (b5f48 <_ZN10nodeIDData10initializeEv+0x44>)
void nodeIDData::initialize() {
   b5f08:	4604      	mov	r4, r0
    Log.info("Erasing FRAM region");
   b5f0a:	4810      	ldr	r0, [pc, #64]	; (b5f4c <_ZN10nodeIDData10initializeEv+0x48>)
   b5f0c:	f7fe f92e 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
   b5f10:	25c8      	movs	r5, #200	; 0xc8
    for (unsigned int i=0; i < sizeof(NodeData); i++) {
   b5f12:	f640 46d8 	movw	r6, #3288	; 0xcd8
        fram.writeData(i+200,(uint8_t *)0xFF,2);
   b5f16:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b5f18:	6803      	ldr	r3, [r0, #0]
   b5f1a:	4629      	mov	r1, r5
   b5f1c:	68df      	ldr	r7, [r3, #12]
   b5f1e:	22ff      	movs	r2, #255	; 0xff
   b5f20:	2302      	movs	r3, #2
    for (unsigned int i=0; i < sizeof(NodeData); i++) {
   b5f22:	3501      	adds	r5, #1
        fram.writeData(i+200,(uint8_t *)0xFF,2);
   b5f24:	47b8      	blx	r7
    for (unsigned int i=0; i < sizeof(NodeData); i++) {
   b5f26:	42b5      	cmp	r5, r6
   b5f28:	d1f5      	bne.n	b5f16 <_ZN10nodeIDData10initializeEv+0x12>
    Log.info("Initializing data");
   b5f2a:	4909      	ldr	r1, [pc, #36]	; (b5f50 <_ZN10nodeIDData10initializeEv+0x4c>)
   b5f2c:	4807      	ldr	r0, [pc, #28]	; (b5f4c <_ZN10nodeIDData10initializeEv+0x48>)
   b5f2e:	f7fe f91d 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
    PersistentDataFRAM::initialize();
   b5f32:	4620      	mov	r0, r4
   b5f34:	f000 faa4 	bl	b6480 <_ZN15StorageHelperRK18PersistentDataBase10initializeEv>
    nodeIDData::resetNodeIDs();
   b5f38:	4620      	mov	r0, r4
   b5f3a:	f7ff ffb1 	bl	b5ea0 <_ZN10nodeIDData12resetNodeIDsEv>
    updateHash();                                       // If you manually update fields here, be sure to update the hash
   b5f3e:	4620      	mov	r0, r4
}
   b5f40:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    updateHash();                                       // If you manually update fields here, be sure to update the hash
   b5f44:	f000 b9f4 	b.w	b6330 <_ZN15StorageHelperRK18PersistentDataBase10updateHashEv>
   b5f48:	000ba214 	.word	0x000ba214
   b5f4c:	2003e6b0 	.word	0x2003e6b0
   b5f50:	000ba228 	.word	0x000ba228

000b5f54 <_GLOBAL__sub_I_fram>:
        val_(val) {
   b5f54:	4b08      	ldr	r3, [pc, #32]	; (b5f78 <_GLOBAL__sub_I_fram+0x24>)
   b5f56:	2201      	movs	r2, #1
    // Null-terminate the withoutDoubleCommas array
    withoutDoubleCommas[j] = '\0';

    // Copy the cleaned JSON back to the original string
    strcpy(jsonString, withoutDoubleCommas);
   b5f58:	b510      	push	{r4, lr}
   b5f5a:	701a      	strb	r2, [r3, #0]
MB85RC64 fram(Wire, 0);
   b5f5c:	f002 fefc 	bl	b8d58 <_Z19__fetch_global_Wirev>
	 *
	 * @param addr The address 0-7 based on the setting of A0, A1 and A2.
	 *
	 * You typically create one of these objects as a global variable.
	 */
	MB85RC64(TwoWire &wire, int addr = 0) : MB85RC(wire, 8192, addr) {};
   b5f60:	4c06      	ldr	r4, [pc, #24]	; (b5f7c <_GLOBAL__sub_I_fram+0x28>)
   b5f62:	4601      	mov	r1, r0
   b5f64:	2300      	movs	r3, #0
   b5f66:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   b5f6a:	4620      	mov	r0, r4
   b5f6c:	f000 f816 	bl	b5f9c <_ZN6MB85RCC1ER7TwoWireji>
   b5f70:	4b03      	ldr	r3, [pc, #12]	; (b5f80 <_GLOBAL__sub_I_fram+0x2c>)
   b5f72:	6023      	str	r3, [r4, #0]
   b5f74:	bd10      	pop	{r4, pc}
   b5f76:	bf00      	nop
   b5f78:	2003e650 	.word	0x2003e650
   b5f7c:	2003e658 	.word	0x2003e658
   b5f80:	000ba244 	.word	0x000ba244

000b5f84 <_ZN6MB85RCD1Ev>:
MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
	wire(wire), memorySize(memorySize), addr(addr) {
}

MB85RC::~MB85RC() {
}
   b5f84:	4770      	bx	lr

000b5f86 <_ZN6MB85RCD0Ev>:
MB85RC::~MB85RC() {
   b5f86:	b510      	push	{r4, lr}
}
   b5f88:	2110      	movs	r1, #16
MB85RC::~MB85RC() {
   b5f8a:	4604      	mov	r4, r0
}
   b5f8c:	f7fe f885 	bl	b409a <_ZdlPvj>
   b5f90:	4620      	mov	r0, r4
   b5f92:	bd10      	pop	{r4, pc}

000b5f94 <_ZN7TwoWire5writeEj>:
  bool lock();
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
   b5f94:	6803      	ldr	r3, [r0, #0]
   b5f96:	b2c9      	uxtb	r1, r1
   b5f98:	689b      	ldr	r3, [r3, #8]
   b5f9a:	4718      	bx	r3

000b5f9c <_ZN6MB85RCC1ER7TwoWireji>:
MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
   b5f9c:	b530      	push	{r4, r5, lr}
	wire(wire), memorySize(memorySize), addr(addr) {
   b5f9e:	4d03      	ldr	r5, [pc, #12]	; (b5fac <_ZN6MB85RCC1ER7TwoWireji+0x10>)
   b5fa0:	e9c0 2302 	strd	r2, r3, [r0, #8]
   b5fa4:	e9c0 5100 	strd	r5, r1, [r0]
}
   b5fa8:	bd30      	pop	{r4, r5, pc}
   b5faa:	bf00      	nop
   b5fac:	000ba28c 	.word	0x000ba28c

000b5fb0 <_ZN6MB85RC5beginEv>:

void MB85RC::begin() {
	wire.begin();
   b5fb0:	6840      	ldr	r0, [r0, #4]
   b5fb2:	f001 b8e1 	b.w	b7178 <_ZN7TwoWire5beginEv>

000b5fb6 <_ZNSt10lock_guardIR7TwoWireED1Ev>:

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   b5fb6:	b510      	push	{r4, lr}
   b5fb8:	4604      	mov	r4, r0
      { _M_device.unlock(); }
   b5fba:	6800      	ldr	r0, [r0, #0]
   b5fbc:	f001 f91f 	bl	b71fe <_ZN7TwoWire6unlockEv>
   b5fc0:	4620      	mov	r0, r4
   b5fc2:	bd10      	pop	{r4, pc}

000b5fc4 <_ZN6MB85RC8readDataEjPhj>:

	return true;
}


bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
   b5fc4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b5fc8:	4604      	mov	r4, r0
	bool result = true;

	WITH_LOCK(wire) {
   b5fca:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b5fcc:	9001      	str	r0, [sp, #4]
bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
   b5fce:	460d      	mov	r5, r1
   b5fd0:	4616      	mov	r6, r2
   b5fd2:	461f      	mov	r7, r3
      { _M_device.lock(); }
   b5fd4:	f001 f90a 	bl	b71ec <_ZN7TwoWire4lockEv>

		while(dataLen > 0) {
   b5fd8:	b1a7      	cbz	r7, b6004 <_ZN6MB85RC8readDataEjPhj+0x40>
			wire.beginTransmission(addr | DEVICE_ADDR);
   b5fda:	68e1      	ldr	r1, [r4, #12]
   b5fdc:	6860      	ldr	r0, [r4, #4]
   b5fde:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   b5fe2:	f001 f8fc 	bl	b71de <_ZN7TwoWire17beginTransmissionEi>
			wire.write(framAddr >> 8);
   b5fe6:	0a29      	lsrs	r1, r5, #8
   b5fe8:	6860      	ldr	r0, [r4, #4]
   b5fea:	f7ff ffd3 	bl	b5f94 <_ZN7TwoWire5writeEj>
			wire.write(framAddr);
   b5fee:	4629      	mov	r1, r5
   b5ff0:	6860      	ldr	r0, [r4, #4]
   b5ff2:	f7ff ffcf 	bl	b5f94 <_ZN7TwoWire5writeEj>
			int stat = wire.endTransmission(false);
   b5ff6:	6860      	ldr	r0, [r4, #4]
   b5ff8:	2100      	movs	r1, #0
   b5ffa:	f001 f8f3 	bl	b71e4 <_ZN7TwoWire15endTransmissionEh>
			if (stat != 0) {
   b5ffe:	b148      	cbz	r0, b6014 <_ZN6MB85RC8readDataEjPhj+0x50>
				//Serial.printlnf("read set address failed %d", stat);
				result = false;
   b6000:	2400      	movs	r4, #0
   b6002:	e000      	b.n	b6006 <_ZN6MB85RC8readDataEjPhj+0x42>
   b6004:	2401      	movs	r4, #1
	WITH_LOCK(wire) {
   b6006:	a801      	add	r0, sp, #4
   b6008:	f7ff ffd5 	bl	b5fb6 <_ZNSt10lock_guardIR7TwoWireED1Ev>
				dataLen--;
			}
		}
	}
	return result;
}
   b600c:	4620      	mov	r0, r4
   b600e:	b003      	add	sp, #12
   b6010:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			if (bytesToRead > 32) {
   b6014:	2f20      	cmp	r7, #32
			wire.requestFrom((uint8_t)(addr | DEVICE_ADDR), bytesToRead, (uint8_t) true);
   b6016:	7b21      	ldrb	r1, [r4, #12]
   b6018:	6860      	ldr	r0, [r4, #4]
   b601a:	46b8      	mov	r8, r7
   b601c:	bf28      	it	cs
   b601e:	f04f 0820 	movcs.w	r8, #32
   b6022:	2301      	movs	r3, #1
   b6024:	4642      	mov	r2, r8
   b6026:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   b602a:	f001 f8c2 	bl	b71b2 <_ZN7TwoWire11requestFromEhjh>
			if (Wire.available() < (int) bytesToRead) {
   b602e:	f002 fe93 	bl	b8d58 <_Z19__fetch_global_Wirev>
   b6032:	6803      	ldr	r3, [r0, #0]
   b6034:	691b      	ldr	r3, [r3, #16]
   b6036:	4798      	blx	r3
   b6038:	4540      	cmp	r0, r8
   b603a:	dbe1      	blt.n	b6000 <_ZN6MB85RC8readDataEjPhj+0x3c>
   b603c:	eb06 0908 	add.w	r9, r6, r8
				*data++ = Wire.read();    // receive a byte as character
   b6040:	f002 fe8a 	bl	b8d58 <_Z19__fetch_global_Wirev>
   b6044:	6803      	ldr	r3, [r0, #0]
   b6046:	695b      	ldr	r3, [r3, #20]
   b6048:	4798      	blx	r3
   b604a:	f806 0b01 	strb.w	r0, [r6], #1
			for(size_t ii = 0; ii < bytesToRead; ii++) {
   b604e:	454e      	cmp	r6, r9
   b6050:	d1f6      	bne.n	b6040 <_ZN6MB85RC8readDataEjPhj+0x7c>
				framAddr++;
   b6052:	4445      	add	r5, r8
				dataLen--;
   b6054:	eba7 0708 	sub.w	r7, r7, r8
   b6058:	e7be      	b.n	b5fd8 <_ZN6MB85RC8readDataEjPhj+0x14>

000b605a <_ZN6MB85RC9writeDataEjPKhj>:


bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
   b605a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b605e:	4604      	mov	r4, r0
	bool result = true;

	WITH_LOCK(wire) {
   b6060:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b6062:	9001      	str	r0, [sp, #4]
bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
   b6064:	460e      	mov	r6, r1
   b6066:	4690      	mov	r8, r2
   b6068:	461d      	mov	r5, r3
      { _M_device.lock(); }
   b606a:	f001 f8bf 	bl	b71ec <_ZN7TwoWire4lockEv>
   b606e:	f04f 0901 	mov.w	r9, #1
	WITH_LOCK(wire) {
   b6072:	f1b9 0f00 	cmp.w	r9, #0
   b6076:	d02a      	beq.n	b60ce <_ZN6MB85RC9writeDataEjPKhj+0x74>
		while(dataLen > 0) {
   b6078:	b34d      	cbz	r5, b60ce <_ZN6MB85RC9writeDataEjPKhj+0x74>
			wire.beginTransmission(addr | DEVICE_ADDR);
   b607a:	68e1      	ldr	r1, [r4, #12]
   b607c:	6860      	ldr	r0, [r4, #4]
   b607e:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   b6082:	f001 f8ac 	bl	b71de <_ZN7TwoWire17beginTransmissionEi>
			wire.write(framAddr >> 8);
   b6086:	0a31      	lsrs	r1, r6, #8
   b6088:	6860      	ldr	r0, [r4, #4]
   b608a:	f7ff ff83 	bl	b5f94 <_ZN7TwoWire5writeEj>
			wire.write(framAddr);
   b608e:	6860      	ldr	r0, [r4, #4]
   b6090:	4631      	mov	r1, r6
   b6092:	f7ff ff7f 	bl	b5f94 <_ZN7TwoWire5writeEj>

			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   b6096:	f1a5 0a1e 	sub.w	sl, r5, #30
			wire.write(framAddr);
   b609a:	4647      	mov	r7, r8
   b609c:	eba6 0b08 	sub.w	fp, r6, r8
				wire.write(*data);
   b60a0:	6860      	ldr	r0, [r4, #4]
   b60a2:	f817 1b01 	ldrb.w	r1, [r7], #1
   b60a6:	6803      	ldr	r3, [r0, #0]
				framAddr++;
				data++;
				dataLen--;
   b60a8:	3d01      	subs	r5, #1
				wire.write(*data);
   b60aa:	689b      	ldr	r3, [r3, #8]
   b60ac:	4798      	blx	r3
			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   b60ae:	4555      	cmp	r5, sl
   b60b0:	eb0b 0607 	add.w	r6, fp, r7
				data++;
   b60b4:	46b8      	mov	r8, r7
			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   b60b6:	d001      	beq.n	b60bc <_ZN6MB85RC9writeDataEjPKhj+0x62>
   b60b8:	2d00      	cmp	r5, #0
   b60ba:	d1f1      	bne.n	b60a0 <_ZN6MB85RC9writeDataEjPKhj+0x46>
			}

			int stat = wire.endTransmission(true);
   b60bc:	6860      	ldr	r0, [r4, #4]
   b60be:	2101      	movs	r1, #1
   b60c0:	f001 f890 	bl	b71e4 <_ZN7TwoWire15endTransmissionEh>
			if (stat != 0) {
   b60c4:	2800      	cmp	r0, #0
   b60c6:	d0d7      	beq.n	b6078 <_ZN6MB85RC9writeDataEjPKhj+0x1e>
				//Serial.printlnf("write failed %d", stat);
				result = false;
   b60c8:	f04f 0900 	mov.w	r9, #0
   b60cc:	e7d1      	b.n	b6072 <_ZN6MB85RC9writeDataEjPKhj+0x18>
	WITH_LOCK(wire) {
   b60ce:	a801      	add	r0, sp, #4
   b60d0:	f7ff ff71 	bl	b5fb6 <_ZNSt10lock_guardIR7TwoWireED1Ev>
				break;
			}
		}
	}
	return result;
}
   b60d4:	4648      	mov	r0, r9
   b60d6:	b003      	add	sp, #12
   b60d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b60dc <_ZN6MB85RC8moveDataEjjj>:


bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   b60dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b60e0:	b08b      	sub	sp, #44	; 0x2c
   b60e2:	460e      	mov	r6, r1
   b60e4:	4615      	mov	r5, r2
   b60e6:	4680      	mov	r8, r0
	bool result = true;

	// Maximum number of bytes we can write is 30
	uint8_t buf[30];

	WITH_LOCK(wire) {
   b60e8:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b60ea:	9001      	str	r0, [sp, #4]
bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   b60ec:	461c      	mov	r4, r3
      { _M_device.lock(); }
   b60ee:	f001 f87d 	bl	b71ec <_ZN7TwoWire4lockEv>
		if (framAddrFrom < framAddrTo) {
   b60f2:	42ae      	cmp	r6, r5
   b60f4:	d229      	bcs.n	b614a <_ZN6MB85RC8moveDataEjjj+0x6e>
			// Moving to a higher address - copy from the end of the from buffer
			framAddrFrom += numBytes;
   b60f6:	4426      	add	r6, r4
			framAddrTo += numBytes;
   b60f8:	4425      	add	r5, r4
			while(numBytes > 0) {
   b60fa:	b18c      	cbz	r4, b6120 <_ZN6MB85RC8moveDataEjjj+0x44>
				size_t count = numBytes;
				if (count > sizeof(buf)) {
   b60fc:	2c1e      	cmp	r4, #30
   b60fe:	4627      	mov	r7, r4
					count = sizeof(buf);
				}
				framAddrFrom -= count;
				framAddrTo -= count;

				result = readData(framAddrFrom, buf, count);
   b6100:	f8d8 3000 	ldr.w	r3, [r8]
   b6104:	bf28      	it	cs
   b6106:	271e      	movcs	r7, #30
				framAddrFrom -= count;
   b6108:	1bf6      	subs	r6, r6, r7
				result = readData(framAddrFrom, buf, count);
   b610a:	f8d3 9008 	ldr.w	r9, [r3, #8]
   b610e:	aa02      	add	r2, sp, #8
   b6110:	463b      	mov	r3, r7
   b6112:	4631      	mov	r1, r6
   b6114:	4640      	mov	r0, r8
				framAddrTo -= count;
   b6116:	1bed      	subs	r5, r5, r7
				result = readData(framAddrFrom, buf, count);
   b6118:	47c8      	blx	r9
				if (!result) {
   b611a:	b948      	cbnz	r0, b6130 <_ZN6MB85RC8moveDataEjjj+0x54>
bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   b611c:	2400      	movs	r4, #0
   b611e:	e000      	b.n	b6122 <_ZN6MB85RC8moveDataEjjj+0x46>
   b6120:	2401      	movs	r4, #1
	WITH_LOCK(wire) {
   b6122:	a801      	add	r0, sp, #4
   b6124:	f7ff ff47 	bl	b5fb6 <_ZNSt10lock_guardIR7TwoWireED1Ev>
				numBytes -= count;
			}
		}
	}
	return result;
}
   b6128:	4620      	mov	r0, r4
   b612a:	b00b      	add	sp, #44	; 0x2c
   b612c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				result = writeData(framAddrTo, buf, count);
   b6130:	f8d8 3000 	ldr.w	r3, [r8]
   b6134:	aa02      	add	r2, sp, #8
   b6136:	f8d3 900c 	ldr.w	r9, [r3, #12]
   b613a:	4629      	mov	r1, r5
   b613c:	463b      	mov	r3, r7
   b613e:	4640      	mov	r0, r8
   b6140:	47c8      	blx	r9
				if (!result) {
   b6142:	2800      	cmp	r0, #0
   b6144:	d0ea      	beq.n	b611c <_ZN6MB85RC8moveDataEjjj+0x40>
				numBytes -= count;
   b6146:	1be4      	subs	r4, r4, r7
			while(numBytes > 0) {
   b6148:	e7d7      	b.n	b60fa <_ZN6MB85RC8moveDataEjjj+0x1e>
		if (framAddrFrom > framAddrTo) {
   b614a:	d9e9      	bls.n	b6120 <_ZN6MB85RC8moveDataEjjj+0x44>
			while(numBytes > 0) {
   b614c:	2c00      	cmp	r4, #0
   b614e:	d0e7      	beq.n	b6120 <_ZN6MB85RC8moveDataEjjj+0x44>
				result = readData(framAddrFrom, buf, count);
   b6150:	f8d8 3000 	ldr.w	r3, [r8]
   b6154:	2c1e      	cmp	r4, #30
   b6156:	4627      	mov	r7, r4
   b6158:	bf28      	it	cs
   b615a:	271e      	movcs	r7, #30
   b615c:	f8d3 9008 	ldr.w	r9, [r3, #8]
   b6160:	aa02      	add	r2, sp, #8
   b6162:	463b      	mov	r3, r7
   b6164:	4631      	mov	r1, r6
   b6166:	4640      	mov	r0, r8
   b6168:	47c8      	blx	r9
				if (!result) {
   b616a:	2800      	cmp	r0, #0
   b616c:	d0d6      	beq.n	b611c <_ZN6MB85RC8moveDataEjjj+0x40>
				result = writeData(framAddrTo, buf, count);
   b616e:	f8d8 3000 	ldr.w	r3, [r8]
   b6172:	aa02      	add	r2, sp, #8
   b6174:	f8d3 900c 	ldr.w	r9, [r3, #12]
   b6178:	4629      	mov	r1, r5
   b617a:	463b      	mov	r3, r7
   b617c:	4640      	mov	r0, r8
   b617e:	47c8      	blx	r9
				if (!result) {
   b6180:	2800      	cmp	r0, #0
   b6182:	d0cb      	beq.n	b611c <_ZN6MB85RC8moveDataEjjj+0x40>
				framAddrFrom += count;
   b6184:	443e      	add	r6, r7
				framAddrTo += count;
   b6186:	443d      	add	r5, r7
				numBytes -= count;
   b6188:	1be4      	subs	r4, r4, r7
			while(numBytes > 0) {
   b618a:	e7df      	b.n	b614c <_ZN6MB85RC8moveDataEjjj+0x70>

000b618c <_ZN15StorageHelperRK18PersistentDataBase5setupEv>:
// PersistentDataBase
//

void StorageHelperRK::PersistentDataBase::setup() {
    // Load data at boot
    load();
   b618c:	6803      	ldr	r3, [r0, #0]
   b618e:	685b      	ldr	r3, [r3, #4]
   b6190:	4718      	bx	r3

000b6192 <_ZN15StorageHelperRK18PersistentDataBase5flushEb>:

    return true;
}


void StorageHelperRK::PersistentDataBase::flush(bool force) {
   b6192:	b510      	push	{r4, lr}
    if (lastUpdate) {
   b6194:	6983      	ldr	r3, [r0, #24]
void StorageHelperRK::PersistentDataBase::flush(bool force) {
   b6196:	4604      	mov	r4, r0
    if (lastUpdate) {
   b6198:	b133      	cbz	r3, b61a8 <_ZN15StorageHelperRK18PersistentDataBase5flushEb+0x16>
        if (force || (millis() - lastUpdate >= saveDelayMs)) {
   b619a:	b131      	cbz	r1, b61aa <_ZN15StorageHelperRK18PersistentDataBase5flushEb+0x18>
            save();
   b619c:	6823      	ldr	r3, [r4, #0]
   b619e:	4620      	mov	r0, r4
   b61a0:	689b      	ldr	r3, [r3, #8]
   b61a2:	4798      	blx	r3
            lastUpdate = 0;
   b61a4:	2300      	movs	r3, #0
   b61a6:	61a3      	str	r3, [r4, #24]
        }
    }
}
   b61a8:	bd10      	pop	{r4, pc}

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b61aa:	f000 f9d5 	bl	b6558 <HAL_Timer_Get_Milli_Seconds>
        if (force || (millis() - lastUpdate >= saveDelayMs)) {
   b61ae:	69a3      	ldr	r3, [r4, #24]
   b61b0:	1ac0      	subs	r0, r0, r3
   b61b2:	69e3      	ldr	r3, [r4, #28]
   b61b4:	4298      	cmp	r0, r3
   b61b6:	d2f1      	bcs.n	b619c <_ZN15StorageHelperRK18PersistentDataBase5flushEb+0xa>
   b61b8:	e7f6      	b.n	b61a8 <_ZN15StorageHelperRK18PersistentDataBase5flushEb+0x16>

000b61ba <_ZN15StorageHelperRK18PersistentDataBase11saveOrDeferEv>:

void StorageHelperRK::PersistentDataBase::saveOrDefer() {
   b61ba:	b510      	push	{r4, lr}
    if (saveDelayMs) {
   b61bc:	69c3      	ldr	r3, [r0, #28]
void StorageHelperRK::PersistentDataBase::saveOrDefer() {
   b61be:	4604      	mov	r4, r0
    if (saveDelayMs) {
   b61c0:	b11b      	cbz	r3, b61ca <_ZN15StorageHelperRK18PersistentDataBase11saveOrDeferEv+0x10>
   b61c2:	f000 f9c9 	bl	b6558 <HAL_Timer_Get_Milli_Seconds>
        lastUpdate = millis();
   b61c6:	61a0      	str	r0, [r4, #24]
    }
    else {
        save();
    }
}
   b61c8:	bd10      	pop	{r4, pc}
        save();
   b61ca:	6803      	ldr	r3, [r0, #0]
}
   b61cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        save();
   b61d0:	689b      	ldr	r3, [r3, #8]
   b61d2:	4718      	bx	r3

000b61d4 <_ZNK15StorageHelperRK20CustomRecursiveMutex6unlockEv.isra.0>:
            os_mutex_recursive_unlock(handle_); 
   b61d4:	f000 b9a8 	b.w	b6528 <os_mutex_recursive_unlock>

000b61d8 <_ZNK5spark6Logger5traceEPKcz>:
inline void spark::Logger::trace(const char *fmt, ...) const {
   b61d8:	b40e      	push	{r1, r2, r3}
   b61da:	b500      	push	{lr}
   b61dc:	b08c      	sub	sp, #48	; 0x30
   b61de:	aa0d      	add	r2, sp, #52	; 0x34
    attr.flags = 0;
   b61e0:	f04f 0c20 	mov.w	ip, #32
inline void spark::Logger::trace(const char *fmt, ...) const {
   b61e4:	f852 1b04 	ldr.w	r1, [r2], #4
    va_start(args, fmt);
   b61e8:	9203      	str	r2, [sp, #12]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b61ea:	e9cd 1200 	strd	r1, r2, [sp]
    attr.flags = 0;
   b61ee:	2300      	movs	r3, #0
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b61f0:	6801      	ldr	r1, [r0, #0]
   b61f2:	aa04      	add	r2, sp, #16
   b61f4:	2001      	movs	r0, #1
    attr.flags = 0;
   b61f6:	e9cd c304 	strd	ip, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b61fa:	f000 fabd 	bl	b6778 <log_message_v>
}
   b61fe:	b00c      	add	sp, #48	; 0x30
   b6200:	f85d eb04 	ldr.w	lr, [sp], #4
   b6204:	b003      	add	sp, #12
   b6206:	4770      	bx	lr

000b6208 <_ZNK5spark6Logger4dumpEPKvj>:
inline void spark::Logger::dump(const void *data, size_t size) const {
   b6208:	b507      	push	{r0, r1, r2, lr}
   b620a:	4613      	mov	r3, r2
    if (data) {
   b620c:	b139      	cbz	r1, b621e <_ZNK5spark6Logger4dumpEPKvj+0x16>
        log_dump(level, name_, data, size, 0, nullptr);
   b620e:	2200      	movs	r2, #0
   b6210:	e9cd 2200 	strd	r2, r2, [sp]
   b6214:	460a      	mov	r2, r1
   b6216:	6801      	ldr	r1, [r0, #0]
   b6218:	201e      	movs	r0, #30
   b621a:	f000 fabd 	bl	b6798 <log_dump>
}
   b621e:	b003      	add	sp, #12
   b6220:	f85d fb04 	ldr.w	pc, [sp], #4

000b6224 <_ZN15StorageHelperRK18PersistentDataBase4loadEv>:
bool StorageHelperRK::PersistentDataBase::load() {
   b6224:	b510      	push	{r4, lr}
   b6226:	4604      	mov	r4, r0
   b6228:	3004      	adds	r0, #4
   b622a:	f7ff fd07 	bl	b5c3c <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
        if (!validate(savedDataSize)) {
   b622e:	6823      	ldr	r3, [r4, #0]
   b6230:	68e1      	ldr	r1, [r4, #12]
   b6232:	695b      	ldr	r3, [r3, #20]
   b6234:	4620      	mov	r0, r4
   b6236:	4798      	blx	r3
   b6238:	b918      	cbnz	r0, b6242 <_ZN15StorageHelperRK18PersistentDataBase4loadEv+0x1e>
            initialize();
   b623a:	6823      	ldr	r3, [r4, #0]
   b623c:	4620      	mov	r0, r4
   b623e:	699b      	ldr	r3, [r3, #24]
   b6240:	4798      	blx	r3
      { _M_device.unlock(); }
   b6242:	6860      	ldr	r0, [r4, #4]
   b6244:	f7ff ffc6 	bl	b61d4 <_ZNK15StorageHelperRK20CustomRecursiveMutex6unlockEv.isra.0>
}
   b6248:	2001      	movs	r0, #1
   b624a:	bd10      	pop	{r4, pc}

000b624c <_ZNK15StorageHelperRK18PersistentDataBase14getValueStringEjjR6String>:



bool StorageHelperRK::PersistentDataBase::getValueString(size_t offset, size_t size, String &value) const {
   b624c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b624e:	4605      	mov	r5, r0
      { _M_device.lock(); }
   b6250:	3004      	adds	r0, #4
   b6252:	4614      	mov	r4, r2
   b6254:	460e      	mov	r6, r1
   b6256:	461f      	mov	r7, r3
   b6258:	f7ff fcf0 	bl	b5c3c <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
    bool result = false;

    WITH_LOCK(*this) {
        if (offset <= (savedDataSize - (size - 1))) {
   b625c:	68ea      	ldr	r2, [r5, #12]
   b625e:	f1c4 0401 	rsb	r4, r4, #1
   b6262:	4414      	add	r4, r2
   b6264:	42b4      	cmp	r4, r6
   b6266:	d30a      	bcc.n	b627e <_ZNK15StorageHelperRK18PersistentDataBase14getValueStringEjjR6String+0x32>
            const char *p = (const char *)savedDataHeader;
   b6268:	68a9      	ldr	r1, [r5, #8]
            p += offset;
            value = p; // copies string
   b626a:	4638      	mov	r0, r7
   b626c:	4431      	add	r1, r6
   b626e:	f002 fb73 	bl	b8958 <_ZN6StringaSEPKc>
            result = true;
   b6272:	2401      	movs	r4, #1
      { _M_device.unlock(); }
   b6274:	6868      	ldr	r0, [r5, #4]
   b6276:	f7ff ffad 	bl	b61d4 <_ZNK15StorageHelperRK20CustomRecursiveMutex6unlockEv.isra.0>
        }
    }
    return result;
}
   b627a:	4620      	mov	r0, r4
   b627c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bool result = false;
   b627e:	2400      	movs	r4, #0
   b6280:	e7f8      	b.n	b6274 <_ZNK15StorageHelperRK18PersistentDataBase14getValueStringEjjR6String+0x28>
	...

000b6284 <_ZN15StorageHelperRK10murmur3_32EPKhjm>:
    }
    PersistentDataBase::save();
}


uint32_t StorageHelperRK::murmur3_32(const uint8_t* key, size_t len, uint32_t seed) {
   b6284:	b5f0      	push	{r4, r5, r6, r7, lr}
   b6286:	f021 0403 	bic.w	r4, r1, #3
     * 
     * @param k 
     * @return uint32_t 
     */
    static inline uint32_t murmur_32_scramble(uint32_t k) {
        k *= 0xcc9e2d51;
   b628a:	4f18      	ldr	r7, [pc, #96]	; (b62ec <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x68>)
        k = (k << 15) | (k >> 17);
        k *= 0x1b873593;
   b628c:	4e18      	ldr	r6, [pc, #96]	; (b62f0 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x6c>)
        // A swap here has no effects on hash properties though.
        memcpy(&k, key, sizeof(uint32_t));
        key += sizeof(uint32_t);
        h ^= murmur_32_scramble(k);
        h = (h << 13) | (h >> 19);
        h = h * 5 + 0xe6546b64;
   b628e:	4d19      	ldr	r5, [pc, #100]	; (b62f4 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x70>)
   b6290:	4404      	add	r4, r0
    for (size_t i = len >> 2; i; i--) {
   b6292:	42a0      	cmp	r0, r4
   b6294:	d00c      	beq.n	b62b0 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x2c>
        memcpy(&k, key, sizeof(uint32_t));
   b6296:	f850 3b04 	ldr.w	r3, [r0], #4
        k *= 0xcc9e2d51;
   b629a:	437b      	muls	r3, r7
        k = (k << 15) | (k >> 17);
   b629c:	ea4f 4373 	mov.w	r3, r3, ror #17
        k *= 0x1b873593;
   b62a0:	4373      	muls	r3, r6
        h ^= murmur_32_scramble(k);
   b62a2:	405a      	eors	r2, r3
        h = (h << 13) | (h >> 19);
   b62a4:	ea4f 42f2 	mov.w	r2, r2, ror #19
        h = h * 5 + 0xe6546b64;
   b62a8:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   b62ac:	442a      	add	r2, r5
    for (size_t i = len >> 2; i; i--) {
   b62ae:	e7f0      	b.n	b6292 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0xe>
    }
    /* Read the rest. */
    k = 0;
    for (size_t i = len & 3; i; i--) {
   b62b0:	f001 0403 	and.w	r4, r1, #3
   b62b4:	4404      	add	r4, r0
    k = 0;
   b62b6:	2300      	movs	r3, #0
    for (size_t i = len & 3; i; i--) {
   b62b8:	42a0      	cmp	r0, r4
   b62ba:	d004      	beq.n	b62c6 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x42>
        k <<= 8;
        k |= key[i - 1];
   b62bc:	f814 5d01 	ldrb.w	r5, [r4, #-1]!
   b62c0:	ea45 2303 	orr.w	r3, r5, r3, lsl #8
    for (size_t i = len & 3; i; i--) {
   b62c4:	e7f8      	b.n	b62b8 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x34>
        k *= 0xcc9e2d51;
   b62c6:	4809      	ldr	r0, [pc, #36]	; (b62ec <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x68>)
   b62c8:	4343      	muls	r3, r0
        k *= 0x1b873593;
   b62ca:	4809      	ldr	r0, [pc, #36]	; (b62f0 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x6c>)
        k = (k << 15) | (k >> 17);
   b62cc:	ea4f 4373 	mov.w	r3, r3, ror #17
        return k;
   b62d0:	404a      	eors	r2, r1
        k *= 0x1b873593;
   b62d2:	4358      	muls	r0, r3
    // A swap is *not* necessary here because the preceding loop already
    // places the low bytes in the low places according to whatever endianness
    // we use. Swaps only apply when the memory is copied in a chunk.
    h ^= murmur_32_scramble(k);
    /* Finalize. */
	h ^= len;
   b62d4:	4050      	eors	r0, r2
	h ^= h >> 16;
	h *= 0x85ebca6b;
   b62d6:	4b08      	ldr	r3, [pc, #32]	; (b62f8 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x74>)
	h ^= h >> 16;
   b62d8:	ea80 4010 	eor.w	r0, r0, r0, lsr #16
	h *= 0x85ebca6b;
   b62dc:	4358      	muls	r0, r3
	h ^= h >> 13;
	h *= 0xc2b2ae35;
   b62de:	4b07      	ldr	r3, [pc, #28]	; (b62fc <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x78>)
	h ^= h >> 13;
   b62e0:	ea80 3050 	eor.w	r0, r0, r0, lsr #13
	h *= 0xc2b2ae35;
   b62e4:	4358      	muls	r0, r3
	h ^= h >> 16;
	return h;
}
   b62e6:	ea80 4010 	eor.w	r0, r0, r0, lsr #16
   b62ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b62ec:	cc9e2d51 	.word	0xcc9e2d51
   b62f0:	1b873593 	.word	0x1b873593
   b62f4:	e6546b64 	.word	0xe6546b64
   b62f8:	85ebca6b 	.word	0x85ebca6b
   b62fc:	c2b2ae35 	.word	0xc2b2ae35

000b6300 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>:
uint32_t StorageHelperRK::PersistentDataBase::getHash() const {
   b6300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6302:	4604      	mov	r4, r0
      { _M_device.lock(); }
   b6304:	3004      	adds	r0, #4
   b6306:	f7ff fc99 	bl	b5c3c <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
        uint32_t savedHash = savedDataHeader->hash;
   b630a:	68a3      	ldr	r3, [r4, #8]
        savedDataHeader->hash = 0;
   b630c:	2200      	movs	r2, #0
        uint32_t savedHash = savedDataHeader->hash;
   b630e:	689f      	ldr	r7, [r3, #8]
        savedDataHeader->hash = 0;
   b6310:	609a      	str	r2, [r3, #8]
        hash = StorageHelperRK::murmur3_32((const uint8_t *)savedDataHeader, savedDataHeader->size, HASH_SEED);
   b6312:	68a6      	ldr	r6, [r4, #8]
   b6314:	4a05      	ldr	r2, [pc, #20]	; (b632c <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv+0x2c>)
   b6316:	88f1      	ldrh	r1, [r6, #6]
   b6318:	4630      	mov	r0, r6
   b631a:	f7ff ffb3 	bl	b6284 <_ZN15StorageHelperRK10murmur3_32EPKhjm>
        savedDataHeader->hash = savedHash;
   b631e:	60b7      	str	r7, [r6, #8]
        hash = StorageHelperRK::murmur3_32((const uint8_t *)savedDataHeader, savedDataHeader->size, HASH_SEED);
   b6320:	4605      	mov	r5, r0
      { _M_device.unlock(); }
   b6322:	6860      	ldr	r0, [r4, #4]
   b6324:	f7ff ff56 	bl	b61d4 <_ZNK15StorageHelperRK20CustomRecursiveMutex6unlockEv.isra.0>
}
   b6328:	4628      	mov	r0, r5
   b632a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b632c:	851c2a3f 	.word	0x851c2a3f

000b6330 <_ZN15StorageHelperRK18PersistentDataBase10updateHashEv>:
void StorageHelperRK::PersistentDataBase::updateHash() {
   b6330:	b570      	push	{r4, r5, r6, lr}
   b6332:	4604      	mov	r4, r0
    savedDataHeader->hash = getHash();
   b6334:	6885      	ldr	r5, [r0, #8]
   b6336:	f7ff ffe3 	bl	b6300 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
   b633a:	60a8      	str	r0, [r5, #8]
    saveOrDefer();
   b633c:	6823      	ldr	r3, [r4, #0]
   b633e:	4620      	mov	r0, r4
   b6340:	691b      	ldr	r3, [r3, #16]
}
   b6342:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    saveOrDefer();
   b6346:	4718      	bx	r3

000b6348 <_ZN15StorageHelperRK18PersistentDataBase14setValueStringEjjPKc>:
bool StorageHelperRK::PersistentDataBase::setValueString(size_t offset, size_t size, const char *value) {
   b6348:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b634c:	4604      	mov	r4, r0
      { _M_device.lock(); }
   b634e:	3004      	adds	r0, #4
   b6350:	4690      	mov	r8, r2
   b6352:	460d      	mov	r5, r1
   b6354:	461f      	mov	r7, r3
   b6356:	f7ff fc71 	bl	b5c3c <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
        if (offset <= (savedDataSize - (size - 1)) && strlen(value) < size) {
   b635a:	68e2      	ldr	r2, [r4, #12]
   b635c:	f1c8 0301 	rsb	r3, r8, #1
   b6360:	4413      	add	r3, r2
   b6362:	42ab      	cmp	r3, r5
   b6364:	d319      	bcc.n	b639a <_ZN15StorageHelperRK18PersistentDataBase14setValueStringEjjPKc+0x52>
   b6366:	4638      	mov	r0, r7
   b6368:	f002 ffd1 	bl	b930e <strlen>
   b636c:	4540      	cmp	r0, r8
   b636e:	d214      	bcs.n	b639a <_ZN15StorageHelperRK18PersistentDataBase14setValueStringEjjPKc+0x52>
            char *p = (char *)savedDataHeader;
   b6370:	68a6      	ldr	r6, [r4, #8]
            p += offset;
   b6372:	4435      	add	r5, r6
            if (strcmp(value, p) != 0) {
   b6374:	4629      	mov	r1, r5
   b6376:	4638      	mov	r0, r7
   b6378:	f002 ff99 	bl	b92ae <strcmp>
   b637c:	b158      	cbz	r0, b6396 <_ZN15StorageHelperRK18PersistentDataBase14setValueStringEjjPKc+0x4e>
                memset(p, 0, size);
   b637e:	4642      	mov	r2, r8
   b6380:	2100      	movs	r1, #0
   b6382:	4628      	mov	r0, r5
   b6384:	f002 ff46 	bl	b9214 <memset>
                strcpy(p, value);
   b6388:	4639      	mov	r1, r7
   b638a:	4628      	mov	r0, r5
   b638c:	f002 ff99 	bl	b92c2 <strcpy>
                updateHash();
   b6390:	4620      	mov	r0, r4
   b6392:	f7ff ffcd 	bl	b6330 <_ZN15StorageHelperRK18PersistentDataBase10updateHashEv>
            result = true;
   b6396:	2501      	movs	r5, #1
   b6398:	e000      	b.n	b639c <_ZN15StorageHelperRK18PersistentDataBase14setValueStringEjjPKc+0x54>
    bool result = false;
   b639a:	2500      	movs	r5, #0
      { _M_device.unlock(); }
   b639c:	6860      	ldr	r0, [r4, #4]
   b639e:	f7ff ff19 	bl	b61d4 <_ZNK15StorageHelperRK20CustomRecursiveMutex6unlockEv.isra.0>
}
   b63a2:	4628      	mov	r0, r5
   b63a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b63a8 <_ZN15StorageHelperRK18PersistentDataBase8validateEj>:
bool StorageHelperRK::PersistentDataBase::validate(size_t dataSize) {
   b63a8:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if (logData && dataSize < 4096) {
   b63aa:	f890 3020 	ldrb.w	r3, [r0, #32]
bool StorageHelperRK::PersistentDataBase::validate(size_t dataSize) {
   b63ae:	4604      	mov	r4, r0
   b63b0:	460d      	mov	r5, r1
    if (logData && dataSize < 4096) {
   b63b2:	b1ab      	cbz	r3, b63e0 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x38>
   b63b4:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
   b63b8:	d217      	bcs.n	b63ea <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x42>
        Log.info("validating data size=%d", (int)dataSize);
   b63ba:	4e2c      	ldr	r6, [pc, #176]	; (b646c <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0xc4>)
   b63bc:	460a      	mov	r2, r1
   b63be:	4630      	mov	r0, r6
   b63c0:	492b      	ldr	r1, [pc, #172]	; (b6470 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0xc8>)
   b63c2:	f7fd fed3 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
        Log.dump((const uint8_t *)savedDataHeader, dataSize);
   b63c6:	68a1      	ldr	r1, [r4, #8]
   b63c8:	462a      	mov	r2, r5
   b63ca:	4630      	mov	r0, r6
   b63cc:	f7ff ff1c 	bl	b6208 <_ZNK5spark6Logger4dumpEPKvj>
        log_write(level, name_, data, size, nullptr);
   b63d0:	2300      	movs	r3, #0
   b63d2:	9300      	str	r3, [sp, #0]
   b63d4:	4a27      	ldr	r2, [pc, #156]	; (b6474 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0xcc>)
   b63d6:	6831      	ldr	r1, [r6, #0]
   b63d8:	2301      	movs	r3, #1
   b63da:	201e      	movs	r0, #30
   b63dc:	f000 f9d4 	bl	b6788 <log_write>
    if (dataSize >= 12 && 
   b63e0:	2d0b      	cmp	r5, #11
   b63e2:	d802      	bhi.n	b63ea <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x42>
    if (!isValid && dataSize != 0 && savedDataHeader->magic != 0) {
   b63e4:	bb55      	cbnz	r5, b643c <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x94>
   b63e6:	2000      	movs	r0, #0
   b63e8:	e026      	b.n	b6438 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x90>
        savedDataHeader->magic == savedDataMagic && 
   b63ea:	68a3      	ldr	r3, [r4, #8]
    if (dataSize >= 12 && 
   b63ec:	6922      	ldr	r2, [r4, #16]
   b63ee:	6819      	ldr	r1, [r3, #0]
   b63f0:	4291      	cmp	r1, r2
   b63f2:	d123      	bne.n	b643c <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x94>
        savedDataHeader->magic == savedDataMagic && 
   b63f4:	8899      	ldrh	r1, [r3, #4]
   b63f6:	8aa2      	ldrh	r2, [r4, #20]
   b63f8:	4291      	cmp	r1, r2
   b63fa:	d11f      	bne.n	b643c <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x94>
        savedDataHeader->version == savedDataVersion &&
   b63fc:	88da      	ldrh	r2, [r3, #6]
   b63fe:	b2ab      	uxth	r3, r5
   b6400:	429a      	cmp	r2, r3
   b6402:	d81b      	bhi.n	b643c <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x94>
        hash = getHash();
   b6404:	4620      	mov	r0, r4
   b6406:	f7ff ff7b 	bl	b6300 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
        if (savedDataHeader->hash == hash) {                
   b640a:	68a3      	ldr	r3, [r4, #8]
   b640c:	689a      	ldr	r2, [r3, #8]
   b640e:	4282      	cmp	r2, r0
        hash = getHash();
   b6410:	4606      	mov	r6, r0
        if (savedDataHeader->hash == hash) {                
   b6412:	d114      	bne.n	b643e <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x96>
            if ((size_t)dataSize < savedDataSize) {
   b6414:	68e2      	ldr	r2, [r4, #12]
   b6416:	42aa      	cmp	r2, r5
   b6418:	d905      	bls.n	b6426 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x7e>
                    p[ii] = 0;
   b641a:	2100      	movs	r1, #0
   b641c:	5559      	strb	r1, [r3, r5]
                for(size_t ii = (size_t)dataSize; ii < savedDataSize; ii++) {
   b641e:	68e2      	ldr	r2, [r4, #12]
   b6420:	3501      	adds	r5, #1
   b6422:	42aa      	cmp	r2, r5
   b6424:	d8fa      	bhi.n	b641c <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x74>
            savedDataHeader->size = (uint16_t) savedDataSize;
   b6426:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
            savedDataHeader->hash = getHash();
   b642a:	4620      	mov	r0, r4
            savedDataHeader->size = (uint16_t) savedDataSize;
   b642c:	80da      	strh	r2, [r3, #6]
            savedDataHeader->hash = getHash();
   b642e:	68a5      	ldr	r5, [r4, #8]
   b6430:	f7ff ff66 	bl	b6300 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
   b6434:	60a8      	str	r0, [r5, #8]
            isValid = true;
   b6436:	2001      	movs	r0, #1
}
   b6438:	b002      	add	sp, #8
   b643a:	bd70      	pop	{r4, r5, r6, pc}
    uint32_t hash = 0;
   b643c:	2600      	movs	r6, #0
    if (!isValid && dataSize != 0 && savedDataHeader->magic != 0) {
   b643e:	68a1      	ldr	r1, [r4, #8]
   b6440:	680a      	ldr	r2, [r1, #0]
   b6442:	2a00      	cmp	r2, #0
   b6444:	d0cf      	beq.n	b63e6 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x3e>
        Log.trace("got: magic=%08x version=%04x size=%04x hash=%08x", (int)savedDataHeader->magic, (int)savedDataHeader->version, (int)savedDataHeader->size, (int)savedDataHeader->hash);
   b6446:	6888      	ldr	r0, [r1, #8]
   b6448:	888b      	ldrh	r3, [r1, #4]
   b644a:	9001      	str	r0, [sp, #4]
   b644c:	88c9      	ldrh	r1, [r1, #6]
   b644e:	9100      	str	r1, [sp, #0]
   b6450:	4806      	ldr	r0, [pc, #24]	; (b646c <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0xc4>)
   b6452:	4909      	ldr	r1, [pc, #36]	; (b6478 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0xd0>)
   b6454:	f7ff fec0 	bl	b61d8 <_ZNK5spark6Logger5traceEPKcz>
        Log.trace("exp: magic=%08x version=%04x size=%04x hash=%08x", (int)savedDataMagic, (int)savedDataVersion, (int)dataSize, (int)hash);
   b6458:	e9cd 5600 	strd	r5, r6, [sp]
   b645c:	8aa3      	ldrh	r3, [r4, #20]
   b645e:	6922      	ldr	r2, [r4, #16]
   b6460:	4906      	ldr	r1, [pc, #24]	; (b647c <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0xd4>)
   b6462:	4802      	ldr	r0, [pc, #8]	; (b646c <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0xc4>)
   b6464:	f7ff feb8 	bl	b61d8 <_ZNK5spark6Logger5traceEPKcz>
   b6468:	e7bd      	b.n	b63e6 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x3e>
   b646a:	bf00      	nop
   b646c:	2003e6b0 	.word	0x2003e6b0
   b6470:	000ba2a0 	.word	0x000ba2a0
   b6474:	000ba486 	.word	0x000ba486
   b6478:	000ba2b8 	.word	0x000ba2b8
   b647c:	000ba2e9 	.word	0x000ba2e9

000b6480 <_ZN15StorageHelperRK18PersistentDataBase10initializeEv>:
void StorageHelperRK::PersistentDataBase::initialize() {
   b6480:	b538      	push	{r3, r4, r5, lr}
   b6482:	4604      	mov	r4, r0
    memset(savedDataHeader, 0, savedDataSize);
   b6484:	68c2      	ldr	r2, [r0, #12]
   b6486:	6880      	ldr	r0, [r0, #8]
   b6488:	2100      	movs	r1, #0
   b648a:	f002 fec3 	bl	b9214 <memset>
    savedDataHeader->magic = savedDataMagic;
   b648e:	68a3      	ldr	r3, [r4, #8]
   b6490:	6922      	ldr	r2, [r4, #16]
   b6492:	601a      	str	r2, [r3, #0]
    savedDataHeader->version = savedDataVersion;
   b6494:	68a3      	ldr	r3, [r4, #8]
   b6496:	8aa2      	ldrh	r2, [r4, #20]
   b6498:	809a      	strh	r2, [r3, #4]
    savedDataHeader->size = (uint16_t) savedDataSize;
   b649a:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    savedDataHeader->hash = getHash();
   b649e:	4620      	mov	r0, r4
    savedDataHeader->size = (uint16_t) savedDataSize;
   b64a0:	80da      	strh	r2, [r3, #6]
    savedDataHeader->hash = getHash();
   b64a2:	68a5      	ldr	r5, [r4, #8]
   b64a4:	f7ff ff2c 	bl	b6300 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
   b64a8:	60a8      	str	r0, [r5, #8]
}
   b64aa:	bd38      	pop	{r3, r4, r5, pc}

000b64ac <_ZN15StorageHelperRK18PersistentDataBase4saveEv>:
void StorageHelperRK::PersistentDataBase::save() {
   b64ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b64ae:	4604      	mov	r4, r0
    savedDataHeader->hash = getHash();
   b64b0:	6885      	ldr	r5, [r0, #8]
   b64b2:	f7ff ff25 	bl	b6300 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
   b64b6:	60a8      	str	r0, [r5, #8]
    if (logData) {
   b64b8:	f894 3020 	ldrb.w	r3, [r4, #32]
   b64bc:	b19b      	cbz	r3, b64e6 <_ZN15StorageHelperRK18PersistentDataBase4saveEv+0x3a>
        Log.info("saving data size=%d", (int)savedDataHeader->size);
   b64be:	68a3      	ldr	r3, [r4, #8]
   b64c0:	4d0a      	ldr	r5, [pc, #40]	; (b64ec <_ZN15StorageHelperRK18PersistentDataBase4saveEv+0x40>)
   b64c2:	88da      	ldrh	r2, [r3, #6]
   b64c4:	490a      	ldr	r1, [pc, #40]	; (b64f0 <_ZN15StorageHelperRK18PersistentDataBase4saveEv+0x44>)
   b64c6:	4628      	mov	r0, r5
   b64c8:	f7fd fe50 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
        Log.dump((const uint8_t *)savedDataHeader, savedDataHeader->size);
   b64cc:	68a1      	ldr	r1, [r4, #8]
   b64ce:	4628      	mov	r0, r5
   b64d0:	88ca      	ldrh	r2, [r1, #6]
   b64d2:	f7ff fe99 	bl	b6208 <_ZNK5spark6Logger4dumpEPKvj>
   b64d6:	2300      	movs	r3, #0
   b64d8:	9300      	str	r3, [sp, #0]
   b64da:	4a06      	ldr	r2, [pc, #24]	; (b64f4 <_ZN15StorageHelperRK18PersistentDataBase4saveEv+0x48>)
   b64dc:	6829      	ldr	r1, [r5, #0]
   b64de:	2301      	movs	r3, #1
   b64e0:	201e      	movs	r0, #30
   b64e2:	f000 f951 	bl	b6788 <log_write>
}
   b64e6:	b003      	add	sp, #12
   b64e8:	bd30      	pop	{r4, r5, pc}
   b64ea:	bf00      	nop
   b64ec:	2003e6b0 	.word	0x2003e6b0
   b64f0:	000ba31a 	.word	0x000ba31a
   b64f4:	000ba486 	.word	0x000ba486

000b64f8 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b64f8:	b508      	push	{r3, lr}
   b64fa:	4b02      	ldr	r3, [pc, #8]	; (b6504 <os_mutex_recursive_create+0xc>)
   b64fc:	681b      	ldr	r3, [r3, #0]
   b64fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b6500:	9301      	str	r3, [sp, #4]
   b6502:	bd08      	pop	{r3, pc}
   b6504:	00030248 	.word	0x00030248

000b6508 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   b6508:	b508      	push	{r3, lr}
   b650a:	4b02      	ldr	r3, [pc, #8]	; (b6514 <os_mutex_recursive_destroy+0xc>)
   b650c:	681b      	ldr	r3, [r3, #0]
   b650e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   b6510:	9301      	str	r3, [sp, #4]
   b6512:	bd08      	pop	{r3, pc}
   b6514:	00030248 	.word	0x00030248

000b6518 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   b6518:	b508      	push	{r3, lr}
   b651a:	4b02      	ldr	r3, [pc, #8]	; (b6524 <os_mutex_recursive_lock+0xc>)
   b651c:	681b      	ldr	r3, [r3, #0]
   b651e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b6520:	9301      	str	r3, [sp, #4]
   b6522:	bd08      	pop	{r3, pc}
   b6524:	00030248 	.word	0x00030248

000b6528 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   b6528:	b508      	push	{r3, lr}
   b652a:	4b02      	ldr	r3, [pc, #8]	; (b6534 <os_mutex_recursive_unlock+0xc>)
   b652c:	681b      	ldr	r3, [r3, #0]
   b652e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b6530:	9301      	str	r3, [sp, #4]
   b6532:	bd08      	pop	{r3, pc}
   b6534:	00030248 	.word	0x00030248

000b6538 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b6538:	b508      	push	{r3, lr}
   b653a:	4b02      	ldr	r3, [pc, #8]	; (b6544 <HAL_RNG_GetRandomNumber+0xc>)
   b653c:	681b      	ldr	r3, [r3, #0]
   b653e:	685b      	ldr	r3, [r3, #4]
   b6540:	9301      	str	r3, [sp, #4]
   b6542:	bd08      	pop	{r3, pc}
   b6544:	00030218 	.word	0x00030218

000b6548 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b6548:	b508      	push	{r3, lr}
   b654a:	4b02      	ldr	r3, [pc, #8]	; (b6554 <HAL_Delay_Microseconds+0xc>)
   b654c:	681b      	ldr	r3, [r3, #0]
   b654e:	68db      	ldr	r3, [r3, #12]
   b6550:	9301      	str	r3, [sp, #4]
   b6552:	bd08      	pop	{r3, pc}
   b6554:	00030218 	.word	0x00030218

000b6558 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b6558:	b508      	push	{r3, lr}
   b655a:	4b02      	ldr	r3, [pc, #8]	; (b6564 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b655c:	681b      	ldr	r3, [r3, #0]
   b655e:	695b      	ldr	r3, [r3, #20]
   b6560:	9301      	str	r3, [sp, #4]
   b6562:	bd08      	pop	{r3, pc}
   b6564:	00030218 	.word	0x00030218

000b6568 <hal_i2c_begin>:
DYNALIB_BEGIN(hal_i2c)

DYNALIB_FN(0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b6568:	b508      	push	{r3, lr}
   b656a:	4b02      	ldr	r3, [pc, #8]	; (b6574 <hal_i2c_begin+0xc>)
   b656c:	681b      	ldr	r3, [r3, #0]
   b656e:	68db      	ldr	r3, [r3, #12]
   b6570:	9301      	str	r3, [sp, #4]
   b6572:	bd08      	pop	{r3, pc}
   b6574:	00030228 	.word	0x00030228

000b6578 <hal_i2c_begin_transmission>:
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b6578:	b508      	push	{r3, lr}
   b657a:	4b02      	ldr	r3, [pc, #8]	; (b6584 <hal_i2c_begin_transmission+0xc>)
   b657c:	681b      	ldr	r3, [r3, #0]
   b657e:	699b      	ldr	r3, [r3, #24]
   b6580:	9301      	str	r3, [sp, #4]
   b6582:	bd08      	pop	{r3, pc}
   b6584:	00030228 	.word	0x00030228

000b6588 <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b6588:	b508      	push	{r3, lr}
   b658a:	4b02      	ldr	r3, [pc, #8]	; (b6594 <hal_i2c_end_transmission+0xc>)
   b658c:	681b      	ldr	r3, [r3, #0]
   b658e:	69db      	ldr	r3, [r3, #28]
   b6590:	9301      	str	r3, [sp, #4]
   b6592:	bd08      	pop	{r3, pc}
   b6594:	00030228 	.word	0x00030228

000b6598 <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b6598:	b508      	push	{r3, lr}
   b659a:	4b02      	ldr	r3, [pc, #8]	; (b65a4 <hal_i2c_write+0xc>)
   b659c:	681b      	ldr	r3, [r3, #0]
   b659e:	6a1b      	ldr	r3, [r3, #32]
   b65a0:	9301      	str	r3, [sp, #4]
   b65a2:	bd08      	pop	{r3, pc}
   b65a4:	00030228 	.word	0x00030228

000b65a8 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b65a8:	b508      	push	{r3, lr}
   b65aa:	4b02      	ldr	r3, [pc, #8]	; (b65b4 <hal_i2c_available+0xc>)
   b65ac:	681b      	ldr	r3, [r3, #0]
   b65ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b65b0:	9301      	str	r3, [sp, #4]
   b65b2:	bd08      	pop	{r3, pc}
   b65b4:	00030228 	.word	0x00030228

000b65b8 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b65b8:	b508      	push	{r3, lr}
   b65ba:	4b02      	ldr	r3, [pc, #8]	; (b65c4 <hal_i2c_read+0xc>)
   b65bc:	681b      	ldr	r3, [r3, #0]
   b65be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b65c0:	9301      	str	r3, [sp, #4]
   b65c2:	bd08      	pop	{r3, pc}
   b65c4:	00030228 	.word	0x00030228

000b65c8 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b65c8:	b508      	push	{r3, lr}
   b65ca:	4b02      	ldr	r3, [pc, #8]	; (b65d4 <hal_i2c_peek+0xc>)
   b65cc:	681b      	ldr	r3, [r3, #0]
   b65ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b65d0:	9301      	str	r3, [sp, #4]
   b65d2:	bd08      	pop	{r3, pc}
   b65d4:	00030228 	.word	0x00030228

000b65d8 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b65d8:	b508      	push	{r3, lr}
   b65da:	4b02      	ldr	r3, [pc, #8]	; (b65e4 <hal_i2c_flush+0xc>)
   b65dc:	681b      	ldr	r3, [r3, #0]
   b65de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b65e0:	9301      	str	r3, [sp, #4]
   b65e2:	bd08      	pop	{r3, pc}
   b65e4:	00030228 	.word	0x00030228

000b65e8 <hal_i2c_init>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b65e8:	b508      	push	{r3, lr}
   b65ea:	4b02      	ldr	r3, [pc, #8]	; (b65f4 <hal_i2c_init+0xc>)
   b65ec:	681b      	ldr	r3, [r3, #0]
   b65ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b65f0:	9301      	str	r3, [sp, #4]
   b65f2:	bd08      	pop	{r3, pc}
   b65f4:	00030228 	.word	0x00030228

000b65f8 <hal_i2c_lock>:
DYNALIB_FN(17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
   b65f8:	b508      	push	{r3, lr}
   b65fa:	4b02      	ldr	r3, [pc, #8]	; (b6604 <hal_i2c_lock+0xc>)
   b65fc:	681b      	ldr	r3, [r3, #0]
   b65fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   b6600:	9301      	str	r3, [sp, #4]
   b6602:	bd08      	pop	{r3, pc}
   b6604:	00030228 	.word	0x00030228

000b6608 <hal_i2c_unlock>:
DYNALIB_FN(19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
   b6608:	b508      	push	{r3, lr}
   b660a:	4b02      	ldr	r3, [pc, #8]	; (b6614 <hal_i2c_unlock+0xc>)
   b660c:	681b      	ldr	r3, [r3, #0]
   b660e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b6610:	9301      	str	r3, [sp, #4]
   b6612:	bd08      	pop	{r3, pc}
   b6614:	00030228 	.word	0x00030228

000b6618 <hal_i2c_request_ex>:
DYNALIB_FN(20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   b6618:	b508      	push	{r3, lr}
   b661a:	4b02      	ldr	r3, [pc, #8]	; (b6624 <hal_i2c_request_ex+0xc>)
   b661c:	681b      	ldr	r3, [r3, #0]
   b661e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b6620:	9301      	str	r3, [sp, #4]
   b6622:	bd08      	pop	{r3, pc}
   b6624:	00030228 	.word	0x00030228

000b6628 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b6628:	b508      	push	{r3, lr}
   b662a:	4b02      	ldr	r3, [pc, #8]	; (b6634 <inet_inet_ntop+0xc>)
   b662c:	681b      	ldr	r3, [r3, #0]
   b662e:	695b      	ldr	r3, [r3, #20]
   b6630:	9301      	str	r3, [sp, #4]
   b6632:	bd08      	pop	{r3, pc}
   b6634:	00030264 	.word	0x00030264

000b6638 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b6638:	b508      	push	{r3, lr}
   b663a:	4b02      	ldr	r3, [pc, #8]	; (b6644 <netdb_freeaddrinfo+0xc>)
   b663c:	681b      	ldr	r3, [r3, #0]
   b663e:	689b      	ldr	r3, [r3, #8]
   b6640:	9301      	str	r3, [sp, #4]
   b6642:	bd08      	pop	{r3, pc}
   b6644:	00030268 	.word	0x00030268

000b6648 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b6648:	b508      	push	{r3, lr}
   b664a:	4b02      	ldr	r3, [pc, #8]	; (b6654 <netdb_getaddrinfo+0xc>)
   b664c:	681b      	ldr	r3, [r3, #0]
   b664e:	68db      	ldr	r3, [r3, #12]
   b6650:	9301      	str	r3, [sp, #4]
   b6652:	bd08      	pop	{r3, pc}
   b6654:	00030268 	.word	0x00030268

000b6658 <hal_usart_end>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
   b6658:	b508      	push	{r3, lr}
   b665a:	4b02      	ldr	r3, [pc, #8]	; (b6664 <hal_usart_end+0xc>)
   b665c:	681b      	ldr	r3, [r3, #0]
   b665e:	689b      	ldr	r3, [r3, #8]
   b6660:	9301      	str	r3, [sp, #4]
   b6662:	bd08      	pop	{r3, pc}
   b6664:	0003023c 	.word	0x0003023c

000b6668 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b6668:	b508      	push	{r3, lr}
   b666a:	4b02      	ldr	r3, [pc, #8]	; (b6674 <hal_usart_write+0xc>)
   b666c:	681b      	ldr	r3, [r3, #0]
   b666e:	68db      	ldr	r3, [r3, #12]
   b6670:	9301      	str	r3, [sp, #4]
   b6672:	bd08      	pop	{r3, pc}
   b6674:	0003023c 	.word	0x0003023c

000b6678 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b6678:	b508      	push	{r3, lr}
   b667a:	4b02      	ldr	r3, [pc, #8]	; (b6684 <hal_usart_available+0xc>)
   b667c:	681b      	ldr	r3, [r3, #0]
   b667e:	691b      	ldr	r3, [r3, #16]
   b6680:	9301      	str	r3, [sp, #4]
   b6682:	bd08      	pop	{r3, pc}
   b6684:	0003023c 	.word	0x0003023c

000b6688 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b6688:	b508      	push	{r3, lr}
   b668a:	4b02      	ldr	r3, [pc, #8]	; (b6694 <hal_usart_read+0xc>)
   b668c:	681b      	ldr	r3, [r3, #0]
   b668e:	695b      	ldr	r3, [r3, #20]
   b6690:	9301      	str	r3, [sp, #4]
   b6692:	bd08      	pop	{r3, pc}
   b6694:	0003023c 	.word	0x0003023c

000b6698 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b6698:	b508      	push	{r3, lr}
   b669a:	4b02      	ldr	r3, [pc, #8]	; (b66a4 <hal_usart_peek+0xc>)
   b669c:	681b      	ldr	r3, [r3, #0]
   b669e:	699b      	ldr	r3, [r3, #24]
   b66a0:	9301      	str	r3, [sp, #4]
   b66a2:	bd08      	pop	{r3, pc}
   b66a4:	0003023c 	.word	0x0003023c

000b66a8 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b66a8:	b508      	push	{r3, lr}
   b66aa:	4b02      	ldr	r3, [pc, #8]	; (b66b4 <hal_usart_flush+0xc>)
   b66ac:	681b      	ldr	r3, [r3, #0]
   b66ae:	69db      	ldr	r3, [r3, #28]
   b66b0:	9301      	str	r3, [sp, #4]
   b66b2:	bd08      	pop	{r3, pc}
   b66b4:	0003023c 	.word	0x0003023c

000b66b8 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b66b8:	b508      	push	{r3, lr}
   b66ba:	4b02      	ldr	r3, [pc, #8]	; (b66c4 <hal_usart_available_data_for_write+0xc>)
   b66bc:	681b      	ldr	r3, [r3, #0]
   b66be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b66c0:	9301      	str	r3, [sp, #4]
   b66c2:	bd08      	pop	{r3, pc}
   b66c4:	0003023c 	.word	0x0003023c

000b66c8 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
   b66c8:	b508      	push	{r3, lr}
   b66ca:	4b02      	ldr	r3, [pc, #8]	; (b66d4 <hal_usart_begin_config+0xc>)
   b66cc:	681b      	ldr	r3, [r3, #0]
   b66ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b66d0:	9301      	str	r3, [sp, #4]
   b66d2:	bd08      	pop	{r3, pc}
   b66d4:	0003023c 	.word	0x0003023c

000b66d8 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b66d8:	b508      	push	{r3, lr}
   b66da:	4b02      	ldr	r3, [pc, #8]	; (b66e4 <hal_usart_init_ex+0xc>)
   b66dc:	681b      	ldr	r3, [r3, #0]
   b66de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b66e0:	9301      	str	r3, [sp, #4]
   b66e2:	bd08      	pop	{r3, pc}
   b66e4:	0003023c 	.word	0x0003023c

000b66e8 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b66e8:	b508      	push	{r3, lr}
   b66ea:	4b02      	ldr	r3, [pc, #8]	; (b66f4 <HAL_USB_USART_Init+0xc>)
   b66ec:	681b      	ldr	r3, [r3, #0]
   b66ee:	681b      	ldr	r3, [r3, #0]
   b66f0:	9301      	str	r3, [sp, #4]
   b66f2:	bd08      	pop	{r3, pc}
   b66f4:	0003024c 	.word	0x0003024c

000b66f8 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b66f8:	b508      	push	{r3, lr}
   b66fa:	4b02      	ldr	r3, [pc, #8]	; (b6704 <HAL_USB_USART_Begin+0xc>)
   b66fc:	681b      	ldr	r3, [r3, #0]
   b66fe:	685b      	ldr	r3, [r3, #4]
   b6700:	9301      	str	r3, [sp, #4]
   b6702:	bd08      	pop	{r3, pc}
   b6704:	0003024c 	.word	0x0003024c

000b6708 <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
   b6708:	b508      	push	{r3, lr}
   b670a:	4b02      	ldr	r3, [pc, #8]	; (b6714 <HAL_USB_USART_End+0xc>)
   b670c:	681b      	ldr	r3, [r3, #0]
   b670e:	689b      	ldr	r3, [r3, #8]
   b6710:	9301      	str	r3, [sp, #4]
   b6712:	bd08      	pop	{r3, pc}
   b6714:	0003024c 	.word	0x0003024c

000b6718 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b6718:	b508      	push	{r3, lr}
   b671a:	4b02      	ldr	r3, [pc, #8]	; (b6724 <HAL_USB_USART_Available_Data+0xc>)
   b671c:	681b      	ldr	r3, [r3, #0]
   b671e:	691b      	ldr	r3, [r3, #16]
   b6720:	9301      	str	r3, [sp, #4]
   b6722:	bd08      	pop	{r3, pc}
   b6724:	0003024c 	.word	0x0003024c

000b6728 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b6728:	b508      	push	{r3, lr}
   b672a:	4b02      	ldr	r3, [pc, #8]	; (b6734 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b672c:	681b      	ldr	r3, [r3, #0]
   b672e:	695b      	ldr	r3, [r3, #20]
   b6730:	9301      	str	r3, [sp, #4]
   b6732:	bd08      	pop	{r3, pc}
   b6734:	0003024c 	.word	0x0003024c

000b6738 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b6738:	b508      	push	{r3, lr}
   b673a:	4b02      	ldr	r3, [pc, #8]	; (b6744 <HAL_USB_USART_Receive_Data+0xc>)
   b673c:	681b      	ldr	r3, [r3, #0]
   b673e:	699b      	ldr	r3, [r3, #24]
   b6740:	9301      	str	r3, [sp, #4]
   b6742:	bd08      	pop	{r3, pc}
   b6744:	0003024c 	.word	0x0003024c

000b6748 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b6748:	b508      	push	{r3, lr}
   b674a:	4b02      	ldr	r3, [pc, #8]	; (b6754 <HAL_USB_USART_Send_Data+0xc>)
   b674c:	681b      	ldr	r3, [r3, #0]
   b674e:	69db      	ldr	r3, [r3, #28]
   b6750:	9301      	str	r3, [sp, #4]
   b6752:	bd08      	pop	{r3, pc}
   b6754:	0003024c 	.word	0x0003024c

000b6758 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b6758:	b508      	push	{r3, lr}
   b675a:	4b02      	ldr	r3, [pc, #8]	; (b6764 <HAL_USB_USART_Flush_Data+0xc>)
   b675c:	681b      	ldr	r3, [r3, #0]
   b675e:	6a1b      	ldr	r3, [r3, #32]
   b6760:	9301      	str	r3, [sp, #4]
   b6762:	bd08      	pop	{r3, pc}
   b6764:	0003024c 	.word	0x0003024c

000b6768 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b6768:	b508      	push	{r3, lr}
   b676a:	4b02      	ldr	r3, [pc, #8]	; (b6774 <panic_+0xc>)
   b676c:	681b      	ldr	r3, [r3, #0]
   b676e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b6770:	9301      	str	r3, [sp, #4]
   b6772:	bd08      	pop	{r3, pc}
   b6774:	00030260 	.word	0x00030260

000b6778 <log_message_v>:
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
   b6778:	b508      	push	{r3, lr}
   b677a:	4b02      	ldr	r3, [pc, #8]	; (b6784 <log_message_v+0xc>)
   b677c:	681b      	ldr	r3, [r3, #0]
   b677e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b6780:	9301      	str	r3, [sp, #4]
   b6782:	bd08      	pop	{r3, pc}
   b6784:	00030260 	.word	0x00030260

000b6788 <log_write>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
   b6788:	b508      	push	{r3, lr}
   b678a:	4b02      	ldr	r3, [pc, #8]	; (b6794 <log_write+0xc>)
   b678c:	681b      	ldr	r3, [r3, #0]
   b678e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b6790:	9301      	str	r3, [sp, #4]
   b6792:	bd08      	pop	{r3, pc}
   b6794:	00030260 	.word	0x00030260

000b6798 <log_dump>:
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
   b6798:	b508      	push	{r3, lr}
   b679a:	4b02      	ldr	r3, [pc, #8]	; (b67a4 <log_dump+0xc>)
   b679c:	681b      	ldr	r3, [r3, #0]
   b679e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   b67a0:	9301      	str	r3, [sp, #4]
   b67a2:	bd08      	pop	{r3, pc}
   b67a4:	00030260 	.word	0x00030260

000b67a8 <log_level_name>:
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
   b67a8:	b508      	push	{r3, lr}
   b67aa:	4b02      	ldr	r3, [pc, #8]	; (b67b4 <log_level_name+0xc>)
   b67ac:	681b      	ldr	r3, [r3, #0]
   b67ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   b67b0:	9301      	str	r3, [sp, #4]
   b67b2:	bd08      	pop	{r3, pc}
   b67b4:	00030260 	.word	0x00030260

000b67b8 <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
   b67b8:	b508      	push	{r3, lr}
   b67ba:	4b02      	ldr	r3, [pc, #8]	; (b67c4 <log_set_callbacks+0xc>)
   b67bc:	681b      	ldr	r3, [r3, #0]
   b67be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   b67c0:	9301      	str	r3, [sp, #4]
   b67c2:	bd08      	pop	{r3, pc}
   b67c4:	00030260 	.word	0x00030260

000b67c8 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b67c8:	b508      	push	{r3, lr}
   b67ca:	4b02      	ldr	r3, [pc, #8]	; (b67d4 <set_system_mode+0xc>)
   b67cc:	681b      	ldr	r3, [r3, #0]
   b67ce:	685b      	ldr	r3, [r3, #4]
   b67d0:	9301      	str	r3, [sp, #4]
   b67d2:	bd08      	pop	{r3, pc}
   b67d4:	00030220 	.word	0x00030220

000b67d8 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b67d8:	b508      	push	{r3, lr}
   b67da:	4b02      	ldr	r3, [pc, #8]	; (b67e4 <system_delay_ms+0xc>)
   b67dc:	681b      	ldr	r3, [r3, #0]
   b67de:	695b      	ldr	r3, [r3, #20]
   b67e0:	9301      	str	r3, [sp, #4]
   b67e2:	bd08      	pop	{r3, pc}
   b67e4:	00030220 	.word	0x00030220

000b67e8 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   b67e8:	b508      	push	{r3, lr}
   b67ea:	4b02      	ldr	r3, [pc, #8]	; (b67f4 <application_thread_current+0xc>)
   b67ec:	681b      	ldr	r3, [r3, #0]
   b67ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b67f0:	9301      	str	r3, [sp, #4]
   b67f2:	bd08      	pop	{r3, pc}
   b67f4:	00030220 	.word	0x00030220

000b67f8 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   b67f8:	b508      	push	{r3, lr}
   b67fa:	4b02      	ldr	r3, [pc, #8]	; (b6804 <application_thread_invoke+0xc>)
   b67fc:	681b      	ldr	r3, [r3, #0]
   b67fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b6800:	9301      	str	r3, [sp, #4]
   b6802:	bd08      	pop	{r3, pc}
   b6804:	00030220 	.word	0x00030220

000b6808 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b6808:	b508      	push	{r3, lr}
   b680a:	4b03      	ldr	r3, [pc, #12]	; (b6818 <system_ctrl_set_app_request_handler+0x10>)
   b680c:	681b      	ldr	r3, [r3, #0]
   b680e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b6812:	9301      	str	r3, [sp, #4]
   b6814:	bd08      	pop	{r3, pc}
   b6816:	0000      	.short	0x0000
   b6818:	00030220 	.word	0x00030220

000b681c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b681c:	b508      	push	{r3, lr}
   b681e:	4b03      	ldr	r3, [pc, #12]	; (b682c <system_ctrl_set_result+0x10>)
   b6820:	681b      	ldr	r3, [r3, #0]
   b6822:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b6826:	9301      	str	r3, [sp, #4]
   b6828:	bd08      	pop	{r3, pc}
   b682a:	0000      	.short	0x0000
   b682c:	00030220 	.word	0x00030220

000b6830 <spark_cloud_flag_connected>:
DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, bool(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   b6830:	b508      	push	{r3, lr}
   b6832:	4b02      	ldr	r3, [pc, #8]	; (b683c <spark_cloud_flag_connected+0xc>)
   b6834:	681b      	ldr	r3, [r3, #0]
   b6836:	695b      	ldr	r3, [r3, #20]
   b6838:	9301      	str	r3, [sp, #4]
   b683a:	bd08      	pop	{r3, pc}
   b683c:	00030244 	.word	0x00030244

000b6840 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   b6840:	b508      	push	{r3, lr}
   b6842:	4b02      	ldr	r3, [pc, #8]	; (b684c <spark_send_event+0xc>)
   b6844:	681b      	ldr	r3, [r3, #0]
   b6846:	6a1b      	ldr	r3, [r3, #32]
   b6848:	9301      	str	r3, [sp, #4]
   b684a:	bd08      	pop	{r3, pc}
   b684c:	00030244 	.word	0x00030244

000b6850 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b6850:	b508      	push	{r3, lr}
   b6852:	4b02      	ldr	r3, [pc, #8]	; (b685c <spark_set_random_seed_from_cloud_handler+0xc>)
   b6854:	681b      	ldr	r3, [r3, #0]
   b6856:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b6858:	9301      	str	r3, [sp, #4]
   b685a:	bd08      	pop	{r3, pc}
   b685c:	00030244 	.word	0x00030244

000b6860 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b6860:	b508      	push	{r3, lr}
   b6862:	4b02      	ldr	r3, [pc, #8]	; (b686c <network_connect+0xc>)
   b6864:	681b      	ldr	r3, [r3, #0]
   b6866:	685b      	ldr	r3, [r3, #4]
   b6868:	9301      	str	r3, [sp, #4]
   b686a:	bd08      	pop	{r3, pc}
   b686c:	00030240 	.word	0x00030240

000b6870 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b6870:	b508      	push	{r3, lr}
   b6872:	4b02      	ldr	r3, [pc, #8]	; (b687c <network_connecting+0xc>)
   b6874:	681b      	ldr	r3, [r3, #0]
   b6876:	689b      	ldr	r3, [r3, #8]
   b6878:	9301      	str	r3, [sp, #4]
   b687a:	bd08      	pop	{r3, pc}
   b687c:	00030240 	.word	0x00030240

000b6880 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b6880:	b508      	push	{r3, lr}
   b6882:	4b02      	ldr	r3, [pc, #8]	; (b688c <network_disconnect+0xc>)
   b6884:	681b      	ldr	r3, [r3, #0]
   b6886:	68db      	ldr	r3, [r3, #12]
   b6888:	9301      	str	r3, [sp, #4]
   b688a:	bd08      	pop	{r3, pc}
   b688c:	00030240 	.word	0x00030240

000b6890 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b6890:	b508      	push	{r3, lr}
   b6892:	4b02      	ldr	r3, [pc, #8]	; (b689c <network_ready+0xc>)
   b6894:	681b      	ldr	r3, [r3, #0]
   b6896:	691b      	ldr	r3, [r3, #16]
   b6898:	9301      	str	r3, [sp, #4]
   b689a:	bd08      	pop	{r3, pc}
   b689c:	00030240 	.word	0x00030240

000b68a0 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b68a0:	b508      	push	{r3, lr}
   b68a2:	4b02      	ldr	r3, [pc, #8]	; (b68ac <network_on+0xc>)
   b68a4:	681b      	ldr	r3, [r3, #0]
   b68a6:	695b      	ldr	r3, [r3, #20]
   b68a8:	9301      	str	r3, [sp, #4]
   b68aa:	bd08      	pop	{r3, pc}
   b68ac:	00030240 	.word	0x00030240

000b68b0 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b68b0:	b508      	push	{r3, lr}
   b68b2:	4b02      	ldr	r3, [pc, #8]	; (b68bc <network_off+0xc>)
   b68b4:	681b      	ldr	r3, [r3, #0]
   b68b6:	699b      	ldr	r3, [r3, #24]
   b68b8:	9301      	str	r3, [sp, #4]
   b68ba:	bd08      	pop	{r3, pc}
   b68bc:	00030240 	.word	0x00030240

000b68c0 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b68c0:	b508      	push	{r3, lr}
   b68c2:	4b02      	ldr	r3, [pc, #8]	; (b68cc <network_listen+0xc>)
   b68c4:	681b      	ldr	r3, [r3, #0]
   b68c6:	69db      	ldr	r3, [r3, #28]
   b68c8:	9301      	str	r3, [sp, #4]
   b68ca:	bd08      	pop	{r3, pc}
   b68cc:	00030240 	.word	0x00030240

000b68d0 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b68d0:	b508      	push	{r3, lr}
   b68d2:	4b02      	ldr	r3, [pc, #8]	; (b68dc <network_listening+0xc>)
   b68d4:	681b      	ldr	r3, [r3, #0]
   b68d6:	6a1b      	ldr	r3, [r3, #32]
   b68d8:	9301      	str	r3, [sp, #4]
   b68da:	bd08      	pop	{r3, pc}
   b68dc:	00030240 	.word	0x00030240

000b68e0 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b68e0:	b508      	push	{r3, lr}
   b68e2:	4b02      	ldr	r3, [pc, #8]	; (b68ec <network_set_listen_timeout+0xc>)
   b68e4:	681b      	ldr	r3, [r3, #0]
   b68e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b68e8:	9301      	str	r3, [sp, #4]
   b68ea:	bd08      	pop	{r3, pc}
   b68ec:	00030240 	.word	0x00030240

000b68f0 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b68f0:	b508      	push	{r3, lr}
   b68f2:	4b02      	ldr	r3, [pc, #8]	; (b68fc <network_get_listen_timeout+0xc>)
   b68f4:	681b      	ldr	r3, [r3, #0]
   b68f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b68f8:	9301      	str	r3, [sp, #4]
   b68fa:	bd08      	pop	{r3, pc}
   b68fc:	00030240 	.word	0x00030240

000b6900 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b6900:	b508      	push	{r3, lr}
   b6902:	4b02      	ldr	r3, [pc, #8]	; (b690c <network_is_on+0xc>)
   b6904:	681b      	ldr	r3, [r3, #0]
   b6906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6908:	9301      	str	r3, [sp, #4]
   b690a:	bd08      	pop	{r3, pc}
   b690c:	00030240 	.word	0x00030240

000b6910 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b6910:	b508      	push	{r3, lr}
   b6912:	4b02      	ldr	r3, [pc, #8]	; (b691c <network_is_off+0xc>)
   b6914:	681b      	ldr	r3, [r3, #0]
   b6916:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b6918:	9301      	str	r3, [sp, #4]
   b691a:	bd08      	pop	{r3, pc}
   b691c:	00030240 	.word	0x00030240

000b6920 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b6920:	b508      	push	{r3, lr}
   b6922:	4b02      	ldr	r3, [pc, #8]	; (b692c <malloc+0xc>)
   b6924:	681b      	ldr	r3, [r3, #0]
   b6926:	681b      	ldr	r3, [r3, #0]
   b6928:	9301      	str	r3, [sp, #4]
   b692a:	bd08      	pop	{r3, pc}
   b692c:	0003021c 	.word	0x0003021c

000b6930 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b6930:	b508      	push	{r3, lr}
   b6932:	4b02      	ldr	r3, [pc, #8]	; (b693c <free+0xc>)
   b6934:	681b      	ldr	r3, [r3, #0]
   b6936:	685b      	ldr	r3, [r3, #4]
   b6938:	9301      	str	r3, [sp, #4]
   b693a:	bd08      	pop	{r3, pc}
   b693c:	0003021c 	.word	0x0003021c

000b6940 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b6940:	b508      	push	{r3, lr}
   b6942:	4b02      	ldr	r3, [pc, #8]	; (b694c <realloc+0xc>)
   b6944:	681b      	ldr	r3, [r3, #0]
   b6946:	689b      	ldr	r3, [r3, #8]
   b6948:	9301      	str	r3, [sp, #4]
   b694a:	bd08      	pop	{r3, pc}
   b694c:	0003021c 	.word	0x0003021c

000b6950 <sscanf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
   b6950:	b508      	push	{r3, lr}
   b6952:	4b02      	ldr	r3, [pc, #8]	; (b695c <sscanf+0xc>)
   b6954:	681b      	ldr	r3, [r3, #0]
   b6956:	695b      	ldr	r3, [r3, #20]
   b6958:	9301      	str	r3, [sp, #4]
   b695a:	bd08      	pop	{r3, pc}
   b695c:	0003021c 	.word	0x0003021c

000b6960 <snprintf>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   b6960:	b508      	push	{r3, lr}
   b6962:	4b02      	ldr	r3, [pc, #8]	; (b696c <snprintf+0xc>)
   b6964:	681b      	ldr	r3, [r3, #0]
   b6966:	69db      	ldr	r3, [r3, #28]
   b6968:	9301      	str	r3, [sp, #4]
   b696a:	bd08      	pop	{r3, pc}
   b696c:	0003021c 	.word	0x0003021c

000b6970 <sniprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
   b6970:	b508      	push	{r3, lr}
   b6972:	4b02      	ldr	r3, [pc, #8]	; (b697c <sniprintf+0xc>)
   b6974:	681b      	ldr	r3, [r3, #0]
   b6976:	6a1b      	ldr	r3, [r3, #32]
   b6978:	9301      	str	r3, [sp, #4]
   b697a:	bd08      	pop	{r3, pc}
   b697c:	0003021c 	.word	0x0003021c

000b6980 <vsnprintf>:
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b6980:	b508      	push	{r3, lr}
   b6982:	4b02      	ldr	r3, [pc, #8]	; (b698c <vsnprintf+0xc>)
   b6984:	681b      	ldr	r3, [r3, #0]
   b6986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b6988:	9301      	str	r3, [sp, #4]
   b698a:	bd08      	pop	{r3, pc}
   b698c:	0003021c 	.word	0x0003021c

000b6990 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b6990:	b508      	push	{r3, lr}
   b6992:	4b02      	ldr	r3, [pc, #8]	; (b699c <abort+0xc>)
   b6994:	681b      	ldr	r3, [r3, #0]
   b6996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6998:	9301      	str	r3, [sp, #4]
   b699a:	bd08      	pop	{r3, pc}
   b699c:	0003021c 	.word	0x0003021c

000b69a0 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   b69a0:	b508      	push	{r3, lr}
   b69a2:	4b02      	ldr	r3, [pc, #8]	; (b69ac <_malloc_r+0xc>)
   b69a4:	681b      	ldr	r3, [r3, #0]
   b69a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b69a8:	9301      	str	r3, [sp, #4]
   b69aa:	bd08      	pop	{r3, pc}
   b69ac:	0003021c 	.word	0x0003021c

000b69b0 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b69b0:	b508      	push	{r3, lr}
   b69b2:	4b02      	ldr	r3, [pc, #8]	; (b69bc <__errno+0xc>)
   b69b4:	681b      	ldr	r3, [r3, #0]
   b69b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b69b8:	9301      	str	r3, [sp, #4]
   b69ba:	bd08      	pop	{r3, pc}
   b69bc:	0003021c 	.word	0x0003021c

000b69c0 <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b69c0:	b508      	push	{r3, lr}
   b69c2:	4b02      	ldr	r3, [pc, #8]	; (b69cc <__assert_func+0xc>)
   b69c4:	681b      	ldr	r3, [r3, #0]
   b69c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b69c8:	9301      	str	r3, [sp, #4]
   b69ca:	bd08      	pop	{r3, pc}
   b69cc:	0003021c 	.word	0x0003021c

000b69d0 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b69d0:	b508      	push	{r3, lr}
   b69d2:	4b02      	ldr	r3, [pc, #8]	; (b69dc <newlib_impure_ptr_callback+0xc>)
   b69d4:	681b      	ldr	r3, [r3, #0]
   b69d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b69d8:	9301      	str	r3, [sp, #4]
   b69da:	bd08      	pop	{r3, pc}
   b69dc:	0003021c 	.word	0x0003021c

000b69e0 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b69e0:	2100      	movs	r1, #0
   b69e2:	f7ff bef9 	b.w	b67d8 <system_delay_ms>

000b69e6 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   b69e6:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   b69e8:	6883      	ldr	r3, [r0, #8]
   b69ea:	4604      	mov	r4, r0
   b69ec:	b90b      	cbnz	r3, b69f2 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   b69ee:	f002 fa1b 	bl	b8e28 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b69f2:	68c3      	ldr	r3, [r0, #12]
   b69f4:	4798      	blx	r3
      if (_M_manager)
   b69f6:	68a3      	ldr	r3, [r4, #8]
   b69f8:	b11b      	cbz	r3, b6a02 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b69fa:	2203      	movs	r2, #3
   b69fc:	4621      	mov	r1, r4
   b69fe:	4620      	mov	r0, r4
   b6a00:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   b6a02:	4620      	mov	r0, r4
   b6a04:	2110      	movs	r1, #16
}
   b6a06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   b6a0a:	f7fd bb46 	b.w	b409a <_ZdlPvj>

000b6a0e <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   b6a0e:	b510      	push	{r4, lr}
      if (_M_manager)
   b6a10:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b6a12:	4604      	mov	r4, r0
      if (_M_manager)
   b6a14:	b113      	cbz	r3, b6a1c <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b6a16:	2203      	movs	r2, #3
   b6a18:	4601      	mov	r1, r0
   b6a1a:	4798      	blx	r3
    }
   b6a1c:	4620      	mov	r0, r4
   b6a1e:	bd10      	pop	{r4, pc}

000b6a20 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    {
   b6a20:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   b6a22:	6843      	ldr	r3, [r0, #4]
   b6a24:	3b01      	subs	r3, #1
    {
   b6a26:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   b6a28:	6043      	str	r3, [r0, #4]
   b6a2a:	b963      	cbnz	r3, b6a46 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
          _M_dispose();
   b6a2c:	6803      	ldr	r3, [r0, #0]
   b6a2e:	689b      	ldr	r3, [r3, #8]
   b6a30:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b6a32:	68a3      	ldr	r3, [r4, #8]
   b6a34:	3b01      	subs	r3, #1
   b6a36:	60a3      	str	r3, [r4, #8]
   b6a38:	b92b      	cbnz	r3, b6a46 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   b6a3a:	6823      	ldr	r3, [r4, #0]
   b6a3c:	4620      	mov	r0, r4
   b6a3e:	68db      	ldr	r3, [r3, #12]
    }
   b6a40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   b6a44:	4718      	bx	r3
    }
   b6a46:	bd10      	pop	{r4, pc}

000b6a48 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   b6a48:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b6a4a:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b6a4e:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b6a50:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
   b6a54:	42ae      	cmp	r6, r5
   b6a56:	d004      	beq.n	b6a62 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
   b6a58:	4628      	mov	r0, r5
   b6a5a:	f001 fedb 	bl	b8814 <_ZN6StringD1Ev>
        for (; p != end; ++p) {
   b6a5e:	3510      	adds	r5, #16
   b6a60:	e7f8      	b.n	b6a54 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b6a62:	6820      	ldr	r0, [r4, #0]
   b6a64:	f7ff ff64 	bl	b6930 <free>
    AllocatorT::free(data_);
}
   b6a68:	4620      	mov	r0, r4
   b6a6a:	bd70      	pop	{r4, r5, r6, pc}

000b6a6c <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
   b6a6c:	b513      	push	{r0, r1, r4, lr}
   b6a6e:	460b      	mov	r3, r1
   b6a70:	4602      	mov	r2, r0
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6a72:	e9d0 0100 	ldrd	r0, r1, [r0]
   b6a76:	466c      	mov	r4, sp
   b6a78:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b6a7c:	e893 0003 	ldmia.w	r3, {r0, r1}
   b6a80:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b6a84:	e894 0003 	ldmia.w	r4, {r0, r1}
   b6a88:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   b6a8c:	b002      	add	sp, #8
   b6a8e:	bd10      	pop	{r4, pc}

000b6a90 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b6a90:	4802      	ldr	r0, [pc, #8]	; (b6a9c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b6a92:	2300      	movs	r3, #0
   b6a94:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b6a96:	f7ff bd2f 	b.w	b64f8 <os_mutex_recursive_create>
   b6a9a:	bf00      	nop
   b6a9c:	2003e668 	.word	0x2003e668

000b6aa0 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   b6aa0:	2200      	movs	r2, #0
   b6aa2:	6840      	ldr	r0, [r0, #4]
   b6aa4:	4611      	mov	r1, r2
   b6aa6:	f7ff bef3 	b.w	b6890 <network_ready>

000b6aaa <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   b6aaa:	2200      	movs	r2, #0
   b6aac:	6840      	ldr	r0, [r0, #4]
   b6aae:	4611      	mov	r1, r2
   b6ab0:	f7ff bf0e 	b.w	b68d0 <network_listening>

000b6ab4 <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b6ab4:	2200      	movs	r2, #0
   b6ab6:	6840      	ldr	r0, [r0, #4]
   b6ab8:	4611      	mov	r1, r2
   b6aba:	f7ff bf19 	b.w	b68f0 <network_get_listen_timeout>

000b6abe <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b6abe:	6840      	ldr	r0, [r0, #4]
   b6ac0:	2200      	movs	r2, #0
   b6ac2:	f7ff bf0d 	b.w	b68e0 <network_set_listen_timeout>

000b6ac6 <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b6ac6:	6840      	ldr	r0, [r0, #4]
   b6ac8:	2200      	movs	r2, #0
   b6aca:	f081 0101 	eor.w	r1, r1, #1
   b6ace:	f7ff bef7 	b.w	b68c0 <network_listen>

000b6ad2 <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b6ad2:	2300      	movs	r3, #0
   b6ad4:	6840      	ldr	r0, [r0, #4]
   b6ad6:	461a      	mov	r2, r3
   b6ad8:	4619      	mov	r1, r3
   b6ada:	f7ff bee9 	b.w	b68b0 <network_off>

000b6ade <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b6ade:	2300      	movs	r3, #0
   b6ae0:	6840      	ldr	r0, [r0, #4]
   b6ae2:	461a      	mov	r2, r3
   b6ae4:	4619      	mov	r1, r3
   b6ae6:	f7ff bedb 	b.w	b68a0 <network_on>

000b6aea <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b6aea:	2200      	movs	r2, #0
   b6aec:	6840      	ldr	r0, [r0, #4]
   b6aee:	4611      	mov	r1, r2
   b6af0:	f7ff bebe 	b.w	b6870 <network_connecting>

000b6af4 <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b6af4:	6840      	ldr	r0, [r0, #4]
   b6af6:	2200      	movs	r2, #0
   b6af8:	2102      	movs	r1, #2
   b6afa:	f7ff bec1 	b.w	b6880 <network_disconnect>

000b6afe <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b6afe:	2300      	movs	r3, #0
   b6b00:	6840      	ldr	r0, [r0, #4]
   b6b02:	461a      	mov	r2, r3
   b6b04:	f7ff beac 	b.w	b6860 <network_connect>

000b6b08 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   b6b08:	4b08      	ldr	r3, [pc, #32]	; (b6b2c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   b6b0a:	b510      	push	{r4, lr}
   b6b0c:	2428      	movs	r4, #40	; 0x28
   b6b0e:	4622      	mov	r2, r4
   b6b10:	4618      	mov	r0, r3
   b6b12:	2100      	movs	r1, #0
   b6b14:	f002 fb7e 	bl	b9214 <memset>
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b6b18:	4b05      	ldr	r3, [pc, #20]	; (b6b30 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   b6b1a:	8004      	strh	r4, [r0, #0]
        cid = -1;
   b6b1c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b6b20:	6042      	str	r2, [r0, #4]
   b6b22:	2204      	movs	r2, #4
   b6b24:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   b6b26:	4a03      	ldr	r2, [pc, #12]	; (b6b34 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   b6b28:	601a      	str	r2, [r3, #0]
   b6b2a:	bd10      	pop	{r4, pc}
   b6b2c:	2003e674 	.word	0x2003e674
   b6b30:	2003e66c 	.word	0x2003e66c
   b6b34:	000ba35c 	.word	0x000ba35c

000b6b38 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b6b38:	4770      	bx	lr

000b6b3a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   b6b3a:	2000      	movs	r0, #0
   b6b3c:	4770      	bx	lr

000b6b3e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b6b3e:	b510      	push	{r4, lr}
   b6b40:	2110      	movs	r1, #16
   b6b42:	4604      	mov	r4, r0
   b6b44:	f7fd faa9 	bl	b409a <_ZdlPvj>
   b6b48:	4620      	mov	r0, r4
   b6b4a:	bd10      	pop	{r4, pc}

000b6b4c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   b6b4c:	b508      	push	{r3, lr}
      { delete this; }
   b6b4e:	f7ff fff6 	bl	b6b3e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   b6b52:	bd08      	pop	{r3, pc}

000b6b54 <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   b6b54:	b530      	push	{r4, r5, lr}
        type_(type) {
   b6b56:	2200      	movs	r2, #0
   b6b58:	f64f 749c 	movw	r4, #65436	; 0xff9c
   b6b5c:	6002      	str	r2, [r0, #0]
   b6b5e:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   b6b60:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   b6b62:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   b6b64:	680c      	ldr	r4, [r1, #0]
   b6b66:	8085      	strh	r5, [r0, #4]
   b6b68:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b6b6a:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   b6b6c:	bd30      	pop	{r4, r5, pc}

000b6b6e <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   b6b6e:	b510      	push	{r4, lr}
   b6b70:	4604      	mov	r4, r0
    free((void*)msg_);
   b6b72:	6800      	ldr	r0, [r0, #0]
   b6b74:	f7ff fedc 	bl	b6930 <free>
}
   b6b78:	4620      	mov	r0, r4
   b6b7a:	bd10      	pop	{r4, pc}

000b6b7c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b6b7c:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   b6b7e:	68c4      	ldr	r4, [r0, #12]
   b6b80:	b1f4      	cbz	r4, b6bc0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   b6b82:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   b6b84:	2b02      	cmp	r3, #2
   b6b86:	d103      	bne.n	b6b90 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   b6b88:	f104 000c 	add.w	r0, r4, #12
   b6b8c:	f7ff ffef 	bl	b6b6e <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   b6b90:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   b6b92:	b135      	cbz	r5, b6ba2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   b6b94:	4628      	mov	r0, r5
   b6b96:	f7ff ff3a 	bl	b6a0e <_ZNSt14_Function_baseD1Ev>
   b6b9a:	2110      	movs	r1, #16
   b6b9c:	4628      	mov	r0, r5
   b6b9e:	f7fd fa7c 	bl	b409a <_ZdlPvj>
   b6ba2:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   b6ba4:	b135      	cbz	r5, b6bb4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   b6ba6:	4628      	mov	r0, r5
   b6ba8:	f7ff ff31 	bl	b6a0e <_ZNSt14_Function_baseD1Ev>
   b6bac:	2110      	movs	r1, #16
   b6bae:	4628      	mov	r0, r5
   b6bb0:	f7fd fa73 	bl	b409a <_ZdlPvj>
   b6bb4:	4620      	mov	r0, r4
   b6bb6:	2114      	movs	r1, #20
   b6bb8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b6bbc:	f7fd ba6d 	b.w	b409a <_ZdlPvj>
   b6bc0:	bd38      	pop	{r3, r4, r5, pc}

000b6bc2 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b6bc2:	680b      	ldr	r3, [r1, #0]
   b6bc4:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   b6bc6:	684b      	ldr	r3, [r1, #4]
   b6bc8:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   b6bca:	b113      	cbz	r3, b6bd2 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_+0x10>
    { ++_M_use_count; }
   b6bcc:	685a      	ldr	r2, [r3, #4]
   b6bce:	3201      	adds	r2, #1
   b6bd0:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b6bd2:	4770      	bx	lr

000b6bd4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   b6bd4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b6bd6:	4604      	mov	r4, r0
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b6bd8:	4668      	mov	r0, sp
   b6bda:	460d      	mov	r5, r1
   b6bdc:	f7ff fff1 	bl	b6bc2 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   b6be0:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b6be2:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b6be4:	6023      	str	r3, [r4, #0]
	_M_pi = __tmp;
   b6be6:	6062      	str	r2, [r4, #4]
	__r._M_pi = _M_pi;
   b6be8:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   b6bea:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   b6bec:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   b6bee:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   b6bf0:	f7fd fb38 	bl	b4264 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   b6bf4:	b135      	cbz	r5, b6c04 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv+0x30>
   b6bf6:	1d28      	adds	r0, r5, #4
   b6bf8:	f7fd fb34 	bl	b4264 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b6bfc:	2108      	movs	r1, #8
   b6bfe:	4628      	mov	r0, r5
   b6c00:	f7fd fa4b 	bl	b409a <_ZdlPvj>
        return p;
    }
   b6c04:	4620      	mov	r0, r4
   b6c06:	b003      	add	sp, #12
   b6c08:	bd30      	pop	{r4, r5, pc}

000b6c0a <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   b6c0a:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b6c0c:	b510      	push	{r4, lr}
      if (_M_empty())
   b6c0e:	b90a      	cbnz	r2, b6c14 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   b6c10:	f002 f90a 	bl	b8e28 <_ZSt25__throw_bad_function_callv>
    }
   b6c14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b6c18:	68c3      	ldr	r3, [r0, #12]
   b6c1a:	4718      	bx	r3

000b6c1c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b6c1c:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b6c1e:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b6c20:	f100 0110 	add.w	r1, r0, #16
   b6c24:	f7ff fff1 	bl	b6c0a <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   b6c28:	bd08      	pop	{r3, pc}

000b6c2a <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   b6c2a:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b6c2c:	b510      	push	{r4, lr}
      if (_M_empty())
   b6c2e:	b90a      	cbnz	r2, b6c34 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   b6c30:	f002 f8fa 	bl	b8e28 <_ZSt25__throw_bad_function_callv>
    }
   b6c34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b6c38:	68c3      	ldr	r3, [r0, #12]
   b6c3a:	4718      	bx	r3

000b6c3c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b6c3c:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b6c3e:	6800      	ldr	r0, [r0, #0]
   b6c40:	f100 0110 	add.w	r1, r0, #16
   b6c44:	f7ff fff1 	bl	b6c2a <_ZNKSt8functionIFvRKbEEclES1_>
      }
   b6c48:	bd08      	pop	{r3, pc}
	...

000b6c4c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   b6c4c:	b538      	push	{r3, r4, r5, lr}
   b6c4e:	2300      	movs	r3, #0
   b6c50:	4604      	mov	r4, r0
   b6c52:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b6c54:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   b6c56:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b6c58:	f7fd fa1b 	bl	b4092 <_Znwj>
   b6c5c:	b128      	cbz	r0, b6c6a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   b6c5e:	2301      	movs	r3, #1
   b6c60:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   b6c64:	4b02      	ldr	r3, [pc, #8]	; (b6c70 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   b6c66:	6003      	str	r3, [r0, #0]
   b6c68:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b6c6a:	6020      	str	r0, [r4, #0]
	}
   b6c6c:	4620      	mov	r0, r4
   b6c6e:	bd38      	pop	{r3, r4, r5, pc}
   b6c70:	000ba398 	.word	0x000ba398

000b6c74 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   b6c74:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b6c76:	2300      	movs	r3, #0
   b6c78:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b6c7a:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b6c7c:	4604      	mov	r4, r0
   b6c7e:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b6c80:	b12b      	cbz	r3, b6c8e <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b6c82:	2202      	movs	r2, #2
   b6c84:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b6c86:	68eb      	ldr	r3, [r5, #12]
   b6c88:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b6c8a:	68ab      	ldr	r3, [r5, #8]
   b6c8c:	60a3      	str	r3, [r4, #8]
    }
   b6c8e:	4620      	mov	r0, r4
   b6c90:	bd38      	pop	{r3, r4, r5, pc}
	...

000b6c94 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   b6c94:	b5f0      	push	{r4, r5, r6, r7, lr}
   b6c96:	b089      	sub	sp, #36	; 0x24
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b6c98:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   b6c9a:	4668      	mov	r0, sp
   b6c9c:	f7ff ff5a 	bl	b6b54 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b6ca0:	f04f 0302 	mov.w	r3, #2
   b6ca4:	e8d4 2f4f 	ldrexb	r2, [r4]
   b6ca8:	2a00      	cmp	r2, #0
   b6caa:	d103      	bne.n	b6cb4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   b6cac:	e8c4 3f41 	strexb	r1, r3, [r4]
   b6cb0:	2900      	cmp	r1, #0
   b6cb2:	d1f7      	bne.n	b6ca4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   b6cb4:	d125      	bne.n	b6d02 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   b6cb6:	f104 050c 	add.w	r5, r4, #12
   b6cba:	4669      	mov	r1, sp
   b6cbc:	4628      	mov	r0, r5
   b6cbe:	f7ff ff49 	bl	b6b54 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   b6cc2:	f3bf 8f5b 	dmb	ish
   b6cc6:	2301      	movs	r3, #1
   b6cc8:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b6cca:	2000      	movs	r0, #0
   b6ccc:	f104 0308 	add.w	r3, r4, #8
   b6cd0:	f3bf 8f5b 	dmb	ish
   b6cd4:	e853 6f00 	ldrex	r6, [r3]
   b6cd8:	e843 0200 	strex	r2, r0, [r3]
   b6cdc:	2a00      	cmp	r2, #0
   b6cde:	d1f9      	bne.n	b6cd4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   b6ce0:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b6ce4:	b16e      	cbz	r6, b6d02 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   b6ce6:	f7ff fd7f 	bl	b67e8 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b6cea:	b178      	cbz	r0, b6d0c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b6cec:	4629      	mov	r1, r5
   b6cee:	4630      	mov	r0, r6
   b6cf0:	f7ff ff8b 	bl	b6c0a <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   b6cf4:	4630      	mov	r0, r6
   b6cf6:	f7ff fe8a 	bl	b6a0e <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b6cfa:	2110      	movs	r1, #16
   b6cfc:	4630      	mov	r0, r6
   b6cfe:	f7fd f9cc 	bl	b409a <_ZdlPvj>
        p_->setError(std::move(error));
   b6d02:	4668      	mov	r0, sp
   b6d04:	f7ff ff33 	bl	b6b6e <_ZN8particle5ErrorD1Ev>
    }
   b6d08:	b009      	add	sp, #36	; 0x24
   b6d0a:	bdf0      	pop	{r4, r5, r6, r7, pc}

     public:
      template<typename... _Args>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b6d0c:	4631      	mov	r1, r6
   b6d0e:	a802      	add	r0, sp, #8
   b6d10:	f7ff ffb0 	bl	b6c74 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b6d14:	68e0      	ldr	r0, [r4, #12]
   b6d16:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b6d1a:	b108      	cbz	r0, b6d20 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   b6d1c:	f002 fada 	bl	b92d4 <strdup>
        type_(type) {
   b6d20:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b6d22:	2010      	movs	r0, #16
   b6d24:	f8ad 501c 	strh.w	r5, [sp, #28]
   b6d28:	f7fd f9b3 	bl	b4092 <_Znwj>
   b6d2c:	4605      	mov	r5, r0
   b6d2e:	b1e8      	cbz	r0, b6d6c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   b6d30:	2700      	movs	r7, #0
   b6d32:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b6d34:	2018      	movs	r0, #24
   b6d36:	f7fd f9ac 	bl	b4092 <_Znwj>
   b6d3a:	4604      	mov	r4, r0
   b6d3c:	b188      	cbz	r0, b6d62 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   b6d3e:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   b6d40:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b6d42:	a802      	add	r0, sp, #8
   b6d44:	f7ff fe92 	bl	b6a6c <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6d48:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   b6d4a:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b6d4c:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6d4e:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b6d50:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b6d52:	a906      	add	r1, sp, #24
   b6d54:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b6d56:	60e3      	str	r3, [r4, #12]
   b6d58:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   b6d5c:	9205      	str	r2, [sp, #20]
   b6d5e:	f7ff fef9 	bl	b6b54 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   b6d62:	4b08      	ldr	r3, [pc, #32]	; (b6d84 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   b6d64:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b6d66:	4b08      	ldr	r3, [pc, #32]	; (b6d88 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b6d68:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b6d6a:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   b6d6c:	a806      	add	r0, sp, #24
   b6d6e:	f7ff fefe 	bl	b6b6e <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b6d72:	a802      	add	r0, sp, #8
   b6d74:	f7ff fe4b 	bl	b6a0e <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b6d78:	2200      	movs	r2, #0
   b6d7a:	4629      	mov	r1, r5
   b6d7c:	4803      	ldr	r0, [pc, #12]	; (b6d8c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   b6d7e:	f7ff fd3b 	bl	b67f8 <application_thread_invoke>
   b6d82:	e7b7      	b.n	b6cf4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   b6d84:	000b6c1d 	.word	0x000b6c1d
   b6d88:	000b6ea1 	.word	0x000b6ea1
   b6d8c:	000b69e7 	.word	0x000b69e7

000b6d90 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   b6d90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6d94:	b08b      	sub	sp, #44	; 0x2c
   b6d96:	4605      	mov	r5, r0
   b6d98:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   b6d9c:	460f      	mov	r7, r1
   b6d9e:	4690      	mov	r8, r2
   b6da0:	4699      	mov	r9, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   b6da2:	f7ff fd45 	bl	b6830 <spark_cloud_flag_connected>
   b6da6:	ae07      	add	r6, sp, #28
    if (!connected()) {
   b6da8:	4683      	mov	fp, r0
   b6daa:	bb38      	cbnz	r0, b6dfc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   b6dac:	f64f 732e 	movw	r3, #65326	; 0xff2e
   b6db0:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   b6db2:	a905      	add	r1, sp, #20
   b6db4:	4630      	mov	r0, r6
   b6db6:	f8ad 3018 	strh.w	r3, [sp, #24]
   b6dba:	f7ff fecb 	bl	b6b54 <_ZN8particle5ErrorC1EOS0_>
   b6dbe:	2014      	movs	r0, #20
   b6dc0:	f7fd f967 	bl	b4092 <_Znwj>
   b6dc4:	4604      	mov	r4, r0
   b6dc6:	b148      	cbz	r0, b6ddc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   b6dc8:	2302      	movs	r3, #2
   b6dca:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b6dcc:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   b6dce:	e9c0 bb01 	strd	fp, fp, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b6dd2:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   b6dd4:	4631      	mov	r1, r6
   b6dd6:	300c      	adds	r0, #12
   b6dd8:	f7ff febc 	bl	b6b54 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b6ddc:	4628      	mov	r0, r5
	: __shared_count(__p)
   b6dde:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b6de0:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   b6de4:	f7ff ff32 	bl	b6c4c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   b6de8:	4630      	mov	r0, r6
   b6dea:	f7ff fec0 	bl	b6b6e <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   b6dee:	a805      	add	r0, sp, #20
   b6df0:	f7ff febd 	bl	b6b6e <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   b6df4:	4628      	mov	r0, r5
   b6df6:	b00b      	add	sp, #44	; 0x2c
   b6df8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d.size = sizeof(spark_send_event_data);
   b6dfc:	230c      	movs	r3, #12
    spark_send_event_data d = {};
   b6dfe:	2400      	movs	r4, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   b6e00:	2014      	movs	r0, #20
   b6e02:	e9cd 4408 	strd	r4, r4, [sp, #32]
    d.size = sizeof(spark_send_event_data);
   b6e06:	9307      	str	r3, [sp, #28]
   b6e08:	f7fd f943 	bl	b4092 <_Znwj>
   b6e0c:	4601      	mov	r1, r0
   b6e0e:	b118      	cbz	r0, b6e18 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x88>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   b6e10:	e9c0 4401 	strd	r4, r4, [r0, #4]
   b6e14:	7004      	strb	r4, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b6e16:	7044      	strb	r4, [r0, #1]
   b6e18:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b6e1a:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   b6e1c:	f7ff ff16 	bl	b6c4c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   b6e20:	4b1e      	ldr	r3, [pc, #120]	; (b6e9c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x10c>)
   b6e22:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   b6e24:	2008      	movs	r0, #8
   b6e26:	f7fd f934 	bl	b4092 <_Znwj>
   b6e2a:	4604      	mov	r4, r0
   b6e2c:	b110      	cbz	r0, b6e34 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa4>
   b6e2e:	a903      	add	r1, sp, #12
   b6e30:	f7ff fec7 	bl	b6bc2 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   b6e34:	9600      	str	r6, [sp, #0]
   b6e36:	fa5f f38a 	uxtb.w	r3, sl
   b6e3a:	464a      	mov	r2, r9
   b6e3c:	4641      	mov	r1, r8
   b6e3e:	4638      	mov	r0, r7
    d.handler_data = p.dataPtr();
   b6e40:	9409      	str	r4, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   b6e42:	f7ff fcfd 	bl	b6840 <spark_send_event>
   b6e46:	b9b8      	cbnz	r0, b6e78 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
	return __atomic_load_n(&_M_i, int(__m));
   b6e48:	9b03      	ldr	r3, [sp, #12]
   b6e4a:	785b      	ldrb	r3, [r3, #1]
   b6e4c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   b6e50:	b993      	cbnz	r3, b6e78 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   b6e52:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   b6e56:	a905      	add	r1, sp, #20
   b6e58:	a803      	add	r0, sp, #12
   b6e5a:	9205      	str	r2, [sp, #20]
   b6e5c:	f8ad 3018 	strh.w	r3, [sp, #24]
   b6e60:	f7ff ff18 	bl	b6c94 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b6e64:	a805      	add	r0, sp, #20
   b6e66:	f7ff fe82 	bl	b6b6e <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   b6e6a:	a805      	add	r0, sp, #20
   b6e6c:	9909      	ldr	r1, [sp, #36]	; 0x24
   b6e6e:	f7ff feb1 	bl	b6bd4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   b6e72:	a806      	add	r0, sp, #24
   b6e74:	f7fd f9f6 	bl	b4264 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b6e78:	a903      	add	r1, sp, #12
   b6e7a:	a805      	add	r0, sp, #20
   b6e7c:	f7ff fea1 	bl	b6bc2 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   b6e80:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b6e82:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b6e84:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   b6e86:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   b6e88:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   b6e8a:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   b6e8c:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   b6e8e:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   b6e90:	f7fd f9e8 	bl	b4264 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b6e94:	a804      	add	r0, sp, #16
   b6e96:	f7fd f9e5 	bl	b4264 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   b6e9a:	e7ab      	b.n	b6df4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   b6e9c:	000b6f1d 	.word	0x000b6f1d

000b6ea0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	switch (__op)
   b6ea0:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b6ea2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6ea4:	4605      	mov	r5, r0
	switch (__op)
   b6ea6:	d103      	bne.n	b6eb0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b6ea8:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b6eaa:	6003      	str	r3, [r0, #0]
      }
   b6eac:	2000      	movs	r0, #0
   b6eae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  switch (__op)
   b6eb0:	2a02      	cmp	r2, #2
   b6eb2:	d010      	beq.n	b6ed6 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   b6eb4:	2a03      	cmp	r2, #3
   b6eb6:	d1f9      	bne.n	b6eac <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b6eb8:	6804      	ldr	r4, [r0, #0]
   b6eba:	2c00      	cmp	r4, #0
   b6ebc:	d0f6      	beq.n	b6eac <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
   b6ebe:	f104 0010 	add.w	r0, r4, #16
   b6ec2:	f7ff fe54 	bl	b6b6e <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b6ec6:	4620      	mov	r0, r4
   b6ec8:	f7ff fda1 	bl	b6a0e <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b6ecc:	2118      	movs	r1, #24
   b6ece:	4620      	mov	r0, r4
   b6ed0:	f7fd f8e3 	bl	b409a <_ZdlPvj>
   b6ed4:	e7ea      	b.n	b6eac <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b6ed6:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   b6ed8:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b6eda:	f7fd f8da 	bl	b4092 <_Znwj>
   b6ede:	4604      	mov	r4, r0
   b6ee0:	b150      	cbz	r0, b6ef8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x58>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   b6ee2:	4631      	mov	r1, r6
   b6ee4:	f7ff fec6 	bl	b6c74 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b6ee8:	6930      	ldr	r0, [r6, #16]
   b6eea:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b6eee:	b108      	cbz	r0, b6ef4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
   b6ef0:	f002 f9f0 	bl	b92d4 <strdup>
        type_(type) {
   b6ef4:	6120      	str	r0, [r4, #16]
   b6ef6:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   b6ef8:	602c      	str	r4, [r5, #0]
	}
   b6efa:	e7d7      	b.n	b6eac <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>

000b6efc <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   b6efc:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b6efe:	2300      	movs	r3, #0
   b6f00:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b6f02:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b6f04:	4604      	mov	r4, r0
   b6f06:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b6f08:	b12b      	cbz	r3, b6f16 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b6f0a:	2202      	movs	r2, #2
   b6f0c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b6f0e:	68eb      	ldr	r3, [r5, #12]
   b6f10:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b6f12:	68ab      	ldr	r3, [r5, #8]
   b6f14:	60a3      	str	r3, [r4, #8]
    }
   b6f16:	4620      	mov	r0, r4
   b6f18:	bd38      	pop	{r3, r4, r5, pc}
	...

000b6f1c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   b6f1c:	b5f0      	push	{r4, r5, r6, r7, lr}
   b6f1e:	b089      	sub	sp, #36	; 0x24
   b6f20:	4604      	mov	r4, r0
   b6f22:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   b6f24:	a801      	add	r0, sp, #4
   b6f26:	4611      	mov	r1, r2
   b6f28:	f7ff fe54 	bl	b6bd4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   b6f2c:	b1a4      	cbz	r4, b6f58 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   b6f2e:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b6f30:	b11d      	cbz	r5, b6f3a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   b6f32:	4628      	mov	r0, r5
   b6f34:	f002 f9ce 	bl	b92d4 <strdup>
   b6f38:	4605      	mov	r5, r0
   b6f3a:	a801      	add	r0, sp, #4
   b6f3c:	a903      	add	r1, sp, #12
        type_(type) {
   b6f3e:	9503      	str	r5, [sp, #12]
   b6f40:	f8ad 4010 	strh.w	r4, [sp, #16]
   b6f44:	f7ff fea6 	bl	b6c94 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b6f48:	a803      	add	r0, sp, #12
   b6f4a:	f7ff fe10 	bl	b6b6e <_ZN8particle5ErrorD1Ev>
   b6f4e:	a802      	add	r0, sp, #8
   b6f50:	f7fd f988 	bl	b4264 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b6f54:	b009      	add	sp, #36	; 0x24
   b6f56:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return _M_ptr; }
   b6f58:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b6f5a:	2301      	movs	r3, #1
   b6f5c:	e8d5 2f4f 	ldrexb	r2, [r5]
   b6f60:	2a00      	cmp	r2, #0
   b6f62:	d103      	bne.n	b6f6c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   b6f64:	e8c5 3f41 	strexb	r1, r3, [r5]
   b6f68:	2900      	cmp	r1, #0
   b6f6a:	d1f7      	bne.n	b6f5c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   b6f6c:	d1ef      	bne.n	b6f4e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   b6f6e:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   b6f70:	f3bf 8f5b 	dmb	ish
   b6f74:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b6f76:	1d2b      	adds	r3, r5, #4
   b6f78:	f3bf 8f5b 	dmb	ish
   b6f7c:	e853 6f00 	ldrex	r6, [r3]
   b6f80:	e843 4200 	strex	r2, r4, [r3]
   b6f84:	2a00      	cmp	r2, #0
   b6f86:	d1f9      	bne.n	b6f7c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   b6f88:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b6f8c:	2e00      	cmp	r6, #0
   b6f8e:	d0de      	beq.n	b6f4e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   b6f90:	4620      	mov	r0, r4
   b6f92:	f7ff fc29 	bl	b67e8 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b6f96:	4607      	mov	r7, r0
   b6f98:	b160      	cbz	r0, b6fb4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b6f9a:	f105 010c 	add.w	r1, r5, #12
   b6f9e:	4630      	mov	r0, r6
   b6fa0:	f7ff fe43 	bl	b6c2a <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   b6fa4:	4630      	mov	r0, r6
   b6fa6:	f7ff fd32 	bl	b6a0e <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b6faa:	2110      	movs	r1, #16
   b6fac:	4630      	mov	r0, r6
   b6fae:	f7fd f874 	bl	b409a <_ZdlPvj>
   b6fb2:	e7cc      	b.n	b6f4e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b6fb4:	4631      	mov	r1, r6
   b6fb6:	a803      	add	r0, sp, #12
   b6fb8:	f7ff ffa0 	bl	b6efc <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b6fbc:	7b2b      	ldrb	r3, [r5, #12]
   b6fbe:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b6fc2:	2010      	movs	r0, #16
   b6fc4:	f7fd f865 	bl	b4092 <_Znwj>
   b6fc8:	4605      	mov	r5, r0
   b6fca:	b1d0      	cbz	r0, b7002 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   b6fcc:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b6fce:	2014      	movs	r0, #20
   b6fd0:	f7fd f85f 	bl	b4092 <_Znwj>
   b6fd4:	4604      	mov	r4, r0
   b6fd6:	b178      	cbz	r0, b6ff8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   b6fd8:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b6fda:	4601      	mov	r1, r0
   b6fdc:	a803      	add	r0, sp, #12
   b6fde:	f7ff fd45 	bl	b6a6c <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6fe2:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b6fe4:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b6fe6:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6fe8:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   b6fea:	9205      	str	r2, [sp, #20]
   b6fec:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b6fee:	60e3      	str	r3, [r4, #12]
   b6ff0:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   b6ff4:	9206      	str	r2, [sp, #24]
   b6ff6:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   b6ff8:	4b06      	ldr	r3, [pc, #24]	; (b7014 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   b6ffa:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b6ffc:	4b06      	ldr	r3, [pc, #24]	; (b7018 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b6ffe:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b7000:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   b7002:	a803      	add	r0, sp, #12
   b7004:	f7ff fd03 	bl	b6a0e <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b7008:	2200      	movs	r2, #0
   b700a:	4629      	mov	r1, r5
   b700c:	4803      	ldr	r0, [pc, #12]	; (b701c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   b700e:	f7ff fbf3 	bl	b67f8 <application_thread_invoke>
   b7012:	e7c7      	b.n	b6fa4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   b7014:	000b6c3d 	.word	0x000b6c3d
   b7018:	000b7021 	.word	0x000b7021
   b701c:	000b69e7 	.word	0x000b69e7

000b7020 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	switch (__op)
   b7020:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b7022:	b570      	push	{r4, r5, r6, lr}
   b7024:	4604      	mov	r4, r0
	switch (__op)
   b7026:	d103      	bne.n	b7030 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b7028:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b702a:	6003      	str	r3, [r0, #0]
      }
   b702c:	2000      	movs	r0, #0
   b702e:	bd70      	pop	{r4, r5, r6, pc}
	  switch (__op)
   b7030:	2a02      	cmp	r2, #2
   b7032:	d00c      	beq.n	b704e <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   b7034:	2a03      	cmp	r2, #3
   b7036:	d1f9      	bne.n	b702c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b7038:	6804      	ldr	r4, [r0, #0]
   b703a:	2c00      	cmp	r4, #0
   b703c:	d0f6      	beq.n	b702c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
   b703e:	4620      	mov	r0, r4
   b7040:	f7ff fce5 	bl	b6a0e <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b7044:	2114      	movs	r1, #20
   b7046:	4620      	mov	r0, r4
   b7048:	f7fd f827 	bl	b409a <_ZdlPvj>
   b704c:	e7ee      	b.n	b702c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b704e:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   b7050:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b7052:	f7fd f81e 	bl	b4092 <_Znwj>
   b7056:	4605      	mov	r5, r0
   b7058:	b120      	cbz	r0, b7064 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x44>
      _Bind(const _Bind&) = default;
   b705a:	4631      	mov	r1, r6
   b705c:	f7ff ff4e 	bl	b6efc <_ZNSt8functionIFvRKbEEC1ERKS3_>
   b7060:	7c33      	ldrb	r3, [r6, #16]
   b7062:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   b7064:	6025      	str	r5, [r4, #0]
	}
   b7066:	e7e1      	b.n	b702c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>

000b7068 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b7068:	2200      	movs	r2, #0
   b706a:	6840      	ldr	r0, [r0, #4]
   b706c:	4611      	mov	r1, r2
   b706e:	f7ff bc2f 	b.w	b68d0 <network_listening>

000b7072 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b7072:	2200      	movs	r2, #0
   b7074:	6840      	ldr	r0, [r0, #4]
   b7076:	4611      	mov	r1, r2
   b7078:	f7ff bc3a 	b.w	b68f0 <network_get_listen_timeout>

000b707c <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b707c:	6840      	ldr	r0, [r0, #4]
   b707e:	2200      	movs	r2, #0
   b7080:	f7ff bc2e 	b.w	b68e0 <network_set_listen_timeout>

000b7084 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b7084:	6840      	ldr	r0, [r0, #4]
   b7086:	2200      	movs	r2, #0
   b7088:	f081 0101 	eor.w	r1, r1, #1
   b708c:	f7ff bc18 	b.w	b68c0 <network_listen>

000b7090 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b7090:	2300      	movs	r3, #0
   b7092:	6840      	ldr	r0, [r0, #4]
   b7094:	461a      	mov	r2, r3
   b7096:	4619      	mov	r1, r3
   b7098:	f7ff bc0a 	b.w	b68b0 <network_off>

000b709c <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b709c:	2300      	movs	r3, #0
   b709e:	6840      	ldr	r0, [r0, #4]
   b70a0:	461a      	mov	r2, r3
   b70a2:	4619      	mov	r1, r3
   b70a4:	f7ff bbfc 	b.w	b68a0 <network_on>

000b70a8 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b70a8:	2200      	movs	r2, #0
   b70aa:	6840      	ldr	r0, [r0, #4]
   b70ac:	4611      	mov	r1, r2
   b70ae:	f7ff bbef 	b.w	b6890 <network_ready>

000b70b2 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b70b2:	2200      	movs	r2, #0
   b70b4:	6840      	ldr	r0, [r0, #4]
   b70b6:	4611      	mov	r1, r2
   b70b8:	f7ff bbda 	b.w	b6870 <network_connecting>

000b70bc <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b70bc:	6840      	ldr	r0, [r0, #4]
   b70be:	2200      	movs	r2, #0
   b70c0:	2102      	movs	r1, #2
   b70c2:	f7ff bbdd 	b.w	b6880 <network_disconnect>

000b70c6 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b70c6:	2300      	movs	r3, #0
   b70c8:	6840      	ldr	r0, [r0, #4]
   b70ca:	461a      	mov	r2, r3
   b70cc:	f7ff bbc8 	b.w	b6860 <network_connect>

000b70d0 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   b70d0:	4b02      	ldr	r3, [pc, #8]	; (b70dc <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b70d2:	2203      	movs	r2, #3
   b70d4:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b70d6:	4a02      	ldr	r2, [pc, #8]	; (b70e0 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b70d8:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b70da:	4770      	bx	lr
   b70dc:	2003e69c 	.word	0x2003e69c
   b70e0:	000ba3b4 	.word	0x000ba3b4

000b70e4 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b70e4:	4770      	bx	lr

000b70e6 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b70e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b70e8:	4606      	mov	r6, r0
   b70ea:	4615      	mov	r5, r2
   b70ec:	460c      	mov	r4, r1
   b70ee:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b70f0:	42bc      	cmp	r4, r7
   b70f2:	d006      	beq.n	b7102 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b70f4:	6833      	ldr	r3, [r6, #0]
   b70f6:	f814 1b01 	ldrb.w	r1, [r4], #1
   b70fa:	689b      	ldr	r3, [r3, #8]
   b70fc:	4630      	mov	r0, r6
   b70fe:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b7100:	e7f6      	b.n	b70f0 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b7102:	4628      	mov	r0, r5
   b7104:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b7106 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b7106:	7c00      	ldrb	r0, [r0, #16]
   b7108:	2200      	movs	r2, #0
   b710a:	f7ff ba45 	b.w	b6598 <hal_i2c_write>

000b710e <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b710e:	7c00      	ldrb	r0, [r0, #16]
   b7110:	2100      	movs	r1, #0
   b7112:	f7ff ba49 	b.w	b65a8 <hal_i2c_available>

000b7116 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b7116:	7c00      	ldrb	r0, [r0, #16]
   b7118:	2100      	movs	r1, #0
   b711a:	f7ff ba4d 	b.w	b65b8 <hal_i2c_read>

000b711e <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b711e:	7c00      	ldrb	r0, [r0, #16]
   b7120:	2100      	movs	r1, #0
   b7122:	f7ff ba51 	b.w	b65c8 <hal_i2c_peek>

000b7126 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b7126:	7c00      	ldrb	r0, [r0, #16]
   b7128:	2100      	movs	r1, #0
   b712a:	f7ff ba55 	b.w	b65d8 <hal_i2c_flush>

000b712e <_ZN7TwoWireD0Ev>:
   b712e:	b510      	push	{r4, lr}
   b7130:	2114      	movs	r1, #20
   b7132:	4604      	mov	r4, r0
   b7134:	f7fc ffb1 	bl	b409a <_ZdlPvj>
   b7138:	4620      	mov	r0, r4
   b713a:	bd10      	pop	{r4, pc}

000b713c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b713c:	b538      	push	{r3, r4, r5, lr}
   b713e:	4604      	mov	r4, r0
   b7140:	4615      	mov	r5, r2
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b7142:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b7146:	2200      	movs	r2, #0
   b7148:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b714c:	4b09      	ldr	r3, [pc, #36]	; (b7174 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
  _i2c = i2c;
   b714e:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b7150:	4608      	mov	r0, r1
   b7152:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
   b7154:	4629      	mov	r1, r5
   b7156:	f7ff fa47 	bl	b65e8 <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b715a:	30bf      	adds	r0, #191	; 0xbf
   b715c:	d108      	bne.n	b7170 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
   b715e:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b7160:	07db      	lsls	r3, r3, #31
   b7162:	d505      	bpl.n	b7170 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
   b7164:	6868      	ldr	r0, [r5, #4]
   b7166:	f7ff fbe3 	bl	b6930 <free>
    free(conf.tx_buffer);
   b716a:	68e8      	ldr	r0, [r5, #12]
   b716c:	f7ff fbe0 	bl	b6930 <free>
}
   b7170:	4620      	mov	r0, r4
   b7172:	bd38      	pop	{r3, r4, r5, pc}
   b7174:	000ba3f0 	.word	0x000ba3f0

000b7178 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   b7178:	2300      	movs	r3, #0
   b717a:	7c00      	ldrb	r0, [r0, #16]
   b717c:	461a      	mov	r2, r3
   b717e:	4619      	mov	r1, r3
   b7180:	f7ff b9f2 	b.w	b6568 <hal_i2c_begin>

000b7184 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   b7184:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   b7186:	2200      	movs	r2, #0
   b7188:	2314      	movs	r3, #20
   b718a:	e9cd 2201 	strd	r2, r2, [sp, #4]
   b718e:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   b7192:	780b      	ldrb	r3, [r1, #0]
   b7194:	f88d 3008 	strb.w	r3, [sp, #8]
   b7198:	684b      	ldr	r3, [r1, #4]
   b719a:	9303      	str	r3, [sp, #12]
   b719c:	68cb      	ldr	r3, [r1, #12]
   b719e:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   b71a0:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   b71a2:	7a0b      	ldrb	r3, [r1, #8]
   b71a4:	9305      	str	r3, [sp, #20]
   b71a6:	a901      	add	r1, sp, #4
   b71a8:	f7ff fa36 	bl	b6618 <hal_i2c_request_ex>
}
   b71ac:	b007      	add	sp, #28
   b71ae:	f85d fb04 	ldr.w	pc, [sp], #4

000b71b2 <_ZN7TwoWire11requestFromEhjh>:
{
   b71b2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   b71b4:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   b71b6:	f88d 1000 	strb.w	r1, [sp]
   b71ba:	f04f 0164 	mov.w	r1, #100	; 0x64
   b71be:	9103      	str	r1, [sp, #12]
   b71c0:	bf18      	it	ne
   b71c2:	2301      	movne	r3, #1
   b71c4:	4669      	mov	r1, sp
    size_ = size;
   b71c6:	9201      	str	r2, [sp, #4]
   b71c8:	f88d 3008 	strb.w	r3, [sp, #8]
   b71cc:	f7ff ffda 	bl	b7184 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   b71d0:	b005      	add	sp, #20
   b71d2:	f85d fb04 	ldr.w	pc, [sp], #4

000b71d6 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   b71d6:	7c00      	ldrb	r0, [r0, #16]
   b71d8:	2200      	movs	r2, #0
   b71da:	f7ff b9cd 	b.w	b6578 <hal_i2c_begin_transmission>

000b71de <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   b71de:	b2c9      	uxtb	r1, r1
   b71e0:	f7ff bff9 	b.w	b71d6 <_ZN7TwoWire17beginTransmissionEh>

000b71e4 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   b71e4:	7c00      	ldrb	r0, [r0, #16]
   b71e6:	2200      	movs	r2, #0
   b71e8:	f7ff b9ce 	b.w	b6588 <hal_i2c_end_transmission>

000b71ec <_ZN7TwoWire4lockEv>:
{
  hal_i2c_reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
   b71ec:	b508      	push	{r3, lr}
  return hal_i2c_lock(_i2c, NULL) == 0;
   b71ee:	2100      	movs	r1, #0
   b71f0:	7c00      	ldrb	r0, [r0, #16]
   b71f2:	f7ff fa01 	bl	b65f8 <hal_i2c_lock>
}
   b71f6:	fab0 f080 	clz	r0, r0
   b71fa:	0940      	lsrs	r0, r0, #5
   b71fc:	bd08      	pop	{r3, pc}

000b71fe <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
   b71fe:	b508      	push	{r3, lr}
  return hal_i2c_unlock(_i2c, NULL) == 0;
   b7200:	2100      	movs	r1, #0
   b7202:	7c00      	ldrb	r0, [r0, #16]
   b7204:	f7ff fa00 	bl	b6608 <hal_i2c_unlock>
}
   b7208:	fab0 f080 	clz	r0, r0
   b720c:	0940      	lsrs	r0, r0, #5
   b720e:	bd08      	pop	{r3, pc}

000b7210 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b7210:	4770      	bx	lr

000b7212 <_ZN9IPAddressD0Ev>:
   b7212:	b510      	push	{r4, lr}
   b7214:	2118      	movs	r1, #24
   b7216:	4604      	mov	r4, r0
   b7218:	f7fc ff3f 	bl	b409a <_ZdlPvj>
   b721c:	4620      	mov	r0, r4
   b721e:	bd10      	pop	{r4, pc}

000b7220 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b7220:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b7222:	7d03      	ldrb	r3, [r0, #20]
   b7224:	2b06      	cmp	r3, #6
{
   b7226:	b08d      	sub	sp, #52	; 0x34
   b7228:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b722a:	f100 0704 	add.w	r7, r0, #4
   b722e:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b7232:	d012      	beq.n	b725a <_ZNK9IPAddress7printToER5Print+0x3a>
   b7234:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b7238:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b723c:	220a      	movs	r2, #10
   b723e:	4630      	mov	r0, r6
   b7240:	f001 fa93 	bl	b876a <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b7244:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b7246:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b7248:	d019      	beq.n	b727e <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b724a:	2c00      	cmp	r4, #0
   b724c:	d0f4      	beq.n	b7238 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b724e:	212e      	movs	r1, #46	; 0x2e
   b7250:	4630      	mov	r0, r6
   b7252:	f001 fa7b 	bl	b874c <_ZN5Print5printEc>
   b7256:	4404      	add	r4, r0
   b7258:	e7ee      	b.n	b7238 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b725a:	232f      	movs	r3, #47	; 0x2f
   b725c:	466a      	mov	r2, sp
   b725e:	4639      	mov	r1, r7
   b7260:	200a      	movs	r0, #10
		buf[0] = 0;
   b7262:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b7266:	f7ff f9df 	bl	b6628 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b726a:	4668      	mov	r0, sp
   b726c:	f002 f84f 	bl	b930e <strlen>
   b7270:	6833      	ldr	r3, [r6, #0]
   b7272:	4602      	mov	r2, r0
   b7274:	68db      	ldr	r3, [r3, #12]
   b7276:	4669      	mov	r1, sp
   b7278:	4630      	mov	r0, r6
   b727a:	4798      	blx	r3
   b727c:	4604      	mov	r4, r0
    }
    return n;
}
   b727e:	4620      	mov	r0, r4
   b7280:	b00d      	add	sp, #52	; 0x34
   b7282:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b7284 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b7284:	b510      	push	{r4, lr}
   b7286:	4b05      	ldr	r3, [pc, #20]	; (b729c <_ZN9IPAddressC1Ev+0x18>)
   b7288:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b728a:	2211      	movs	r2, #17
   b728c:	f840 3b04 	str.w	r3, [r0], #4
   b7290:	2100      	movs	r1, #0
   b7292:	f001 ffbf 	bl	b9214 <memset>
}
   b7296:	4620      	mov	r0, r4
   b7298:	bd10      	pop	{r4, pc}
   b729a:	bf00      	nop
   b729c:	000ba418 	.word	0x000ba418

000b72a0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b72a0:	4603      	mov	r3, r0
   b72a2:	4a07      	ldr	r2, [pc, #28]	; (b72c0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b72a4:	b510      	push	{r4, lr}
   b72a6:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b72aa:	f101 0210 	add.w	r2, r1, #16
   b72ae:	f851 4b04 	ldr.w	r4, [r1], #4
   b72b2:	f843 4b04 	str.w	r4, [r3], #4
   b72b6:	4291      	cmp	r1, r2
   b72b8:	d1f9      	bne.n	b72ae <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b72ba:	780a      	ldrb	r2, [r1, #0]
   b72bc:	701a      	strb	r2, [r3, #0]
}
   b72be:	bd10      	pop	{r4, pc}
   b72c0:	000ba418 	.word	0x000ba418

000b72c4 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b72c4:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b72c6:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b72ca:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b72ce:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b72d2:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b72d6:	2304      	movs	r3, #4
   b72d8:	6041      	str	r1, [r0, #4]
   b72da:	7503      	strb	r3, [r0, #20]
}
   b72dc:	bd10      	pop	{r4, pc}
	...

000b72e0 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b72e0:	b507      	push	{r0, r1, r2, lr}
   b72e2:	4b06      	ldr	r3, [pc, #24]	; (b72fc <_ZN9IPAddressC1EPKh+0x1c>)
   b72e4:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b72e6:	78cb      	ldrb	r3, [r1, #3]
   b72e8:	9300      	str	r3, [sp, #0]
   b72ea:	788b      	ldrb	r3, [r1, #2]
   b72ec:	784a      	ldrb	r2, [r1, #1]
   b72ee:	7809      	ldrb	r1, [r1, #0]
   b72f0:	f7ff ffe8 	bl	b72c4 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b72f4:	b003      	add	sp, #12
   b72f6:	f85d fb04 	ldr.w	pc, [sp], #4
   b72fa:	bf00      	nop
   b72fc:	000ba418 	.word	0x000ba418

000b7300 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
   b7300:	f100 0310 	add.w	r3, r0, #16
   b7304:	2201      	movs	r2, #1
    do {
        if (t->type == JSMN_OBJECT) {
   b7306:	f813 1c10 	ldrb.w	r1, [r3, #-16]
   b730a:	2901      	cmp	r1, #1
   b730c:	4618      	mov	r0, r3
   b730e:	d108      	bne.n	b7322 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
   b7310:	f853 1c04 	ldr.w	r1, [r3, #-4]
   b7314:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
   b7318:	3a01      	subs	r2, #1
   b731a:	f103 0310 	add.w	r3, r3, #16
   b731e:	d1f2      	bne.n	b7306 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
   b7320:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
   b7322:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
   b7324:	bf04      	itt	eq
   b7326:	f853 1c04 	ldreq.w	r1, [r3, #-4]
   b732a:	1852      	addeq	r2, r2, r1
   b732c:	e7f4      	b.n	b7318 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

000b732e <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
   b732e:	b40e      	push	{r1, r2, r3}
   b7330:	b5f0      	push	{r4, r5, r6, r7, lr}
   b7332:	b088      	sub	sp, #32
   b7334:	af00      	add	r7, sp, #0
   b7336:	f107 0534 	add.w	r5, r7, #52	; 0x34
    char buf[16];
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b733a:	2110      	movs	r1, #16
void spark::JSONWriter::printf(const char *fmt, ...) {
   b733c:	f855 2b04 	ldr.w	r2, [r5], #4
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b7340:	607a      	str	r2, [r7, #4]
void spark::JSONWriter::printf(const char *fmt, ...) {
   b7342:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b7344:	462b      	mov	r3, r5
   b7346:	1878      	adds	r0, r7, r1
    va_start(args, fmt);
   b7348:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b734a:	f7ff fb19 	bl	b6980 <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
   b734e:	280f      	cmp	r0, #15
   b7350:	687a      	ldr	r2, [r7, #4]
   b7352:	d91a      	bls.n	b738a <_ZN5spark10JSONWriter6printfEPKcz+0x5c>
        char buf[n + 1]; // Use larger buffer
   b7354:	f100 0308 	add.w	r3, r0, #8
   b7358:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
   b735c:	466e      	mov	r6, sp
        char buf[n + 1]; // Use larger buffer
   b735e:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   b7362:	1c41      	adds	r1, r0, #1
   b7364:	462b      	mov	r3, r5
   b7366:	4668      	mov	r0, sp
        va_start(args, fmt);
   b7368:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   b736a:	f7ff fb09 	bl	b6980 <vsnprintf>
        if (n > 0) {
   b736e:	1e02      	subs	r2, r0, #0
   b7370:	dd04      	ble.n	b737c <_ZN5spark10JSONWriter6printfEPKcz+0x4e>
            write(buf, n);
   b7372:	6823      	ldr	r3, [r4, #0]
   b7374:	4669      	mov	r1, sp
   b7376:	689b      	ldr	r3, [r3, #8]
   b7378:	4620      	mov	r0, r4
   b737a:	4798      	blx	r3
   b737c:	46b5      	mov	sp, r6
    } else if (n > 0) {
        write(buf, n);
    }
}
   b737e:	3720      	adds	r7, #32
   b7380:	46bd      	mov	sp, r7
   b7382:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b7386:	b003      	add	sp, #12
   b7388:	4770      	bx	lr
    } else if (n > 0) {
   b738a:	2800      	cmp	r0, #0
   b738c:	d0f7      	beq.n	b737e <_ZN5spark10JSONWriter6printfEPKcz+0x50>
        write(buf, n);
   b738e:	6823      	ldr	r3, [r4, #0]
   b7390:	4602      	mov	r2, r0
   b7392:	689b      	ldr	r3, [r3, #8]
   b7394:	f107 0110 	add.w	r1, r7, #16
   b7398:	4620      	mov	r0, r4
   b739a:	4798      	blx	r3
}
   b739c:	e7ef      	b.n	b737e <_ZN5spark10JSONWriter6printfEPKcz+0x50>

000b739e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>:
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b739e:	b538      	push	{r3, r4, r5, lr}
   b73a0:	680b      	ldr	r3, [r1, #0]
   b73a2:	6003      	str	r3, [r0, #0]
   b73a4:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
   b73a6:	6843      	ldr	r3, [r0, #4]
   b73a8:	429d      	cmp	r5, r3
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b73aa:	4604      	mov	r4, r0
	if (__tmp != _M_pi)
   b73ac:	d008      	beq.n	b73c0 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x22>
	    if (__tmp != 0)
   b73ae:	b115      	cbz	r5, b73b6 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x18>
    { ++_M_use_count; }
   b73b0:	686b      	ldr	r3, [r5, #4]
   b73b2:	3301      	adds	r3, #1
   b73b4:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
   b73b6:	6860      	ldr	r0, [r4, #4]
   b73b8:	b108      	cbz	r0, b73be <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x20>
	      _M_pi->_M_release();
   b73ba:	f7ff fb31 	bl	b6a20 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
   b73be:	6065      	str	r5, [r4, #4]
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b73c0:	bd38      	pop	{r3, r4, r5, pc}

000b73c2 <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
   b73c2:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   b73c4:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
   b73c6:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   b73ca:	689b      	ldr	r3, [r3, #8]
   b73cc:	2201      	movs	r2, #1
   b73ce:	f10d 0107 	add.w	r1, sp, #7
   b73d2:	4798      	blx	r3
}
   b73d4:	b003      	add	sp, #12
   b73d6:	f85d fb04 	ldr.w	pc, [sp], #4

000b73da <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
   b73da:	460b      	mov	r3, r1
   b73dc:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
   b73de:	2200      	movs	r2, #0
   b73e0:	b510      	push	{r4, lr}
      constexpr __shared_count() noexcept : _M_pi(0)
   b73e2:	e9c0 2200 	strd	r2, r2, [r0]
   b73e6:	4604      	mov	r4, r0
        t_ = t;
   b73e8:	6083      	str	r3, [r0, #8]
    if (t) {
   b73ea:	b90b      	cbnz	r3, b73f0 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
}
   b73ec:	4620      	mov	r0, r4
   b73ee:	bd10      	pop	{r4, pc}
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count() == 0 && get() == nullptr
       */
      constexpr shared_ptr(nullptr_t) noexcept : shared_ptr() { }

      shared_ptr& operator=(const shared_ptr&) noexcept = default;
   b73f0:	f7ff ffd5 	bl	b739e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
   b73f4:	e7fa      	b.n	b73ec <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

000b73f6 <_ZNK5spark9JSONValue4typeEv>:
    if (!t_) {
   b73f6:	6883      	ldr	r3, [r0, #8]
   b73f8:	b1eb      	cbz	r3, b7436 <_ZNK5spark9JSONValue4typeEv+0x40>
    switch (t_->type) {
   b73fa:	781a      	ldrb	r2, [r3, #0]
   b73fc:	2a03      	cmp	r2, #3
   b73fe:	d81a      	bhi.n	b7436 <_ZNK5spark9JSONValue4typeEv+0x40>
   b7400:	e8df f002 	tbb	[pc, r2]
   b7404:	1b021704 	.word	0x1b021704
   b7408:	2005      	movs	r0, #5
   b740a:	4770      	bx	lr
        const char c = d_->json[t_->start];
   b740c:	6802      	ldr	r2, [r0, #0]
   b740e:	685b      	ldr	r3, [r3, #4]
   b7410:	6852      	ldr	r2, [r2, #4]
   b7412:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
   b7414:	282d      	cmp	r0, #45	; 0x2d
   b7416:	d012      	beq.n	b743e <_ZNK5spark9JSONValue4typeEv+0x48>
   b7418:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   b741c:	2b09      	cmp	r3, #9
   b741e:	d90e      	bls.n	b743e <_ZNK5spark9JSONValue4typeEv+0x48>
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
   b7420:	2874      	cmp	r0, #116	; 0x74
   b7422:	d00e      	beq.n	b7442 <_ZNK5spark9JSONValue4typeEv+0x4c>
   b7424:	2866      	cmp	r0, #102	; 0x66
   b7426:	d00c      	beq.n	b7442 <_ZNK5spark9JSONValue4typeEv+0x4c>
        return JSON_TYPE_INVALID;
   b7428:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
   b742c:	4258      	negs	r0, r3
   b742e:	4158      	adcs	r0, r3
   b7430:	4770      	bx	lr
        return JSON_TYPE_OBJECT;
   b7432:	2006      	movs	r0, #6
   b7434:	4770      	bx	lr
        return JSON_TYPE_INVALID;
   b7436:	2000      	movs	r0, #0
   b7438:	4770      	bx	lr
        return JSON_TYPE_STRING;
   b743a:	2004      	movs	r0, #4
   b743c:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
   b743e:	2003      	movs	r0, #3
   b7440:	4770      	bx	lr
            return JSON_TYPE_BOOL;
   b7442:	2002      	movs	r0, #2
}
   b7444:	4770      	bx	lr

000b7446 <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
   b7446:	b510      	push	{r4, lr}
   b7448:	4604      	mov	r4, r0
    switch (type()) {
   b744a:	f7ff ffd4 	bl	b73f6 <_ZNK5spark9JSONValue4typeEv>
   b744e:	2802      	cmp	r0, #2
   b7450:	d00e      	beq.n	b7470 <_ZNK5spark9JSONValue5toIntEv+0x2a>
   b7452:	1ec3      	subs	r3, r0, #3
   b7454:	b2db      	uxtb	r3, r3
   b7456:	2b01      	cmp	r3, #1
   b7458:	d814      	bhi.n	b7484 <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
   b745a:	6822      	ldr	r2, [r4, #0]
   b745c:	68a3      	ldr	r3, [r4, #8]
   b745e:	6850      	ldr	r0, [r2, #4]
   b7460:	685b      	ldr	r3, [r3, #4]
}
   b7462:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
   b7466:	220a      	movs	r2, #10
   b7468:	2100      	movs	r1, #0
   b746a:	4418      	add	r0, r3
   b746c:	f002 b802 	b.w	b9474 <strtol>
        const char* const s = d_->json + t_->start;
   b7470:	6822      	ldr	r2, [r4, #0]
   b7472:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   b7474:	6852      	ldr	r2, [r2, #4]
   b7476:	685b      	ldr	r3, [r3, #4]
   b7478:	5cd0      	ldrb	r0, [r2, r3]
   b747a:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
   b747e:	4258      	negs	r0, r3
   b7480:	4158      	adcs	r0, r3
}
   b7482:	bd10      	pop	{r4, pc}
    switch (type()) {
   b7484:	2000      	movs	r0, #0
   b7486:	e7fc      	b.n	b7482 <_ZNK5spark9JSONValue5toIntEv+0x3c>

000b7488 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
   b7488:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   b748a:	2300      	movs	r3, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   b748c:	e9c0 3300 	strd	r3, r3, [r0]
   b7490:	4604      	mov	r4, r0
        n_(0) {
   b7492:	480e      	ldr	r0, [pc, #56]	; (b74cc <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
   b7494:	e9c4 0302 	strd	r0, r3, [r4, #8]
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
   b7498:	b1a9      	cbz	r1, b74c6 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
   b749a:	780b      	ldrb	r3, [r1, #0]
   b749c:	2b03      	cmp	r3, #3
   b749e:	d006      	beq.n	b74ae <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
   b74a0:	b98b      	cbnz	r3, b74c6 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
   b74a2:	6813      	ldr	r3, [r2, #0]
   b74a4:	6858      	ldr	r0, [r3, #4]
   b74a6:	684b      	ldr	r3, [r1, #4]
   b74a8:	5cc3      	ldrb	r3, [r0, r3]
   b74aa:	2b6e      	cmp	r3, #110	; 0x6e
   b74ac:	d007      	beq.n	b74be <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x36>
            s_ = d->json + t->start;
   b74ae:	6813      	ldr	r3, [r2, #0]
   b74b0:	684d      	ldr	r5, [r1, #4]
   b74b2:	6858      	ldr	r0, [r3, #4]
            n_ = t->end - t->start;
   b74b4:	688b      	ldr	r3, [r1, #8]
            s_ = d->json + t->start;
   b74b6:	4428      	add	r0, r5
            n_ = t->end - t->start;
   b74b8:	1b5b      	subs	r3, r3, r5
            s_ = d->json + t->start;
   b74ba:	60a0      	str	r0, [r4, #8]
            n_ = t->end - t->start;
   b74bc:	60e3      	str	r3, [r4, #12]
   b74be:	4611      	mov	r1, r2
   b74c0:	4620      	mov	r0, r4
   b74c2:	f7ff ff6c 	bl	b739e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
   b74c6:	4620      	mov	r0, r4
   b74c8:	bd38      	pop	{r3, r4, r5, pc}
   b74ca:	bf00      	nop
   b74cc:	000ba487 	.word	0x000ba487

000b74d0 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
   b74d0:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   b74d2:	2500      	movs	r5, #0
   b74d4:	460b      	mov	r3, r1
      constexpr __shared_count() noexcept : _M_pi(0)
   b74d6:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
   b74da:	e9c0 5502 	strd	r5, r5, [r0, #8]
   b74de:	e9c0 5504 	strd	r5, r5, [r0, #16]
   b74e2:	4604      	mov	r4, r0
   b74e4:	4611      	mov	r1, r2
    if (t && t->type == JSMN_OBJECT) {
   b74e6:	b14b      	cbz	r3, b74fc <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
   b74e8:	781a      	ldrb	r2, [r3, #0]
   b74ea:	2a01      	cmp	r2, #1
   b74ec:	d106      	bne.n	b74fc <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
   b74ee:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
   b74f2:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
   b74f4:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
   b74f6:	6143      	str	r3, [r0, #20]
   b74f8:	f7ff ff51 	bl	b739e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
   b74fc:	4620      	mov	r0, r4
   b74fe:	bd38      	pop	{r3, r4, r5, pc}

000b7500 <_ZN5spark18JSONObjectIterator4nextEv>:
bool spark::JSONObjectIterator::next() {
   b7500:	b510      	push	{r4, lr}
    if (!n_) {
   b7502:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
   b7504:	4604      	mov	r4, r0
    if (!n_) {
   b7506:	b163      	cbz	r3, b7522 <_ZN5spark18JSONObjectIterator4nextEv+0x22>
    k_ = t_; // Name
   b7508:	6880      	ldr	r0, [r0, #8]
   b750a:	60e0      	str	r0, [r4, #12]
    --n_;
   b750c:	3b01      	subs	r3, #1
    ++t_;
   b750e:	3010      	adds	r0, #16
   b7510:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
   b7512:	6120      	str	r0, [r4, #16]
    --n_;
   b7514:	6163      	str	r3, [r4, #20]
    if (n_) {
   b7516:	b113      	cbz	r3, b751e <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
   b7518:	f7ff fef2 	bl	b7300 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
   b751c:	60a0      	str	r0, [r4, #8]
    return true;
   b751e:	2001      	movs	r0, #1
   b7520:	e000      	b.n	b7524 <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
   b7522:	4618      	mov	r0, r3
}
   b7524:	bd10      	pop	{r4, pc}

000b7526 <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
   b7526:	b510      	push	{r4, lr}
    write('}');
   b7528:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
   b752a:	4604      	mov	r4, r0
    write('}');
   b752c:	f7ff ff49 	bl	b73c2 <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
   b7530:	2301      	movs	r3, #1
   b7532:	7123      	strb	r3, [r4, #4]
}
   b7534:	4620      	mov	r0, r4
   b7536:	bd10      	pop	{r4, pc}

000b7538 <_ZN5spark10JSONWriter14writeSeparatorEv>:

void spark::JSONWriter::writeSeparator() {
   b7538:	b508      	push	{r3, lr}
    switch (state_) {
   b753a:	7903      	ldrb	r3, [r0, #4]
   b753c:	2b01      	cmp	r3, #1
   b753e:	d002      	beq.n	b7546 <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
   b7540:	2b02      	cmp	r3, #2
   b7542:	d004      	beq.n	b754e <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
        write(':');
        break;
    default:
        break;
    }
}
   b7544:	bd08      	pop	{r3, pc}
        write(',');
   b7546:	212c      	movs	r1, #44	; 0x2c
        write(':');
   b7548:	f7ff ff3b 	bl	b73c2 <_ZN5spark10JSONWriter5writeEc>
}
   b754c:	e7fa      	b.n	b7544 <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
   b754e:	213a      	movs	r1, #58	; 0x3a
   b7550:	e7fa      	b.n	b7548 <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

000b7552 <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
   b7552:	b510      	push	{r4, lr}
   b7554:	4604      	mov	r4, r0
    writeSeparator();
   b7556:	f7ff ffef 	bl	b7538 <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
   b755a:	4620      	mov	r0, r4
   b755c:	217b      	movs	r1, #123	; 0x7b
   b755e:	f7ff ff30 	bl	b73c2 <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
   b7562:	2300      	movs	r3, #0
   b7564:	7123      	strb	r3, [r4, #4]
}
   b7566:	4620      	mov	r0, r4
   b7568:	bd10      	pop	{r4, pc}
	...

000b756c <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
   b756c:	b513      	push	{r0, r1, r4, lr}
   b756e:	4604      	mov	r4, r0
   b7570:	9101      	str	r1, [sp, #4]
    writeSeparator();
   b7572:	f7ff ffe1 	bl	b7538 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
   b7576:	6823      	ldr	r3, [r4, #0]
   b7578:	9a01      	ldr	r2, [sp, #4]
   b757a:	68db      	ldr	r3, [r3, #12]
   b757c:	4903      	ldr	r1, [pc, #12]	; (b758c <_ZN5spark10JSONWriter5valueEi+0x20>)
   b757e:	4620      	mov	r0, r4
   b7580:	4798      	blx	r3
    state_ = NEXT;
   b7582:	2301      	movs	r3, #1
}
   b7584:	4620      	mov	r0, r4
    state_ = NEXT;
   b7586:	7123      	strb	r3, [r4, #4]
}
   b7588:	b002      	add	sp, #8
   b758a:	bd10      	pop	{r4, pc}
   b758c:	000b98b6 	.word	0x000b98b6

000b7590 <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
   b7590:	b513      	push	{r0, r1, r4, lr}
   b7592:	4604      	mov	r4, r0
   b7594:	9101      	str	r1, [sp, #4]
    writeSeparator();
   b7596:	f7ff ffcf 	bl	b7538 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
   b759a:	6823      	ldr	r3, [r4, #0]
   b759c:	9a01      	ldr	r2, [sp, #4]
   b759e:	68db      	ldr	r3, [r3, #12]
   b75a0:	4903      	ldr	r1, [pc, #12]	; (b75b0 <_ZN5spark10JSONWriter5valueEj+0x20>)
   b75a2:	4620      	mov	r0, r4
   b75a4:	4798      	blx	r3
    state_ = NEXT;
   b75a6:	2301      	movs	r3, #1
}
   b75a8:	4620      	mov	r0, r4
    state_ = NEXT;
   b75aa:	7123      	strb	r3, [r4, #4]
}
   b75ac:	b002      	add	sp, #8
   b75ae:	bd10      	pop	{r4, pc}
   b75b0:	000ba424 	.word	0x000ba424

000b75b4 <_ZN5spark10JSONWriter12writeEscapedEPKcj>:

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   b75b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b75b8:	460d      	mov	r5, r1
    write('"');
   b75ba:	2122      	movs	r1, #34	; 0x22
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   b75bc:	4690      	mov	r8, r2
   b75be:	4604      	mov	r4, r0
    write('"');
   b75c0:	f7ff feff 	bl	b73c2 <_ZN5spark10JSONWriter5writeEc>
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
   b75c4:	f8df 90a4 	ldr.w	r9, [pc, #164]	; b766c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xb8>
    const char* const end = str + size;
   b75c8:	44a8      	add	r8, r5
    const char *s = str;
   b75ca:	462f      	mov	r7, r5
    while (s != end) {
   b75cc:	4547      	cmp	r7, r8
   b75ce:	46ba      	mov	sl, r7
   b75d0:	d03d      	beq.n	b764e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9a>
        const char c = *s;
   b75d2:	f817 6b01 	ldrb.w	r6, [r7], #1
        if (c == '"' || c == '\\' || !std::isprint((unsigned char)c)) {
   b75d6:	2e22      	cmp	r6, #34	; 0x22
   b75d8:	d006      	beq.n	b75e8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   b75da:	2e5c      	cmp	r6, #92	; 0x5c
   b75dc:	d004      	beq.n	b75e8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   b75de:	4630      	mov	r0, r6
   b75e0:	f001 fde8 	bl	b91b4 <isprint>
   b75e4:	2800      	cmp	r0, #0
   b75e6:	d1f1      	bne.n	b75cc <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
   b75e8:	6823      	ldr	r3, [r4, #0]
   b75ea:	ebaa 0205 	sub.w	r2, sl, r5
   b75ee:	689b      	ldr	r3, [r3, #8]
   b75f0:	4629      	mov	r1, r5
   b75f2:	4620      	mov	r0, r4
   b75f4:	4798      	blx	r3
            write('\\');
   b75f6:	215c      	movs	r1, #92	; 0x5c
   b75f8:	4620      	mov	r0, r4
   b75fa:	f7ff fee2 	bl	b73c2 <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
   b75fe:	2e0d      	cmp	r6, #13
   b7600:	d80a      	bhi.n	b7618 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
   b7602:	2e07      	cmp	r6, #7
   b7604:	d91c      	bls.n	b7640 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   b7606:	f1a6 0308 	sub.w	r3, r6, #8
   b760a:	2b05      	cmp	r3, #5
   b760c:	d818      	bhi.n	b7640 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   b760e:	e8df f003 	tbb	[pc, r3]
   b7612:	0f0d      	.short	0x0f0d
   b7614:	15131711 	.word	0x15131711
   b7618:	2e22      	cmp	r6, #34	; 0x22
   b761a:	d001      	beq.n	b7620 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6c>
   b761c:	2e5c      	cmp	r6, #92	; 0x5c
   b761e:	d10f      	bne.n	b7640 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
                write(c);
   b7620:	4631      	mov	r1, r6
                write('b');
   b7622:	4620      	mov	r0, r4
   b7624:	f7ff fecd 	bl	b73c2 <_ZN5spark10JSONWriter5writeEc>
                break;
            }
            str = s + 1;
   b7628:	463d      	mov	r5, r7
    while (s != end) {
   b762a:	e7cf      	b.n	b75cc <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
   b762c:	2162      	movs	r1, #98	; 0x62
   b762e:	e7f8      	b.n	b7622 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('t');
   b7630:	2174      	movs	r1, #116	; 0x74
   b7632:	e7f6      	b.n	b7622 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('n');
   b7634:	216e      	movs	r1, #110	; 0x6e
   b7636:	e7f4      	b.n	b7622 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('f');
   b7638:	2166      	movs	r1, #102	; 0x66
   b763a:	e7f2      	b.n	b7622 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('r');
   b763c:	2172      	movs	r1, #114	; 0x72
   b763e:	e7f0      	b.n	b7622 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                printf("u%04x", (unsigned)c);
   b7640:	6823      	ldr	r3, [r4, #0]
   b7642:	4632      	mov	r2, r6
   b7644:	68db      	ldr	r3, [r3, #12]
   b7646:	4649      	mov	r1, r9
   b7648:	4620      	mov	r0, r4
   b764a:	4798      	blx	r3
                break;
   b764c:	e7ec      	b.n	b7628 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x74>
        }
        ++s;
    }
    if (s != str) {
   b764e:	42bd      	cmp	r5, r7
   b7650:	d005      	beq.n	b765e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xaa>
        write(str, s - str); // Write remaining characters
   b7652:	6823      	ldr	r3, [r4, #0]
   b7654:	1b7a      	subs	r2, r7, r5
   b7656:	689b      	ldr	r3, [r3, #8]
   b7658:	4629      	mov	r1, r5
   b765a:	4620      	mov	r0, r4
   b765c:	4798      	blx	r3
    }
    write('"');
   b765e:	2122      	movs	r1, #34	; 0x22
   b7660:	4620      	mov	r0, r4
   b7662:	f7ff feae 	bl	b73c2 <_ZN5spark10JSONWriter5writeEc>
}
   b7666:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b766a:	bf00      	nop
   b766c:	000ba427 	.word	0x000ba427

000b7670 <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
   b7670:	b513      	push	{r0, r1, r4, lr}
   b7672:	4604      	mov	r4, r0
   b7674:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   b7678:	f7ff ff5e 	bl	b7538 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
   b767c:	4620      	mov	r0, r4
   b767e:	e9dd 2100 	ldrd	r2, r1, [sp]
   b7682:	f7ff ff97 	bl	b75b4 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
   b7686:	2302      	movs	r3, #2
}
   b7688:	4620      	mov	r0, r4
    state_ = VALUE;
   b768a:	7123      	strb	r3, [r4, #4]
}
   b768c:	b002      	add	sp, #8
   b768e:	bd10      	pop	{r4, pc}

000b7690 <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
   b7690:	b513      	push	{r0, r1, r4, lr}
   b7692:	4604      	mov	r4, r0
   b7694:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   b7698:	f7ff ff4e 	bl	b7538 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
   b769c:	4620      	mov	r0, r4
   b769e:	e9dd 2100 	ldrd	r2, r1, [sp]
   b76a2:	f7ff ff87 	bl	b75b4 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
   b76a6:	2301      	movs	r3, #1
}
   b76a8:	4620      	mov	r0, r4
    state_ = NEXT;
   b76aa:	7123      	strb	r3, [r4, #4]
}
   b76ac:	b002      	add	sp, #8
   b76ae:	bd10      	pop	{r4, pc}

000b76b0 <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
   b76b0:	6880      	ldr	r0, [r0, #8]
   b76b2:	6803      	ldr	r3, [r0, #0]
   b76b4:	68db      	ldr	r3, [r3, #12]
   b76b6:	4718      	bx	r3

000b76b8 <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
    // This handler doesn't support direct logging
}
   b76b8:	4770      	bx	lr

000b76ba <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
   b76ba:	4608      	mov	r0, r1
   b76bc:	b111      	cbz	r1, b76c4 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
   b76be:	680b      	ldr	r3, [r1, #0]
   b76c0:	685b      	ldr	r3, [r3, #4]
   b76c2:	4718      	bx	r3
}
   b76c4:	4770      	bx	lr

000b76c6 <__tcf_0>:
    }
    return nullptr; // Unknown handler type
}

spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
    static DefaultLogHandlerFactory factory;
   b76c6:	4770      	bx	lr

000b76c8 <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   b76c8:	4770      	bx	lr

000b76ca <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
class DefaultLogHandlerFactory: public LogHandlerFactory {
   b76ca:	4770      	bx	lr

000b76cc <_ZN5spark16JSONStreamWriterD1Ev>:
class JSONStreamWriter: public JSONWriter {
   b76cc:	4770      	bx	lr

000b76ce <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
const char* nextSubcategoryName(const char* &category, size_t &size) {
   b76ce:	b538      	push	{r3, r4, r5, lr}
   b76d0:	4604      	mov	r4, r0
   b76d2:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
   b76d4:	6800      	ldr	r0, [r0, #0]
   b76d6:	212e      	movs	r1, #46	; 0x2e
   b76d8:	f001 fddf 	bl	b929a <strchrnul>
    size = s - category;
   b76dc:	6823      	ldr	r3, [r4, #0]
   b76de:	1ac3      	subs	r3, r0, r3
   b76e0:	602b      	str	r3, [r5, #0]
    if (size) {
   b76e2:	b123      	cbz	r3, b76ee <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
   b76e4:	7803      	ldrb	r3, [r0, #0]
   b76e6:	b103      	cbz	r3, b76ea <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
   b76e8:	3001      	adds	r0, #1
   b76ea:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b76ec:	6020      	str	r0, [r4, #0]
}
   b76ee:	4618      	mov	r0, r3
   b76f0:	bd38      	pop	{r3, r4, r5, pc}

000b76f2 <_ZN5spark16JSONStreamWriterD0Ev>:
   b76f2:	b510      	push	{r4, lr}
   b76f4:	210c      	movs	r1, #12
   b76f6:	4604      	mov	r4, r0
   b76f8:	f7fc fccf 	bl	b409a <_ZdlPvj>
   b76fc:	4620      	mov	r0, r4
   b76fe:	bd10      	pop	{r4, pc}

000b7700 <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
   b7700:	b510      	push	{r4, lr}
   b7702:	2104      	movs	r1, #4
   b7704:	4604      	mov	r4, r0
   b7706:	f7fc fcc8 	bl	b409a <_ZdlPvj>
   b770a:	4620      	mov	r0, r4
   b770c:	bd10      	pop	{r4, pc}

000b770e <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   b770e:	b510      	push	{r4, lr}
   b7710:	2104      	movs	r1, #4
   b7712:	4604      	mov	r4, r0
   b7714:	f7fc fcc1 	bl	b409a <_ZdlPvj>
   b7718:	4620      	mov	r0, r4
   b771a:	bd10      	pop	{r4, pc}

000b771c <_ZN14RecursiveMutex4lockEv.isra.0>:
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   b771c:	f7fe befc 	b.w	b6518 <os_mutex_recursive_lock>

000b7720 <_ZNK5spark10JSONStringeqEPKc.isra.0>:
inline bool spark::JSONString::operator==(const char *str) const {
   b7720:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
   b7722:	f001 fdc4 	bl	b92ae <strcmp>
}
   b7726:	fab0 f080 	clz	r0, r0
   b772a:	0940      	lsrs	r0, r0, #5
   b772c:	bd08      	pop	{r3, pc}

000b772e <__tcf_1>:
   b772e:	4770      	bx	lr

000b7730 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
   b7730:	b510      	push	{r4, lr}
   b7732:	460c      	mov	r4, r1
#if PLATFORM_ID != PLATFORM_GCC
    if (stream == &Serial) {
   b7734:	f001 fa32 	bl	b8b9c <_Z16_fetch_usbserialv>
   b7738:	4284      	cmp	r4, r0
   b773a:	d010      	beq.n	b775e <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
    if (stream == &USBSerial1) {
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
   b773c:	f001 fb4c 	bl	b8dd8 <_Z22__fetch_global_Serial1v>
   b7740:	4284      	cmp	r4, r0
   b7742:	d105      	bne.n	b7750 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x20>
        Serial1.end();
   b7744:	f001 fb48 	bl	b8dd8 <_Z22__fetch_global_Serial1v>
        return;
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    OutputStreamFactory::destroyStream(stream);
}
   b7748:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial1.end();
   b774c:	f001 b9c1 	b.w	b8ad2 <_ZN11USARTSerial3endEv>

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
   b7750:	b12c      	cbz	r4, b775e <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
   b7752:	6823      	ldr	r3, [r4, #0]
   b7754:	4620      	mov	r0, r4
   b7756:	685b      	ldr	r3, [r3, #4]
}
   b7758:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b775c:	4718      	bx	r3
   b775e:	bd10      	pop	{r4, pc}

000b7760 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b7760:	680b      	ldr	r3, [r1, #0]
   b7762:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   b7764:	684b      	ldr	r3, [r1, #4]
   b7766:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   b7768:	b113      	cbz	r3, b7770 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_+0x10>
    { ++_M_use_count; }
   b776a:	685a      	ldr	r2, [r3, #4]
   b776c:	3201      	adds	r2, #1
   b776e:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b7770:	4770      	bx	lr

000b7772 <_ZN5spark10JSONWriter5valueEPKc>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   b7772:	b513      	push	{r0, r1, r4, lr}
   b7774:	4604      	mov	r4, r0
    return value(val, strlen(val));
   b7776:	4608      	mov	r0, r1
   b7778:	9101      	str	r1, [sp, #4]
   b777a:	f001 fdc8 	bl	b930e <strlen>
   b777e:	9901      	ldr	r1, [sp, #4]
   b7780:	4602      	mov	r2, r0
   b7782:	4620      	mov	r0, r4
}
   b7784:	b002      	add	sp, #8
   b7786:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return value(val, strlen(val));
   b778a:	f7ff bf81 	b.w	b7690 <_ZN5spark10JSONWriter5valueEPKcj>

000b778e <_ZN5spark16StreamLogHandler5writeEPKc>:
inline void spark::StreamLogHandler::write(const char *str) {
   b778e:	b513      	push	{r0, r1, r4, lr}
   b7790:	4604      	mov	r4, r0
    write(str, strlen(str));
   b7792:	4608      	mov	r0, r1
   b7794:	9101      	str	r1, [sp, #4]
   b7796:	f001 fdba 	bl	b930e <strlen>
   b779a:	6823      	ldr	r3, [r4, #0]
   b779c:	9901      	ldr	r1, [sp, #4]
   b779e:	68db      	ldr	r3, [r3, #12]
   b77a0:	4602      	mov	r2, r0
   b77a2:	4620      	mov	r0, r4
}
   b77a4:	b002      	add	sp, #8
   b77a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    write(str, strlen(str));
   b77aa:	4718      	bx	r3

000b77ac <_ZN5spark16StreamLogHandler5writeEc>:
inline void spark::StreamLogHandler::write(char c) {
   b77ac:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   b77ae:	6803      	ldr	r3, [r0, #0]
inline void spark::StreamLogHandler::write(char c) {
   b77b0:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   b77b4:	68db      	ldr	r3, [r3, #12]
   b77b6:	2201      	movs	r2, #1
   b77b8:	f10d 0107 	add.w	r1, sp, #7
   b77bc:	4798      	blx	r3
}
   b77be:	b003      	add	sp, #12
   b77c0:	f85d fb04 	ldr.w	pc, [sp], #4

000b77c4 <_ZN5spark16StreamLogHandler6printfEPKcz>:
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   b77c4:	b40e      	push	{r1, r2, r3}
   b77c6:	b503      	push	{r0, r1, lr}
   b77c8:	ab03      	add	r3, sp, #12
    stream_->vprintf(false, fmt, args);
   b77ca:	2100      	movs	r1, #0
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   b77cc:	f853 2b04 	ldr.w	r2, [r3], #4
    stream_->vprintf(false, fmt, args);
   b77d0:	6a00      	ldr	r0, [r0, #32]
    va_start(args, fmt);
   b77d2:	9301      	str	r3, [sp, #4]
    stream_->vprintf(false, fmt, args);
   b77d4:	f000 ffe7 	bl	b87a6 <_ZN5Print7vprintfEbPKcSt9__va_list>
}
   b77d8:	b002      	add	sp, #8
   b77da:	f85d eb04 	ldr.w	lr, [sp], #4
   b77de:	b003      	add	sp, #12
   b77e0:	4770      	bx	lr

000b77e2 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>:
struct spark::detail::LogFilter::Node {
   b77e2:	680a      	ldr	r2, [r1, #0]
   b77e4:	6002      	str	r2, [r0, #0]
   b77e6:	684a      	ldr	r2, [r1, #4]
   b77e8:	6042      	str	r2, [r0, #4]
        capacity_(0) {
   b77ea:	2200      	movs	r2, #0
   b77ec:	e9c0 2202 	strd	r2, r2, [r0, #8]
   b77f0:	b510      	push	{r4, lr}
   b77f2:	6102      	str	r2, [r0, #16]
      __a = _GLIBCXX_MOVE(__b);
   b77f4:	688c      	ldr	r4, [r1, #8]
   b77f6:	6084      	str	r4, [r0, #8]
   b77f8:	68cc      	ldr	r4, [r1, #12]
   b77fa:	60c4      	str	r4, [r0, #12]
   b77fc:	690c      	ldr	r4, [r1, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   b77fe:	608a      	str	r2, [r1, #8]
   b7800:	60ca      	str	r2, [r1, #12]
      __a = _GLIBCXX_MOVE(__b);
   b7802:	6104      	str	r4, [r0, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   b7804:	610a      	str	r2, [r1, #16]
   b7806:	bd10      	pop	{r4, pc}

000b7808 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   b7808:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return data_ + size_;
}

template<typename T, typename AllocatorT>
const T* spark::Vector<T, AllocatorT>::end() const {
    return data_ + size_;
   b780c:	e9d0 8400 	ldrd	r8, r4, [r0]
   b7810:	f04f 0a14 	mov.w	sl, #20
   b7814:	9300      	str	r3, [sp, #0]
   b7816:	fb0a f404 	mul.w	r4, sl, r4
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   b781a:	4b18      	ldr	r3, [pc, #96]	; (b787c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
   b781c:	10a4      	asrs	r4, r4, #2
   b781e:	4617      	mov	r7, r2
   b7820:	435c      	muls	r4, r3
   b7822:	4645      	mov	r5, r8
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
   b7824:	2c00      	cmp	r4, #0
   b7826:	dd21      	ble.n	b786c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x64>
	{
	  _DistanceType __half = __len >> 1;
   b7828:	1066      	asrs	r6, r4, #1
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
   b782a:	fb0a f006 	mul.w	r0, sl, r6
   b782e:	eb05 0900 	add.w	r9, r5, r0
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
   b7832:	463a      	mov	r2, r7
   b7834:	f8b9 b004 	ldrh.w	fp, [r9, #4]
   b7838:	5828      	ldr	r0, [r5, r0]
   b783a:	9101      	str	r1, [sp, #4]
   b783c:	455f      	cmp	r7, fp
   b783e:	bf28      	it	cs
   b7840:	465a      	movcs	r2, fp
   b7842:	f001 fd6c 	bl	b931e <strncmp>
                if (cmp == 0) {
   b7846:	2800      	cmp	r0, #0
   b7848:	9901      	ldr	r1, [sp, #4]
   b784a:	f04f 0301 	mov.w	r3, #1
   b784e:	d10b      	bne.n	b7868 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x60>
                    if (node.size == value.second) { // Lengths are equal
   b7850:	455f      	cmp	r7, fp
   b7852:	d103      	bne.n	b785c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x54>
                        found = true; // Allows caller code to avoid extra call to strncmp()
   b7854:	9a00      	ldr	r2, [sp, #0]
   b7856:	7013      	strb	r3, [r2, #0]
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   b7858:	4634      	mov	r4, r6
   b785a:	e7e3      	b.n	b7824 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x1c>
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
   b785c:	d9fc      	bls.n	b7858 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
   b785e:	1ba6      	subs	r6, r4, r6
	      ++__first;
   b7860:	f109 0514 	add.w	r5, r9, #20
	      __len = __len - __half - 1;
   b7864:	3e01      	subs	r6, #1
   b7866:	e7f7      	b.n	b7858 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	  if (__comp(__middle, __val))
   b7868:	dbf9      	blt.n	b785e <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
   b786a:	e7f5      	b.n	b7858 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
      return __last - __first;
   b786c:	eba5 0508 	sub.w	r5, r5, r8
}
   b7870:	4802      	ldr	r0, [pc, #8]	; (b787c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
   b7872:	10ad      	asrs	r5, r5, #2
   b7874:	4368      	muls	r0, r5
   b7876:	b003      	add	sp, #12
   b7878:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b787c:	cccccccd 	.word	0xcccccccd

000b7880 <_ZNK5spark6detail9LogFilter5levelEPKc>:
LogLevel spark::detail::LogFilter::level(const char *category) const {
   b7880:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (!nodes_.isEmpty() && category) {
   b7882:	6903      	ldr	r3, [r0, #16]
    LogLevel level = level_; // Default level
   b7884:	7e05      	ldrb	r5, [r0, #24]
LogLevel spark::detail::LogFilter::level(const char *category) const {
   b7886:	9101      	str	r1, [sp, #4]
    if (!nodes_.isEmpty() && category) {
   b7888:	b303      	cbz	r3, b78cc <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
   b788a:	b1f9      	cbz	r1, b78cc <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
        size_t size = 0; // Name length
   b788c:	2600      	movs	r6, #0
        const Vector<Node> *pNodes = &nodes_; // Root nodes
   b788e:	f100 040c 	add.w	r4, r0, #12
        size_t size = 0; // Name length
   b7892:	9603      	str	r6, [sp, #12]
        while ((name = nextSubcategoryName(category, size))) {
   b7894:	a903      	add	r1, sp, #12
   b7896:	a801      	add	r0, sp, #4
   b7898:	f7ff ff19 	bl	b76ce <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   b789c:	4601      	mov	r1, r0
   b789e:	b1a8      	cbz	r0, b78cc <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
            const int index = nodeIndex(*pNodes, name, size, found);
   b78a0:	f10d 030b 	add.w	r3, sp, #11
   b78a4:	9a03      	ldr	r2, [sp, #12]
            bool found = false;
   b78a6:	f88d 600b 	strb.w	r6, [sp, #11]
            const int index = nodeIndex(*pNodes, name, size, found);
   b78aa:	4620      	mov	r0, r4
   b78ac:	f7ff ffac 	bl	b7808 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
   b78b0:	f89d 300b 	ldrb.w	r3, [sp, #11]
   b78b4:	b153      	cbz	r3, b78cc <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
    return data_[i];
   b78b6:	6823      	ldr	r3, [r4, #0]
   b78b8:	2414      	movs	r4, #20
   b78ba:	fb04 3400 	mla	r4, r4, r0, r3
            pNodes = &node.nodes;
   b78be:	3408      	adds	r4, #8
            if (node.level >= 0) {
   b78c0:	f934 3c02 	ldrsh.w	r3, [r4, #-2]
   b78c4:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
   b78c6:	bfa8      	it	ge
   b78c8:	b2dd      	uxtbge	r5, r3
        while ((name = nextSubcategoryName(category, size))) {
   b78ca:	e7e3      	b.n	b7894 <_ZNK5spark6detail9LogFilter5levelEPKc+0x14>
}
   b78cc:	4628      	mov	r0, r5
   b78ce:	b004      	add	sp, #16
   b78d0:	bd70      	pop	{r4, r5, r6, pc}
	...

000b78d4 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
   b78d4:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
   b78d6:	4c09      	ldr	r4, [pc, #36]	; (b78fc <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x28>)
   b78d8:	7823      	ldrb	r3, [r4, #0]
   b78da:	f3bf 8f5b 	dmb	ish
   b78de:	07db      	lsls	r3, r3, #31
   b78e0:	d409      	bmi.n	b78f6 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   b78e2:	4620      	mov	r0, r4
   b78e4:	f7fc fbe8 	bl	b40b8 <__cxa_guard_acquire>
   b78e8:	b128      	cbz	r0, b78f6 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   b78ea:	4620      	mov	r0, r4
   b78ec:	f7fc fbe9 	bl	b40c2 <__cxa_guard_release>
   b78f0:	4803      	ldr	r0, [pc, #12]	; (b7900 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
   b78f2:	f001 fc59 	bl	b91a8 <atexit>
}
   b78f6:	4803      	ldr	r0, [pc, #12]	; (b7904 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x30>)
   b78f8:	bd10      	pop	{r4, pc}
   b78fa:	bf00      	nop
   b78fc:	2003e6a8 	.word	0x2003e6a8
   b7900:	000b76c7 	.word	0x000b76c7
   b7904:	2003b70c 	.word	0x2003b70c

000b7908 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
   b7908:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
   b790a:	4c09      	ldr	r4, [pc, #36]	; (b7930 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x28>)
   b790c:	7823      	ldrb	r3, [r4, #0]
   b790e:	f3bf 8f5b 	dmb	ish
   b7912:	07db      	lsls	r3, r3, #31
   b7914:	d409      	bmi.n	b792a <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   b7916:	4620      	mov	r0, r4
   b7918:	f7fc fbce 	bl	b40b8 <__cxa_guard_acquire>
   b791c:	b128      	cbz	r0, b792a <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   b791e:	4620      	mov	r0, r4
   b7920:	f7fc fbcf 	bl	b40c2 <__cxa_guard_release>
   b7924:	4803      	ldr	r0, [pc, #12]	; (b7934 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
   b7926:	f001 fc3f 	bl	b91a8 <atexit>
    return &factory;
}
   b792a:	4803      	ldr	r0, [pc, #12]	; (b7938 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x30>)
   b792c:	bd10      	pop	{r4, pc}
   b792e:	bf00      	nop
   b7930:	2003e6ac 	.word	0x2003e6ac
   b7934:	000b772f 	.word	0x000b772f
   b7938:	2003b710 	.word	0x2003b710

000b793c <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
   b793c:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
   b793e:	2500      	movs	r5, #0
   b7940:	4604      	mov	r4, r0
   b7942:	e9c0 5500 	strd	r5, r5, [r0]
   b7946:	e9c0 5504 	strd	r5, r5, [r0, #16]
   b794a:	6085      	str	r5, [r0, #8]
   b794c:	6185      	str	r5, [r0, #24]
    RecursiveMutex() : handle_(nullptr)
   b794e:	f840 5f24 	str.w	r5, [r0, #36]!
        os_mutex_recursive_create(&handle_);
   b7952:	f7fe fdd1 	bl	b64f8 <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
   b7956:	f7ff ffbd 	bl	b78d4 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
   b795a:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   b795c:	f7ff ffd4 	bl	b7908 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
   b7960:	7325      	strb	r5, [r4, #12]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   b7962:	6220      	str	r0, [r4, #32]
}
   b7964:	4620      	mov	r0, r4
   b7966:	bd38      	pop	{r3, r4, r5, pc}

000b7968 <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
   b7968:	b510      	push	{r4, lr}
    static LogManager mgr;
   b796a:	4c0a      	ldr	r4, [pc, #40]	; (b7994 <_ZN5spark10LogManager8instanceEv+0x2c>)
   b796c:	7823      	ldrb	r3, [r4, #0]
   b796e:	f3bf 8f5b 	dmb	ish
   b7972:	07db      	lsls	r3, r3, #31
   b7974:	d40c      	bmi.n	b7990 <_ZN5spark10LogManager8instanceEv+0x28>
   b7976:	4620      	mov	r0, r4
   b7978:	f7fc fb9e 	bl	b40b8 <__cxa_guard_acquire>
   b797c:	b140      	cbz	r0, b7990 <_ZN5spark10LogManager8instanceEv+0x28>
   b797e:	4806      	ldr	r0, [pc, #24]	; (b7998 <_ZN5spark10LogManager8instanceEv+0x30>)
   b7980:	f7ff ffdc 	bl	b793c <_ZN5spark10LogManagerC1Ev>
   b7984:	4620      	mov	r0, r4
   b7986:	f7fc fb9c 	bl	b40c2 <__cxa_guard_release>
   b798a:	4804      	ldr	r0, [pc, #16]	; (b799c <_ZN5spark10LogManager8instanceEv+0x34>)
   b798c:	f001 fc0c 	bl	b91a8 <atexit>
    return &mgr;
}
   b7990:	4801      	ldr	r0, [pc, #4]	; (b7998 <_ZN5spark10LogManager8instanceEv+0x30>)
   b7992:	bd10      	pop	{r4, pc}
   b7994:	2003e6a4 	.word	0x2003e6a4
   b7998:	2003e6b4 	.word	0x2003e6b4
   b799c:	000b7ebd 	.word	0x000b7ebd

000b79a0 <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
   b79a0:	4a02      	ldr	r2, [pc, #8]	; (b79ac <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
   b79a2:	4903      	ldr	r1, [pc, #12]	; (b79b0 <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
   b79a4:	4803      	ldr	r0, [pc, #12]	; (b79b4 <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
   b79a6:	2300      	movs	r3, #0
   b79a8:	f7fe bf06 	b.w	b67b8 <log_set_callbacks>
   b79ac:	000b7ca1 	.word	0x000b7ca1
   b79b0:	000b7c2d 	.word	0x000b7c2d
   b79b4:	000b7bad 	.word	0x000b7bad

000b79b8 <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
   b79b8:	2300      	movs	r3, #0
   b79ba:	461a      	mov	r2, r3
   b79bc:	4619      	mov	r1, r3
   b79be:	4618      	mov	r0, r3
   b79c0:	f7fe befa 	b.w	b67b8 <log_set_callbacks>

000b79c4 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   b79c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
        JSONObjectIterator(value.t_, value.d_) {
   b79c6:	688d      	ldr	r5, [r1, #8]
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   b79c8:	4604      	mov	r4, r0
      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b79ca:	4668      	mov	r0, sp
   b79cc:	f7ff fec8 	bl	b7760 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
        JSONObjectIterator(value.t_, value.d_) {
   b79d0:	466a      	mov	r2, sp
   b79d2:	4629      	mov	r1, r5
   b79d4:	4620      	mov	r0, r4
   b79d6:	f7ff fd7b 	bl	b74d0 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   b79da:	a801      	add	r0, sp, #4
   b79dc:	f7fc fc42 	bl	b4264 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b79e0:	4620      	mov	r0, r4
   b79e2:	b003      	add	sp, #12
   b79e4:	bd30      	pop	{r4, r5, pc}

000b79e6 <_ZNK5spark18JSONObjectIterator4nameEv>:
inline spark::JSONString spark::JSONObjectIterator::name() const {
   b79e6:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONString(k_, d_);
   b79e8:	68cd      	ldr	r5, [r1, #12]
inline spark::JSONString spark::JSONObjectIterator::name() const {
   b79ea:	4604      	mov	r4, r0
   b79ec:	4668      	mov	r0, sp
   b79ee:	f7ff feb7 	bl	b7760 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONString(k_, d_);
   b79f2:	466a      	mov	r2, sp
   b79f4:	4629      	mov	r1, r5
   b79f6:	4620      	mov	r0, r4
   b79f8:	f7ff fd46 	bl	b7488 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   b79fc:	a801      	add	r0, sp, #4
   b79fe:	f7fc fc31 	bl	b4264 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b7a02:	4620      	mov	r0, r4
   b7a04:	b003      	add	sp, #12
   b7a06:	bd30      	pop	{r4, r5, pc}

000b7a08 <_ZNK5spark18JSONObjectIterator5valueEv>:
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   b7a08:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONValue(v_, d_);
   b7a0a:	690d      	ldr	r5, [r1, #16]
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   b7a0c:	4604      	mov	r4, r0
   b7a0e:	4668      	mov	r0, sp
   b7a10:	f7ff fea6 	bl	b7760 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONValue(v_, d_);
   b7a14:	466a      	mov	r2, sp
   b7a16:	4629      	mov	r1, r5
   b7a18:	4620      	mov	r0, r4
   b7a1a:	f7ff fcde 	bl	b73da <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   b7a1e:	a801      	add	r0, sp, #4
   b7a20:	f7fc fc20 	bl	b4264 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b7a24:	4620      	mov	r0, r4
   b7a26:	b003      	add	sp, #12
   b7a28:	bd30      	pop	{r4, r5, pc}
	...

000b7a2c <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
   b7a2c:	b570      	push	{r4, r5, r6, lr}
   b7a2e:	b08a      	sub	sp, #40	; 0x28
   b7a30:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
   b7a32:	4601      	mov	r1, r0
   b7a34:	a804      	add	r0, sp, #16
   b7a36:	f7ff ffc5 	bl	b79c4 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
        if (it.name() == "baud" && baudRate) {
   b7a3a:	4e14      	ldr	r6, [pc, #80]	; (b7a8c <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x60>)
    while (it.next()) {
   b7a3c:	a804      	add	r0, sp, #16
   b7a3e:	f7ff fd5f 	bl	b7500 <_ZN5spark18JSONObjectIterator4nextEv>
   b7a42:	b1e8      	cbz	r0, b7a80 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x54>
        if (it.name() == "baud" && baudRate) {
   b7a44:	a904      	add	r1, sp, #16
   b7a46:	4668      	mov	r0, sp
   b7a48:	f7ff ffcd 	bl	b79e6 <_ZNK5spark18JSONObjectIterator4nameEv>
   b7a4c:	9802      	ldr	r0, [sp, #8]
   b7a4e:	4631      	mov	r1, r6
   b7a50:	f7ff fe66 	bl	b7720 <_ZNK5spark10JSONStringeqEPKc.isra.0>
   b7a54:	4604      	mov	r4, r0
   b7a56:	b110      	cbz	r0, b7a5e <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x32>
   b7a58:	1e2c      	subs	r4, r5, #0
   b7a5a:	bf18      	it	ne
   b7a5c:	2401      	movne	r4, #1
   b7a5e:	a801      	add	r0, sp, #4
   b7a60:	f7fc fc00 	bl	b4264 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b7a64:	2c00      	cmp	r4, #0
   b7a66:	d0e9      	beq.n	b7a3c <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
            *baudRate = it.value().toInt();
   b7a68:	a904      	add	r1, sp, #16
   b7a6a:	4668      	mov	r0, sp
   b7a6c:	f7ff ffcc 	bl	b7a08 <_ZNK5spark18JSONObjectIterator5valueEv>
   b7a70:	4668      	mov	r0, sp
   b7a72:	f7ff fce8 	bl	b7446 <_ZNK5spark9JSONValue5toIntEv>
   b7a76:	6028      	str	r0, [r5, #0]
   b7a78:	a801      	add	r0, sp, #4
   b7a7a:	f7fc fbf3 	bl	b4264 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b7a7e:	e7dd      	b.n	b7a3c <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
   b7a80:	a805      	add	r0, sp, #20
   b7a82:	f7fc fbef 	bl	b4264 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b7a86:	b00a      	add	sp, #40	; 0x28
   b7a88:	bd70      	pop	{r4, r5, r6, pc}
   b7a8a:	bf00      	nop
   b7a8c:	000ba42d 	.word	0x000ba42d

000b7a90 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   b7a90:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b7a92:	460c      	mov	r4, r1
    if (strcmp(type, "Serial") == 0) {
   b7a94:	4620      	mov	r0, r4
   b7a96:	4913      	ldr	r1, [pc, #76]	; (b7ae4 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   b7a98:	4615      	mov	r5, r2
    if (strcmp(type, "Serial") == 0) {
   b7a9a:	f001 fc08 	bl	b92ae <strcmp>
   b7a9e:	b950      	cbnz	r0, b7ab6 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x26>
        Serial.begin();
   b7aa0:	f001 f87c 	bl	b8b9c <_Z16_fetch_usbserialv>
   b7aa4:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b7aa8:	f001 f868 	bl	b8b7c <_ZN9USBSerial5beginEl>
}
   b7aac:	b003      	add	sp, #12
   b7aae:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        return &Serial;
   b7ab2:	f001 b873 	b.w	b8b9c <_Z16_fetch_usbserialv>
    if (strcmp(type, "Serial1") == 0) {
   b7ab6:	490c      	ldr	r1, [pc, #48]	; (b7ae8 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x58>)
   b7ab8:	4620      	mov	r0, r4
   b7aba:	f001 fbf8 	bl	b92ae <strcmp>
   b7abe:	b978      	cbnz	r0, b7ae0 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x50>
        int baud = 9600;
   b7ac0:	f44f 5316 	mov.w	r3, #9600	; 0x2580
        getParams(params, &baud);
   b7ac4:	a901      	add	r1, sp, #4
   b7ac6:	4628      	mov	r0, r5
        int baud = 9600;
   b7ac8:	9301      	str	r3, [sp, #4]
        getParams(params, &baud);
   b7aca:	f7ff ffaf 	bl	b7a2c <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
   b7ace:	f001 f983 	bl	b8dd8 <_Z22__fetch_global_Serial1v>
   b7ad2:	9901      	ldr	r1, [sp, #4]
   b7ad4:	f000 fffa 	bl	b8acc <_ZN11USARTSerial5beginEm>
        return &Serial1;
   b7ad8:	f001 f97e 	bl	b8dd8 <_Z22__fetch_global_Serial1v>
}
   b7adc:	b003      	add	sp, #12
   b7ade:	bd30      	pop	{r4, r5, pc}
    return nullptr;
   b7ae0:	2000      	movs	r0, #0
   b7ae2:	e7fb      	b.n	b7adc <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
   b7ae4:	000ba432 	.word	0x000ba432
   b7ae8:	000ba439 	.word	0x000ba439

000b7aec <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b7aec:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b7aee:	e9d0 5300 	ldrd	r5, r3, [r0]
   b7af2:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   b7af4:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b7af6:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b7afa:	42ae      	cmp	r6, r5
   b7afc:	d005      	beq.n	b7b0a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
struct spark::detail::LogFilter::Node {
   b7afe:	f105 0008 	add.w	r0, r5, #8
   b7b02:	f7ff fff3 	bl	b7aec <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   b7b06:	3514      	adds	r5, #20
   b7b08:	e7f7      	b.n	b7afa <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   b7b0a:	6820      	ldr	r0, [r4, #0]
   b7b0c:	f7fe ff10 	bl	b6930 <free>
}
   b7b10:	4620      	mov	r0, r4
   b7b12:	bd70      	pop	{r4, r5, r6, pc}

000b7b14 <_ZN5spark6detail9LogFilterD1Ev>:
spark::detail::LogFilter::~LogFilter() {
   b7b14:	b510      	push	{r4, lr}
   b7b16:	4604      	mov	r4, r0
   b7b18:	300c      	adds	r0, #12
   b7b1a:	f7ff ffe7 	bl	b7aec <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   b7b1e:	4620      	mov	r0, r4
   b7b20:	f7fe ff92 	bl	b6a48 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   b7b24:	4620      	mov	r0, r4
   b7b26:	bd10      	pop	{r4, pc}

000b7b28 <_ZN5spark16StreamLogHandlerD1Ev>:
class StreamLogHandler: public LogHandler {
   b7b28:	b510      	push	{r4, lr}
    virtual ~LogHandler() = default;
   b7b2a:	4b04      	ldr	r3, [pc, #16]	; (b7b3c <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
class StreamLogHandler: public LogHandler {
   b7b2c:	4604      	mov	r4, r0
    virtual ~LogHandler() = default;
   b7b2e:	f840 3b04 	str.w	r3, [r0], #4
   b7b32:	f7ff ffef 	bl	b7b14 <_ZN5spark6detail9LogFilterD1Ev>
class StreamLogHandler: public LogHandler {
   b7b36:	4620      	mov	r0, r4
   b7b38:	bd10      	pop	{r4, pc}
   b7b3a:	bf00      	nop
   b7b3c:	000ba0ec 	.word	0x000ba0ec

000b7b40 <_ZN5spark16StreamLogHandlerD0Ev>:
   b7b40:	b510      	push	{r4, lr}
   b7b42:	4604      	mov	r4, r0
   b7b44:	f7ff fff0 	bl	b7b28 <_ZN5spark16StreamLogHandlerD1Ev>
   b7b48:	4620      	mov	r0, r4
   b7b4a:	2124      	movs	r1, #36	; 0x24
   b7b4c:	f7fc faa5 	bl	b409a <_ZdlPvj>
   b7b50:	4620      	mov	r0, r4
   b7b52:	bd10      	pop	{r4, pc}

000b7b54 <_ZN5spark20JSONStreamLogHandlerD1Ev>:
class JSONStreamLogHandler: public StreamLogHandler {
   b7b54:	b510      	push	{r4, lr}
   b7b56:	4b03      	ldr	r3, [pc, #12]	; (b7b64 <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
   b7b58:	6003      	str	r3, [r0, #0]
   b7b5a:	4604      	mov	r4, r0
   b7b5c:	f7ff ffe4 	bl	b7b28 <_ZN5spark16StreamLogHandlerD1Ev>
   b7b60:	4620      	mov	r0, r4
   b7b62:	bd10      	pop	{r4, pc}
   b7b64:	000ba4d4 	.word	0x000ba4d4

000b7b68 <_ZN5spark20JSONStreamLogHandlerD0Ev>:
   b7b68:	b510      	push	{r4, lr}
   b7b6a:	4604      	mov	r4, r0
   b7b6c:	f7ff fff2 	bl	b7b54 <_ZN5spark20JSONStreamLogHandlerD1Ev>
   b7b70:	4620      	mov	r0, r4
   b7b72:	2124      	movs	r1, #36	; 0x24
   b7b74:	f7fc fa91 	bl	b409a <_ZdlPvj>
   b7b78:	4620      	mov	r0, r4
   b7b7a:	bd10      	pop	{r4, pc}

000b7b7c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        capacity_(0) {
   b7b7c:	2200      	movs	r2, #0
   b7b7e:	e9c0 2200 	strd	r2, r2, [r0]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   b7b82:	b510      	push	{r4, lr}
        capacity_(0) {
   b7b84:	6082      	str	r2, [r0, #8]
      __a = _GLIBCXX_MOVE(__b);
   b7b86:	680c      	ldr	r4, [r1, #0]
   b7b88:	6004      	str	r4, [r0, #0]
   b7b8a:	684c      	ldr	r4, [r1, #4]
   b7b8c:	6044      	str	r4, [r0, #4]
   b7b8e:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b7b90:	600a      	str	r2, [r1, #0]
   b7b92:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   b7b94:	6084      	str	r4, [r0, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b7b96:	608a      	str	r2, [r1, #8]
}
   b7b98:	bd10      	pop	{r4, pc}

000b7b9a <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      ~lock_guard()
   b7b9a:	b510      	push	{r4, lr}
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   b7b9c:	6803      	ldr	r3, [r0, #0]
   b7b9e:	4604      	mov	r4, r0
   b7ba0:	6818      	ldr	r0, [r3, #0]
   b7ba2:	f7fe fcc1 	bl	b6528 <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
   b7ba6:	4620      	mov	r0, r4
   b7ba8:	bd10      	pop	{r4, pc}
	...

000b7bac <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   b7bac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7bb0:	b087      	sub	sp, #28
   b7bb2:	4680      	mov	r8, r0
   b7bb4:	9303      	str	r3, [sp, #12]
#endif /* nRF52840 */

#if defined(STM32F10X_MD) || defined(STM32F10X_HD) || defined(STM32F2XX) || defined(nRF52840)
static inline bool HAL_IsISR() 
{
	return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   b7bb6:	4b1c      	ldr	r3, [pc, #112]	; (b7c28 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x7c>)
   b7bb8:	685b      	ldr	r3, [r3, #4]
   b7bba:	f3c3 0308 	ubfx	r3, r3, #0, #9
   b7bbe:	4689      	mov	r9, r1
   b7bc0:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   b7bc2:	b96b      	cbnz	r3, b7be0 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x34>
        return;
    }
#endif
    LogManager *that = instance();
   b7bc4:	f7ff fed0 	bl	b7968 <_ZN5spark10LogManager8instanceEv>
   b7bc8:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   b7bca:	f100 0324 	add.w	r3, r0, #36	; 0x24
      { _M_device.lock(); }
   b7bce:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b7bd0:	9305      	str	r3, [sp, #20]
      { _M_device.lock(); }
   b7bd2:	f7ff fda3 	bl	b771c <_ZN14RecursiveMutex4lockEv.isra.0>
        // prevent re-entry
        if (that->isActive()) {
   b7bd6:	7b23      	ldrb	r3, [r4, #12]
   b7bd8:	b12b      	cbz	r3, b7be6 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x3a>
    LOG_WITH_LOCK(that->mutex_) {
   b7bda:	a805      	add	r0, sp, #20
   b7bdc:	f7ff ffdd 	bl	b7b9a <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
   b7be0:	b007      	add	sp, #28
   b7be2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   b7be6:	2301      	movs	r3, #1
   b7be8:	7323      	strb	r3, [r4, #12]
    return data_ + size_;
   b7bea:	e9d4 5300 	ldrd	r5, r3, [r4]
            handler->message(msg, (LogLevel)level, category, *attr);
   b7bee:	fa5f f989 	uxtb.w	r9, r9
   b7bf2:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   b7bf6:	45aa      	cmp	sl, r5
   b7bf8:	d012      	beq.n	b7c20 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>
   b7bfa:	f855 7b04 	ldr.w	r7, [r5], #4
    if (level >= filter_.level(category)) {
   b7bfe:	4631      	mov	r1, r6
   b7c00:	1d38      	adds	r0, r7, #4
   b7c02:	f7ff fe3d 	bl	b7880 <_ZNK5spark6detail9LogFilter5levelEPKc>
   b7c06:	4581      	cmp	r9, r0
   b7c08:	d3f5      	bcc.n	b7bf6 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
        logMessage(msg, level, category, attr);
   b7c0a:	683b      	ldr	r3, [r7, #0]
   b7c0c:	9a03      	ldr	r2, [sp, #12]
   b7c0e:	9200      	str	r2, [sp, #0]
   b7c10:	f8d3 b008 	ldr.w	fp, [r3, #8]
   b7c14:	464a      	mov	r2, r9
   b7c16:	4633      	mov	r3, r6
   b7c18:	4641      	mov	r1, r8
   b7c1a:	4638      	mov	r0, r7
   b7c1c:	47d8      	blx	fp
   b7c1e:	e7ea      	b.n	b7bf6 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
    outputActive_ = outputActive;
   b7c20:	2300      	movs	r3, #0
   b7c22:	7323      	strb	r3, [r4, #12]
   b7c24:	e7d9      	b.n	b7bda <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x2e>
   b7c26:	bf00      	nop
   b7c28:	e000ed00 	.word	0xe000ed00

000b7c2c <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:
void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   b7c2c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7c30:	469b      	mov	fp, r3
   b7c32:	4b1a      	ldr	r3, [pc, #104]	; (b7c9c <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x70>)
   b7c34:	685b      	ldr	r3, [r3, #4]
   b7c36:	f3c3 0308 	ubfx	r3, r3, #0, #9
   b7c3a:	4680      	mov	r8, r0
   b7c3c:	4689      	mov	r9, r1
   b7c3e:	4616      	mov	r6, r2
    if (HAL_IsISR()) {
   b7c40:	b96b      	cbnz	r3, b7c5e <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x32>
    LogManager *that = instance();
   b7c42:	f7ff fe91 	bl	b7968 <_ZN5spark10LogManager8instanceEv>
   b7c46:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   b7c48:	f100 0324 	add.w	r3, r0, #36	; 0x24
   b7c4c:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b7c4e:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   b7c50:	f7ff fd64 	bl	b771c <_ZN14RecursiveMutex4lockEv.isra.0>
        if (that->isActive()) {
   b7c54:	7b23      	ldrb	r3, [r4, #12]
   b7c56:	b12b      	cbz	r3, b7c64 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
    LOG_WITH_LOCK(that->mutex_) {
   b7c58:	a801      	add	r0, sp, #4
   b7c5a:	f7ff ff9e 	bl	b7b9a <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   b7c5e:	b003      	add	sp, #12
   b7c60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outputActive_ = outputActive;
   b7c64:	2301      	movs	r3, #1
   b7c66:	7323      	strb	r3, [r4, #12]
   b7c68:	e9d4 5300 	ldrd	r5, r3, [r4]
    if (level >= filter_.level(category)) {
   b7c6c:	b2f6      	uxtb	r6, r6
   b7c6e:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   b7c72:	4555      	cmp	r5, sl
   b7c74:	d00e      	beq.n	b7c94 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x68>
   b7c76:	f855 7b04 	ldr.w	r7, [r5], #4
   b7c7a:	4659      	mov	r1, fp
   b7c7c:	1d38      	adds	r0, r7, #4
   b7c7e:	f7ff fdff 	bl	b7880 <_ZNK5spark6detail9LogFilter5levelEPKc>
   b7c82:	4286      	cmp	r6, r0
   b7c84:	d3f5      	bcc.n	b7c72 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
        write(data, size);
   b7c86:	683b      	ldr	r3, [r7, #0]
   b7c88:	464a      	mov	r2, r9
   b7c8a:	68db      	ldr	r3, [r3, #12]
   b7c8c:	4641      	mov	r1, r8
   b7c8e:	4638      	mov	r0, r7
   b7c90:	4798      	blx	r3
   b7c92:	e7ee      	b.n	b7c72 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
    outputActive_ = outputActive;
   b7c94:	2300      	movs	r3, #0
   b7c96:	7323      	strb	r3, [r4, #12]
   b7c98:	e7de      	b.n	b7c58 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x2c>
   b7c9a:	bf00      	nop
   b7c9c:	e000ed00 	.word	0xe000ed00

000b7ca0 <_ZN5spark10LogManager10logEnabledEiPKcPv>:
int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   b7ca0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b7ca4:	4b16      	ldr	r3, [pc, #88]	; (b7d00 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x60>)
   b7ca6:	685b      	ldr	r3, [r3, #4]
   b7ca8:	f3c3 0308 	ubfx	r3, r3, #0, #9
   b7cac:	4605      	mov	r5, r0
   b7cae:	460f      	mov	r7, r1
    if (HAL_IsISR()) {
   b7cb0:	bb1b      	cbnz	r3, b7cfa <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5a>
    LogManager *that = instance();
   b7cb2:	f7ff fe59 	bl	b7968 <_ZN5spark10LogManager8instanceEv>
    LOG_WITH_LOCK(that->mutex_) {
   b7cb6:	f100 0324 	add.w	r3, r0, #36	; 0x24
    LogManager *that = instance();
   b7cba:	4604      	mov	r4, r0
   b7cbc:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b7cbe:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   b7cc0:	f7ff fd2c 	bl	b771c <_ZN14RecursiveMutex4lockEv.isra.0>
   b7cc4:	e9d4 6300 	ldrd	r6, r3, [r4]
    int minLevel = LOG_LEVEL_NONE;
   b7cc8:	2446      	movs	r4, #70	; 0x46
   b7cca:	eb06 0883 	add.w	r8, r6, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   b7cce:	45b0      	cmp	r8, r6
   b7cd0:	d109      	bne.n	b7ce6 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x46>
    LOG_WITH_LOCK(that->mutex_) {
   b7cd2:	a801      	add	r0, sp, #4
   b7cd4:	f7ff ff61 	bl	b7b9a <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    return (level >= minLevel);
   b7cd8:	42a5      	cmp	r5, r4
   b7cda:	bfb4      	ite	lt
   b7cdc:	2000      	movlt	r0, #0
   b7cde:	2001      	movge	r0, #1
}
   b7ce0:	b002      	add	sp, #8
   b7ce2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return filter_.level(category);
   b7ce6:	f856 0b04 	ldr.w	r0, [r6], #4
   b7cea:	4639      	mov	r1, r7
   b7cec:	3004      	adds	r0, #4
   b7cee:	f7ff fdc7 	bl	b7880 <_ZNK5spark6detail9LogFilter5levelEPKc>
            if (level < minLevel) {
   b7cf2:	4284      	cmp	r4, r0
   b7cf4:	bfa8      	it	ge
   b7cf6:	4604      	movge	r4, r0
        for (LogHandler *handler: that->activeHandlers_) {
   b7cf8:	e7e9      	b.n	b7cce <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2e>
        return 0;
   b7cfa:	2000      	movs	r0, #0
   b7cfc:	e7f0      	b.n	b7ce0 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x40>
   b7cfe:	bf00      	nop
   b7d00:	e000ed00 	.word	0xe000ed00

000b7d04 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b7d04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b7d06:	e9d0 5301 	ldrd	r5, r3, [r0, #4]
   b7d0a:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b7d0c:	4604      	mov	r4, r0
   b7d0e:	460e      	mov	r6, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b7d10:	db0d      	blt.n	b7d2e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x2a>
   b7d12:	1c6f      	adds	r7, r5, #1
        if (n > 0) {
   b7d14:	2f00      	cmp	r7, #0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   b7d16:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   b7d18:	dd04      	ble.n	b7d24 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x20>
    return ::realloc(ptr, size);
   b7d1a:	00b9      	lsls	r1, r7, #2
   b7d1c:	f7fe fe10 	bl	b6940 <realloc>
            if (!d) {
   b7d20:	b918      	cbnz	r0, b7d2a <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x26>
}
   b7d22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ::free(ptr);
   b7d24:	f7fe fe04 	bl	b6930 <free>
        T* d = nullptr;
   b7d28:	2000      	movs	r0, #0
        data_ = d;
   b7d2a:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   b7d2c:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   b7d2e:	6827      	ldr	r7, [r4, #0]
    move(p + 1, p, data_ + size_);
   b7d30:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b7d32:	eb07 0185 	add.w	r1, r7, r5, lsl #2
    move(p + 1, p, data_ + size_);
   b7d36:	0092      	lsls	r2, r2, #2
        ::memmove(dest, p, (end - p) * sizeof(T));
   b7d38:	eba2 0285 	sub.w	r2, r2, r5, lsl #2
   b7d3c:	1d08      	adds	r0, r1, #4
   b7d3e:	f001 fa4f 	bl	b91e0 <memmove>
    new(p) T(std::move(value));
   b7d42:	f847 6025 	str.w	r6, [r7, r5, lsl #2]
    ++size_;
   b7d46:	6863      	ldr	r3, [r4, #4]
   b7d48:	3301      	adds	r3, #1
   b7d4a:	6063      	str	r3, [r4, #4]
    return true;
   b7d4c:	2001      	movs	r0, #1
   b7d4e:	e7e8      	b.n	b7d22 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x1e>

000b7d50 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
bool spark::LogManager::addHandler(LogHandler *handler) {
   b7d50:	b537      	push	{r0, r1, r2, r4, r5, lr}
    LOG_WITH_LOCK(mutex_) {
   b7d52:	f100 0324 	add.w	r3, r0, #36	; 0x24
bool spark::LogManager::addHandler(LogHandler *handler) {
   b7d56:	4604      	mov	r4, r0
   b7d58:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b7d5a:	9301      	str	r3, [sp, #4]
   b7d5c:	460d      	mov	r5, r1
      { _M_device.lock(); }
   b7d5e:	f7ff fcdd 	bl	b771c <_ZN14RecursiveMutex4lockEv.isra.0>
    return find(data_, data_ + size_, value);
   b7d62:	e9d4 3200 	ldrd	r3, r2, [r4]
   b7d66:	eb03 0282 	add.w	r2, r3, r2, lsl #2
        for (; p != end; ++p) {
   b7d6a:	4293      	cmp	r3, r2
   b7d6c:	4619      	mov	r1, r3
   b7d6e:	d00b      	beq.n	b7d88 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x38>
            if (*p == value) {
   b7d70:	6809      	ldr	r1, [r1, #0]
   b7d72:	42a9      	cmp	r1, r5
   b7d74:	f103 0304 	add.w	r3, r3, #4
   b7d78:	d1f7      	bne.n	b7d6a <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x1a>
            return false;
   b7d7a:	a801      	add	r0, sp, #4
   b7d7c:	f7ff ff0d 	bl	b7b9a <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   b7d80:	2500      	movs	r5, #0
}
   b7d82:	4628      	mov	r0, r5
   b7d84:	b003      	add	sp, #12
   b7d86:	bd30      	pop	{r4, r5, pc}
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
   b7d88:	4629      	mov	r1, r5
   b7d8a:	4620      	mov	r0, r4
   b7d8c:	f7ff ffba 	bl	b7d04 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>
   b7d90:	4605      	mov	r5, r0
   b7d92:	2800      	cmp	r0, #0
   b7d94:	d0f1      	beq.n	b7d7a <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x2a>
        if (activeHandlers_.size() == 1) {
   b7d96:	6863      	ldr	r3, [r4, #4]
   b7d98:	2b01      	cmp	r3, #1
   b7d9a:	d101      	bne.n	b7da0 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x50>
            setSystemCallbacks();
   b7d9c:	f7ff fe00 	bl	b79a0 <_ZN5spark10LogManager18setSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   b7da0:	a801      	add	r0, sp, #4
   b7da2:	f7ff fefa 	bl	b7b9a <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   b7da6:	e7ec      	b.n	b7d82 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x32>

000b7da8 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b7da8:	b570      	push	{r4, r5, r6, lr}
   b7daa:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
   b7dac:	e9d0 0200 	ldrd	r0, r2, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b7db0:	460b      	mov	r3, r1
    T* const p = find(data_, data_ + size_, value);
   b7db2:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        for (; p != end; ++p) {
   b7db6:	4282      	cmp	r2, r0
   b7db8:	d00f      	beq.n	b7dda <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x32>
    move(p, p + 1, data_ + size_);
   b7dba:	4601      	mov	r1, r0
            if (*p == value) {
   b7dbc:	681d      	ldr	r5, [r3, #0]
   b7dbe:	f851 6b04 	ldr.w	r6, [r1], #4
   b7dc2:	42ae      	cmp	r6, r5
   b7dc4:	d107      	bne.n	b7dd6 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2e>
        ::memmove(dest, p, (end - p) * sizeof(T));
   b7dc6:	1a52      	subs	r2, r2, r1
   b7dc8:	f001 fa0a 	bl	b91e0 <memmove>
    --size_;
   b7dcc:	6863      	ldr	r3, [r4, #4]
   b7dce:	3b01      	subs	r3, #1
   b7dd0:	6063      	str	r3, [r4, #4]
    return true;
   b7dd2:	2001      	movs	r0, #1
}
   b7dd4:	bd70      	pop	{r4, r5, r6, pc}
    move(p, p + 1, data_ + size_);
   b7dd6:	4608      	mov	r0, r1
   b7dd8:	e7ed      	b.n	b7db6 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xe>
        return false;
   b7dda:	2000      	movs	r0, #0
   b7ddc:	e7fa      	b.n	b7dd4 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2c>

000b7dde <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
void spark::LogManager::removeHandler(LogHandler *handler) {
   b7dde:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    LOG_WITH_LOCK(mutex_) {
   b7de0:	f100 0324 	add.w	r3, r0, #36	; 0x24
void spark::LogManager::removeHandler(LogHandler *handler) {
   b7de4:	4604      	mov	r4, r0
   b7de6:	6a40      	ldr	r0, [r0, #36]	; 0x24
   b7de8:	9101      	str	r1, [sp, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b7dea:	9303      	str	r3, [sp, #12]
      { _M_device.lock(); }
   b7dec:	f7ff fc96 	bl	b771c <_ZN14RecursiveMutex4lockEv.isra.0>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   b7df0:	a901      	add	r1, sp, #4
   b7df2:	4620      	mov	r0, r4
   b7df4:	f7ff ffd8 	bl	b7da8 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
   b7df8:	b118      	cbz	r0, b7e02 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
   b7dfa:	6863      	ldr	r3, [r4, #4]
   b7dfc:	b90b      	cbnz	r3, b7e02 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
            resetSystemCallbacks();
   b7dfe:	f7ff fddb 	bl	b79b8 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   b7e02:	a803      	add	r0, sp, #12
   b7e04:	f7ff fec9 	bl	b7b9a <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   b7e08:	b004      	add	sp, #16
   b7e0a:	bd10      	pop	{r4, pc}

000b7e0c <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
void spark::LogManager::destroyFactoryHandlers() {
   b7e0c:	b570      	push	{r4, r5, r6, lr}
    return data_ + size_;
   b7e0e:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
   b7e12:	2318      	movs	r3, #24
   b7e14:	4604      	mov	r4, r0
   b7e16:	fb03 5606 	mla	r6, r3, r6, r5
    for (const FactoryHandler &h: factoryHandlers_) {
   b7e1a:	42ae      	cmp	r6, r5
   b7e1c:	d015      	beq.n	b7e4a <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
   b7e1e:	f105 0110 	add.w	r1, r5, #16
   b7e22:	4620      	mov	r0, r4
   b7e24:	f7ff ffc0 	bl	b7da8 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
   b7e28:	6863      	ldr	r3, [r4, #4]
   b7e2a:	b90b      	cbnz	r3, b7e30 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
   b7e2c:	f7ff fdc4 	bl	b79b8 <_ZN5spark10LogManager20resetSystemCallbacksEv>
        handlerFactory_->destroyHandler(h.handler);
   b7e30:	69e0      	ldr	r0, [r4, #28]
   b7e32:	6929      	ldr	r1, [r5, #16]
   b7e34:	6803      	ldr	r3, [r0, #0]
   b7e36:	68db      	ldr	r3, [r3, #12]
   b7e38:	4798      	blx	r3
        if (h.stream) {
   b7e3a:	6969      	ldr	r1, [r5, #20]
   b7e3c:	b119      	cbz	r1, b7e46 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
   b7e3e:	6a20      	ldr	r0, [r4, #32]
   b7e40:	6803      	ldr	r3, [r0, #0]
   b7e42:	68db      	ldr	r3, [r3, #12]
   b7e44:	4798      	blx	r3
    for (const FactoryHandler &h: factoryHandlers_) {
   b7e46:	3518      	adds	r5, #24
   b7e48:	e7e7      	b.n	b7e1a <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    destruct(data_, data_ + size_);
   b7e4a:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   b7e4e:	2618      	movs	r6, #24
   b7e50:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b7e54:	42ae      	cmp	r6, r5
   b7e56:	d004      	beq.n	b7e62 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
struct spark::LogManager::FactoryHandler {
   b7e58:	4628      	mov	r0, r5
   b7e5a:	f000 fcdb 	bl	b8814 <_ZN6StringD1Ev>
   b7e5e:	3518      	adds	r5, #24
   b7e60:	e7f8      	b.n	b7e54 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
    size_ = 0;
   b7e62:	2300      	movs	r3, #0
   b7e64:	6163      	str	r3, [r4, #20]
}
   b7e66:	bd70      	pop	{r4, r5, r6, pc}

000b7e68 <_ZN5spark10LogManagerD1Ev>:
spark::LogManager::~LogManager() {
   b7e68:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b7e6a:	4604      	mov	r4, r0
    resetSystemCallbacks();
   b7e6c:	f7ff fda4 	bl	b79b8 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   b7e70:	f104 0324 	add.w	r3, r4, #36	; 0x24
   b7e74:	6a60      	ldr	r0, [r4, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b7e76:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   b7e78:	f7ff fc50 	bl	b771c <_ZN14RecursiveMutex4lockEv.isra.0>
         destroyFactoryHandlers();
   b7e7c:	4620      	mov	r0, r4
   b7e7e:	f7ff ffc5 	bl	b7e0c <_ZN5spark10LogManager22destroyFactoryHandlersEv>
    LOG_WITH_LOCK(mutex_) {
   b7e82:	a801      	add	r0, sp, #4
   b7e84:	f7ff fe89 	bl	b7b9a <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (handle_) {
   b7e88:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b7e8a:	b108      	cbz	r0, b7e90 <_ZN5spark10LogManagerD1Ev+0x28>
            os_mutex_recursive_destroy(handle_);
   b7e8c:	f7fe fb3c 	bl	b6508 <os_mutex_recursive_destroy>
    destruct(data_, data_ + size_);
   b7e90:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   b7e94:	2618      	movs	r6, #24
   b7e96:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b7e9a:	42ae      	cmp	r6, r5
   b7e9c:	d004      	beq.n	b7ea8 <_ZN5spark10LogManagerD1Ev+0x40>
struct spark::LogManager::FactoryHandler {
   b7e9e:	4628      	mov	r0, r5
   b7ea0:	f000 fcb8 	bl	b8814 <_ZN6StringD1Ev>
   b7ea4:	3518      	adds	r5, #24
   b7ea6:	e7f8      	b.n	b7e9a <_ZN5spark10LogManagerD1Ev+0x32>
    ::free(ptr);
   b7ea8:	6920      	ldr	r0, [r4, #16]
   b7eaa:	f7fe fd41 	bl	b6930 <free>
   b7eae:	6820      	ldr	r0, [r4, #0]
   b7eb0:	f7fe fd3e 	bl	b6930 <free>
}
   b7eb4:	4620      	mov	r0, r4
   b7eb6:	b002      	add	sp, #8
   b7eb8:	bd70      	pop	{r4, r5, r6, pc}
	...

000b7ebc <__tcf_2>:
    static LogManager mgr;
   b7ebc:	4801      	ldr	r0, [pc, #4]	; (b7ec4 <__tcf_2+0x8>)
   b7ebe:	f7ff bfd3 	b.w	b7e68 <_ZN5spark10LogManagerD1Ev>
   b7ec2:	bf00      	nop
   b7ec4:	2003e6b4 	.word	0x2003e6b4

000b7ec8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        if (dest > p && dest < end) {
   b7ec8:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b7eca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7ecc:	4604      	mov	r4, r0
   b7ece:	460d      	mov	r5, r1
   b7ed0:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b7ed2:	d915      	bls.n	b7f00 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x38>
   b7ed4:	4290      	cmp	r0, r2
   b7ed6:	d214      	bcs.n	b7f02 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
            --end;
   b7ed8:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   b7edc:	1a75      	subs	r5, r6, r1
   b7ede:	f1a1 0714 	sub.w	r7, r1, #20
   b7ee2:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b7ee4:	42b7      	cmp	r7, r6
   b7ee6:	d01a      	beq.n	b7f1e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*end));
   b7ee8:	b11c      	cbz	r4, b7ef2 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x2a>
   b7eea:	4631      	mov	r1, r6
   b7eec:	4620      	mov	r0, r4
   b7eee:	f7ff fc78 	bl	b77e2 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
struct spark::detail::LogFilter::Node {
   b7ef2:	f106 0008 	add.w	r0, r6, #8
   b7ef6:	f7ff fdf9 	bl	b7aec <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
   b7efa:	3e14      	subs	r6, #20
   b7efc:	3c14      	subs	r4, #20
   b7efe:	e7f1      	b.n	b7ee4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1c>
        } else if (dest != p) {
   b7f00:	d00d      	beq.n	b7f1e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
            for (; p != end; ++p, ++dest) {
   b7f02:	42b5      	cmp	r5, r6
   b7f04:	d00b      	beq.n	b7f1e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*p));
   b7f06:	b11c      	cbz	r4, b7f10 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x48>
   b7f08:	4629      	mov	r1, r5
   b7f0a:	4620      	mov	r0, r4
   b7f0c:	f7ff fc69 	bl	b77e2 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
   b7f10:	f105 0008 	add.w	r0, r5, #8
   b7f14:	f7ff fdea 	bl	b7aec <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; p != end; ++p, ++dest) {
   b7f18:	3514      	adds	r5, #20
   b7f1a:	3414      	adds	r4, #20
   b7f1c:	e7f1      	b.n	b7f02 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
    }
   b7f1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b7f20 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   b7f20:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b7f22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7f24:	4604      	mov	r4, r0
   b7f26:	460d      	mov	r5, r1
   b7f28:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b7f2a:	d914      	bls.n	b7f56 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
   b7f2c:	4290      	cmp	r0, r2
   b7f2e:	d213      	bcs.n	b7f58 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            --end;
   b7f30:	f1a2 0610 	sub.w	r6, r2, #16
            dest += end - p - 1;
   b7f34:	1a75      	subs	r5, r6, r1
   b7f36:	f1a1 0710 	sub.w	r7, r1, #16
   b7f3a:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b7f3c:	42b7      	cmp	r7, r6
   b7f3e:	d018      	beq.n	b7f72 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
   b7f40:	b11c      	cbz	r4, b7f4a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
   b7f42:	4631      	mov	r1, r6
   b7f44:	4620      	mov	r0, r4
   b7f46:	f000 fce2 	bl	b890e <_ZN6StringC1EOS_>
                end->~T();
   b7f4a:	4630      	mov	r0, r6
   b7f4c:	f000 fc62 	bl	b8814 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   b7f50:	3e10      	subs	r6, #16
   b7f52:	3c10      	subs	r4, #16
   b7f54:	e7f2      	b.n	b7f3c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   b7f56:	d00c      	beq.n	b7f72 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
   b7f58:	42b5      	cmp	r5, r6
   b7f5a:	d00a      	beq.n	b7f72 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
   b7f5c:	b11c      	cbz	r4, b7f66 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
   b7f5e:	4629      	mov	r1, r5
   b7f60:	4620      	mov	r0, r4
   b7f62:	f000 fcd4 	bl	b890e <_ZN6StringC1EOS_>
                p->~T();
   b7f66:	4628      	mov	r0, r5
   b7f68:	f000 fc54 	bl	b8814 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   b7f6c:	3510      	adds	r5, #16
   b7f6e:	3410      	adds	r4, #16
   b7f70:	e7f2      	b.n	b7f58 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
    }
   b7f72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b7f74 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
   b7f74:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b7f76:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b7f78:	4605      	mov	r5, r0
        if (n > 0) {
   b7f7a:	dd11      	ble.n	b7fa0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2c>
    return ::malloc(size);
   b7f7c:	0130      	lsls	r0, r6, #4
   b7f7e:	f7fe fccf 	bl	b6920 <malloc>
            if (!d) {
   b7f82:	4604      	mov	r4, r0
   b7f84:	b158      	cbz	r0, b7f9e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b7f86:	e9d5 1200 	ldrd	r1, r2, [r5]
   b7f8a:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   b7f8e:	f7ff ffc7 	bl	b7f20 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   b7f92:	6828      	ldr	r0, [r5, #0]
   b7f94:	f7fe fccc 	bl	b6930 <free>
        data_ = d;
   b7f98:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b7f9a:	60ae      	str	r6, [r5, #8]
        return true;
   b7f9c:	2001      	movs	r0, #1
    }
   b7f9e:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b7fa0:	2400      	movs	r4, #0
   b7fa2:	e7f6      	b.n	b7f92 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x1e>

000b7fa4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   b7fa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7fa8:	4690      	mov	r8, r2
   b7faa:	b095      	sub	sp, #84	; 0x54
        capacity_(0) {
   b7fac:	2300      	movs	r3, #0
   b7fae:	9103      	str	r1, [sp, #12]
    return size_;
   b7fb0:	f8d8 1004 	ldr.w	r1, [r8, #4]
        capacity_(0) {
   b7fb4:	930a      	str	r3, [sp, #40]	; 0x28
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   b7fb6:	2246      	movs	r2, #70	; 0x46
    if (n > capacity_ && !realloc(n)) {
   b7fb8:	4299      	cmp	r1, r3
        capacity_(0) {
   b7fba:	e9c0 3300 	strd	r3, r3, [r0]
   b7fbe:	e9c0 3302 	strd	r3, r3, [r0, #8]
   b7fc2:	e9c0 3304 	strd	r3, r3, [r0, #16]
   b7fc6:	e9cd 3308 	strd	r3, r3, [sp, #32]
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   b7fca:	4604      	mov	r4, r0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   b7fcc:	7602      	strb	r2, [r0, #24]
    if (n > capacity_ && !realloc(n)) {
   b7fce:	dc23      	bgt.n	b8018 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_ + size_;
   b7fd0:	e9d8 5700 	ldrd	r5, r7, [r8]
   b7fd4:	2314      	movs	r3, #20
   b7fd6:	fb03 5707 	mla	r7, r3, r7, r5
    for (LogCategoryFilter &filter: filters) {
   b7fda:	42af      	cmp	r7, r5
   b7fdc:	d03b      	beq.n	b8056 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xb2>
        cats.append(std::move(filter.cat_));
   b7fde:	4629      	mov	r1, r5
   b7fe0:	a80b      	add	r0, sp, #44	; 0x2c
   b7fe2:	f000 fc94 	bl	b890e <_ZN6StringC1EOS_>
    return insert(size_, std::move(value));
   b7fe6:	a90b      	add	r1, sp, #44	; 0x2c
   b7fe8:	a80f      	add	r0, sp, #60	; 0x3c
   b7fea:	9e09      	ldr	r6, [sp, #36]	; 0x24
   b7fec:	f000 fc8f 	bl	b890e <_ZN6StringC1EOS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b7ff0:	e9dd 1309 	ldrd	r1, r3, [sp, #36]	; 0x24
   b7ff4:	4299      	cmp	r1, r3
   b7ff6:	da1b      	bge.n	b8030 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x8c>
    T* const p = data_ + i;
   b7ff8:	9b08      	ldr	r3, [sp, #32]
    move(p + 1, p, data_ + size_);
   b7ffa:	9a09      	ldr	r2, [sp, #36]	; 0x24
    T* const p = data_ + i;
   b7ffc:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
   b8000:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   b8004:	4631      	mov	r1, r6
   b8006:	f106 0010 	add.w	r0, r6, #16
   b800a:	f7ff ff89 	bl	b7f20 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
   b800e:	b9ee      	cbnz	r6, b804c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa8>
    ++size_;
   b8010:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b8012:	3301      	adds	r3, #1
   b8014:	9309      	str	r3, [sp, #36]	; 0x24
    return true;
   b8016:	e011      	b.n	b803c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x98>
    if (n > capacity_ && !realloc(n)) {
   b8018:	a808      	add	r0, sp, #32
   b801a:	f7ff ffab 	bl	b7f74 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   b801e:	2800      	cmp	r0, #0
   b8020:	d1d6      	bne.n	b7fd0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>
        return;
   b8022:	a808      	add	r0, sp, #32
   b8024:	f7fe fd10 	bl	b6a48 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   b8028:	4620      	mov	r0, r4
   b802a:	b015      	add	sp, #84	; 0x54
   b802c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b8030:	3101      	adds	r1, #1
   b8032:	a808      	add	r0, sp, #32
   b8034:	f7ff ff9e 	bl	b7f74 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   b8038:	2800      	cmp	r0, #0
   b803a:	d1dd      	bne.n	b7ff8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x54>
    return insert(size_, std::move(value));
   b803c:	a80f      	add	r0, sp, #60	; 0x3c
   b803e:	f000 fbe9 	bl	b8814 <_ZN6StringD1Ev>
        cats.append(std::move(filter.cat_));
   b8042:	a80b      	add	r0, sp, #44	; 0x2c
   b8044:	f000 fbe6 	bl	b8814 <_ZN6StringD1Ev>
    for (LogCategoryFilter &filter: filters) {
   b8048:	3514      	adds	r5, #20
   b804a:	e7c6      	b.n	b7fda <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x36>
    new(p) T(std::move(value));
   b804c:	a90f      	add	r1, sp, #60	; 0x3c
   b804e:	4630      	mov	r0, r6
   b8050:	f000 fc5d 	bl	b890e <_ZN6StringC1EOS_>
   b8054:	e7dc      	b.n	b8010 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x6c>
        capacity_(0) {
   b8056:	2600      	movs	r6, #0
   b8058:	e9cd 660b 	strd	r6, r6, [sp, #44]	; 0x2c
   b805c:	960d      	str	r6, [sp, #52]	; 0x34
    for (int i = 0; i < cats.size(); ++i) {
   b805e:	f04f 0914 	mov.w	r9, #20
    return data_[i];
   b8062:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   b8066:	429e      	cmp	r6, r3
   b8068:	da7c      	bge.n	b8164 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1c0>
    char operator [] (unsigned int index) const;
    char& operator [] (unsigned int index);
    void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
    void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
        {getBytes((unsigned char *)buf, bufsize, index);}
    const char * c_str() const { return buffer; }
   b806a:	0133      	lsls	r3, r6, #4
   b806c:	58d3      	ldr	r3, [r2, r3]
        const char *category = cats.at(i).c_str();
   b806e:	9306      	str	r3, [sp, #24]
        if (!category) {
   b8070:	b90b      	cbnz	r3, b8076 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd2>
    for (int i = 0; i < cats.size(); ++i) {
   b8072:	3601      	adds	r6, #1
   b8074:	e7f5      	b.n	b8062 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xbe>
        size_t size = 0; // Name length
   b8076:	2300      	movs	r3, #0
   b8078:	9307      	str	r3, [sp, #28]
   b807a:	fb09 f306 	mul.w	r3, r9, r6
   b807e:	9302      	str	r3, [sp, #8]
        Vector<Node> *pNodes = &nodes; // Root nodes
   b8080:	ad0b      	add	r5, sp, #44	; 0x2c
        while ((name = nextSubcategoryName(category, size))) {
   b8082:	a907      	add	r1, sp, #28
   b8084:	a806      	add	r0, sp, #24
   b8086:	f7ff fb22 	bl	b76ce <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   b808a:	4682      	mov	sl, r0
   b808c:	2800      	cmp	r0, #0
   b808e:	d0f0      	beq.n	b8072 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xce>
            bool found = false;
   b8090:	f04f 0300 	mov.w	r3, #0
   b8094:	f88d 3017 	strb.w	r3, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
   b8098:	4601      	mov	r1, r0
   b809a:	9a07      	ldr	r2, [sp, #28]
   b809c:	f10d 0317 	add.w	r3, sp, #23
   b80a0:	4628      	mov	r0, r5
   b80a2:	f7ff fbb1 	bl	b7808 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   b80a6:	f89d 7017 	ldrb.w	r7, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
   b80aa:	9001      	str	r0, [sp, #4]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   b80ac:	2f00      	cmp	r7, #0
   b80ae:	d14a      	bne.n	b8146 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
   b80b0:	f8bd 301c 	ldrh.w	r3, [sp, #28]
            level(-1) {
   b80b4:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
        capacity_(0) {
   b80b8:	e9cd 7711 	strd	r7, r7, [sp, #68]	; 0x44
   b80bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b80c0:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
   b80c4:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
   b80c8:	9713      	str	r7, [sp, #76]	; 0x4c
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b80ca:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
   b80ce:	4293      	cmp	r3, r2
   b80d0:	db17      	blt.n	b8102 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x15e>
   b80d2:	f103 0a01 	add.w	sl, r3, #1
        if (n > 0) {
   b80d6:	f1ba 0f00 	cmp.w	sl, #0
   b80da:	dd30      	ble.n	b813e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19a>
    return ::malloc(size);
   b80dc:	fb09 f00a 	mul.w	r0, r9, sl
   b80e0:	f7fe fc1e 	bl	b6920 <malloc>
            if (!d) {
   b80e4:	4683      	mov	fp, r0
   b80e6:	b360      	cbz	r0, b8142 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19e>
            move(d, data_, data_ + size_);
   b80e8:	e9d5 1200 	ldrd	r1, r2, [r5]
   b80ec:	fb09 1202 	mla	r2, r9, r2, r1
   b80f0:	f7ff feea 	bl	b7ec8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    ::free(ptr);
   b80f4:	6828      	ldr	r0, [r5, #0]
   b80f6:	f7fe fc1b 	bl	b6930 <free>
        data_ = d;
   b80fa:	f8c5 b000 	str.w	fp, [r5]
        capacity_ = n;
   b80fe:	f8c5 a008 	str.w	sl, [r5, #8]
    T* const p = data_ + i;
   b8102:	682b      	ldr	r3, [r5, #0]
   b8104:	9a01      	ldr	r2, [sp, #4]
   b8106:	fb09 3a02 	mla	sl, r9, r2, r3
    move(p + 1, p, data_ + size_);
   b810a:	686a      	ldr	r2, [r5, #4]
   b810c:	4651      	mov	r1, sl
   b810e:	fb09 3202 	mla	r2, r9, r2, r3
   b8112:	f10a 0014 	add.w	r0, sl, #20
   b8116:	f7ff fed7 	bl	b7ec8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
   b811a:	f1ba 0f00 	cmp.w	sl, #0
   b811e:	d003      	beq.n	b8128 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x184>
   b8120:	a90f      	add	r1, sp, #60	; 0x3c
   b8122:	4650      	mov	r0, sl
   b8124:	f7ff fb5d 	bl	b77e2 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
    ++size_;
   b8128:	686b      	ldr	r3, [r5, #4]
   b812a:	3301      	adds	r3, #1
   b812c:	606b      	str	r3, [r5, #4]
struct spark::detail::LogFilter::Node {
   b812e:	a811      	add	r0, sp, #68	; 0x44
   b8130:	f7ff fcdc 	bl	b7aec <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   b8134:	b13f      	cbz	r7, b8146 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
    Vector<Node> nodes;
   b8136:	a80b      	add	r0, sp, #44	; 0x2c
   b8138:	f7ff fcd8 	bl	b7aec <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   b813c:	e771      	b.n	b8022 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x7e>
        T* d = nullptr;
   b813e:	46bb      	mov	fp, r7
   b8140:	e7d8      	b.n	b80f4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x150>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   b8142:	2701      	movs	r7, #1
   b8144:	e7f3      	b.n	b812e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x18a>
    return data_[i];
   b8146:	9b01      	ldr	r3, [sp, #4]
   b8148:	682d      	ldr	r5, [r5, #0]
   b814a:	fb09 5503 	mla	r5, r9, r3, r5
            if (!*category) { // Check if it's last subcategory
   b814e:	9b06      	ldr	r3, [sp, #24]
   b8150:	781b      	ldrb	r3, [r3, #0]
   b8152:	b92b      	cbnz	r3, b8160 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>
                node.level = filters.at(i).level_;
   b8154:	f8d8 3000 	ldr.w	r3, [r8]
   b8158:	9a02      	ldr	r2, [sp, #8]
   b815a:	4413      	add	r3, r2
   b815c:	7c1b      	ldrb	r3, [r3, #16]
   b815e:	80eb      	strh	r3, [r5, #6]
            pNodes = &node.nodes;
   b8160:	3508      	adds	r5, #8
        while ((name = nextSubcategoryName(category, size))) {
   b8162:	e78e      	b.n	b8082 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xde>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b8164:	6821      	ldr	r1, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   b8166:	6022      	str	r2, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b8168:	6862      	ldr	r2, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
   b816a:	6063      	str	r3, [r4, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b816c:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b816e:	9209      	str	r2, [sp, #36]	; 0x24
      __a = _GLIBCXX_MOVE(__b);
   b8170:	9a0a      	ldr	r2, [sp, #40]	; 0x28
      __b = _GLIBCXX_MOVE(__tmp);
   b8172:	930a      	str	r3, [sp, #40]	; 0x28
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b8174:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   b8176:	60a2      	str	r2, [r4, #8]
   b8178:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
      __b = _GLIBCXX_MOVE(__tmp);
   b817a:	930b      	str	r3, [sp, #44]	; 0x2c
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b817c:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   b817e:	60e2      	str	r2, [r4, #12]
   b8180:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
   b8182:	930c      	str	r3, [sp, #48]	; 0x30
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b8184:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
   b8186:	6122      	str	r2, [r4, #16]
   b8188:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
   b818a:	930d      	str	r3, [sp, #52]	; 0x34
    level_ = level;
   b818c:	9b03      	ldr	r3, [sp, #12]
   b818e:	9108      	str	r1, [sp, #32]
      __a = _GLIBCXX_MOVE(__b);
   b8190:	6162      	str	r2, [r4, #20]
   b8192:	7623      	strb	r3, [r4, #24]
   b8194:	e7cf      	b.n	b8136 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x192>
	...

000b8198 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
   b8198:	b5f0      	push	{r4, r5, r6, r7, lr}
   b819a:	4604      	mov	r4, r0
   b819c:	b087      	sub	sp, #28
   b819e:	460d      	mov	r5, r1
        filter_(level, filters) {
   b81a0:	4626      	mov	r6, r4
        stream_(&stream) {
   b81a2:	4619      	mov	r1, r3
   b81a4:	4668      	mov	r0, sp
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
   b81a6:	4617      	mov	r7, r2
        stream_(&stream) {
   b81a8:	f7fc fafe 	bl	b47a8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   b81ac:	4b0b      	ldr	r3, [pc, #44]	; (b81dc <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x44>)
   b81ae:	f846 3b04 	str.w	r3, [r6], #4
   b81b2:	4669      	mov	r1, sp
   b81b4:	a803      	add	r0, sp, #12
   b81b6:	f7fc faf7 	bl	b47a8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b81ba:	aa03      	add	r2, sp, #12
   b81bc:	4639      	mov	r1, r7
   b81be:	4630      	mov	r0, r6
   b81c0:	f7ff fef0 	bl	b7fa4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b81c4:	a803      	add	r0, sp, #12
   b81c6:	f7fc f953 	bl	b4470 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   b81ca:	4668      	mov	r0, sp
   b81cc:	f7fc f950 	bl	b4470 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b81d0:	4b03      	ldr	r3, [pc, #12]	; (b81e0 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x48>)
   b81d2:	6023      	str	r3, [r4, #0]
}
   b81d4:	4620      	mov	r0, r4
        stream_(&stream) {
   b81d6:	6225      	str	r5, [r4, #32]
}
   b81d8:	b007      	add	sp, #28
   b81da:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b81dc:	000ba0ec 	.word	0x000ba0ec
   b81e0:	000ba4bc 	.word	0x000ba4bc

000b81e4 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:
            Print *stream, const JSONValue &params) {
   b81e4:	b5f0      	push	{r4, r5, r6, r7, lr}
   b81e6:	460f      	mov	r7, r1
   b81e8:	b085      	sub	sp, #20
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   b81ea:	491d      	ldr	r1, [pc, #116]	; (b8260 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x7c>)
            Print *stream, const JSONValue &params) {
   b81ec:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   b81ee:	4638      	mov	r0, r7
            Print *stream, const JSONValue &params) {
   b81f0:	4616      	mov	r6, r2
   b81f2:	461d      	mov	r5, r3
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   b81f4:	f001 f85b 	bl	b92ae <strcmp>
   b81f8:	b9c0      	cbnz	r0, b822c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x48>
        if (!stream) {
   b81fa:	b1a4      	cbz	r4, b8226 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
   b81fc:	4629      	mov	r1, r5
   b81fe:	a801      	add	r0, sp, #4
   b8200:	f7ff fcbc 	bl	b7b7c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   b8204:	4917      	ldr	r1, [pc, #92]	; (b8264 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
   b8206:	2024      	movs	r0, #36	; 0x24
   b8208:	f000 fe0a 	bl	b8e20 <_ZnwjRKSt9nothrow_t>
   b820c:	4605      	mov	r5, r0
   b820e:	b130      	cbz	r0, b821e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
    using StreamLogHandler::StreamLogHandler;
   b8210:	ab01      	add	r3, sp, #4
   b8212:	4632      	mov	r2, r6
   b8214:	4621      	mov	r1, r4
   b8216:	f7ff ffbf 	bl	b8198 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b821a:	4b13      	ldr	r3, [pc, #76]	; (b8268 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x84>)
   b821c:	602b      	str	r3, [r5, #0]
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   b821e:	a801      	add	r0, sp, #4
   b8220:	f7fc f926 	bl	b4470 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b8224:	462c      	mov	r4, r5
}
   b8226:	4620      	mov	r0, r4
   b8228:	b005      	add	sp, #20
   b822a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (strcmp(type, "StreamLogHandler") == 0) {
   b822c:	490f      	ldr	r1, [pc, #60]	; (b826c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x88>)
   b822e:	4638      	mov	r0, r7
   b8230:	f001 f83d 	bl	b92ae <strcmp>
   b8234:	b990      	cbnz	r0, b825c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x78>
        if (!stream) {
   b8236:	2c00      	cmp	r4, #0
   b8238:	d0f5      	beq.n	b8226 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   b823a:	4629      	mov	r1, r5
   b823c:	a801      	add	r0, sp, #4
   b823e:	f7ff fc9d 	bl	b7b7c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   b8242:	4908      	ldr	r1, [pc, #32]	; (b8264 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
   b8244:	2024      	movs	r0, #36	; 0x24
   b8246:	f000 fdeb 	bl	b8e20 <_ZnwjRKSt9nothrow_t>
   b824a:	4605      	mov	r5, r0
   b824c:	2800      	cmp	r0, #0
   b824e:	d0e6      	beq.n	b821e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
   b8250:	ab01      	add	r3, sp, #4
   b8252:	4632      	mov	r2, r6
   b8254:	4621      	mov	r1, r4
   b8256:	f7ff ff9f 	bl	b8198 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b825a:	e7e0      	b.n	b821e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
            return nullptr; // Output stream is not specified
   b825c:	2400      	movs	r4, #0
   b825e:	e7e2      	b.n	b8226 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
   b8260:	000ba441 	.word	0x000ba441
   b8264:	000ba5cc 	.word	0x000ba5cc
   b8268:	000ba4d4 	.word	0x000ba4d4
   b826c:	000ba445 	.word	0x000ba445

000b8270 <_GLOBAL__sub_I__ZN5spark3LogE>:
        name_(name) {
   b8270:	4b01      	ldr	r3, [pc, #4]	; (b8278 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b8272:	4a02      	ldr	r2, [pc, #8]	; (b827c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b8274:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b8276:	4770      	bx	lr
   b8278:	2003e6b0 	.word	0x2003e6b0
   b827c:	000ba456 	.word	0x000ba456

000b8280 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   b8280:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b8284:	9d08      	ldr	r5, [sp, #32]
    if (stream_ == &Serial && Network.listening()) {
   b8286:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   b828a:	4604      	mov	r4, r0
   b828c:	460e      	mov	r6, r1
   b828e:	4617      	mov	r7, r2
   b8290:	4698      	mov	r8, r3
    if (stream_ == &Serial && Network.listening()) {
   b8292:	f000 fc83 	bl	b8b9c <_Z16_fetch_usbserialv>
   b8296:	4581      	cmp	r9, r0
   b8298:	d04c      	beq.n	b8334 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb4>
    if (attr.has_time) {
   b829a:	792b      	ldrb	r3, [r5, #4]
   b829c:	0719      	lsls	r1, r3, #28
   b829e:	d504      	bpl.n	b82aa <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x2a>
        printf("%010u ", (unsigned)attr.time);
   b82a0:	696a      	ldr	r2, [r5, #20]
   b82a2:	4954      	ldr	r1, [pc, #336]	; (b83f4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x174>)
   b82a4:	4620      	mov	r0, r4
   b82a6:	f7ff fa8d 	bl	b77c4 <_ZN5spark16StreamLogHandler6printfEPKcz>
    if (category) {
   b82aa:	f1b8 0f00 	cmp.w	r8, #0
   b82ae:	d00d      	beq.n	b82cc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x4c>
        write('[');
   b82b0:	215b      	movs	r1, #91	; 0x5b
   b82b2:	4620      	mov	r0, r4
   b82b4:	f7ff fa7a 	bl	b77ac <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
   b82b8:	4641      	mov	r1, r8
   b82ba:	4620      	mov	r0, r4
   b82bc:	f7ff fa67 	bl	b778e <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
   b82c0:	6823      	ldr	r3, [r4, #0]
   b82c2:	494d      	ldr	r1, [pc, #308]	; (b83f8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
   b82c4:	68db      	ldr	r3, [r3, #12]
   b82c6:	2202      	movs	r2, #2
   b82c8:	4620      	mov	r0, r4
   b82ca:	4798      	blx	r3
    if (attr.has_file) {
   b82cc:	792b      	ldrb	r3, [r5, #4]
   b82ce:	07da      	lsls	r2, r3, #31
   b82d0:	d523      	bpl.n	b831a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9a>
        s = extractFileName(attr.file); // Strip directory path
   b82d2:	f8d5 8008 	ldr.w	r8, [r5, #8]
    const char *s1 = strrchr(s, '/');
   b82d6:	212f      	movs	r1, #47	; 0x2f
   b82d8:	4640      	mov	r0, r8
   b82da:	f001 f834 	bl	b9346 <strrchr>
    if (s1) {
   b82de:	b108      	cbz	r0, b82e4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x64>
        return s1 + 1;
   b82e0:	f100 0801 	add.w	r8, r0, #1
        write(s); // File name
   b82e4:	4641      	mov	r1, r8
   b82e6:	4620      	mov	r0, r4
   b82e8:	f7ff fa51 	bl	b778e <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
   b82ec:	792b      	ldrb	r3, [r5, #4]
   b82ee:	079b      	lsls	r3, r3, #30
   b82f0:	d508      	bpl.n	b8304 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x84>
            write(':');
   b82f2:	213a      	movs	r1, #58	; 0x3a
   b82f4:	4620      	mov	r0, r4
   b82f6:	f7ff fa59 	bl	b77ac <_ZN5spark16StreamLogHandler5writeEc>
            printf("%d", (int)attr.line); // Line number
   b82fa:	68ea      	ldr	r2, [r5, #12]
   b82fc:	493f      	ldr	r1, [pc, #252]	; (b83fc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17c>)
   b82fe:	4620      	mov	r0, r4
   b8300:	f7ff fa60 	bl	b77c4 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_function) {
   b8304:	792a      	ldrb	r2, [r5, #4]
            write(", ", 2);
   b8306:	6823      	ldr	r3, [r4, #0]
        if (attr.has_function) {
   b8308:	f012 0f04 	tst.w	r2, #4
            write(", ", 2);
   b830c:	68db      	ldr	r3, [r3, #12]
   b830e:	bf14      	ite	ne
   b8310:	493b      	ldrne	r1, [pc, #236]	; (b8400 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
            write(": ", 2);
   b8312:	493c      	ldreq	r1, [pc, #240]	; (b8404 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
            write(", ", 2);
   b8314:	2202      	movs	r2, #2
            write(": ", 2);
   b8316:	4620      	mov	r0, r4
   b8318:	4798      	blx	r3
    if (attr.has_function) {
   b831a:	792b      	ldrb	r3, [r5, #4]
   b831c:	0758      	lsls	r0, r3, #29
   b831e:	d51d      	bpl.n	b835c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xdc>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   b8320:	6929      	ldr	r1, [r5, #16]
const char* extractFuncName(const char *s, size_t *size) {
   b8322:	460b      	mov	r3, r1
   b8324:	461a      	mov	r2, r3
    for (; *s; ++s) {
   b8326:	f813 0b01 	ldrb.w	r0, [r3], #1
   b832a:	b160      	cbz	r0, b8346 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc6>
        if (*s == ' ') {
   b832c:	2820      	cmp	r0, #32
   b832e:	d108      	bne.n	b8342 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc2>
            s1 = s + 1; // Skip return type
   b8330:	4619      	mov	r1, r3
   b8332:	e7f7      	b.n	b8324 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
    if (stream_ == &Serial && Network.listening()) {
   b8334:	4834      	ldr	r0, [pc, #208]	; (b8408 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
   b8336:	f000 f966 	bl	b8606 <_ZN5spark12NetworkClass9listeningEv>
   b833a:	2800      	cmp	r0, #0
   b833c:	d0ad      	beq.n	b829a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a>
}
   b833e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        } else if (*s == '(') {
   b8342:	2828      	cmp	r0, #40	; 0x28
   b8344:	d1ee      	bne.n	b8324 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
        write(s, n);
   b8346:	6823      	ldr	r3, [r4, #0]
   b8348:	1a52      	subs	r2, r2, r1
   b834a:	68db      	ldr	r3, [r3, #12]
   b834c:	4620      	mov	r0, r4
   b834e:	4798      	blx	r3
        write("(): ", 4);
   b8350:	6823      	ldr	r3, [r4, #0]
   b8352:	492e      	ldr	r1, [pc, #184]	; (b840c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
   b8354:	68db      	ldr	r3, [r3, #12]
   b8356:	2204      	movs	r2, #4
   b8358:	4620      	mov	r0, r4
   b835a:	4798      	blx	r3
    return log_level_name(level, nullptr);
   b835c:	2100      	movs	r1, #0
   b835e:	4638      	mov	r0, r7
   b8360:	f7fe fa22 	bl	b67a8 <log_level_name>
   b8364:	4601      	mov	r1, r0
    write(s);
   b8366:	4620      	mov	r0, r4
   b8368:	f7ff fa11 	bl	b778e <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
   b836c:	6823      	ldr	r3, [r4, #0]
   b836e:	4925      	ldr	r1, [pc, #148]	; (b8404 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
   b8370:	68db      	ldr	r3, [r3, #12]
   b8372:	2202      	movs	r2, #2
   b8374:	4620      	mov	r0, r4
   b8376:	4798      	blx	r3
    if (msg) {
   b8378:	b11e      	cbz	r6, b8382 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x102>
        write(msg);
   b837a:	4631      	mov	r1, r6
   b837c:	4620      	mov	r0, r4
   b837e:	f7ff fa06 	bl	b778e <_ZN5spark16StreamLogHandler5writeEPKc>
    if (attr.has_code || attr.has_details) {
   b8382:	792b      	ldrb	r3, [r5, #4]
   b8384:	f013 0f30 	tst.w	r3, #48	; 0x30
   b8388:	d02c      	beq.n	b83e4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>
        write(" [", 2);
   b838a:	6823      	ldr	r3, [r4, #0]
   b838c:	4920      	ldr	r1, [pc, #128]	; (b8410 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
   b838e:	68db      	ldr	r3, [r3, #12]
   b8390:	2202      	movs	r2, #2
   b8392:	4620      	mov	r0, r4
   b8394:	4798      	blx	r3
        if (attr.has_code) {
   b8396:	792b      	ldrb	r3, [r5, #4]
   b8398:	06d9      	lsls	r1, r3, #27
   b839a:	d50a      	bpl.n	b83b2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x132>
            write("code = ", 7);
   b839c:	6823      	ldr	r3, [r4, #0]
   b839e:	491d      	ldr	r1, [pc, #116]	; (b8414 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
   b83a0:	68db      	ldr	r3, [r3, #12]
   b83a2:	2207      	movs	r2, #7
   b83a4:	4620      	mov	r0, r4
   b83a6:	4798      	blx	r3
            printf("%" PRIiPTR, (intptr_t)attr.code);
   b83a8:	69aa      	ldr	r2, [r5, #24]
   b83aa:	491b      	ldr	r1, [pc, #108]	; (b8418 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
   b83ac:	4620      	mov	r0, r4
   b83ae:	f7ff fa09 	bl	b77c4 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_details) {
   b83b2:	792b      	ldrb	r3, [r5, #4]
   b83b4:	069a      	lsls	r2, r3, #26
   b83b6:	d511      	bpl.n	b83dc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>
            if (attr.has_code) {
   b83b8:	06db      	lsls	r3, r3, #27
   b83ba:	d505      	bpl.n	b83c8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>
                write(", ", 2);
   b83bc:	6823      	ldr	r3, [r4, #0]
   b83be:	4910      	ldr	r1, [pc, #64]	; (b8400 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
   b83c0:	68db      	ldr	r3, [r3, #12]
   b83c2:	2202      	movs	r2, #2
   b83c4:	4620      	mov	r0, r4
   b83c6:	4798      	blx	r3
            write("details = ", 10);
   b83c8:	6823      	ldr	r3, [r4, #0]
   b83ca:	4914      	ldr	r1, [pc, #80]	; (b841c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
   b83cc:	68db      	ldr	r3, [r3, #12]
   b83ce:	4620      	mov	r0, r4
   b83d0:	220a      	movs	r2, #10
   b83d2:	4798      	blx	r3
            write(attr.details);
   b83d4:	69e9      	ldr	r1, [r5, #28]
   b83d6:	4620      	mov	r0, r4
   b83d8:	f7ff f9d9 	bl	b778e <_ZN5spark16StreamLogHandler5writeEPKc>
        write(']');
   b83dc:	215d      	movs	r1, #93	; 0x5d
   b83de:	4620      	mov	r0, r4
   b83e0:	f7ff f9e4 	bl	b77ac <_ZN5spark16StreamLogHandler5writeEc>
    write("\r\n", 2);
   b83e4:	6823      	ldr	r3, [r4, #0]
   b83e6:	490e      	ldr	r1, [pc, #56]	; (b8420 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
   b83e8:	68db      	ldr	r3, [r3, #12]
   b83ea:	4620      	mov	r0, r4
   b83ec:	2202      	movs	r2, #2
}
   b83ee:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    write("\r\n", 2);
   b83f2:	4718      	bx	r3
   b83f4:	000ba45a 	.word	0x000ba45a
   b83f8:	000ba461 	.word	0x000ba461
   b83fc:	000b98b6 	.word	0x000b98b6
   b8400:	000ba464 	.word	0x000ba464
   b8404:	000ba469 	.word	0x000ba469
   b8408:	2003e6dc 	.word	0x2003e6dc
   b840c:	000ba467 	.word	0x000ba467
   b8410:	000ba46c 	.word	0x000ba46c
   b8414:	000ba46f 	.word	0x000ba46f
   b8418:	000ba477 	.word	0x000ba477
   b841c:	000ba47a 	.word	0x000ba47a
   b8420:	000ba485 	.word	0x000ba485

000b8424 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   b8424:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b8428:	b085      	sub	sp, #20
    return stream_;
   b842a:	f8d0 9020 	ldr.w	r9, [r0, #32]
   b842e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   b8430:	4605      	mov	r5, r0
   b8432:	460f      	mov	r7, r1
   b8434:	4690      	mov	r8, r2
   b8436:	461e      	mov	r6, r3
    if (this->stream() == &Serial && Network.listening()) {
   b8438:	f000 fbb0 	bl	b8b9c <_Z16_fetch_usbserialv>
   b843c:	4581      	cmp	r9, r0
   b843e:	d105      	bne.n	b844c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
   b8440:	4849      	ldr	r0, [pc, #292]	; (b8568 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x144>)
   b8442:	f000 f8e0 	bl	b8606 <_ZN5spark12NetworkClass9listeningEv>
   b8446:	2800      	cmp	r0, #0
   b8448:	f040 808a 	bne.w	b8560 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
   b844c:	6a2b      	ldr	r3, [r5, #32]
        strm_(stream) {
   b844e:	4a47      	ldr	r2, [pc, #284]	; (b856c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
   b8450:	9201      	str	r2, [sp, #4]
        state_(BEGIN) {
   b8452:	f04f 0900 	mov.w	r9, #0
    json.beginObject();
   b8456:	a801      	add	r0, sp, #4
        strm_(stream) {
   b8458:	9303      	str	r3, [sp, #12]
        state_(BEGIN) {
   b845a:	f88d 9008 	strb.w	r9, [sp, #8]
   b845e:	f7ff f878 	bl	b7552 <_ZN5spark10JSONWriter11beginObjectEv>
    return log_level_name(level, nullptr);
   b8462:	4649      	mov	r1, r9
   b8464:	4640      	mov	r0, r8
   b8466:	f7fe f99f 	bl	b67a8 <log_level_name>
    json.name("l", 1).value(s);
   b846a:	4941      	ldr	r1, [pc, #260]	; (b8570 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
   b846c:	4680      	mov	r8, r0
   b846e:	2201      	movs	r2, #1
   b8470:	a801      	add	r0, sp, #4
   b8472:	f7ff f8fd 	bl	b7670 <_ZN5spark10JSONWriter4nameEPKcj>
   b8476:	4641      	mov	r1, r8
   b8478:	f7ff f97b 	bl	b7772 <_ZN5spark10JSONWriter5valueEPKc>
    if (msg) {
   b847c:	b13f      	cbz	r7, b848e <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
   b847e:	493d      	ldr	r1, [pc, #244]	; (b8574 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
   b8480:	2201      	movs	r2, #1
   b8482:	a801      	add	r0, sp, #4
   b8484:	f7ff f8f4 	bl	b7670 <_ZN5spark10JSONWriter4nameEPKcj>
   b8488:	4639      	mov	r1, r7
   b848a:	f7ff f972 	bl	b7772 <_ZN5spark10JSONWriter5valueEPKc>
    if (category) {
   b848e:	b13e      	cbz	r6, b84a0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
   b8490:	4939      	ldr	r1, [pc, #228]	; (b8578 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
   b8492:	2201      	movs	r2, #1
   b8494:	a801      	add	r0, sp, #4
   b8496:	f7ff f8eb 	bl	b7670 <_ZN5spark10JSONWriter4nameEPKcj>
   b849a:	4631      	mov	r1, r6
   b849c:	f7ff f969 	bl	b7772 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_file) {
   b84a0:	7923      	ldrb	r3, [r4, #4]
   b84a2:	07df      	lsls	r7, r3, #31
   b84a4:	d50e      	bpl.n	b84c4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
   b84a6:	68a6      	ldr	r6, [r4, #8]
    const char *s1 = strrchr(s, '/');
   b84a8:	212f      	movs	r1, #47	; 0x2f
   b84aa:	4630      	mov	r0, r6
   b84ac:	f000 ff4b 	bl	b9346 <strrchr>
    if (s1) {
   b84b0:	b100      	cbz	r0, b84b4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
   b84b2:	1c46      	adds	r6, r0, #1
        json.name("f", 1).value(s);
   b84b4:	4931      	ldr	r1, [pc, #196]	; (b857c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
   b84b6:	2201      	movs	r2, #1
   b84b8:	a801      	add	r0, sp, #4
   b84ba:	f7ff f8d9 	bl	b7670 <_ZN5spark10JSONWriter4nameEPKcj>
   b84be:	4631      	mov	r1, r6
   b84c0:	f7ff f957 	bl	b7772 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_line) {
   b84c4:	7923      	ldrb	r3, [r4, #4]
   b84c6:	079e      	lsls	r6, r3, #30
   b84c8:	d507      	bpl.n	b84da <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
   b84ca:	492d      	ldr	r1, [pc, #180]	; (b8580 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
   b84cc:	2202      	movs	r2, #2
   b84ce:	a801      	add	r0, sp, #4
   b84d0:	f7ff f8ce 	bl	b7670 <_ZN5spark10JSONWriter4nameEPKcj>
   b84d4:	68e1      	ldr	r1, [r4, #12]
   b84d6:	f7ff f849 	bl	b756c <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_function) {
   b84da:	7923      	ldrb	r3, [r4, #4]
   b84dc:	0758      	lsls	r0, r3, #29
   b84de:	d514      	bpl.n	b850a <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe6>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   b84e0:	6926      	ldr	r6, [r4, #16]
const char* extractFuncName(const char *s, size_t *size) {
   b84e2:	4633      	mov	r3, r6
   b84e4:	461f      	mov	r7, r3
    for (; *s; ++s) {
   b84e6:	f813 2b01 	ldrb.w	r2, [r3], #1
   b84ea:	b12a      	cbz	r2, b84f8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        if (*s == ' ') {
   b84ec:	2a20      	cmp	r2, #32
   b84ee:	d101      	bne.n	b84f4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
   b84f0:	461e      	mov	r6, r3
   b84f2:	e7f7      	b.n	b84e4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        } else if (*s == '(') {
   b84f4:	2a28      	cmp	r2, #40	; 0x28
   b84f6:	d1f5      	bne.n	b84e4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        json.name("fn", 2).value(s, n);
   b84f8:	4922      	ldr	r1, [pc, #136]	; (b8584 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
   b84fa:	2202      	movs	r2, #2
   b84fc:	a801      	add	r0, sp, #4
   b84fe:	f7ff f8b7 	bl	b7670 <_ZN5spark10JSONWriter4nameEPKcj>
   b8502:	1bba      	subs	r2, r7, r6
   b8504:	4631      	mov	r1, r6
   b8506:	f7ff f8c3 	bl	b7690 <_ZN5spark10JSONWriter5valueEPKcj>
    if (attr.has_time) {
   b850a:	7923      	ldrb	r3, [r4, #4]
   b850c:	0719      	lsls	r1, r3, #28
   b850e:	d507      	bpl.n	b8520 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xfc>
        json.name("t", 1).value((unsigned)attr.time);
   b8510:	491d      	ldr	r1, [pc, #116]	; (b8588 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
   b8512:	2201      	movs	r2, #1
   b8514:	a801      	add	r0, sp, #4
   b8516:	f7ff f8ab 	bl	b7670 <_ZN5spark10JSONWriter4nameEPKcj>
   b851a:	6961      	ldr	r1, [r4, #20]
   b851c:	f7ff f838 	bl	b7590 <_ZN5spark10JSONWriter5valueEj>
    if (attr.has_code) {
   b8520:	7923      	ldrb	r3, [r4, #4]
   b8522:	06da      	lsls	r2, r3, #27
   b8524:	d508      	bpl.n	b8538 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x114>
        json.name("code", 4).value((int)attr.code);
   b8526:	2204      	movs	r2, #4
   b8528:	4918      	ldr	r1, [pc, #96]	; (b858c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
   b852a:	eb0d 0002 	add.w	r0, sp, r2
   b852e:	f7ff f89f 	bl	b7670 <_ZN5spark10JSONWriter4nameEPKcj>
   b8532:	69a1      	ldr	r1, [r4, #24]
   b8534:	f7ff f81a 	bl	b756c <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_details) {
   b8538:	7923      	ldrb	r3, [r4, #4]
   b853a:	069b      	lsls	r3, r3, #26
   b853c:	d507      	bpl.n	b854e <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12a>
        json.name("detail", 6).value(attr.details);
   b853e:	4914      	ldr	r1, [pc, #80]	; (b8590 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
   b8540:	2206      	movs	r2, #6
   b8542:	a801      	add	r0, sp, #4
   b8544:	f7ff f894 	bl	b7670 <_ZN5spark10JSONWriter4nameEPKcj>
   b8548:	69e1      	ldr	r1, [r4, #28]
   b854a:	f7ff f912 	bl	b7772 <_ZN5spark10JSONWriter5valueEPKc>
    json.endObject();
   b854e:	a801      	add	r0, sp, #4
   b8550:	f7fe ffe9 	bl	b7526 <_ZN5spark10JSONWriter9endObjectEv>
    return stream_;
   b8554:	6a28      	ldr	r0, [r5, #32]
    this->stream()->write((const uint8_t*)"\r\n", 2);
   b8556:	490f      	ldr	r1, [pc, #60]	; (b8594 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
   b8558:	6803      	ldr	r3, [r0, #0]
   b855a:	2202      	movs	r2, #2
   b855c:	68db      	ldr	r3, [r3, #12]
   b855e:	4798      	blx	r3
}
   b8560:	b005      	add	sp, #20
   b8562:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b8566:	bf00      	nop
   b8568:	2003e6dc 	.word	0x2003e6dc
   b856c:	000ba4a4 	.word	0x000ba4a4
   b8570:	000ba437 	.word	0x000ba437
   b8574:	000ba488 	.word	0x000ba488
   b8578:	000ba63b 	.word	0x000ba63b
   b857c:	000ba48a 	.word	0x000ba48a
   b8580:	000ba48c 	.word	0x000ba48c
   b8584:	000ba48f 	.word	0x000ba48f
   b8588:	000b993d 	.word	0x000b993d
   b858c:	000ba0d0 	.word	0x000ba0d0
   b8590:	000ba492 	.word	0x000ba492
   b8594:	000ba485 	.word	0x000ba485

000b8598 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b8598:	2300      	movs	r3, #0
   b859a:	6840      	ldr	r0, [r0, #4]
   b859c:	461a      	mov	r2, r3
   b859e:	f7fe b95f 	b.w	b6860 <network_connect>

000b85a2 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b85a2:	6840      	ldr	r0, [r0, #4]
   b85a4:	2200      	movs	r2, #0
   b85a6:	2102      	movs	r1, #2
   b85a8:	f7fe b96a 	b.w	b6880 <network_disconnect>

000b85ac <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b85ac:	2200      	movs	r2, #0
   b85ae:	6840      	ldr	r0, [r0, #4]
   b85b0:	4611      	mov	r1, r2
   b85b2:	f7fe b95d 	b.w	b6870 <network_connecting>

000b85b6 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b85b6:	2200      	movs	r2, #0
   b85b8:	6840      	ldr	r0, [r0, #4]
   b85ba:	4611      	mov	r1, r2
   b85bc:	f7fe b968 	b.w	b6890 <network_ready>

000b85c0 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b85c0:	2300      	movs	r3, #0
   b85c2:	6840      	ldr	r0, [r0, #4]
   b85c4:	461a      	mov	r2, r3
   b85c6:	4619      	mov	r1, r3
   b85c8:	f7fe b96a 	b.w	b68a0 <network_on>

000b85cc <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b85cc:	2300      	movs	r3, #0
   b85ce:	6840      	ldr	r0, [r0, #4]
   b85d0:	461a      	mov	r2, r3
   b85d2:	4619      	mov	r1, r3
   b85d4:	f7fe b96c 	b.w	b68b0 <network_off>

000b85d8 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b85d8:	6840      	ldr	r0, [r0, #4]
   b85da:	2100      	movs	r1, #0
   b85dc:	f7fe b990 	b.w	b6900 <network_is_on>

000b85e0 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b85e0:	6840      	ldr	r0, [r0, #4]
   b85e2:	2100      	movs	r1, #0
   b85e4:	f7fe b994 	b.w	b6910 <network_is_off>

000b85e8 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b85e8:	6840      	ldr	r0, [r0, #4]
   b85ea:	2200      	movs	r2, #0
   b85ec:	f081 0101 	eor.w	r1, r1, #1
   b85f0:	f7fe b966 	b.w	b68c0 <network_listen>

000b85f4 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b85f4:	6840      	ldr	r0, [r0, #4]
   b85f6:	2200      	movs	r2, #0
   b85f8:	f7fe b972 	b.w	b68e0 <network_set_listen_timeout>

000b85fc <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b85fc:	2200      	movs	r2, #0
   b85fe:	6840      	ldr	r0, [r0, #4]
   b8600:	4611      	mov	r1, r2
   b8602:	f7fe b975 	b.w	b68f0 <network_get_listen_timeout>

000b8606 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b8606:	2200      	movs	r2, #0
   b8608:	6840      	ldr	r0, [r0, #4]
   b860a:	4611      	mov	r1, r2
   b860c:	f7fe b960 	b.w	b68d0 <network_listening>

000b8610 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b8610:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b8614:	b095      	sub	sp, #84	; 0x54
   b8616:	4614      	mov	r4, r2
   b8618:	460d      	mov	r5, r1
   b861a:	4607      	mov	r7, r0
    IPAddress addr;
   b861c:	f7fe fe32 	bl	b7284 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b8620:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b8622:	221c      	movs	r2, #28
   b8624:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b8626:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b8628:	f000 fdf4 	bl	b9214 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b862c:	2340      	movs	r3, #64	; 0x40
   b862e:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b8630:	4620      	mov	r0, r4
   b8632:	466b      	mov	r3, sp
   b8634:	aa0c      	add	r2, sp, #48	; 0x30
   b8636:	2100      	movs	r1, #0
   b8638:	f7fe f806 	bl	b6648 <netdb_getaddrinfo>
    if (!r) {
   b863c:	4604      	mov	r4, r0
   b863e:	2800      	cmp	r0, #0
   b8640:	d14b      	bne.n	b86da <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b8642:	4602      	mov	r2, r0
   b8644:	2101      	movs	r1, #1
   b8646:	6868      	ldr	r0, [r5, #4]
   b8648:	f7fe f922 	bl	b6890 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b864c:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b864e:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b8650:	4622      	mov	r2, r4
   b8652:	6868      	ldr	r0, [r5, #4]
   b8654:	f7fe f91c 	bl	b6890 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b8658:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b865a:	4681      	mov	r9, r0
        bool ok = false;
   b865c:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b865e:	2e00      	cmp	r6, #0
   b8660:	d03b      	beq.n	b86da <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b8662:	2900      	cmp	r1, #0
   b8664:	d139      	bne.n	b86da <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b8666:	6873      	ldr	r3, [r6, #4]
   b8668:	2b02      	cmp	r3, #2
   b866a:	d003      	beq.n	b8674 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b866c:	2b0a      	cmp	r3, #10
   b866e:	d011      	beq.n	b8694 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b8670:	69f6      	ldr	r6, [r6, #28]
   b8672:	e7f4      	b.n	b865e <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b8674:	f1b8 0f00 	cmp.w	r8, #0
   b8678:	d0fa      	beq.n	b8670 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b867a:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b867c:	a806      	add	r0, sp, #24
   b867e:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b8680:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b8682:	f7fe fe2d 	bl	b72e0 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b8686:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b8688:	1d3c      	adds	r4, r7, #4
   b868a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b868c:	682b      	ldr	r3, [r5, #0]
   b868e:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b8690:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b8692:	e7ed      	b.n	b8670 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b8694:	f1b9 0f00 	cmp.w	r9, #0
   b8698:	d0ea      	beq.n	b8670 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b869a:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b869c:	2210      	movs	r2, #16
   b869e:	a801      	add	r0, sp, #4
   b86a0:	f000 fdb8 	bl	b9214 <memset>
                    a.v = 6;
   b86a4:	2306      	movs	r3, #6
   b86a6:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b86aa:	ad01      	add	r5, sp, #4
   b86ac:	f104 0308 	add.w	r3, r4, #8
   b86b0:	3418      	adds	r4, #24
   b86b2:	6818      	ldr	r0, [r3, #0]
   b86b4:	6859      	ldr	r1, [r3, #4]
   b86b6:	462a      	mov	r2, r5
   b86b8:	c203      	stmia	r2!, {r0, r1}
   b86ba:	3308      	adds	r3, #8
   b86bc:	42a3      	cmp	r3, r4
   b86be:	4615      	mov	r5, r2
   b86c0:	d1f7      	bne.n	b86b2 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b86c2:	a901      	add	r1, sp, #4
   b86c4:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b86c6:	ad07      	add	r5, sp, #28
   b86c8:	f7fe fdea 	bl	b72a0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b86cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b86ce:	1d3c      	adds	r4, r7, #4
   b86d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b86d2:	682b      	ldr	r3, [r5, #0]
   b86d4:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b86d6:	4649      	mov	r1, r9
   b86d8:	e7ca      	b.n	b8670 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b86da:	9800      	ldr	r0, [sp, #0]
   b86dc:	f7fd ffac 	bl	b6638 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b86e0:	4638      	mov	r0, r7
   b86e2:	b015      	add	sp, #84	; 0x54
   b86e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b86e8 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b86e8:	4b02      	ldr	r3, [pc, #8]	; (b86f4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b86ea:	4a03      	ldr	r2, [pc, #12]	; (b86f8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b86ec:	601a      	str	r2, [r3, #0]
   b86ee:	2200      	movs	r2, #0
   b86f0:	605a      	str	r2, [r3, #4]

} // spark
   b86f2:	4770      	bx	lr
   b86f4:	2003e6dc 	.word	0x2003e6dc
   b86f8:	000ba51c 	.word	0x000ba51c

000b86fc <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b86fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b86fe:	4606      	mov	r6, r0
   b8700:	460d      	mov	r5, r1
  size_t n = 0;
   b8702:	188f      	adds	r7, r1, r2
   b8704:	2400      	movs	r4, #0
  while (size--) {
   b8706:	42bd      	cmp	r5, r7
   b8708:	d00c      	beq.n	b8724 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b870a:	6833      	ldr	r3, [r6, #0]
   b870c:	f815 1b01 	ldrb.w	r1, [r5], #1
   b8710:	689b      	ldr	r3, [r3, #8]
   b8712:	4630      	mov	r0, r6
   b8714:	4798      	blx	r3
     if (chunk>=0)
   b8716:	1e03      	subs	r3, r0, #0
   b8718:	db01      	blt.n	b871e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b871a:	441c      	add	r4, r3
  while (size--) {
   b871c:	e7f3      	b.n	b8706 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b871e:	2c00      	cmp	r4, #0
   b8720:	bf08      	it	eq
   b8722:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b8724:	4620      	mov	r0, r4
   b8726:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b8728 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b8728:	b513      	push	{r0, r1, r4, lr}
   b872a:	4604      	mov	r4, r0
    }
   b872c:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b872e:	b159      	cbz	r1, b8748 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b8730:	9101      	str	r1, [sp, #4]
   b8732:	f000 fdec 	bl	b930e <strlen>
   b8736:	6823      	ldr	r3, [r4, #0]
   b8738:	9901      	ldr	r1, [sp, #4]
   b873a:	68db      	ldr	r3, [r3, #12]
   b873c:	4602      	mov	r2, r0
   b873e:	4620      	mov	r0, r4
    }
   b8740:	b002      	add	sp, #8
   b8742:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b8746:	4718      	bx	r3
    }
   b8748:	b002      	add	sp, #8
   b874a:	bd10      	pop	{r4, pc}

000b874c <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   b874c:	6803      	ldr	r3, [r0, #0]
   b874e:	689b      	ldr	r3, [r3, #8]
   b8750:	4718      	bx	r3

000b8752 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b8752:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b8754:	210d      	movs	r1, #13
{
   b8756:	4605      	mov	r5, r0
  size_t n = print('\r');
   b8758:	f7ff fff8 	bl	b874c <_ZN5Print5printEc>
  n += print('\n');
   b875c:	210a      	movs	r1, #10
  size_t n = print('\r');
   b875e:	4604      	mov	r4, r0
  n += print('\n');
   b8760:	4628      	mov	r0, r5
   b8762:	f7ff fff3 	bl	b874c <_ZN5Print5printEc>
  return n;
}
   b8766:	4420      	add	r0, r4
   b8768:	bd38      	pop	{r3, r4, r5, pc}

000b876a <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b876a:	b530      	push	{r4, r5, lr}
   b876c:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b876e:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b8770:	2a01      	cmp	r2, #1
  *str = '\0';
   b8772:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b8776:	bf98      	it	ls
   b8778:	220a      	movls	r2, #10
   b877a:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b877c:	460d      	mov	r5, r1
   b877e:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b8782:	fb01 5312 	mls	r3, r1, r2, r5
   b8786:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b878a:	2b09      	cmp	r3, #9
   b878c:	bf94      	ite	ls
   b878e:	3330      	addls	r3, #48	; 0x30
   b8790:	3337      	addhi	r3, #55	; 0x37
   b8792:	b2db      	uxtb	r3, r3
  } while(n);
   b8794:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b8796:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b879a:	d9ef      	bls.n	b877c <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b879c:	4621      	mov	r1, r4
   b879e:	f7ff ffc3 	bl	b8728 <_ZN5Print5writeEPKc>
}
   b87a2:	b00b      	add	sp, #44	; 0x2c
   b87a4:	bd30      	pop	{r4, r5, pc}

000b87a6 <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b87a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b87aa:	b086      	sub	sp, #24
   b87ac:	af00      	add	r7, sp, #0
   b87ae:	4605      	mov	r5, r0
   b87b0:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b87b2:	1d38      	adds	r0, r7, #4
   b87b4:	2114      	movs	r1, #20
{
   b87b6:	4614      	mov	r4, r2
    va_copy(args2, args);
   b87b8:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b87ba:	f7fe f8e1 	bl	b6980 <vsnprintf>

    if (n<bufsize)
   b87be:	2813      	cmp	r0, #19
   b87c0:	d80e      	bhi.n	b87e0 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b87c2:	1d39      	adds	r1, r7, #4
   b87c4:	4628      	mov	r0, r5
   b87c6:	f7ff ffaf 	bl	b8728 <_ZN5Print5writeEPKc>
   b87ca:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b87cc:	b11e      	cbz	r6, b87d6 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b87ce:	4628      	mov	r0, r5
   b87d0:	f7ff ffbf 	bl	b8752 <_ZN5Print7printlnEv>
   b87d4:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b87d6:	4620      	mov	r0, r4
   b87d8:	3718      	adds	r7, #24
   b87da:	46bd      	mov	sp, r7
   b87dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b87e0:	f100 0308 	add.w	r3, r0, #8
   b87e4:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b87e8:	46e8      	mov	r8, sp
        char bigger[n+1];
   b87ea:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b87ee:	4622      	mov	r2, r4
   b87f0:	1c41      	adds	r1, r0, #1
   b87f2:	683b      	ldr	r3, [r7, #0]
   b87f4:	4668      	mov	r0, sp
   b87f6:	f7fe f8c3 	bl	b6980 <vsnprintf>
  return write(str);
   b87fa:	4669      	mov	r1, sp
   b87fc:	4628      	mov	r0, r5
   b87fe:	f7ff ff93 	bl	b8728 <_ZN5Print5writeEPKc>
   b8802:	4604      	mov	r4, r0
   b8804:	46c5      	mov	sp, r8
   b8806:	e7e1      	b.n	b87cc <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b8808 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   b8808:	4b01      	ldr	r3, [pc, #4]	; (b8810 <_GLOBAL__sub_I_RGB+0x8>)
   b880a:	2200      	movs	r2, #0
   b880c:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b880e:	4770      	bx	lr
   b8810:	2003e6e4 	.word	0x2003e6e4

000b8814 <_ZN6StringD1Ev>:
    init();
    char buf[33] = {};
    dtoa(value, decimalPlaces, buf);
  *this = buf;
}
String::~String()
   b8814:	b510      	push	{r4, lr}
   b8816:	4604      	mov	r4, r0
{
    free(buffer);
   b8818:	6800      	ldr	r0, [r0, #0]
   b881a:	f7fe f889 	bl	b6930 <free>
}
   b881e:	4620      	mov	r0, r4
   b8820:	bd10      	pop	{r4, pc}

000b8822 <_ZN6String10invalidateEv>:
    len = 0;
    flags = 0;
}

void String::invalidate(void)
{
   b8822:	b510      	push	{r4, lr}
   b8824:	4604      	mov	r4, r0
    if (buffer) {
   b8826:	6800      	ldr	r0, [r0, #0]
   b8828:	b108      	cbz	r0, b882e <_ZN6String10invalidateEv+0xc>
        free(buffer);
   b882a:	f7fe f881 	bl	b6930 <free>
    }
    buffer = nullptr;
   b882e:	2300      	movs	r3, #0
    capacity = len = 0;
   b8830:	e9c4 3301 	strd	r3, r3, [r4, #4]
    buffer = nullptr;
   b8834:	6023      	str	r3, [r4, #0]
}
   b8836:	bd10      	pop	{r4, pc}

000b8838 <_ZN6String12changeBufferEj>:
    }
    return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b8838:	b538      	push	{r3, r4, r5, lr}
   b883a:	4604      	mov	r4, r0
   b883c:	460d      	mov	r5, r1
    char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b883e:	6800      	ldr	r0, [r0, #0]
   b8840:	3101      	adds	r1, #1
   b8842:	f7fe f87d 	bl	b6940 <realloc>
    if (newbuffer) {
   b8846:	b110      	cbz	r0, b884e <_ZN6String12changeBufferEj+0x16>
        buffer = newbuffer;
        capacity = maxStrLen;
   b8848:	e9c4 0500 	strd	r0, r5, [r4]
        return 1;
   b884c:	2001      	movs	r0, #1
    }
    return 0;
}
   b884e:	bd38      	pop	{r3, r4, r5, pc}

000b8850 <_ZN6String7reserveEj>:
{
   b8850:	b510      	push	{r4, lr}
    if (buffer && capacity >= size) {
   b8852:	6803      	ldr	r3, [r0, #0]
{
   b8854:	4604      	mov	r4, r0
    if (buffer && capacity >= size) {
   b8856:	b123      	cbz	r3, b8862 <_ZN6String7reserveEj+0x12>
   b8858:	6843      	ldr	r3, [r0, #4]
   b885a:	428b      	cmp	r3, r1
   b885c:	d301      	bcc.n	b8862 <_ZN6String7reserveEj+0x12>
   b885e:	2001      	movs	r0, #1
}
   b8860:	bd10      	pop	{r4, pc}
    if (changeBuffer(size)) {
   b8862:	4620      	mov	r0, r4
   b8864:	f7ff ffe8 	bl	b8838 <_ZN6String12changeBufferEj>
   b8868:	2800      	cmp	r0, #0
   b886a:	d0f9      	beq.n	b8860 <_ZN6String7reserveEj+0x10>
        if (len == 0) {
   b886c:	68a3      	ldr	r3, [r4, #8]
   b886e:	2b00      	cmp	r3, #0
   b8870:	d1f5      	bne.n	b885e <_ZN6String7reserveEj+0xe>
            buffer[0] = 0;
   b8872:	6822      	ldr	r2, [r4, #0]
   b8874:	7013      	strb	r3, [r2, #0]
   b8876:	e7f2      	b.n	b885e <_ZN6String7reserveEj+0xe>

000b8878 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b8878:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b887a:	460d      	mov	r5, r1
    if (!reserve(length)) {
   b887c:	4611      	mov	r1, r2
   b887e:	9201      	str	r2, [sp, #4]
{
   b8880:	4604      	mov	r4, r0
    if (!reserve(length)) {
   b8882:	f7ff ffe5 	bl	b8850 <_ZN6String7reserveEj>
   b8886:	9a01      	ldr	r2, [sp, #4]
   b8888:	b928      	cbnz	r0, b8896 <_ZN6String4copyEPKcj+0x1e>
        invalidate();
   b888a:	4620      	mov	r0, r4
   b888c:	f7ff ffc9 	bl	b8822 <_ZN6String10invalidateEv>
    }
    len = length;
    memcpy(buffer, cstr, length);
    buffer[len] = 0;
    return *this;
}
   b8890:	4620      	mov	r0, r4
   b8892:	b003      	add	sp, #12
   b8894:	bd30      	pop	{r4, r5, pc}
    len = length;
   b8896:	60a2      	str	r2, [r4, #8]
    memcpy(buffer, cstr, length);
   b8898:	4629      	mov	r1, r5
   b889a:	6820      	ldr	r0, [r4, #0]
   b889c:	f000 fc92 	bl	b91c4 <memcpy>
    buffer[len] = 0;
   b88a0:	6822      	ldr	r2, [r4, #0]
   b88a2:	68a3      	ldr	r3, [r4, #8]
   b88a4:	2100      	movs	r1, #0
   b88a6:	54d1      	strb	r1, [r2, r3]
    return *this;
   b88a8:	e7f2      	b.n	b8890 <_ZN6String4copyEPKcj+0x18>

000b88aa <_ZN6StringC1EPK19__FlashStringHelper>:
    buffer = nullptr;
   b88aa:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b88ac:	b513      	push	{r0, r1, r4, lr}
    capacity = 0;
   b88ae:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b88b2:	4604      	mov	r4, r0
    len = 0;
   b88b4:	6083      	str	r3, [r0, #8]
    flags = 0;
   b88b6:	7303      	strb	r3, [r0, #12]
    if (cstr) {
   b88b8:	b141      	cbz	r1, b88cc <_ZN6StringC1EPK19__FlashStringHelper+0x22>
        copy(cstr, strlen(cstr));
   b88ba:	4608      	mov	r0, r1
   b88bc:	9101      	str	r1, [sp, #4]
   b88be:	f000 fd26 	bl	b930e <strlen>
   b88c2:	9901      	ldr	r1, [sp, #4]
   b88c4:	4602      	mov	r2, r0
   b88c6:	4620      	mov	r0, r4
   b88c8:	f7ff ffd6 	bl	b8878 <_ZN6String4copyEPKcj>
}
   b88cc:	4620      	mov	r0, r4
   b88ce:	b002      	add	sp, #8
   b88d0:	bd10      	pop	{r4, pc}

000b88d2 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   b88d2:	b538      	push	{r3, r4, r5, lr}
   b88d4:	4605      	mov	r5, r0
    if (buffer) {
   b88d6:	6800      	ldr	r0, [r0, #0]
{
   b88d8:	460c      	mov	r4, r1
    if (buffer) {
   b88da:	b170      	cbz	r0, b88fa <_ZN6String4moveERS_+0x28>
        if (capacity >= rhs.len && rhs.buffer) {
   b88dc:	686a      	ldr	r2, [r5, #4]
   b88de:	688b      	ldr	r3, [r1, #8]
   b88e0:	429a      	cmp	r2, r3
   b88e2:	d308      	bcc.n	b88f6 <_ZN6String4moveERS_+0x24>
   b88e4:	6809      	ldr	r1, [r1, #0]
   b88e6:	b131      	cbz	r1, b88f6 <_ZN6String4moveERS_+0x24>
            strcpy(buffer, rhs.buffer);
   b88e8:	f000 fceb 	bl	b92c2 <strcpy>
            len = rhs.len;
   b88ec:	68a3      	ldr	r3, [r4, #8]
   b88ee:	60ab      	str	r3, [r5, #8]
            rhs.len = 0;
   b88f0:	2300      	movs	r3, #0
    buffer = rhs.buffer;
    capacity = rhs.capacity;
    len = rhs.len;
    rhs.buffer = nullptr;
    rhs.capacity = 0;
    rhs.len = 0;
   b88f2:	60a3      	str	r3, [r4, #8]
}
   b88f4:	bd38      	pop	{r3, r4, r5, pc}
            free(buffer);
   b88f6:	f7fe f81b 	bl	b6930 <free>
    buffer = rhs.buffer;
   b88fa:	6823      	ldr	r3, [r4, #0]
   b88fc:	602b      	str	r3, [r5, #0]
    capacity = rhs.capacity;
   b88fe:	6863      	ldr	r3, [r4, #4]
   b8900:	606b      	str	r3, [r5, #4]
    len = rhs.len;
   b8902:	68a3      	ldr	r3, [r4, #8]
   b8904:	60ab      	str	r3, [r5, #8]
    rhs.buffer = nullptr;
   b8906:	2300      	movs	r3, #0
    rhs.capacity = 0;
   b8908:	e9c4 3300 	strd	r3, r3, [r4]
   b890c:	e7f1      	b.n	b88f2 <_ZN6String4moveERS_+0x20>

000b890e <_ZN6StringC1EOS_>:
String::String(String &&rval)
   b890e:	b510      	push	{r4, lr}
    buffer = nullptr;
   b8910:	2300      	movs	r3, #0
    capacity = 0;
   b8912:	e9c0 3300 	strd	r3, r3, [r0]
String::String(String &&rval)
   b8916:	4604      	mov	r4, r0
    len = 0;
   b8918:	6083      	str	r3, [r0, #8]
    flags = 0;
   b891a:	7303      	strb	r3, [r0, #12]
    move(rval);
   b891c:	f7ff ffd9 	bl	b88d2 <_ZN6String4moveERS_>
}
   b8920:	4620      	mov	r0, r4
   b8922:	bd10      	pop	{r4, pc}

000b8924 <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
    if (this == &rhs) {
   b8924:	4288      	cmp	r0, r1
{
   b8926:	b510      	push	{r4, lr}
   b8928:	4604      	mov	r4, r0
    if (this == &rhs) {
   b892a:	d005      	beq.n	b8938 <_ZN6StringaSERKS_+0x14>
        return *this;
    }

    if (rhs.buffer) {
   b892c:	680b      	ldr	r3, [r1, #0]
   b892e:	b12b      	cbz	r3, b893c <_ZN6StringaSERKS_+0x18>
        copy(rhs.buffer, rhs.len);
   b8930:	688a      	ldr	r2, [r1, #8]
   b8932:	4619      	mov	r1, r3
   b8934:	f7ff ffa0 	bl	b8878 <_ZN6String4copyEPKcj>
    else {
        invalidate();
    }

    return *this;
}
   b8938:	4620      	mov	r0, r4
   b893a:	bd10      	pop	{r4, pc}
        invalidate();
   b893c:	f7ff ff71 	bl	b8822 <_ZN6String10invalidateEv>
   b8940:	e7fa      	b.n	b8938 <_ZN6StringaSERKS_+0x14>

000b8942 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   b8942:	b510      	push	{r4, lr}
    buffer = nullptr;
   b8944:	2300      	movs	r3, #0
String::String(const String &value)
   b8946:	4604      	mov	r4, r0
    capacity = 0;
   b8948:	e9c0 3300 	strd	r3, r3, [r0]
    len = 0;
   b894c:	6083      	str	r3, [r0, #8]
    flags = 0;
   b894e:	7303      	strb	r3, [r0, #12]
    *this = value;
   b8950:	f7ff ffe8 	bl	b8924 <_ZN6StringaSERKS_>
}
   b8954:	4620      	mov	r0, r4
   b8956:	bd10      	pop	{r4, pc}

000b8958 <_ZN6StringaSEPKc>:
    return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   b8958:	b513      	push	{r0, r1, r4, lr}
   b895a:	4604      	mov	r4, r0
    if (cstr) {
   b895c:	b159      	cbz	r1, b8976 <_ZN6StringaSEPKc+0x1e>
        copy(cstr, strlen(cstr));
   b895e:	4608      	mov	r0, r1
   b8960:	9101      	str	r1, [sp, #4]
   b8962:	f000 fcd4 	bl	b930e <strlen>
   b8966:	9901      	ldr	r1, [sp, #4]
   b8968:	4602      	mov	r2, r0
   b896a:	4620      	mov	r0, r4
   b896c:	f7ff ff84 	bl	b8878 <_ZN6String4copyEPKcj>
    else {
        invalidate();
    }

    return *this;
}
   b8970:	4620      	mov	r0, r4
   b8972:	b002      	add	sp, #8
   b8974:	bd10      	pop	{r4, pc}
        invalidate();
   b8976:	f7ff ff54 	bl	b8822 <_ZN6String10invalidateEv>
   b897a:	e7f9      	b.n	b8970 <_ZN6StringaSEPKc+0x18>

000b897c <_ZN6String6concatEPKcj>:
{
    return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   b897c:	b570      	push	{r4, r5, r6, lr}
   b897e:	4605      	mov	r5, r0
    unsigned int newlen = len + length;
    if (!cstr) {
   b8980:	460e      	mov	r6, r1
   b8982:	b909      	cbnz	r1, b8988 <_ZN6String6concatEPKcj+0xc>
        return 0;
   b8984:	2000      	movs	r0, #0
        return 0;
    }
    strcpy(buffer + len, cstr);
    len = newlen;
    return 1;
}
   b8986:	bd70      	pop	{r4, r5, r6, pc}
    if (length == 0) {
   b8988:	b16a      	cbz	r2, b89a6 <_ZN6String6concatEPKcj+0x2a>
    unsigned int newlen = len + length;
   b898a:	6884      	ldr	r4, [r0, #8]
   b898c:	4414      	add	r4, r2
    if (!reserve(newlen)) {
   b898e:	4621      	mov	r1, r4
   b8990:	f7ff ff5e 	bl	b8850 <_ZN6String7reserveEj>
   b8994:	2800      	cmp	r0, #0
   b8996:	d0f5      	beq.n	b8984 <_ZN6String6concatEPKcj+0x8>
    strcpy(buffer + len, cstr);
   b8998:	6828      	ldr	r0, [r5, #0]
   b899a:	68ab      	ldr	r3, [r5, #8]
   b899c:	4631      	mov	r1, r6
   b899e:	4418      	add	r0, r3
   b89a0:	f000 fc8f 	bl	b92c2 <strcpy>
    len = newlen;
   b89a4:	60ac      	str	r4, [r5, #8]
        return 1;
   b89a6:	2001      	movs	r0, #1
   b89a8:	e7ed      	b.n	b8986 <_ZN6String6concatEPKcj+0xa>

000b89aa <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
    return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
   b89aa:	b507      	push	{r0, r1, r2, lr}
    char buf[2] = {};
   b89ac:	2300      	movs	r3, #0
   b89ae:	f8ad 3004 	strh.w	r3, [sp, #4]
    buf[0] = c;
    buf[1] = 0;
    return concat(buf, 1);
   b89b2:	2201      	movs	r2, #1
    buf[0] = c;
   b89b4:	f88d 1004 	strb.w	r1, [sp, #4]
    return concat(buf, 1);
   b89b8:	a901      	add	r1, sp, #4
   b89ba:	f7ff ffdf 	bl	b897c <_ZN6String6concatEPKcj>
}
   b89be:	b003      	add	sp, #12
   b89c0:	f85d fb04 	ldr.w	pc, [sp], #4

000b89c4 <_ZNK6String6equalsEPKc>:
{
    return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   b89c4:	b508      	push	{r3, lr}
    if (len == 0) {
   b89c6:	6882      	ldr	r2, [r0, #8]
   b89c8:	b93a      	cbnz	r2, b89da <_ZNK6String6equalsEPKc+0x16>
        return (cstr == nullptr || *cstr == 0);
   b89ca:	b121      	cbz	r1, b89d6 <_ZNK6String6equalsEPKc+0x12>
   b89cc:	7808      	ldrb	r0, [r1, #0]
    }
    if (cstr == nullptr) {
        return buffer[0] == 0;
    }
    return strcmp(buffer, cstr) == 0;
   b89ce:	fab0 f080 	clz	r0, r0
   b89d2:	0940      	lsrs	r0, r0, #5
   b89d4:	e000      	b.n	b89d8 <_ZNK6String6equalsEPKc+0x14>
        return (cstr == nullptr || *cstr == 0);
   b89d6:	2001      	movs	r0, #1
}
   b89d8:	bd08      	pop	{r3, pc}
        return buffer[0] == 0;
   b89da:	6800      	ldr	r0, [r0, #0]
    if (cstr == nullptr) {
   b89dc:	b909      	cbnz	r1, b89e2 <_ZNK6String6equalsEPKc+0x1e>
        return buffer[0] == 0;
   b89de:	7800      	ldrb	r0, [r0, #0]
   b89e0:	e7f5      	b.n	b89ce <_ZNK6String6equalsEPKc+0xa>
    return strcmp(buffer, cstr) == 0;
   b89e2:	f000 fc64 	bl	b92ae <strcmp>
   b89e6:	e7f2      	b.n	b89ce <_ZNK6String6equalsEPKc+0xa>

000b89e8 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b89e8:	4b05      	ldr	r3, [pc, #20]	; (b8a00 <_GLOBAL__sub_I_System+0x18>)
   b89ea:	2202      	movs	r2, #2
   b89ec:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b89ee:	4b05      	ldr	r3, [pc, #20]	; (b8a04 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b89f0:	4a05      	ldr	r2, [pc, #20]	; (b8a08 <_GLOBAL__sub_I_System+0x20>)
   b89f2:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b89f4:	2000      	movs	r0, #0
   b89f6:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b89fa:	f7fd bee5 	b.w	b67c8 <set_system_mode>
   b89fe:	bf00      	nop
   b8a00:	2003e700 	.word	0x2003e700
   b8a04:	2003e6f4 	.word	0x2003e6f4
   b8a08:	ffff0000 	.word	0xffff0000

000b8a0c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b8a0c:	4b02      	ldr	r3, [pc, #8]	; (b8a18 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b8a0e:	681a      	ldr	r2, [r3, #0]
   b8a10:	4b02      	ldr	r3, [pc, #8]	; (b8a1c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b8a12:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b8a14:	4770      	bx	lr
   b8a16:	bf00      	nop
   b8a18:	2003b714 	.word	0x2003b714
   b8a1c:	2003e704 	.word	0x2003e704

000b8a20 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b8a20:	4770      	bx	lr

000b8a22 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b8a22:	7441      	strb	r1, [r0, #17]
}
   b8a24:	4770      	bx	lr

000b8a26 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b8a26:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b8a28:	7c00      	ldrb	r0, [r0, #16]
   b8a2a:	f7fd fe45 	bl	b66b8 <hal_usart_available_data_for_write>
}
   b8a2e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b8a32:	bd08      	pop	{r3, pc}

000b8a34 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b8a34:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b8a36:	7c00      	ldrb	r0, [r0, #16]
   b8a38:	f7fd fe1e 	bl	b6678 <hal_usart_available>
}
   b8a3c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b8a40:	bd08      	pop	{r3, pc}

000b8a42 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b8a42:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b8a44:	7c00      	ldrb	r0, [r0, #16]
   b8a46:	f7fd fe27 	bl	b6698 <hal_usart_peek>
}
   b8a4a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b8a4e:	bd08      	pop	{r3, pc}

000b8a50 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b8a50:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b8a52:	7c00      	ldrb	r0, [r0, #16]
   b8a54:	f7fd fe18 	bl	b6688 <hal_usart_read>
}
   b8a58:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b8a5c:	bd08      	pop	{r3, pc}

000b8a5e <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b8a5e:	7c00      	ldrb	r0, [r0, #16]
   b8a60:	f7fd be22 	b.w	b66a8 <hal_usart_flush>

000b8a64 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b8a64:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b8a66:	7c45      	ldrb	r5, [r0, #17]
{
   b8a68:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b8a6a:	b12d      	cbz	r5, b8a78 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b8a6c:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b8a6e:	b003      	add	sp, #12
   b8a70:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b8a74:	f7fd bdf8 	b.w	b6668 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b8a78:	7c00      	ldrb	r0, [r0, #16]
   b8a7a:	9101      	str	r1, [sp, #4]
   b8a7c:	f7fd fe1c 	bl	b66b8 <hal_usart_available_data_for_write>
   b8a80:	2800      	cmp	r0, #0
   b8a82:	9901      	ldr	r1, [sp, #4]
   b8a84:	dcf2      	bgt.n	b8a6c <_ZN11USARTSerial5writeEh+0x8>
}
   b8a86:	4628      	mov	r0, r5
   b8a88:	b003      	add	sp, #12
   b8a8a:	bd30      	pop	{r4, r5, pc}

000b8a8c <_ZN11USARTSerialD0Ev>:
   b8a8c:	b510      	push	{r4, lr}
   b8a8e:	2114      	movs	r1, #20
   b8a90:	4604      	mov	r4, r0
   b8a92:	f7fb fb02 	bl	b409a <_ZdlPvj>
   b8a96:	4620      	mov	r0, r4
   b8a98:	bd10      	pop	{r4, pc}
	...

000b8a9c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b8a9c:	b510      	push	{r4, lr}
   b8a9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b8aa2:	4604      	mov	r4, r0
   b8aa4:	4608      	mov	r0, r1
   b8aa6:	4611      	mov	r1, r2
   b8aa8:	2200      	movs	r2, #0
   b8aaa:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b8aae:	4b04      	ldr	r3, [pc, #16]	; (b8ac0 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b8ab0:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b8ab2:	2301      	movs	r3, #1
  _serial = serial;
   b8ab4:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b8ab6:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b8ab8:	f7fd fe0e 	bl	b66d8 <hal_usart_init_ex>
}
   b8abc:	4620      	mov	r0, r4
   b8abe:	bd10      	pop	{r4, pc}
   b8ac0:	000ba574 	.word	0x000ba574

000b8ac4 <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
   b8ac4:	7c00      	ldrb	r0, [r0, #16]
   b8ac6:	2300      	movs	r3, #0
   b8ac8:	f7fd bdfe 	b.w	b66c8 <hal_usart_begin_config>

000b8acc <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
   b8acc:	2200      	movs	r2, #0
   b8ace:	f7ff bff9 	b.w	b8ac4 <_ZN11USARTSerial5beginEmm>

000b8ad2 <_ZN11USARTSerial3endEv>:
  hal_usart_end(_serial);
   b8ad2:	7c00      	ldrb	r0, [r0, #16]
   b8ad4:	f7fd bdc0 	b.w	b6658 <hal_usart_end>

000b8ad8 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b8ad8:	7441      	strb	r1, [r0, #17]
}
   b8ada:	4770      	bx	lr

000b8adc <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b8adc:	4770      	bx	lr

000b8ade <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b8ade:	4770      	bx	lr

000b8ae0 <_ZN9USBSerial4readEv>:
{
   b8ae0:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b8ae2:	2100      	movs	r1, #0
   b8ae4:	7c00      	ldrb	r0, [r0, #16]
   b8ae6:	f7fd fe27 	bl	b6738 <HAL_USB_USART_Receive_Data>
}
   b8aea:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b8aee:	bd08      	pop	{r3, pc}

000b8af0 <_ZN9USBSerial4peekEv>:
{
   b8af0:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b8af2:	2101      	movs	r1, #1
   b8af4:	7c00      	ldrb	r0, [r0, #16]
   b8af6:	f7fd fe1f 	bl	b6738 <HAL_USB_USART_Receive_Data>
}
   b8afa:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b8afe:	bd08      	pop	{r3, pc}

000b8b00 <_ZN9USBSerial17availableForWriteEv>:
{
   b8b00:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b8b02:	7c00      	ldrb	r0, [r0, #16]
   b8b04:	f7fd fe10 	bl	b6728 <HAL_USB_USART_Available_Data_For_Write>
}
   b8b08:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b8b0c:	bd08      	pop	{r3, pc}

000b8b0e <_ZN9USBSerial9availableEv>:
{
   b8b0e:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b8b10:	7c00      	ldrb	r0, [r0, #16]
   b8b12:	f7fd fe01 	bl	b6718 <HAL_USB_USART_Available_Data>
}
   b8b16:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b8b1a:	bd08      	pop	{r3, pc}

000b8b1c <_ZN9USBSerial5writeEh>:
{
   b8b1c:	b513      	push	{r0, r1, r4, lr}
   b8b1e:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b8b20:	7c00      	ldrb	r0, [r0, #16]
{
   b8b22:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b8b24:	f7fd fe00 	bl	b6728 <HAL_USB_USART_Available_Data_For_Write>
   b8b28:	2800      	cmp	r0, #0
   b8b2a:	9901      	ldr	r1, [sp, #4]
   b8b2c:	dc01      	bgt.n	b8b32 <_ZN9USBSerial5writeEh+0x16>
   b8b2e:	7c60      	ldrb	r0, [r4, #17]
   b8b30:	b120      	cbz	r0, b8b3c <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b8b32:	7c20      	ldrb	r0, [r4, #16]
   b8b34:	f7fd fe08 	bl	b6748 <HAL_USB_USART_Send_Data>
   b8b38:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b8b3c:	b002      	add	sp, #8
   b8b3e:	bd10      	pop	{r4, pc}

000b8b40 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b8b40:	7c00      	ldrb	r0, [r0, #16]
   b8b42:	f7fd be09 	b.w	b6758 <HAL_USB_USART_Flush_Data>

000b8b46 <_ZN9USBSerialD0Ev>:
   b8b46:	b510      	push	{r4, lr}
   b8b48:	2114      	movs	r1, #20
   b8b4a:	4604      	mov	r4, r0
   b8b4c:	f7fb faa5 	bl	b409a <_ZdlPvj>
   b8b50:	4620      	mov	r0, r4
   b8b52:	bd10      	pop	{r4, pc}

000b8b54 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b8b54:	b510      	push	{r4, lr}
   b8b56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b8b5a:	4604      	mov	r4, r0
   b8b5c:	4608      	mov	r0, r1
   b8b5e:	2100      	movs	r1, #0
   b8b60:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b8b64:	4b04      	ldr	r3, [pc, #16]	; (b8b78 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b8b66:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b8b68:	2301      	movs	r3, #1
  _serial = serial;
   b8b6a:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b8b6c:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b8b6e:	4611      	mov	r1, r2
   b8b70:	f7fd fdba 	bl	b66e8 <HAL_USB_USART_Init>
}
   b8b74:	4620      	mov	r0, r4
   b8b76:	bd10      	pop	{r4, pc}
   b8b78:	000ba5a4 	.word	0x000ba5a4

000b8b7c <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b8b7c:	7c00      	ldrb	r0, [r0, #16]
   b8b7e:	2200      	movs	r2, #0
   b8b80:	f7fd bdba 	b.w	b66f8 <HAL_USB_USART_Begin>

000b8b84 <_ZN9USBSerial3endEv>:
    HAL_USB_USART_End(_serial);
   b8b84:	7c00      	ldrb	r0, [r0, #16]
   b8b86:	f7fd bdbf 	b.w	b6708 <HAL_USB_USART_End>

000b8b8a <_Z19acquireSerialBufferv>:
{
   b8b8a:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b8b8c:	2214      	movs	r2, #20
{
   b8b8e:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b8b90:	2100      	movs	r1, #0
   b8b92:	f000 fb3f 	bl	b9214 <memset>
}
   b8b96:	4620      	mov	r0, r4
   b8b98:	bd10      	pop	{r4, pc}
	...

000b8b9c <_Z16_fetch_usbserialv>:
{
   b8b9c:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b8b9e:	4c0f      	ldr	r4, [pc, #60]	; (b8bdc <_Z16_fetch_usbserialv+0x40>)
{
   b8ba0:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b8ba2:	a803      	add	r0, sp, #12
   b8ba4:	f7ff fff1 	bl	b8b8a <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b8ba8:	7821      	ldrb	r1, [r4, #0]
   b8baa:	f3bf 8f5b 	dmb	ish
   b8bae:	f011 0101 	ands.w	r1, r1, #1
   b8bb2:	d10f      	bne.n	b8bd4 <_Z16_fetch_usbserialv+0x38>
   b8bb4:	4620      	mov	r0, r4
   b8bb6:	9101      	str	r1, [sp, #4]
   b8bb8:	f7fb fa7e 	bl	b40b8 <__cxa_guard_acquire>
   b8bbc:	9901      	ldr	r1, [sp, #4]
   b8bbe:	b148      	cbz	r0, b8bd4 <_Z16_fetch_usbserialv+0x38>
   b8bc0:	aa03      	add	r2, sp, #12
   b8bc2:	4807      	ldr	r0, [pc, #28]	; (b8be0 <_Z16_fetch_usbserialv+0x44>)
   b8bc4:	f7ff ffc6 	bl	b8b54 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b8bc8:	4620      	mov	r0, r4
   b8bca:	f7fb fa7a 	bl	b40c2 <__cxa_guard_release>
   b8bce:	4805      	ldr	r0, [pc, #20]	; (b8be4 <_Z16_fetch_usbserialv+0x48>)
   b8bd0:	f000 faea 	bl	b91a8 <atexit>
	return _usbserial;
}
   b8bd4:	4802      	ldr	r0, [pc, #8]	; (b8be0 <_Z16_fetch_usbserialv+0x44>)
   b8bd6:	b008      	add	sp, #32
   b8bd8:	bd10      	pop	{r4, pc}
   b8bda:	bf00      	nop
   b8bdc:	2003e708 	.word	0x2003e708
   b8be0:	2003e70c 	.word	0x2003e70c
   b8be4:	000b8add 	.word	0x000b8add

000b8be8 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b8be8:	4b01      	ldr	r3, [pc, #4]	; (b8bf0 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b8bea:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b8bec:	4770      	bx	lr
   b8bee:	bf00      	nop
   b8bf0:	2003b718 	.word	0x2003b718

000b8bf4 <serialEventRun>:
{
   b8bf4:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b8bf6:	4b0b      	ldr	r3, [pc, #44]	; (b8c24 <serialEventRun+0x30>)
   b8bf8:	b143      	cbz	r3, b8c0c <serialEventRun+0x18>
   b8bfa:	f7ff ffcf 	bl	b8b9c <_Z16_fetch_usbserialv>
   b8bfe:	6803      	ldr	r3, [r0, #0]
   b8c00:	691b      	ldr	r3, [r3, #16]
   b8c02:	4798      	blx	r3
   b8c04:	2800      	cmp	r0, #0
   b8c06:	dd01      	ble.n	b8c0c <serialEventRun+0x18>
        serialEvent();
   b8c08:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b8c0c:	4b06      	ldr	r3, [pc, #24]	; (b8c28 <serialEventRun+0x34>)
   b8c0e:	b143      	cbz	r3, b8c22 <serialEventRun+0x2e>
   b8c10:	f000 f8e2 	bl	b8dd8 <_Z22__fetch_global_Serial1v>
   b8c14:	6803      	ldr	r3, [r0, #0]
   b8c16:	691b      	ldr	r3, [r3, #16]
   b8c18:	4798      	blx	r3
   b8c1a:	2800      	cmp	r0, #0
   b8c1c:	dd01      	ble.n	b8c22 <serialEventRun+0x2e>
        serialEvent1();
   b8c1e:	f3af 8000 	nop.w
}
   b8c22:	bd08      	pop	{r3, pc}
	...

000b8c2c <_post_loop>:
{
   b8c2c:	b508      	push	{r3, lr}
	serialEventRun();
   b8c2e:	f7ff ffe1 	bl	b8bf4 <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b8c32:	f7fd fc91 	bl	b6558 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b8c36:	4b01      	ldr	r3, [pc, #4]	; (b8c3c <_post_loop+0x10>)
   b8c38:	6018      	str	r0, [r3, #0]
}
   b8c3a:	bd08      	pop	{r3, pc}
   b8c3c:	2003e728 	.word	0x2003e728

000b8c40 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b8c40:	4805      	ldr	r0, [pc, #20]	; (b8c58 <_Z33system_initialize_user_backup_ramv+0x18>)
   b8c42:	4a06      	ldr	r2, [pc, #24]	; (b8c5c <_Z33system_initialize_user_backup_ramv+0x1c>)
   b8c44:	4906      	ldr	r1, [pc, #24]	; (b8c60 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b8c46:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b8c48:	1a12      	subs	r2, r2, r0
   b8c4a:	f000 fabb 	bl	b91c4 <memcpy>
    __backup_sram_signature = signature;
   b8c4e:	4b05      	ldr	r3, [pc, #20]	; (b8c64 <_Z33system_initialize_user_backup_ramv+0x24>)
   b8c50:	4a05      	ldr	r2, [pc, #20]	; (b8c68 <_Z33system_initialize_user_backup_ramv+0x28>)
   b8c52:	601a      	str	r2, [r3, #0]
}
   b8c54:	bd08      	pop	{r3, pc}
   b8c56:	bf00      	nop
   b8c58:	2003f400 	.word	0x2003f400
   b8c5c:	2003f404 	.word	0x2003f404
   b8c60:	000ba794 	.word	0x000ba794
   b8c64:	2003f400 	.word	0x2003f400
   b8c68:	9a271c1e 	.word	0x9a271c1e

000b8c6c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b8c6c:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b8c6e:	2300      	movs	r3, #0
   b8c70:	9300      	str	r3, [sp, #0]
   b8c72:	461a      	mov	r2, r3
   b8c74:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b8c78:	f7fd fdd0 	bl	b681c <system_ctrl_set_result>
}
   b8c7c:	b003      	add	sp, #12
   b8c7e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b8c84 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b8c84:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b8c86:	8843      	ldrh	r3, [r0, #2]
   b8c88:	2b0a      	cmp	r3, #10
   b8c8a:	d008      	beq.n	b8c9e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b8c8c:	2b50      	cmp	r3, #80	; 0x50
   b8c8e:	d10b      	bne.n	b8ca8 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b8c90:	4b09      	ldr	r3, [pc, #36]	; (b8cb8 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b8c92:	681b      	ldr	r3, [r3, #0]
   b8c94:	b14b      	cbz	r3, b8caa <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b8c96:	b003      	add	sp, #12
   b8c98:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b8c9c:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b8c9e:	f7ff ffe5 	bl	b8c6c <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b8ca2:	b003      	add	sp, #12
   b8ca4:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b8ca8:	2300      	movs	r3, #0
   b8caa:	9300      	str	r3, [sp, #0]
   b8cac:	461a      	mov	r2, r3
   b8cae:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b8cb2:	f7fd fdb3 	bl	b681c <system_ctrl_set_result>
}
   b8cb6:	e7f4      	b.n	b8ca2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b8cb8:	2003e724 	.word	0x2003e724

000b8cbc <module_user_init_hook>:
{
   b8cbc:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b8cbe:	4812      	ldr	r0, [pc, #72]	; (b8d08 <module_user_init_hook+0x4c>)
   b8cc0:	2100      	movs	r1, #0
   b8cc2:	f7fd fe85 	bl	b69d0 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b8cc6:	4b11      	ldr	r3, [pc, #68]	; (b8d0c <module_user_init_hook+0x50>)
   b8cc8:	681a      	ldr	r2, [r3, #0]
   b8cca:	4b11      	ldr	r3, [pc, #68]	; (b8d10 <module_user_init_hook+0x54>)
   b8ccc:	429a      	cmp	r2, r3
   b8cce:	4b11      	ldr	r3, [pc, #68]	; (b8d14 <module_user_init_hook+0x58>)
   b8cd0:	bf0c      	ite	eq
   b8cd2:	2201      	moveq	r2, #1
   b8cd4:	2200      	movne	r2, #0
   b8cd6:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b8cd8:	d001      	beq.n	b8cde <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b8cda:	f7ff ffb1 	bl	b8c40 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b8cde:	f7fd fc2b 	bl	b6538 <HAL_RNG_GetRandomNumber>
   b8ce2:	4604      	mov	r4, r0
    srand(seed);
   b8ce4:	f000 fa9e 	bl	b9224 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b8ce8:	4b0b      	ldr	r3, [pc, #44]	; (b8d18 <module_user_init_hook+0x5c>)
   b8cea:	b113      	cbz	r3, b8cf2 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b8cec:	4620      	mov	r0, r4
   b8cee:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b8cf2:	2100      	movs	r1, #0
   b8cf4:	4808      	ldr	r0, [pc, #32]	; (b8d18 <module_user_init_hook+0x5c>)
   b8cf6:	f7fd fdab 	bl	b6850 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b8cfa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b8cfe:	4807      	ldr	r0, [pc, #28]	; (b8d1c <module_user_init_hook+0x60>)
   b8d00:	2100      	movs	r1, #0
   b8d02:	f7fd bd81 	b.w	b6808 <system_ctrl_set_app_request_handler>
   b8d06:	bf00      	nop
   b8d08:	000b8be9 	.word	0x000b8be9
   b8d0c:	2003f400 	.word	0x2003f400
   b8d10:	9a271c1e 	.word	0x9a271c1e
   b8d14:	2003e720 	.word	0x2003e720
   b8d18:	00000000 	.word	0x00000000
   b8d1c:	000b8c85 	.word	0x000b8c85

000b8d20 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b8d20:	4770      	bx	lr
	...

000b8d24 <_Z17acquireWireBufferv>:
{
   b8d24:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b8d26:	4b0a      	ldr	r3, [pc, #40]	; (b8d50 <_Z17acquireWireBufferv+0x2c>)
   b8d28:	6003      	str	r3, [r0, #0]
   b8d2a:	2301      	movs	r3, #1
{
   b8d2c:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b8d2e:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b8d30:	4908      	ldr	r1, [pc, #32]	; (b8d54 <_Z17acquireWireBufferv+0x30>)
   b8d32:	2020      	movs	r0, #32
   b8d34:	f000 f876 	bl	b8e24 <_ZnajRKSt9nothrow_t>
	};
   b8d38:	2520      	movs	r5, #32
   b8d3a:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b8d3c:	4905      	ldr	r1, [pc, #20]	; (b8d54 <_Z17acquireWireBufferv+0x30>)
	};
   b8d3e:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b8d40:	4628      	mov	r0, r5
   b8d42:	f000 f86f 	bl	b8e24 <_ZnajRKSt9nothrow_t>
	};
   b8d46:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   b8d4a:	4620      	mov	r0, r4
   b8d4c:	bd38      	pop	{r3, r4, r5, pc}
   b8d4e:	bf00      	nop
   b8d50:	00010018 	.word	0x00010018
   b8d54:	000ba5cc 	.word	0x000ba5cc

000b8d58 <_Z19__fetch_global_Wirev>:
{
   b8d58:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b8d5a:	4d0e      	ldr	r5, [pc, #56]	; (b8d94 <_Z19__fetch_global_Wirev+0x3c>)
   b8d5c:	7829      	ldrb	r1, [r5, #0]
   b8d5e:	f3bf 8f5b 	dmb	ish
   b8d62:	f011 0401 	ands.w	r4, r1, #1
{
   b8d66:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b8d68:	d111      	bne.n	b8d8e <_Z19__fetch_global_Wirev+0x36>
   b8d6a:	4628      	mov	r0, r5
   b8d6c:	f7fb f9a4 	bl	b40b8 <__cxa_guard_acquire>
   b8d70:	b168      	cbz	r0, b8d8e <_Z19__fetch_global_Wirev+0x36>
   b8d72:	4668      	mov	r0, sp
   b8d74:	f7ff ffd6 	bl	b8d24 <_Z17acquireWireBufferv>
   b8d78:	466a      	mov	r2, sp
   b8d7a:	4621      	mov	r1, r4
   b8d7c:	4806      	ldr	r0, [pc, #24]	; (b8d98 <_Z19__fetch_global_Wirev+0x40>)
   b8d7e:	f7fe f9dd 	bl	b713c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b8d82:	4628      	mov	r0, r5
   b8d84:	f7fb f99d 	bl	b40c2 <__cxa_guard_release>
   b8d88:	4804      	ldr	r0, [pc, #16]	; (b8d9c <_Z19__fetch_global_Wirev+0x44>)
   b8d8a:	f000 fa0d 	bl	b91a8 <atexit>
	return wire;
}
   b8d8e:	4802      	ldr	r0, [pc, #8]	; (b8d98 <_Z19__fetch_global_Wirev+0x40>)
   b8d90:	b007      	add	sp, #28
   b8d92:	bd30      	pop	{r4, r5, pc}
   b8d94:	2003e72c 	.word	0x2003e72c
   b8d98:	2003e730 	.word	0x2003e730
   b8d9c:	000b8d21 	.word	0x000b8d21

000b8da0 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b8da0:	4770      	bx	lr
	...

000b8da4 <_Z20acquireSerial1Bufferv>:
{
   b8da4:	b538      	push	{r3, r4, r5, lr}
   b8da6:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b8da8:	2514      	movs	r5, #20
   b8daa:	462a      	mov	r2, r5
   b8dac:	2100      	movs	r1, #0
   b8dae:	f000 fa31 	bl	b9214 <memset>
   b8db2:	8025      	strh	r5, [r4, #0]
   b8db4:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b8db6:	4907      	ldr	r1, [pc, #28]	; (b8dd4 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b8db8:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b8dba:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b8dbc:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b8dbe:	f000 f831 	bl	b8e24 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b8dc2:	4904      	ldr	r1, [pc, #16]	; (b8dd4 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b8dc4:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b8dc6:	4628      	mov	r0, r5
   b8dc8:	f000 f82c 	bl	b8e24 <_ZnajRKSt9nothrow_t>
    };
   b8dcc:	60e0      	str	r0, [r4, #12]
}
   b8dce:	4620      	mov	r0, r4
   b8dd0:	bd38      	pop	{r3, r4, r5, pc}
   b8dd2:	bf00      	nop
   b8dd4:	000ba5cc 	.word	0x000ba5cc

000b8dd8 <_Z22__fetch_global_Serial1v>:
{
   b8dd8:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b8dda:	4d0e      	ldr	r5, [pc, #56]	; (b8e14 <_Z22__fetch_global_Serial1v+0x3c>)
   b8ddc:	7829      	ldrb	r1, [r5, #0]
   b8dde:	f3bf 8f5b 	dmb	ish
   b8de2:	f011 0401 	ands.w	r4, r1, #1
{
   b8de6:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b8de8:	d111      	bne.n	b8e0e <_Z22__fetch_global_Serial1v+0x36>
   b8dea:	4628      	mov	r0, r5
   b8dec:	f7fb f964 	bl	b40b8 <__cxa_guard_acquire>
   b8df0:	b168      	cbz	r0, b8e0e <_Z22__fetch_global_Serial1v+0x36>
   b8df2:	a801      	add	r0, sp, #4
   b8df4:	f7ff ffd6 	bl	b8da4 <_Z20acquireSerial1Bufferv>
   b8df8:	aa01      	add	r2, sp, #4
   b8dfa:	4621      	mov	r1, r4
   b8dfc:	4806      	ldr	r0, [pc, #24]	; (b8e18 <_Z22__fetch_global_Serial1v+0x40>)
   b8dfe:	f7ff fe4d 	bl	b8a9c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b8e02:	4628      	mov	r0, r5
   b8e04:	f7fb f95d 	bl	b40c2 <__cxa_guard_release>
   b8e08:	4804      	ldr	r0, [pc, #16]	; (b8e1c <_Z22__fetch_global_Serial1v+0x44>)
   b8e0a:	f000 f9cd 	bl	b91a8 <atexit>
    return serial1;
}
   b8e0e:	4802      	ldr	r0, [pc, #8]	; (b8e18 <_Z22__fetch_global_Serial1v+0x40>)
   b8e10:	b007      	add	sp, #28
   b8e12:	bd30      	pop	{r4, r5, pc}
   b8e14:	2003e744 	.word	0x2003e744
   b8e18:	2003e748 	.word	0x2003e748
   b8e1c:	000b8da1 	.word	0x000b8da1

000b8e20 <_ZnwjRKSt9nothrow_t>:
   b8e20:	f7fb b937 	b.w	b4092 <_Znwj>

000b8e24 <_ZnajRKSt9nothrow_t>:
   b8e24:	f7fb b937 	b.w	b4096 <_Znaj>

000b8e28 <_ZSt25__throw_bad_function_callv>:
   b8e28:	b508      	push	{r3, lr}
   b8e2a:	f7fd fdb1 	bl	b6990 <abort>
	...

000b8e30 <__aeabi_drsub>:
   b8e30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   b8e34:	e002      	b.n	b8e3c <__adddf3>
   b8e36:	bf00      	nop

000b8e38 <__aeabi_dsub>:
   b8e38:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000b8e3c <__adddf3>:
   b8e3c:	b530      	push	{r4, r5, lr}
   b8e3e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   b8e42:	ea4f 0543 	mov.w	r5, r3, lsl #1
   b8e46:	ea94 0f05 	teq	r4, r5
   b8e4a:	bf08      	it	eq
   b8e4c:	ea90 0f02 	teqeq	r0, r2
   b8e50:	bf1f      	itttt	ne
   b8e52:	ea54 0c00 	orrsne.w	ip, r4, r0
   b8e56:	ea55 0c02 	orrsne.w	ip, r5, r2
   b8e5a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   b8e5e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b8e62:	f000 80e2 	beq.w	b902a <__adddf3+0x1ee>
   b8e66:	ea4f 5454 	mov.w	r4, r4, lsr #21
   b8e6a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   b8e6e:	bfb8      	it	lt
   b8e70:	426d      	neglt	r5, r5
   b8e72:	dd0c      	ble.n	b8e8e <__adddf3+0x52>
   b8e74:	442c      	add	r4, r5
   b8e76:	ea80 0202 	eor.w	r2, r0, r2
   b8e7a:	ea81 0303 	eor.w	r3, r1, r3
   b8e7e:	ea82 0000 	eor.w	r0, r2, r0
   b8e82:	ea83 0101 	eor.w	r1, r3, r1
   b8e86:	ea80 0202 	eor.w	r2, r0, r2
   b8e8a:	ea81 0303 	eor.w	r3, r1, r3
   b8e8e:	2d36      	cmp	r5, #54	; 0x36
   b8e90:	bf88      	it	hi
   b8e92:	bd30      	pophi	{r4, r5, pc}
   b8e94:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b8e98:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b8e9c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   b8ea0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   b8ea4:	d002      	beq.n	b8eac <__adddf3+0x70>
   b8ea6:	4240      	negs	r0, r0
   b8ea8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b8eac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   b8eb0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b8eb4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   b8eb8:	d002      	beq.n	b8ec0 <__adddf3+0x84>
   b8eba:	4252      	negs	r2, r2
   b8ebc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b8ec0:	ea94 0f05 	teq	r4, r5
   b8ec4:	f000 80a7 	beq.w	b9016 <__adddf3+0x1da>
   b8ec8:	f1a4 0401 	sub.w	r4, r4, #1
   b8ecc:	f1d5 0e20 	rsbs	lr, r5, #32
   b8ed0:	db0d      	blt.n	b8eee <__adddf3+0xb2>
   b8ed2:	fa02 fc0e 	lsl.w	ip, r2, lr
   b8ed6:	fa22 f205 	lsr.w	r2, r2, r5
   b8eda:	1880      	adds	r0, r0, r2
   b8edc:	f141 0100 	adc.w	r1, r1, #0
   b8ee0:	fa03 f20e 	lsl.w	r2, r3, lr
   b8ee4:	1880      	adds	r0, r0, r2
   b8ee6:	fa43 f305 	asr.w	r3, r3, r5
   b8eea:	4159      	adcs	r1, r3
   b8eec:	e00e      	b.n	b8f0c <__adddf3+0xd0>
   b8eee:	f1a5 0520 	sub.w	r5, r5, #32
   b8ef2:	f10e 0e20 	add.w	lr, lr, #32
   b8ef6:	2a01      	cmp	r2, #1
   b8ef8:	fa03 fc0e 	lsl.w	ip, r3, lr
   b8efc:	bf28      	it	cs
   b8efe:	f04c 0c02 	orrcs.w	ip, ip, #2
   b8f02:	fa43 f305 	asr.w	r3, r3, r5
   b8f06:	18c0      	adds	r0, r0, r3
   b8f08:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   b8f0c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b8f10:	d507      	bpl.n	b8f22 <__adddf3+0xe6>
   b8f12:	f04f 0e00 	mov.w	lr, #0
   b8f16:	f1dc 0c00 	rsbs	ip, ip, #0
   b8f1a:	eb7e 0000 	sbcs.w	r0, lr, r0
   b8f1e:	eb6e 0101 	sbc.w	r1, lr, r1
   b8f22:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   b8f26:	d31b      	bcc.n	b8f60 <__adddf3+0x124>
   b8f28:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   b8f2c:	d30c      	bcc.n	b8f48 <__adddf3+0x10c>
   b8f2e:	0849      	lsrs	r1, r1, #1
   b8f30:	ea5f 0030 	movs.w	r0, r0, rrx
   b8f34:	ea4f 0c3c 	mov.w	ip, ip, rrx
   b8f38:	f104 0401 	add.w	r4, r4, #1
   b8f3c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   b8f40:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   b8f44:	f080 809a 	bcs.w	b907c <__adddf3+0x240>
   b8f48:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b8f4c:	bf08      	it	eq
   b8f4e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b8f52:	f150 0000 	adcs.w	r0, r0, #0
   b8f56:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b8f5a:	ea41 0105 	orr.w	r1, r1, r5
   b8f5e:	bd30      	pop	{r4, r5, pc}
   b8f60:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   b8f64:	4140      	adcs	r0, r0
   b8f66:	eb41 0101 	adc.w	r1, r1, r1
   b8f6a:	3c01      	subs	r4, #1
   b8f6c:	bf28      	it	cs
   b8f6e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   b8f72:	d2e9      	bcs.n	b8f48 <__adddf3+0x10c>
   b8f74:	f091 0f00 	teq	r1, #0
   b8f78:	bf04      	itt	eq
   b8f7a:	4601      	moveq	r1, r0
   b8f7c:	2000      	moveq	r0, #0
   b8f7e:	fab1 f381 	clz	r3, r1
   b8f82:	bf08      	it	eq
   b8f84:	3320      	addeq	r3, #32
   b8f86:	f1a3 030b 	sub.w	r3, r3, #11
   b8f8a:	f1b3 0220 	subs.w	r2, r3, #32
   b8f8e:	da0c      	bge.n	b8faa <__adddf3+0x16e>
   b8f90:	320c      	adds	r2, #12
   b8f92:	dd08      	ble.n	b8fa6 <__adddf3+0x16a>
   b8f94:	f102 0c14 	add.w	ip, r2, #20
   b8f98:	f1c2 020c 	rsb	r2, r2, #12
   b8f9c:	fa01 f00c 	lsl.w	r0, r1, ip
   b8fa0:	fa21 f102 	lsr.w	r1, r1, r2
   b8fa4:	e00c      	b.n	b8fc0 <__adddf3+0x184>
   b8fa6:	f102 0214 	add.w	r2, r2, #20
   b8faa:	bfd8      	it	le
   b8fac:	f1c2 0c20 	rsble	ip, r2, #32
   b8fb0:	fa01 f102 	lsl.w	r1, r1, r2
   b8fb4:	fa20 fc0c 	lsr.w	ip, r0, ip
   b8fb8:	bfdc      	itt	le
   b8fba:	ea41 010c 	orrle.w	r1, r1, ip
   b8fbe:	4090      	lslle	r0, r2
   b8fc0:	1ae4      	subs	r4, r4, r3
   b8fc2:	bfa2      	ittt	ge
   b8fc4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   b8fc8:	4329      	orrge	r1, r5
   b8fca:	bd30      	popge	{r4, r5, pc}
   b8fcc:	ea6f 0404 	mvn.w	r4, r4
   b8fd0:	3c1f      	subs	r4, #31
   b8fd2:	da1c      	bge.n	b900e <__adddf3+0x1d2>
   b8fd4:	340c      	adds	r4, #12
   b8fd6:	dc0e      	bgt.n	b8ff6 <__adddf3+0x1ba>
   b8fd8:	f104 0414 	add.w	r4, r4, #20
   b8fdc:	f1c4 0220 	rsb	r2, r4, #32
   b8fe0:	fa20 f004 	lsr.w	r0, r0, r4
   b8fe4:	fa01 f302 	lsl.w	r3, r1, r2
   b8fe8:	ea40 0003 	orr.w	r0, r0, r3
   b8fec:	fa21 f304 	lsr.w	r3, r1, r4
   b8ff0:	ea45 0103 	orr.w	r1, r5, r3
   b8ff4:	bd30      	pop	{r4, r5, pc}
   b8ff6:	f1c4 040c 	rsb	r4, r4, #12
   b8ffa:	f1c4 0220 	rsb	r2, r4, #32
   b8ffe:	fa20 f002 	lsr.w	r0, r0, r2
   b9002:	fa01 f304 	lsl.w	r3, r1, r4
   b9006:	ea40 0003 	orr.w	r0, r0, r3
   b900a:	4629      	mov	r1, r5
   b900c:	bd30      	pop	{r4, r5, pc}
   b900e:	fa21 f004 	lsr.w	r0, r1, r4
   b9012:	4629      	mov	r1, r5
   b9014:	bd30      	pop	{r4, r5, pc}
   b9016:	f094 0f00 	teq	r4, #0
   b901a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   b901e:	bf06      	itte	eq
   b9020:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   b9024:	3401      	addeq	r4, #1
   b9026:	3d01      	subne	r5, #1
   b9028:	e74e      	b.n	b8ec8 <__adddf3+0x8c>
   b902a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b902e:	bf18      	it	ne
   b9030:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b9034:	d029      	beq.n	b908a <__adddf3+0x24e>
   b9036:	ea94 0f05 	teq	r4, r5
   b903a:	bf08      	it	eq
   b903c:	ea90 0f02 	teqeq	r0, r2
   b9040:	d005      	beq.n	b904e <__adddf3+0x212>
   b9042:	ea54 0c00 	orrs.w	ip, r4, r0
   b9046:	bf04      	itt	eq
   b9048:	4619      	moveq	r1, r3
   b904a:	4610      	moveq	r0, r2
   b904c:	bd30      	pop	{r4, r5, pc}
   b904e:	ea91 0f03 	teq	r1, r3
   b9052:	bf1e      	ittt	ne
   b9054:	2100      	movne	r1, #0
   b9056:	2000      	movne	r0, #0
   b9058:	bd30      	popne	{r4, r5, pc}
   b905a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   b905e:	d105      	bne.n	b906c <__adddf3+0x230>
   b9060:	0040      	lsls	r0, r0, #1
   b9062:	4149      	adcs	r1, r1
   b9064:	bf28      	it	cs
   b9066:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   b906a:	bd30      	pop	{r4, r5, pc}
   b906c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   b9070:	bf3c      	itt	cc
   b9072:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   b9076:	bd30      	popcc	{r4, r5, pc}
   b9078:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b907c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   b9080:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b9084:	f04f 0000 	mov.w	r0, #0
   b9088:	bd30      	pop	{r4, r5, pc}
   b908a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b908e:	bf1a      	itte	ne
   b9090:	4619      	movne	r1, r3
   b9092:	4610      	movne	r0, r2
   b9094:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   b9098:	bf1c      	itt	ne
   b909a:	460b      	movne	r3, r1
   b909c:	4602      	movne	r2, r0
   b909e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b90a2:	bf06      	itte	eq
   b90a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   b90a8:	ea91 0f03 	teqeq	r1, r3
   b90ac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   b90b0:	bd30      	pop	{r4, r5, pc}
   b90b2:	bf00      	nop

000b90b4 <__aeabi_ui2d>:
   b90b4:	f090 0f00 	teq	r0, #0
   b90b8:	bf04      	itt	eq
   b90ba:	2100      	moveq	r1, #0
   b90bc:	4770      	bxeq	lr
   b90be:	b530      	push	{r4, r5, lr}
   b90c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b90c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b90c8:	f04f 0500 	mov.w	r5, #0
   b90cc:	f04f 0100 	mov.w	r1, #0
   b90d0:	e750      	b.n	b8f74 <__adddf3+0x138>
   b90d2:	bf00      	nop

000b90d4 <__aeabi_i2d>:
   b90d4:	f090 0f00 	teq	r0, #0
   b90d8:	bf04      	itt	eq
   b90da:	2100      	moveq	r1, #0
   b90dc:	4770      	bxeq	lr
   b90de:	b530      	push	{r4, r5, lr}
   b90e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b90e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b90e8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   b90ec:	bf48      	it	mi
   b90ee:	4240      	negmi	r0, r0
   b90f0:	f04f 0100 	mov.w	r1, #0
   b90f4:	e73e      	b.n	b8f74 <__adddf3+0x138>
   b90f6:	bf00      	nop

000b90f8 <__aeabi_f2d>:
   b90f8:	0042      	lsls	r2, r0, #1
   b90fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
   b90fe:	ea4f 0131 	mov.w	r1, r1, rrx
   b9102:	ea4f 7002 	mov.w	r0, r2, lsl #28
   b9106:	bf1f      	itttt	ne
   b9108:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   b910c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   b9110:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   b9114:	4770      	bxne	lr
   b9116:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   b911a:	bf08      	it	eq
   b911c:	4770      	bxeq	lr
   b911e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   b9122:	bf04      	itt	eq
   b9124:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   b9128:	4770      	bxeq	lr
   b912a:	b530      	push	{r4, r5, lr}
   b912c:	f44f 7460 	mov.w	r4, #896	; 0x380
   b9130:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b9134:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b9138:	e71c      	b.n	b8f74 <__adddf3+0x138>
   b913a:	bf00      	nop

000b913c <__aeabi_ul2d>:
   b913c:	ea50 0201 	orrs.w	r2, r0, r1
   b9140:	bf08      	it	eq
   b9142:	4770      	bxeq	lr
   b9144:	b530      	push	{r4, r5, lr}
   b9146:	f04f 0500 	mov.w	r5, #0
   b914a:	e00a      	b.n	b9162 <__aeabi_l2d+0x16>

000b914c <__aeabi_l2d>:
   b914c:	ea50 0201 	orrs.w	r2, r0, r1
   b9150:	bf08      	it	eq
   b9152:	4770      	bxeq	lr
   b9154:	b530      	push	{r4, r5, lr}
   b9156:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   b915a:	d502      	bpl.n	b9162 <__aeabi_l2d+0x16>
   b915c:	4240      	negs	r0, r0
   b915e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b9162:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b9166:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b916a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   b916e:	f43f aed8 	beq.w	b8f22 <__adddf3+0xe6>
   b9172:	f04f 0203 	mov.w	r2, #3
   b9176:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b917a:	bf18      	it	ne
   b917c:	3203      	addne	r2, #3
   b917e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b9182:	bf18      	it	ne
   b9184:	3203      	addne	r2, #3
   b9186:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   b918a:	f1c2 0320 	rsb	r3, r2, #32
   b918e:	fa00 fc03 	lsl.w	ip, r0, r3
   b9192:	fa20 f002 	lsr.w	r0, r0, r2
   b9196:	fa01 fe03 	lsl.w	lr, r1, r3
   b919a:	ea40 000e 	orr.w	r0, r0, lr
   b919e:	fa21 f102 	lsr.w	r1, r1, r2
   b91a2:	4414      	add	r4, r2
   b91a4:	e6bd      	b.n	b8f22 <__adddf3+0xe6>
   b91a6:	bf00      	nop

000b91a8 <atexit>:
   b91a8:	2300      	movs	r3, #0
   b91aa:	4601      	mov	r1, r0
   b91ac:	461a      	mov	r2, r3
   b91ae:	4618      	mov	r0, r3
   b91b0:	f000 b96a 	b.w	b9488 <__register_exitproc>

000b91b4 <isprint>:
   b91b4:	4b02      	ldr	r3, [pc, #8]	; (b91c0 <isprint+0xc>)
   b91b6:	4418      	add	r0, r3
   b91b8:	7840      	ldrb	r0, [r0, #1]
   b91ba:	f000 0097 	and.w	r0, r0, #151	; 0x97
   b91be:	4770      	bx	lr
   b91c0:	000ba63d 	.word	0x000ba63d

000b91c4 <memcpy>:
   b91c4:	440a      	add	r2, r1
   b91c6:	4291      	cmp	r1, r2
   b91c8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   b91cc:	d100      	bne.n	b91d0 <memcpy+0xc>
   b91ce:	4770      	bx	lr
   b91d0:	b510      	push	{r4, lr}
   b91d2:	f811 4b01 	ldrb.w	r4, [r1], #1
   b91d6:	f803 4f01 	strb.w	r4, [r3, #1]!
   b91da:	4291      	cmp	r1, r2
   b91dc:	d1f9      	bne.n	b91d2 <memcpy+0xe>
   b91de:	bd10      	pop	{r4, pc}

000b91e0 <memmove>:
   b91e0:	4288      	cmp	r0, r1
   b91e2:	b510      	push	{r4, lr}
   b91e4:	eb01 0402 	add.w	r4, r1, r2
   b91e8:	d902      	bls.n	b91f0 <memmove+0x10>
   b91ea:	4284      	cmp	r4, r0
   b91ec:	4623      	mov	r3, r4
   b91ee:	d807      	bhi.n	b9200 <memmove+0x20>
   b91f0:	1e43      	subs	r3, r0, #1
   b91f2:	42a1      	cmp	r1, r4
   b91f4:	d008      	beq.n	b9208 <memmove+0x28>
   b91f6:	f811 2b01 	ldrb.w	r2, [r1], #1
   b91fa:	f803 2f01 	strb.w	r2, [r3, #1]!
   b91fe:	e7f8      	b.n	b91f2 <memmove+0x12>
   b9200:	4402      	add	r2, r0
   b9202:	4601      	mov	r1, r0
   b9204:	428a      	cmp	r2, r1
   b9206:	d100      	bne.n	b920a <memmove+0x2a>
   b9208:	bd10      	pop	{r4, pc}
   b920a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   b920e:	f802 4d01 	strb.w	r4, [r2, #-1]!
   b9212:	e7f7      	b.n	b9204 <memmove+0x24>

000b9214 <memset>:
   b9214:	4402      	add	r2, r0
   b9216:	4603      	mov	r3, r0
   b9218:	4293      	cmp	r3, r2
   b921a:	d100      	bne.n	b921e <memset+0xa>
   b921c:	4770      	bx	lr
   b921e:	f803 1b01 	strb.w	r1, [r3], #1
   b9222:	e7f9      	b.n	b9218 <memset+0x4>

000b9224 <srand>:
   b9224:	b538      	push	{r3, r4, r5, lr}
   b9226:	4b10      	ldr	r3, [pc, #64]	; (b9268 <srand+0x44>)
   b9228:	681d      	ldr	r5, [r3, #0]
   b922a:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b922c:	4604      	mov	r4, r0
   b922e:	b9b3      	cbnz	r3, b925e <srand+0x3a>
   b9230:	2018      	movs	r0, #24
   b9232:	f7fd fb75 	bl	b6920 <malloc>
   b9236:	4602      	mov	r2, r0
   b9238:	63a8      	str	r0, [r5, #56]	; 0x38
   b923a:	b920      	cbnz	r0, b9246 <srand+0x22>
   b923c:	4b0b      	ldr	r3, [pc, #44]	; (b926c <srand+0x48>)
   b923e:	480c      	ldr	r0, [pc, #48]	; (b9270 <srand+0x4c>)
   b9240:	2142      	movs	r1, #66	; 0x42
   b9242:	f7fd fbbd 	bl	b69c0 <__assert_func>
   b9246:	490b      	ldr	r1, [pc, #44]	; (b9274 <srand+0x50>)
   b9248:	4b0b      	ldr	r3, [pc, #44]	; (b9278 <srand+0x54>)
   b924a:	e9c0 1300 	strd	r1, r3, [r0]
   b924e:	4b0b      	ldr	r3, [pc, #44]	; (b927c <srand+0x58>)
   b9250:	6083      	str	r3, [r0, #8]
   b9252:	230b      	movs	r3, #11
   b9254:	8183      	strh	r3, [r0, #12]
   b9256:	2100      	movs	r1, #0
   b9258:	2001      	movs	r0, #1
   b925a:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b925e:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b9260:	2200      	movs	r2, #0
   b9262:	611c      	str	r4, [r3, #16]
   b9264:	615a      	str	r2, [r3, #20]
   b9266:	bd38      	pop	{r3, r4, r5, pc}
   b9268:	2003b718 	.word	0x2003b718
   b926c:	000ba5cd 	.word	0x000ba5cd
   b9270:	000ba5e4 	.word	0x000ba5e4
   b9274:	abcd330e 	.word	0xabcd330e
   b9278:	e66d1234 	.word	0xe66d1234
   b927c:	0005deec 	.word	0x0005deec

000b9280 <strchr>:
   b9280:	b2c9      	uxtb	r1, r1
   b9282:	4603      	mov	r3, r0
   b9284:	f810 2b01 	ldrb.w	r2, [r0], #1
   b9288:	b11a      	cbz	r2, b9292 <strchr+0x12>
   b928a:	428a      	cmp	r2, r1
   b928c:	d1f9      	bne.n	b9282 <strchr+0x2>
   b928e:	4618      	mov	r0, r3
   b9290:	4770      	bx	lr
   b9292:	2900      	cmp	r1, #0
   b9294:	bf18      	it	ne
   b9296:	2300      	movne	r3, #0
   b9298:	e7f9      	b.n	b928e <strchr+0xe>

000b929a <strchrnul>:
   b929a:	b510      	push	{r4, lr}
   b929c:	4604      	mov	r4, r0
   b929e:	f7ff ffef 	bl	b9280 <strchr>
   b92a2:	b918      	cbnz	r0, b92ac <strchrnul+0x12>
   b92a4:	4620      	mov	r0, r4
   b92a6:	f000 f832 	bl	b930e <strlen>
   b92aa:	4420      	add	r0, r4
   b92ac:	bd10      	pop	{r4, pc}

000b92ae <strcmp>:
   b92ae:	f810 2b01 	ldrb.w	r2, [r0], #1
   b92b2:	f811 3b01 	ldrb.w	r3, [r1], #1
   b92b6:	2a01      	cmp	r2, #1
   b92b8:	bf28      	it	cs
   b92ba:	429a      	cmpcs	r2, r3
   b92bc:	d0f7      	beq.n	b92ae <strcmp>
   b92be:	1ad0      	subs	r0, r2, r3
   b92c0:	4770      	bx	lr

000b92c2 <strcpy>:
   b92c2:	4603      	mov	r3, r0
   b92c4:	f811 2b01 	ldrb.w	r2, [r1], #1
   b92c8:	f803 2b01 	strb.w	r2, [r3], #1
   b92cc:	2a00      	cmp	r2, #0
   b92ce:	d1f9      	bne.n	b92c4 <strcpy+0x2>
   b92d0:	4770      	bx	lr
	...

000b92d4 <strdup>:
   b92d4:	4b02      	ldr	r3, [pc, #8]	; (b92e0 <strdup+0xc>)
   b92d6:	4601      	mov	r1, r0
   b92d8:	6818      	ldr	r0, [r3, #0]
   b92da:	f000 b803 	b.w	b92e4 <_strdup_r>
   b92de:	bf00      	nop
   b92e0:	2003b718 	.word	0x2003b718

000b92e4 <_strdup_r>:
   b92e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b92e6:	4604      	mov	r4, r0
   b92e8:	4608      	mov	r0, r1
   b92ea:	460d      	mov	r5, r1
   b92ec:	f000 f80f 	bl	b930e <strlen>
   b92f0:	1c42      	adds	r2, r0, #1
   b92f2:	4611      	mov	r1, r2
   b92f4:	4620      	mov	r0, r4
   b92f6:	9201      	str	r2, [sp, #4]
   b92f8:	f7fd fb52 	bl	b69a0 <_malloc_r>
   b92fc:	4604      	mov	r4, r0
   b92fe:	b118      	cbz	r0, b9308 <_strdup_r+0x24>
   b9300:	9a01      	ldr	r2, [sp, #4]
   b9302:	4629      	mov	r1, r5
   b9304:	f7ff ff5e 	bl	b91c4 <memcpy>
   b9308:	4620      	mov	r0, r4
   b930a:	b003      	add	sp, #12
   b930c:	bd30      	pop	{r4, r5, pc}

000b930e <strlen>:
   b930e:	4603      	mov	r3, r0
   b9310:	f813 2b01 	ldrb.w	r2, [r3], #1
   b9314:	2a00      	cmp	r2, #0
   b9316:	d1fb      	bne.n	b9310 <strlen+0x2>
   b9318:	1a18      	subs	r0, r3, r0
   b931a:	3801      	subs	r0, #1
   b931c:	4770      	bx	lr

000b931e <strncmp>:
   b931e:	b510      	push	{r4, lr}
   b9320:	b17a      	cbz	r2, b9342 <strncmp+0x24>
   b9322:	4603      	mov	r3, r0
   b9324:	3901      	subs	r1, #1
   b9326:	1884      	adds	r4, r0, r2
   b9328:	f813 0b01 	ldrb.w	r0, [r3], #1
   b932c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   b9330:	4290      	cmp	r0, r2
   b9332:	d101      	bne.n	b9338 <strncmp+0x1a>
   b9334:	42a3      	cmp	r3, r4
   b9336:	d101      	bne.n	b933c <strncmp+0x1e>
   b9338:	1a80      	subs	r0, r0, r2
   b933a:	bd10      	pop	{r4, pc}
   b933c:	2800      	cmp	r0, #0
   b933e:	d1f3      	bne.n	b9328 <strncmp+0xa>
   b9340:	e7fa      	b.n	b9338 <strncmp+0x1a>
   b9342:	4610      	mov	r0, r2
   b9344:	e7f9      	b.n	b933a <strncmp+0x1c>

000b9346 <strrchr>:
   b9346:	b538      	push	{r3, r4, r5, lr}
   b9348:	4603      	mov	r3, r0
   b934a:	460c      	mov	r4, r1
   b934c:	b969      	cbnz	r1, b936a <strrchr+0x24>
   b934e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b9352:	f7ff bf95 	b.w	b9280 <strchr>
   b9356:	1c43      	adds	r3, r0, #1
   b9358:	4605      	mov	r5, r0
   b935a:	4621      	mov	r1, r4
   b935c:	4618      	mov	r0, r3
   b935e:	f7ff ff8f 	bl	b9280 <strchr>
   b9362:	2800      	cmp	r0, #0
   b9364:	d1f7      	bne.n	b9356 <strrchr+0x10>
   b9366:	4628      	mov	r0, r5
   b9368:	bd38      	pop	{r3, r4, r5, pc}
   b936a:	2500      	movs	r5, #0
   b936c:	e7f5      	b.n	b935a <strrchr+0x14>
	...

000b9370 <_strtol_l.constprop.0>:
   b9370:	2b01      	cmp	r3, #1
   b9372:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b9376:	d001      	beq.n	b937c <_strtol_l.constprop.0+0xc>
   b9378:	2b24      	cmp	r3, #36	; 0x24
   b937a:	d906      	bls.n	b938a <_strtol_l.constprop.0+0x1a>
   b937c:	f7fd fb18 	bl	b69b0 <__errno>
   b9380:	2316      	movs	r3, #22
   b9382:	6003      	str	r3, [r0, #0]
   b9384:	2000      	movs	r0, #0
   b9386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b938a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; b9470 <_strtol_l.constprop.0+0x100>
   b938e:	460d      	mov	r5, r1
   b9390:	462e      	mov	r6, r5
   b9392:	f815 4b01 	ldrb.w	r4, [r5], #1
   b9396:	f814 700c 	ldrb.w	r7, [r4, ip]
   b939a:	f017 0708 	ands.w	r7, r7, #8
   b939e:	d1f7      	bne.n	b9390 <_strtol_l.constprop.0+0x20>
   b93a0:	2c2d      	cmp	r4, #45	; 0x2d
   b93a2:	d132      	bne.n	b940a <_strtol_l.constprop.0+0x9a>
   b93a4:	782c      	ldrb	r4, [r5, #0]
   b93a6:	2701      	movs	r7, #1
   b93a8:	1cb5      	adds	r5, r6, #2
   b93aa:	2b00      	cmp	r3, #0
   b93ac:	d05b      	beq.n	b9466 <_strtol_l.constprop.0+0xf6>
   b93ae:	2b10      	cmp	r3, #16
   b93b0:	d109      	bne.n	b93c6 <_strtol_l.constprop.0+0x56>
   b93b2:	2c30      	cmp	r4, #48	; 0x30
   b93b4:	d107      	bne.n	b93c6 <_strtol_l.constprop.0+0x56>
   b93b6:	782c      	ldrb	r4, [r5, #0]
   b93b8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   b93bc:	2c58      	cmp	r4, #88	; 0x58
   b93be:	d14d      	bne.n	b945c <_strtol_l.constprop.0+0xec>
   b93c0:	786c      	ldrb	r4, [r5, #1]
   b93c2:	2310      	movs	r3, #16
   b93c4:	3502      	adds	r5, #2
   b93c6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   b93ca:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   b93ce:	f04f 0c00 	mov.w	ip, #0
   b93d2:	fbb8 f9f3 	udiv	r9, r8, r3
   b93d6:	4666      	mov	r6, ip
   b93d8:	fb03 8a19 	mls	sl, r3, r9, r8
   b93dc:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   b93e0:	f1be 0f09 	cmp.w	lr, #9
   b93e4:	d816      	bhi.n	b9414 <_strtol_l.constprop.0+0xa4>
   b93e6:	4674      	mov	r4, lr
   b93e8:	42a3      	cmp	r3, r4
   b93ea:	dd24      	ble.n	b9436 <_strtol_l.constprop.0+0xc6>
   b93ec:	f1bc 0f00 	cmp.w	ip, #0
   b93f0:	db1e      	blt.n	b9430 <_strtol_l.constprop.0+0xc0>
   b93f2:	45b1      	cmp	r9, r6
   b93f4:	d31c      	bcc.n	b9430 <_strtol_l.constprop.0+0xc0>
   b93f6:	d101      	bne.n	b93fc <_strtol_l.constprop.0+0x8c>
   b93f8:	45a2      	cmp	sl, r4
   b93fa:	db19      	blt.n	b9430 <_strtol_l.constprop.0+0xc0>
   b93fc:	fb06 4603 	mla	r6, r6, r3, r4
   b9400:	f04f 0c01 	mov.w	ip, #1
   b9404:	f815 4b01 	ldrb.w	r4, [r5], #1
   b9408:	e7e8      	b.n	b93dc <_strtol_l.constprop.0+0x6c>
   b940a:	2c2b      	cmp	r4, #43	; 0x2b
   b940c:	bf04      	itt	eq
   b940e:	782c      	ldrbeq	r4, [r5, #0]
   b9410:	1cb5      	addeq	r5, r6, #2
   b9412:	e7ca      	b.n	b93aa <_strtol_l.constprop.0+0x3a>
   b9414:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   b9418:	f1be 0f19 	cmp.w	lr, #25
   b941c:	d801      	bhi.n	b9422 <_strtol_l.constprop.0+0xb2>
   b941e:	3c37      	subs	r4, #55	; 0x37
   b9420:	e7e2      	b.n	b93e8 <_strtol_l.constprop.0+0x78>
   b9422:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   b9426:	f1be 0f19 	cmp.w	lr, #25
   b942a:	d804      	bhi.n	b9436 <_strtol_l.constprop.0+0xc6>
   b942c:	3c57      	subs	r4, #87	; 0x57
   b942e:	e7db      	b.n	b93e8 <_strtol_l.constprop.0+0x78>
   b9430:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   b9434:	e7e6      	b.n	b9404 <_strtol_l.constprop.0+0x94>
   b9436:	f1bc 0f00 	cmp.w	ip, #0
   b943a:	da05      	bge.n	b9448 <_strtol_l.constprop.0+0xd8>
   b943c:	2322      	movs	r3, #34	; 0x22
   b943e:	6003      	str	r3, [r0, #0]
   b9440:	4646      	mov	r6, r8
   b9442:	b942      	cbnz	r2, b9456 <_strtol_l.constprop.0+0xe6>
   b9444:	4630      	mov	r0, r6
   b9446:	e79e      	b.n	b9386 <_strtol_l.constprop.0+0x16>
   b9448:	b107      	cbz	r7, b944c <_strtol_l.constprop.0+0xdc>
   b944a:	4276      	negs	r6, r6
   b944c:	2a00      	cmp	r2, #0
   b944e:	d0f9      	beq.n	b9444 <_strtol_l.constprop.0+0xd4>
   b9450:	f1bc 0f00 	cmp.w	ip, #0
   b9454:	d000      	beq.n	b9458 <_strtol_l.constprop.0+0xe8>
   b9456:	1e69      	subs	r1, r5, #1
   b9458:	6011      	str	r1, [r2, #0]
   b945a:	e7f3      	b.n	b9444 <_strtol_l.constprop.0+0xd4>
   b945c:	2430      	movs	r4, #48	; 0x30
   b945e:	2b00      	cmp	r3, #0
   b9460:	d1b1      	bne.n	b93c6 <_strtol_l.constprop.0+0x56>
   b9462:	2308      	movs	r3, #8
   b9464:	e7af      	b.n	b93c6 <_strtol_l.constprop.0+0x56>
   b9466:	2c30      	cmp	r4, #48	; 0x30
   b9468:	d0a5      	beq.n	b93b6 <_strtol_l.constprop.0+0x46>
   b946a:	230a      	movs	r3, #10
   b946c:	e7ab      	b.n	b93c6 <_strtol_l.constprop.0+0x56>
   b946e:	bf00      	nop
   b9470:	000ba63e 	.word	0x000ba63e

000b9474 <strtol>:
   b9474:	4613      	mov	r3, r2
   b9476:	460a      	mov	r2, r1
   b9478:	4601      	mov	r1, r0
   b947a:	4802      	ldr	r0, [pc, #8]	; (b9484 <strtol+0x10>)
   b947c:	6800      	ldr	r0, [r0, #0]
   b947e:	f7ff bf77 	b.w	b9370 <_strtol_l.constprop.0>
   b9482:	bf00      	nop
   b9484:	2003b718 	.word	0x2003b718

000b9488 <__register_exitproc>:
   b9488:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b948c:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b9548 <__register_exitproc+0xc0>
   b9490:	4606      	mov	r6, r0
   b9492:	f8d8 0000 	ldr.w	r0, [r8]
   b9496:	461f      	mov	r7, r3
   b9498:	460d      	mov	r5, r1
   b949a:	4691      	mov	r9, r2
   b949c:	f000 f856 	bl	b954c <__retarget_lock_acquire_recursive>
   b94a0:	4b25      	ldr	r3, [pc, #148]	; (b9538 <__register_exitproc+0xb0>)
   b94a2:	681c      	ldr	r4, [r3, #0]
   b94a4:	b934      	cbnz	r4, b94b4 <__register_exitproc+0x2c>
   b94a6:	4c25      	ldr	r4, [pc, #148]	; (b953c <__register_exitproc+0xb4>)
   b94a8:	601c      	str	r4, [r3, #0]
   b94aa:	4b25      	ldr	r3, [pc, #148]	; (b9540 <__register_exitproc+0xb8>)
   b94ac:	b113      	cbz	r3, b94b4 <__register_exitproc+0x2c>
   b94ae:	681b      	ldr	r3, [r3, #0]
   b94b0:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b94b4:	6863      	ldr	r3, [r4, #4]
   b94b6:	2b1f      	cmp	r3, #31
   b94b8:	dd07      	ble.n	b94ca <__register_exitproc+0x42>
   b94ba:	f8d8 0000 	ldr.w	r0, [r8]
   b94be:	f000 f847 	bl	b9550 <__retarget_lock_release_recursive>
   b94c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b94c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b94ca:	b34e      	cbz	r6, b9520 <__register_exitproc+0x98>
   b94cc:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b94d0:	b988      	cbnz	r0, b94f6 <__register_exitproc+0x6e>
   b94d2:	4b1c      	ldr	r3, [pc, #112]	; (b9544 <__register_exitproc+0xbc>)
   b94d4:	b923      	cbnz	r3, b94e0 <__register_exitproc+0x58>
   b94d6:	f8d8 0000 	ldr.w	r0, [r8]
   b94da:	f000 f838 	bl	b954e <__retarget_lock_release>
   b94de:	e7f0      	b.n	b94c2 <__register_exitproc+0x3a>
   b94e0:	f44f 7084 	mov.w	r0, #264	; 0x108
   b94e4:	f7fd fa1c 	bl	b6920 <malloc>
   b94e8:	2800      	cmp	r0, #0
   b94ea:	d0f4      	beq.n	b94d6 <__register_exitproc+0x4e>
   b94ec:	2300      	movs	r3, #0
   b94ee:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b94f2:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b94f6:	6863      	ldr	r3, [r4, #4]
   b94f8:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b94fc:	2201      	movs	r2, #1
   b94fe:	409a      	lsls	r2, r3
   b9500:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b9504:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b9508:	4313      	orrs	r3, r2
   b950a:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b950e:	2e02      	cmp	r6, #2
   b9510:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b9514:	bf02      	ittt	eq
   b9516:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b951a:	4313      	orreq	r3, r2
   b951c:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b9520:	6863      	ldr	r3, [r4, #4]
   b9522:	f8d8 0000 	ldr.w	r0, [r8]
   b9526:	1c5a      	adds	r2, r3, #1
   b9528:	3302      	adds	r3, #2
   b952a:	6062      	str	r2, [r4, #4]
   b952c:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b9530:	f000 f80e 	bl	b9550 <__retarget_lock_release_recursive>
   b9534:	2000      	movs	r0, #0
   b9536:	e7c6      	b.n	b94c6 <__register_exitproc+0x3e>
   b9538:	2003e7e8 	.word	0x2003e7e8
   b953c:	2003e75c 	.word	0x2003e75c
   b9540:	00000000 	.word	0x00000000
   b9544:	000b6921 	.word	0x000b6921
   b9548:	2003b77c 	.word	0x2003b77c

000b954c <__retarget_lock_acquire_recursive>:
   b954c:	4770      	bx	lr

000b954e <__retarget_lock_release>:
   b954e:	4770      	bx	lr

000b9550 <__retarget_lock_release_recursive>:
   b9550:	4770      	bx	lr

000b9552 <link_code_end>:
	...

000b9554 <dynalib_user>:
   b9554:	401d 000b 4059 000b 4081 000b 4085 000b     .@..Y@...@...@..
   b9564:	0000 0000 6143 6c6c 6f20 206e 7570 6572     ....Call on pure
   b9574:	7620 7269 7574 6c61 4f00 4a42 4345 0054      virtual.OBJECT.
   b9584:	7974 6570 253d 2073 7473 7261 3d74 6425     type=%s start=%d
   b9594:	6520 646e 253d 2064 6f74 656b 736e 253d      end=%d tokens=%
   b95a4:	2064 202d 7325 6e00 646f 7365 7400 7079     d - %s.nodes.typ
   b95b4:	0065 7270 6e69 6974 676e 7420 6b6f 6e65     e.printing token
   b95c4:	0073 754f 6574 2072 626f 656a 7463 7320     s.Outer object s
   b95d4:	6174 7472 253d 2064 6e65 3d64 6425 7420     tart=%d end=%d t
   b95e4:	6b6f 6e65 3d73 6425 2d20 2520 0073 6574     okens=%d - %s.te
   b95f4:	7473 2520 0073 6554 7473 5400 746f 6c61     st %s.Test.Total
   b9604:	7420 6b6f 6e65 3d73 6425 2820 3425 322e      tokens=%d (%4.2
   b9614:	2566 2025 7566 6c6c 2029 7473 726f 6761     f%% full) storag
   b9624:	3d65 6425 2820 3425 322e 2566 2025 7566     e=%d (%4.2f%% fu
   b9634:	6c6c 0029 6e55 6e6b 776f 206e 6573 736e     ll).Unknown sens
   b9644:	726f 7420 7079 2065 6e69 7020 7261 6573     or type in parse
   b9654:	6f4a 6e69 6150 6c79 616f 5664 6c61 6575     JoinPayloadValue
   b9664:	2073 6425 5500 6b6e 6f6e 6e77 7320 6e65     s %d.Unknown sen
   b9674:	6f73 2072 7974 6570 6920 206e 6170 7372     sor type in pars
   b9684:	4a65 696f 506e 7961 6f6c 6461 6156 756c     eJoinPayloadValu
   b9694:	7365 4100 656c 7472 7500 4449 6e00 646f     es.Alert.uID.nod
   b96a4:	0065 3170 7000 0032 6570 646e 6300 6e6f     e.p1.p2.pend.con
   b96b4:	0074 6f4e 6564 2520 2c64 7520 696e 7571     t.Node %d, uniqu
   b96c4:	4965 2044 6c25 2c75 7420 7079 2065 6425     eID %lu, type %d
   b96d4:	202c 636f 7563 6170 636e 4e79 7465 2520     , occupancyNet %
   b96e4:	2c64 6f20 6363 7075 6e61 7963 7247 736f     d, occupancyGros
   b96f4:	2073 6425 202c 6170 6c79 616f 2064 2528     s %d, payload (%
   b9704:	2f64 6425 252f 2f64 6425 2029 6977 6874     d/%d/%d/%d) with
   b9714:	7020 6e65 6964 676e 6120 656c 7472 2520      pending alert %
   b9724:	2064 6e61 2064 6c61 7265 2074 6f63 746e     d and alert cont
   b9734:	7865 2074 6425 4e00 646f 2065 6425 202c     ext %d.Node %d, 
   b9744:	6e75 7169 6575 4449 2520 756c 202c 7974     uniqueID %lu, ty
   b9754:	6570 2520 2c64 7020 7961 6f6c 6461 2820     pe %d, payload (
   b9764:	6425 252f 2f64 6425 252f 2964 7720 7469     %d/%d/%d/%d) wit
   b9774:	2068 6570 646e 6e69 2067 6c61 7265 2074     h pending alert 
   b9784:	6425 6120 646e 6120 656c 7472 6320 6e6f     %d and alert con
   b9794:	6574 7478 2520 0064 6e55 6e6b 776f 206e     text %d.Unknown 
   b97a4:	6573 736e 726f 7420 7079 2065 6e69 7020     sensor type in p
   b97b4:	6972 746e 6f4e 6564 6144 6174 2520 0064     rintNodeData %d.
   b97c4:	6e55 6e6b 776f 206e 6573 736e 726f 7420     Unknown sensor t
   b97d4:	7079 2065 6e69 7020 6972 746e 6f4e 6564     ype in printNode
   b97e4:	6144 6174 6e00 646f 4465 7461 0061 6c25     Data.nodeData.%l
   b97f4:	0075 6f46 6e75 2064 6874 2065 6e75 7169     u.Found the uniq
   b9804:	6575 4449 202c 6f6e 6564 6f20 2066 6425     ueID, node of %d
   b9814:	4400 6469 6e20 746f 6620 6e69 2064 6874     .Did not find th
   b9824:	2065 6e75 7169 6575 4449 202c 656e 2077     e uniqueID, new 
   b9834:	6f6e 6564 6f20 2066 6425 4300 6168 676e     node of %d.Chang
   b9844:	6e69 2067 6573 736e 726f 7420 7079 2065     ing sensor type 
   b9854:	7266 6d6f 2520 2064 6f74 2520 0064 6552     from %d to %d.Re
   b9864:	6f6d 6976 676e 6120 7272 7961 6920 646e     moving array ind
   b9874:	7865 6100 7070 6e65 2064 6f63 706d 656c     ex.append comple
   b9884:	6574 5500 616e 6c62 2065 6f74 7520 6470     te.Unable to upd
   b9894:	7461 2065 6f74 6e20 7765 7320 6e65 6f73     ate to new senso
   b98a4:	5472 7079 2065 6e69 7320 7465 7954 6570     rType in setType
   b98b4:	203a 6425 5500 616e 6c62 2065 6f74 7520     : %d.Unable to u
   b98c4:	6470 7461 2065 6f74 6e20 7765 7320 6e65     pdate to new sen
   b98d4:	6f73 5472 7079 2065 6e69 7320 7465 7954     sorType in setTy
   b98e4:	6570 5300 6174 7472 6e69 2067 6574 7473     pe.Starting test
   b98f4:	0073 6946 7372 2074 6554 7473 202c 6577     s.First Test, we
   b9904:	7720 6c69 206c 6c63 6165 2072 6874 2065      will clear the 
   b9914:	6f4e 6564 4420 7461 6261 7361 2065 6e61     Node Database an
   b9924:	2064 6f6c 6461 7420 6568 7320 6d61 6c70     d load the sampl
   b9934:	2065 6164 6174 7320 7465 4e00 776f 7420     e data set.Now t
   b9944:	6168 2074 6874 2065 6f6e 6564 6144 6174     hat the nodeData
   b9954:	6162 6573 6920 2073 6d65 7470 2c79 7720     base is empty, w
   b9964:	2065 6977 6c6c 6c20 616f 2064 6874 2065     e will load the 
   b9974:	6173 706d 656c 6420 7461 2061 6573 0074     sample data set.
   b9984:	227b 6f6e 6564 2273 5b3a 7b09 6e22 646f     {"nodes":[.{"nod
   b9994:	2265 313a 222c 4975 2244 323a 3136 3433     e":1,"uID":26134
   b99a4:	3037 3535 2c39 7422 7079 2265 313a 202c     70559,"type":1, 
   b99b4:	7022 3a22 2c30 2220 3170 3a22 2c30 2220     "p":0, "p1":0, "
   b99c4:	3270 3a22 2c30 2220 6570 646e 3a22 2c30     p2":0, "pend":0,
   b99d4:	2220 6f63 746e 3a22 7d31 092c 227b 6f6e      "cont":1},.{"no
   b99e4:	6564 3a22 2c32 7522 4449 3a22 3132 3132     de":2,"uID":2121
   b99f4:	3633 3330 3234 222c 7974 6570 3a22 2c31     360342,"type":1,
   b9a04:	2220 2270 303a 202c 7022 2231 303a 202c      "p":0, "p1":0, 
   b9a14:	7022 2232 303a 202c 7022 6e65 2264 303a     "p2":0, "pend":0
   b9a24:	202c 6322 6e6f 2274 323a 2c7d 7b09 6e22     , "cont":2},.{"n
   b9a34:	646f 2265 333a 222c 4975 2244 323a 3131     ode":3,"uID":211
   b9a44:	3333 3138 3938 2c31 7422 7079 2265 313a     3381891,"type":1
   b9a54:	202c 7022 3a22 2c30 2220 3170 3a22 2c30     , "p":0, "p1":0,
   b9a64:	2220 3270 3a22 2c30 2220 6570 646e 3a22      "p2":0, "pend":
   b9a74:	2c30 2220 6f63 746e 3a22 7d33 092c 227b     0, "cont":3},.{"
   b9a84:	6f6e 6564 3a22 2c34 7522 4449 3a22 3232     node":4,"uID":22
   b9a94:	3232 3930 3130 3432 222c 7974 6570 3a22     22090124,"type":
   b9aa4:	2c31 2220 2270 303a 202c 7022 2231 303a     1, "p":0, "p1":0
   b9ab4:	202c 7022 2232 303a 202c 7022 6e65 2264     , "p2":0, "pend"
   b9ac4:	303a 202c 6322 6e6f 2274 343a 2c7d 7b09     :0, "cont":4},.{
   b9ad4:	6e22 646f 2265 353a 222c 4975 2244 323a     "node":5,"uID":2
   b9ae4:	3338 3639 3933 3136 2c30 7422 7079 2265     839639610,"type"
   b9af4:	313a 202c 7022 3a22 2c30 2220 3170 3a22     :1, "p":0, "p1":
   b9b04:	2c30 2220 3270 3a22 2c30 2220 6570 646e     0, "p2":0, "pend
   b9b14:	3a22 2c30 2220 6f63 746e 3a22 7d35 092c     ":0, "cont":5},.
   b9b24:	227b 6f6e 6564 3a22 2c36 7522 4449 3a22     {"node":6,"uID":
   b9b34:	3539 3338 3939 3236 222c 7974 6570 3a22     95839962,"type":
   b9b44:	2c31 2220 2270 303a 202c 7022 2231 303a     1, "p":0, "p1":0
   b9b54:	202c 7022 2232 303a 202c 7022 6e65 2264     , "p2":0, "pend"
   b9b64:	303a 202c 6322 6e6f 2274 363a 2c7d 7b09     :0, "cont":6},.{
   b9b74:	6e22 646f 2265 373a 222c 4975 2244 333a     "node":7,"uID":3
   b9b84:	3138 3638 3837 3433 2c31 7422 7079 2265     818678341,"type"
   b9b94:	313a 202c 7022 3a22 2c30 2220 3170 3a22     :1, "p":0, "p1":
   b9ba4:	2c30 2220 3270 3a22 2c30 2220 6570 646e     0, "p2":0, "pend
   b9bb4:	3a22 2c30 2220 6f63 746e 3a22 7d37 092c     ":0, "cont":7},.
   b9bc4:	227b 6f6e 6564 3a22 2c38 7522 4449 3a22     {"node":8,"uID":
   b9bd4:	3832 3432 3330 3239 3939 222c 7974 6570     2824039299,"type
   b9be4:	3a22 2c31 2220 2270 303a 202c 7022 2231     ":1, "p":0, "p1"
   b9bf4:	303a 202c 7022 2232 303a 202c 7022 6e65     :0, "p2":0, "pen
   b9c04:	2264 303a 202c 6322 6e6f 2274 383a 2c7d     d":0, "cont":8},
   b9c14:	7b09 6e22 646f 2265 393a 222c 4975 2244     .{"node":9,"uID"
   b9c24:	323a 3635 3431 3533 3938 2c32 7422 7079     :2561435892,"typ
   b9c34:	2265 313a 202c 7022 3a22 2c30 2220 3170     e":1, "p":0, "p1
   b9c44:	3a22 2c30 2220 3270 3a22 2c30 2220 6570     ":0, "p2":0, "pe
   b9c54:	646e 3a22 2c30 2220 6f63 746e 3a22 7d39     nd":0, "cont":9}
   b9c64:	092c 227b 6f6e 6564 3a22 3031 222c 4975     ,.{"node":10,"uI
   b9c74:	2244 333a 3336 3933 3333 3035 2c37 7422     D":3633933507,"t
   b9c84:	7079 2265 313a 202c 7022 3a22 2c30 2220     ype":1, "p":0, "
   b9c94:	3170 3a22 2c30 2220 3270 3a22 2c30 2220     p1":0, "p2":0, "
   b9ca4:	6570 646e 3a22 2c30 2220 6f63 746e 3a22     pend":0, "cont":
   b9cb4:	3031 2c7d 7b09 6e22 646f 2265 313a 2c31     10},.{"node":11,
   b9cc4:	7522 4449 3a22 3632 3734 3437 3434 3431     "uID":2647744414
   b9cd4:	222c 7974 6570 3a22 2c31 2220 2270 303a     ,"type":1, "p":0
   b9ce4:	202c 7022 2231 303a 202c 7022 2232 303a     , "p1":0, "p2":0
   b9cf4:	202c 7022 6e65 2264 303a 202c 6322 6e6f     , "pend":0, "con
   b9d04:	2274 313a 7d31 092c 227b 6f6e 6564 3a22     t":11},.{"node":
   b9d14:	3231 222c 4975 2244 333a 3636 3532 3330     12,"uID":3662503
   b9d24:	3535 2c34 7422 7079 2265 313a 202c 7022     554,"type":1, "p
   b9d34:	3a22 2c30 2220 3170 3a22 2c30 2220 3270     ":0, "p1":0, "p2
   b9d44:	3a22 2c30 2220 6570 646e 3a22 2c30 2220     ":0, "pend":0, "
   b9d54:	6f63 746e 3a22 3231 2c7d 7b09 6e22 646f     cont":12},.{"nod
   b9d64:	2265 313a 2c33 7522 4449 3a22 3532 3538     e":13,"uID":2585
   b9d74:	3437 3536 3532 222c 7974 6570 3a22 2c31     746525,"type":1,
   b9d84:	2220 2270 303a 202c 7022 2231 303a 202c      "p":0, "p1":0, 
   b9d94:	7022 2232 303a 202c 7022 6e65 2264 303a     "p2":0, "pend":0
   b9da4:	202c 6322 6e6f 2274 313a 7d33 092c 227b     , "cont":13},.{"
   b9db4:	6f6e 6564 3a22 3431 222c 4975 2244 363a     node":14,"uID":6
   b9dc4:	3036 3132 3138 3431 222c 7974 6570 3a22     60218114,"type":
   b9dd4:	2c31 2220 2270 303a 202c 7022 2231 303a     1, "p":0, "p1":0
   b9de4:	202c 7022 2232 303a 202c 7022 6e65 2264     , "p2":0, "pend"
   b9df4:	303a 202c 6322 6e6f 2274 313a 7d34 7d5d     :0, "cont":14}]}
   b9e04:	4e00 7865 2c74 7720 2065 6977 6c6c 6c20     .Next, we will l
   b9e14:	616f 2064 6e61 2064 7473 726f 2065 6874     oad and store th
   b9e24:	2065 6f6e 6564 6420 7461 6261 7361 2065     e node database 
   b9e34:	6e69 6f74 6d20 6d65 726f 0079 6f4e 6574     into memory.Note
   b9e44:	7420 6168 2074 756f 2072 534a 4e4f 6f20      that our JSON o
   b9e54:	6a62 6365 2074 6c61 6f6c 6163 6974 6e6f     bject allocation
   b9e64:	6920 2073 3425 322e 2566 2025 666f 7420      is %4.2f%% of t
   b9e74:	6568 6d20 6d65 726f 2079 6c61 6f6c 6163     he memory alloca
   b9e84:	6574 2064 6c28 7365 2073 6874 6e61 3120     ted (less than 1
   b9e94:	3030 2525 6920 2073 4b4f 0029 6854 2065     00%% is OK).The 
   b9ea4:	6f6e 6564 7320 7274 6e69 2067 7369 203a     node string is: 
   b9eb4:	7325 5000 7261 6573 2064 7553 6363 7365     %s.Parsed Succes
   b9ec4:	6673 6c75 796c 5000 7261 6973 676e 6520     sfully.Parsing e
   b9ed4:	7272 726f 4600 6e69 6c61 796c 202c 6577     rror.Finally, we
   b9ee4:	7720 6c69 206c 6461 2064 2061 656e 2077      will add a new 
   b9ef4:	6f6e 6564 7420 206f 6874 2065 6164 6174     node to the data
   b9f04:	6162 6573 6120 646e 7020 6972 746e 7420     base and print t
   b9f14:	6568 6420 7461 6261 7361 0065 6854 2065     he database.The 
   b9f24:	6f6e 6564 6e20 6d75 6562 2072 7369 203a     node number is: 
   b9f34:	6425 4e00 776f 7720 2065 6977 6c6c 6320     %d.Now we will c
   b9f44:	6168 676e 2065 6874 2065 7974 6570 6f20     hange the type o
   b9f54:	2066 6874 2065 6f6e 6564 6120 646e 7020     f the node and p
   b9f64:	6972 746e 7420 6568 6420 7461 6261 7361     rint the databas
   b9f74:	0065 6854 2065 7563 7272 6e65 2074 7974     e.The current ty
   b9f84:	6570 6620 726f 6e20 646f 2065 756e 626d     pe for node numb
   b9f94:	7265 2520 2064 7369 203a 6425 5400 6568     er %d is: %d.The
   b9fa4:	6e20 7765 7420 7079 2065 6f66 2072 6f6e      new type for no
   b9fb4:	6564 6e20 6d75 6562 2072 6425 6920 3a73     de number %d is:
   b9fc4:	2520 0064 6f4e 2077 6577 7720 6c69 206c      %d.Now we will 
   b9fd4:	6863 6e61 6567 7420 6568 7420 7079 2065     change the type 
   b9fe4:	6877 6369 2068 6977 6c6c 6120 746c 7265     which will alter
   b9ff4:	6920 7374 7320 7274 6375 7574 6572 6120      its structure a
   ba004:	646e 7020 6972 746e 7420 6568 6420 7461     nd print the dat
   ba014:	6261 7361 0065 6f4e 2077 6577 7720 6c69     abase.Now we wil
   ba024:	206c 6863 6e61 6567 7420 6568 7420 7079     l change the typ
   ba034:	2065 6e6f 6120 6e20 746f 2065 6874 7461     e on a note that
   ba044:	6920 2073 6e69 7420 6568 6d20 6469 6c64      is in the middl
   ba054:	2065 666f 7420 6568 7020 6361 206b 6e61     e of the pack an
   ba064:	2064 6874 6e65 6320 6168 676e 2065 7469     d then change it
   ba074:	6220 6361 2e6b 0020 6f4e 6974 6563 6820      back. .Notice h
   ba084:	776f 7420 6568 6e20 7765 6e20 646f 2065     ow the new node 
   ba094:	7369 6e20 776f 6120 2074 6874 2065 6e65     is now at the en
   ba0a4:	2064 666f 7420 6568 6f20 7475 7265 6f20     d of the outer o
   ba0b4:	626a 6365 2074 202d 6874 7369 7720 6c69     jbect - this wil
   ba0c4:	206c 7262 6165 206b 756f 2072 6f63 6564     l break our code
   ba0d4:	4600 6e69 7369 6568 2064 6574 7473 0000     .Finished test..

000ba0e4 <_ZTVN5spark10LogHandlerE>:
	...
   ba0f4:	40a1 000b 40c9 000b                         .@...@..

000ba0fc <_ZTVN5spark16SerialLogHandlerE>:
	...
   ba104:	4125 000b 4159 000b 8281 000b 40cb 000b     %A..YA.......@..

000ba114 <_ZTV16JsonParserStaticILj3072ELj550EE>:
	...
   ba11c:	40d5 000b 40e9 000b 755c 3025 5834 0000     .@...@..\u%04X..

000ba12c <_ZTV10JsonBuffer>:
	...
   ba134:	4ef5 000b 4f11 000b                         .N...O..

000ba13c <_ZTV10JsonParser>:
	...
   ba144:	4f75 000b 4f99 000b                         uO...O..

000ba14c <_ZTV10JsonWriter>:
	...
   ba154:	4f25 000b 4f39 000b                         %O..9O..

000ba15c <_ZTV12JsonModifier>:
	...
   ba164:	4f4d 000b 4f61 000b 6f6e 2074 6176 696c     MO..aO..not vali
   ba174:	0064 7563 7272 6e65 2074 6164 6174 6920     d.current data i
   ba184:	2073 7325 6e00 646f 4965 2044 6164 6174     s %s.nodeID data
   ba194:	6920 2073 7325 2500 2a2e 0073 6f4e 6564      is %s.%.*s.Node
   ba1a4:	4420 7461 6261 7361 2065 6562 6f66 6572      Database before
   ba1b4:	7320 7465 003a 6f4e 6564 4420 7461 6261      set:.Node Datab
   ba1c4:	7361 2065 6661 6574 2072 6573 3a74 7b00     ase after set:.{
   ba1d4:	6e22 646f 7365 3a22 5d5b 007d 6552 6573     "nodes":[]}.Rese
   ba1e4:	7474 6769 4e20 646f 4965 2044 6f63 666e     ttig NodeID conf
   ba1f4:	6769 7420 3a6f 2520 0073 6f4e 6564 4449     ig to: %s.NodeID
   ba204:	6420 7461 2061 7369 6e20 776f 2520 0073      data is now %s.
   ba214:	7245 7361 6e69 2067 5246 4d41 7220 6765     Erasing FRAM reg
   ba224:	6f69 006e 6e49 7469 6169 696c 697a 676e     ion.Initializing
   ba234:	6420 7461 0061 0000                          data...

000ba23c <_ZTV8MB85RC64>:
	...
   ba244:	5bf1 000b 5c05 000b 5fc5 000b 605b 000b     .[...\..._..[`..
   ba254:	60dd 000b                                   .`..

000ba258 <_ZTV10nodeIDData>:
	...
   ba260:	5d5d 000b 5c7b 000b 5c53 000b 6193 000b     ]]..{\..S\...a..
   ba270:	61bb 000b 5c19 000b 5f05 000b 5ccd 000b     .a...\..._...\..
   ba280:	5ce1 000b                                   .\..

000ba284 <_ZTV6MB85RC>:
	...
   ba28c:	5f85 000b 5f87 000b 5fc5 000b 605b 000b     ._..._..._..[`..
   ba29c:	60dd 000b 6176 696c 6164 6974 676e 6420     .`..validating d
   ba2ac:	7461 2061 6973 657a 253d 0064 6f67 3a74     ata size=%d.got:
   ba2bc:	6d20 6761 6369 253d 3830 2078 6576 7372      magic=%08x vers
   ba2cc:	6f69 3d6e 3025 7834 7320 7a69 3d65 3025     ion=%04x size=%0
   ba2dc:	7834 6820 7361 3d68 3025 7838 6500 7078     4x hash=%08x.exp
   ba2ec:	203a 616d 6967 3d63 3025 7838 7620 7265     : magic=%08x ver
   ba2fc:	6973 6e6f 253d 3430 2078 6973 657a 253d     sion=%04x size=%
   ba30c:	3430 2078 6168 6873 253d 3830 0078 6173     04x hash=%08x.sa
   ba31c:	6976 676e 6420 7461 2061 6973 657a 253d     ving data size=%
   ba32c:	0064 0000                                   d...

000ba330 <_ZTVN15StorageHelperRK18PersistentDataBaseE>:
	...
   ba338:	618d 000b 6225 000b 64ad 000b 6193 000b     .a..%b...d...a..
   ba348:	61bb 000b 63a9 000b 6481 000b               .a...c...d..

000ba354 <_ZTVN5spark13CellularClassE>:
	...
   ba35c:	6aff 000b 6af5 000b 6aeb 000b 6aa1 000b     .j...j...j...j..
   ba36c:	6adf 000b 6ad3 000b 85d9 000b 85e1 000b     .j...j..........
   ba37c:	6ac7 000b 6abf 000b 6ab5 000b 6aab 000b     .j...j...j...j..
   ba38c:	8611 000b                                   ....

000ba390 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   ba398:	6b39 000b 6b3f 000b 6b7d 000b 6b4d 000b     9k..?k..}k..Mk..
   ba3a8:	6b3b 000b                                   ;k..

000ba3ac <_ZTVN5spark13EthernetClassE>:
	...
   ba3b4:	70c7 000b 70bd 000b 70b3 000b 70a9 000b     .p...p...p...p..
   ba3c4:	709d 000b 7091 000b 85d9 000b 85e1 000b     .p...p..........
   ba3d4:	7085 000b 707d 000b 7073 000b 7069 000b     .p..}p..sp..ip..
   ba3e4:	8611 000b                                   ....

000ba3e8 <_ZTV7TwoWire>:
	...
   ba3f0:	70e5 000b 712f 000b 7107 000b 70e7 000b     .p../q...q...p..
   ba400:	710f 000b 7117 000b 711f 000b 7127 000b     .q...q...q..'q..

000ba410 <_ZTV9IPAddress>:
	...
   ba418:	7221 000b 7211 000b 7213 000b 7525 7500     !r...r...r..%u.u
   ba428:	3025 7834 6200 7561 0064 6553 6972 6c61     %04x.baud.Serial
   ba438:	5300 7265 6169 316c 4a00 4f53 534e 7274     .Serial1.JSONStr
   ba448:	6165 4c6d 676f 6148 646e 656c 0072 7061     eamLogHandler.ap
   ba458:	0070 3025 3031 2075 5d00 0020 202c 2800     p.%010u .] ., .(
   ba468:	3a29 0020 5b20 6300 646f 2065 203d 2500     ): . [.code = .%
   ba478:	0069 6564 6174 6c69 2073 203d 0d00 000a     i.details = ....
   ba488:	006d 0066 6e6c 6600 006e 6564 6174 6c69     m.f.ln.fn.detail
   ba498:	0000 0000                                   ....

000ba49c <_ZTVN5spark16JSONStreamWriterE>:
	...
   ba4a4:	76cd 000b 76f3 000b 76b1 000b 732f 000b     .v...v...v../s..

000ba4b4 <_ZTVN5spark16StreamLogHandlerE>:
	...
   ba4bc:	7b29 000b 7b41 000b 8281 000b 40cb 000b     ){..A{.......@..

000ba4cc <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
   ba4d4:	7b55 000b 7b69 000b 8425 000b 76b9 000b     U{..i{..%....v..

000ba4e4 <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
   ba4ec:	76cb 000b 7701 000b 81e5 000b 76bb 000b     .v...w.......v..

000ba4fc <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
   ba504:	76c9 000b 770f 000b 7a91 000b 7731 000b     .v...w...z..1w..

000ba514 <_ZTVN5spark12NetworkClassE>:
	...
   ba51c:	8599 000b 85a3 000b 85ad 000b 85b7 000b     ................
   ba52c:	85c1 000b 85cd 000b 85d9 000b 85e1 000b     ................
   ba53c:	85e9 000b 85f5 000b 85fd 000b 8607 000b     ................
   ba54c:	8611 000b 5925 252d 2d6d 6425 2554 3a48     ....%Y-%m-%dT%H:
   ba55c:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

000ba56c <_ZTV11USARTSerial>:
	...
   ba574:	8a21 000b 8a8d 000b 8a65 000b 86fd 000b     !.......e.......
   ba584:	8a35 000b 8a51 000b 8a43 000b 8a5f 000b     5...Q...C..._...
   ba594:	8a23 000b 8a27 000b                         #...'...

000ba59c <_ZTV9USBSerial>:
	...
   ba5a4:	8adf 000b 8b47 000b 8b1d 000b 86fd 000b     ....G...........
   ba5b4:	8b0f 000b 8ae1 000b 8af1 000b 8b41 000b     ............A...
   ba5c4:	8b01 000b 8ad9 000b                         ........

000ba5cc <_ZSt7nothrow>:
   ba5cc:	5200 4545 544e 6d20 6c61 6f6c 2063 7573     .REENT malloc su
   ba5dc:	6363 6565 6564 0064 742f 706d 6a2f 6e65     cceeded./tmp/jen
   ba5ec:	696b 736e 472d 4343 312d 2d30 6970 6570     kins-GCC-10-pipe
   ba5fc:	696c 656e 342d 5f38 3032 3032 3131 3432     line-48_20201124
   ba60c:	315f 3036 3136 3038 3336 2f39 7273 2f63     _1606180639/src/
   ba61c:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
   ba62c:	6362 732f 6474 696c 2f62 6172 646e 632e     bc/stdlib/rand.c
	...

000ba63d <_ctype_>:
   ba63d:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   ba64d:	2020 2020 2020 2020 2020 2020 2020 2020                     
   ba65d:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   ba66d:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   ba67d:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   ba68d:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   ba69d:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   ba6ad:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   ba6bd:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000ba73e <link_const_variable_data_end>:
	...

000ba740 <link_constructors_location>:
   ba740:	000b480d 	.word	0x000b480d
   ba744:	000b5f55 	.word	0x000b5f55
   ba748:	000b6a91 	.word	0x000b6a91
   ba74c:	000b6b09 	.word	0x000b6b09
   ba750:	000b70d1 	.word	0x000b70d1
   ba754:	000b8271 	.word	0x000b8271
   ba758:	000b86e9 	.word	0x000b86e9
   ba75c:	000b8809 	.word	0x000b8809
   ba760:	000b89e9 	.word	0x000b89e9
   ba764:	000b8a0d 	.word	0x000b8a0d

000ba768 <link_constructors_end>:
	...
