
/Users/chipmc/Documents/Maker/Particle/Utilities/JSON-Parser-Test/target/4.2.0/boron/JSON-Parser-Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00007104  000b401c  000b401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000bb120  000bb120  0000b120  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000bb144  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000008c  2003b6b4  000bb148  0001b6b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000030b0  2003b740  2003b740  0002b740  2**2
                  ALLOC
  7 .module_info_suffix 00000028  000bb1d4  000bb1d4  0002b1d4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000bb1fc  000bb1fc  0002b1fc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   00160e44  00000000  00000000  0002b200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00017249  00000000  00000000  0018c044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    00048166  00000000  00000000  001a328d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00003480  00000000  00000000  001eb3f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 0000c7d0  00000000  00000000  001ee873  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003efb0  00000000  00000000  001fb043  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0004f36f  00000000  00000000  00239ff3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001428a4  00000000  00000000  00289362  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  00009ae0  00000000  00000000  003cbc08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b401c:	4809      	ldr	r0, [pc, #36]	; (b4044 <module_user_pre_init+0x28>)
   b401e:	490a      	ldr	r1, [pc, #40]	; (b4048 <module_user_pre_init+0x2c>)
   b4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4024:	d005      	beq.n	b4032 <module_user_pre_init+0x16>
   b4026:	4a09      	ldr	r2, [pc, #36]	; (b404c <module_user_pre_init+0x30>)
   b4028:	4282      	cmp	r2, r0
   b402a:	d002      	beq.n	b4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b402c:	1a12      	subs	r2, r2, r0
   b402e:	f005 fca7 	bl	b9980 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4032:	4807      	ldr	r0, [pc, #28]	; (b4050 <module_user_pre_init+0x34>)
   b4034:	4a07      	ldr	r2, [pc, #28]	; (b4054 <module_user_pre_init+0x38>)
   b4036:	2100      	movs	r1, #0
   b4038:	1a12      	subs	r2, r2, r0
   b403a:	f005 fcc9 	bl	b99d0 <memset>
    return &link_global_data_start;
}
   b403e:	4801      	ldr	r0, [pc, #4]	; (b4044 <module_user_pre_init+0x28>)
   b4040:	bd08      	pop	{r3, pc}
   b4042:	bf00      	nop
   b4044:	2003b6b4 	.word	0x2003b6b4
   b4048:	000bb148 	.word	0x000bb148
   b404c:	2003b740 	.word	0x2003b740
   b4050:	2003b740 	.word	0x2003b740
   b4054:	2003e7ed 	.word	0x2003e7ed

000b4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405a:	4e07      	ldr	r6, [pc, #28]	; (b4078 <module_user_init+0x20>)
   b405c:	4c07      	ldr	r4, [pc, #28]	; (b407c <module_user_init+0x24>)
    module_user_init_hook();
   b405e:	f005 fa0b 	bl	b9478 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4062:	1ba4      	subs	r4, r4, r6
   b4064:	08a4      	lsrs	r4, r4, #2
   b4066:	2500      	movs	r5, #0
   b4068:	42ac      	cmp	r4, r5
   b406a:	d100      	bne.n	b406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b406e:	f856 3b04 	ldr.w	r3, [r6], #4
   b4072:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4074:	3501      	adds	r5, #1
   b4076:	e7f7      	b.n	b4068 <module_user_init+0x10>
   b4078:	000bb0ec 	.word	0x000bb0ec
   b407c:	000bb114 	.word	0x000bb114

000b4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4080:	f000 bd84 	b.w	b4b8c <setup>

000b4084 <module_user_loop>:
}

void module_user_loop() {
   b4084:	b508      	push	{r3, lr}
    loop();
   b4086:	f000 ff95 	bl	b4fb4 <loop>
    _post_loop();
}
   b408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b408e:	f005 b9ab 	b.w	b93e8 <_post_loop>

000b4092 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4092:	f002 bfe9 	b.w	b7068 <malloc>

000b4096 <_Znaj>:
   b4096:	f002 bfe7 	b.w	b7068 <malloc>

000b409a <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b409a:	f002 bfed 	b.w	b7078 <free>
	...

000b40a0 <__cxa_pure_virtual>:
int __wrap_printf(const char* fmt, ...) {
    return -1;
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   b40a0:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   b40a2:	4a03      	ldr	r2, [pc, #12]	; (b40b0 <__cxa_pure_virtual+0x10>)
   b40a4:	4903      	ldr	r1, [pc, #12]	; (b40b4 <__cxa_pure_virtual+0x14>)
   b40a6:	200c      	movs	r0, #12
   b40a8:	f002 fee2 	bl	b6e70 <panic_>
  while (1);
   b40ac:	e7fe      	b.n	b40ac <__cxa_pure_virtual+0xc>
   b40ae:	bf00      	nop
   b40b0:	000b6c31 	.word	0x000b6c31
   b40b4:	000b9da0 	.word	0x000b9da0

000b40b8 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40b8:	7800      	ldrb	r0, [r0, #0]
   b40ba:	fab0 f080 	clz	r0, r0
   b40be:	0940      	lsrs	r0, r0, #5
   b40c0:	4770      	bx	lr

000b40c2 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40c2:	2301      	movs	r3, #1
   b40c4:	7003      	strb	r3, [r0, #0]
   b40c6:	4770      	bx	lr

000b40c8 <_ZN5spark10LogHandler5writeEPKcj>:
    }
}

inline void spark::LogHandler::write(const char *data, size_t size) {
    // Default implementation does nothing
}
   b40c8:	4770      	bx	lr

000b40ca <_ZN5spark16StreamLogHandler5writeEPKcj>:
inline Print* spark::StreamLogHandler::stream() const {
    return stream_;
}

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
   b40ca:	6a00      	ldr	r0, [r0, #32]
   b40cc:	6803      	ldr	r3, [r0, #0]
   b40ce:	68db      	ldr	r3, [r3, #12]
   b40d0:	4718      	bx	r3
	...

000b40d4 <_ZN16JsonParserStaticILj3072ELj550EED1Ev>:
 *
 * @param MAX_TOKENS The maximum number of tokens you expect. Each object has a token and two for each key/value pair.
 * Each array is a token and one for each element in the array.
 */
template <size_t BUFFER_SIZE, size_t MAX_TOKENS>
class JsonParserStatic : public JsonParser {
   b40d4:	b510      	push	{r4, lr}
   b40d6:	4b03      	ldr	r3, [pc, #12]	; (b40e4 <_ZN16JsonParserStaticILj3072ELj550EED1Ev+0x10>)
   b40d8:	6003      	str	r3, [r0, #0]
   b40da:	4604      	mov	r4, r0
   b40dc:	f001 f85c 	bl	b5198 <_ZN10JsonParserD1Ev>
   b40e0:	4620      	mov	r0, r4
   b40e2:	bd10      	pop	{r4, pc}
   b40e4:	000baa00 	.word	0x000baa00

000b40e8 <_ZN16JsonParserStaticILj3072ELj550EED0Ev>:
   b40e8:	b510      	push	{r4, lr}
   b40ea:	4604      	mov	r4, r0
   b40ec:	f7ff fff2 	bl	b40d4 <_ZN16JsonParserStaticILj3072ELj550EED1Ev>
   b40f0:	4620      	mov	r0, r4
   b40f2:	f642 618c 	movw	r1, #11916	; 0x2e8c
   b40f6:	f7ff ffd0 	bl	b409a <_ZdlPvj>
   b40fa:	4620      	mov	r0, r4
   b40fc:	bd10      	pop	{r4, pc}

000b40fe <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>:
	bool getValueByKey(const JsonParserGeneratorRK::jsmntok_t *container, const char *name, T &result) const {
   b40fe:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b4100:	461d      	mov	r5, r3
		if (getValueTokenByKey(container, name, value)) {
   b4102:	ab01      	add	r3, sp, #4
	bool getValueByKey(const JsonParserGeneratorRK::jsmntok_t *container, const char *name, T &result) const {
   b4104:	4604      	mov	r4, r0
		if (getValueTokenByKey(container, name, value)) {
   b4106:	f001 fa2d 	bl	b5564 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
   b410a:	b120      	cbz	r0, b4116 <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0+0x18>
			return getTokenValue(value, result);
   b410c:	9901      	ldr	r1, [sp, #4]
   b410e:	462a      	mov	r2, r5
   b4110:	4620      	mov	r0, r4
   b4112:	f001 f939 	bl	b5388 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tERi>
	}
   b4116:	b003      	add	sp, #12
   b4118:	bd30      	pop	{r4, r5, pc}
	...

000b411c <_ZN10CloudClass7processEv.isra.0>:
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
    }
    static void disconnect(const CloudDisconnectOptions& options = CloudDisconnectOptions());
    static bool process(void) {
   b411c:	b508      	push	{r3, lr}
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b411e:	f002 fd8f 	bl	b6c40 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b4122:	4b03      	ldr	r3, [pc, #12]	; (b4130 <_ZN10CloudClass7processEv.isra.0+0x14>)
   b4124:	6018      	str	r0, [r3, #0]
            application_checkin();
            return spark_process();
    }
   b4126:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            return spark_process();
   b412a:	f002 bf15 	b.w	b6f58 <spark_process>
   b412e:	bf00      	nop
   b4130:	2003e728 	.word	0x2003e728

000b4134 <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
   b4134:	4b0a      	ldr	r3, [pc, #40]	; (b4160 <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
   b4136:	b510      	push	{r4, lr}
   b4138:	4604      	mov	r4, r0
   b413a:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
   b413c:	f003 ffb8 	bl	b80b0 <_ZN5spark10LogManager8instanceEv>
   b4140:	4621      	mov	r1, r4
   b4142:	f004 f9f0 	bl	b8526 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
   b4146:	f005 f907 	bl	b9358 <_Z16_fetch_usbserialv>
   b414a:	f005 f8f9 	bl	b9340 <_ZN9USBSerial3endEv>
    virtual ~LogHandler() = default;
   b414e:	4620      	mov	r0, r4
   b4150:	4b04      	ldr	r3, [pc, #16]	; (b4164 <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
   b4152:	f840 3b04 	str.w	r3, [r0], #4
   b4156:	f004 f881 	bl	b825c <_ZN5spark6detail9LogFilterD1Ev>
    }
   b415a:	4620      	mov	r0, r4
   b415c:	bd10      	pop	{r4, pc}
   b415e:	bf00      	nop
   b4160:	000ba9e8 	.word	0x000ba9e8
   b4164:	000ba9d0 	.word	0x000ba9d0

000b4168 <_ZN5spark16SerialLogHandlerD0Ev>:
    virtual ~SerialLogHandler() {
   b4168:	b510      	push	{r4, lr}
   b416a:	4604      	mov	r4, r0
    }
   b416c:	f7ff ffe2 	bl	b4134 <_ZN5spark16SerialLogHandlerD1Ev>
   b4170:	4620      	mov	r0, r4
   b4172:	2124      	movs	r1, #36	; 0x24
   b4174:	f7ff ff91 	bl	b409a <_ZdlPvj>
   b4178:	4620      	mov	r0, r4
   b417a:	bd10      	pop	{r4, pc}

000b417c <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   b417c:	b40e      	push	{r1, r2, r3}
   b417e:	b500      	push	{lr}
   b4180:	b08c      	sub	sp, #48	; 0x30
   b4182:	aa0d      	add	r2, sp, #52	; 0x34
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   b4184:	f04f 0c20 	mov.w	ip, #32
inline void spark::Logger::info(const char *fmt, ...) const {
   b4188:	f852 1b04 	ldr.w	r1, [r2], #4
    va_start(args, fmt);
   b418c:	9203      	str	r2, [sp, #12]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b418e:	e9cd 1200 	strd	r1, r2, [sp]
    attr.flags = 0;
   b4192:	2300      	movs	r3, #0
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b4194:	6801      	ldr	r1, [r0, #0]
   b4196:	aa04      	add	r2, sp, #16
   b4198:	201e      	movs	r0, #30
    attr.flags = 0;
   b419a:	e9cd c304 	strd	ip, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b419e:	f002 fe6f 	bl	b6e80 <log_message_v>
}
   b41a2:	b00c      	add	sp, #48	; 0x30
   b41a4:	f85d eb04 	ldr.w	lr, [sp], #4
   b41a8:	b003      	add	sp, #12
   b41aa:	4770      	bx	lr

000b41ac <_Z10printTokenR10JsonParserPKN21JsonParserGeneratorRK9jsmntok_tE.part.0>:
	}

	Log.info("Total tokens=%d (%4.2f%% full) storage=%d (%4.2f%% full)", tokenCount, (100*((float)tokenCount/(float)jp.getMaxTokens())), storageSize, (100*((float)storageSize/(float)jp.getBufferLen())));
}

void printToken(JsonParser &jp, const JsonParserGeneratorRK::jsmntok_t *tok) {
   b41ac:	b5f0      	push	{r4, r5, r6, r7, lr}
		typeName = "UNDEFINED";
		break;

	case JsonParserGeneratorRK::JSMN_OBJECT:
		typeName = "OBJECT";
		memcpy(tempBuf, jp.getBuffer() + tok->start, tok->end - tok->start);
   b41ae:	e9d1 5601 	ldrd	r5, r6, [r1, #4]
void printToken(JsonParser &jp, const JsonParserGeneratorRK::jsmntok_t *tok) {
   b41b2:	f2ad 4d14 	subw	sp, sp, #1044	; 0x414
   b41b6:	460c      	mov	r4, r1
		memcpy(tempBuf, jp.getBuffer() + tok->start, tok->end - tok->start);
   b41b8:	6841      	ldr	r1, [r0, #4]
   b41ba:	ab04      	add	r3, sp, #16
   b41bc:	1b77      	subs	r7, r6, r5
   b41be:	463a      	mov	r2, r7
   b41c0:	4429      	add	r1, r5
   b41c2:	4618      	mov	r0, r3
   b41c4:	f005 fbdc 	bl	b9980 <memcpy>
		tempBuf[tok->end - tok->start] = 0;
		Log.info("type=%s start=%d end=%d tokens=%d - %s", typeName, tok->start, tok->end, tok->size, tempBuf);
   b41c8:	68e3      	ldr	r3, [r4, #12]
   b41ca:	4907      	ldr	r1, [pc, #28]	; (b41e8 <_Z10printTokenR10JsonParserPKN21JsonParserGeneratorRK9jsmntok_tE.part.0+0x3c>)
		tempBuf[tok->end - tok->start] = 0;
   b41cc:	2200      	movs	r2, #0
   b41ce:	55c2      	strb	r2, [r0, r7]
		Log.info("type=%s start=%d end=%d tokens=%d - %s", typeName, tok->start, tok->end, tok->size, tempBuf);
   b41d0:	e9cd 6300 	strd	r6, r3, [sp]
   b41d4:	9002      	str	r0, [sp, #8]
   b41d6:	4a05      	ldr	r2, [pc, #20]	; (b41ec <_Z10printTokenR10JsonParserPKN21JsonParserGeneratorRK9jsmntok_tE.part.0+0x40>)
   b41d8:	4805      	ldr	r0, [pc, #20]	; (b41f0 <_Z10printTokenR10JsonParserPKN21JsonParserGeneratorRK9jsmntok_tE.part.0+0x44>)
   b41da:	462b      	mov	r3, r5
   b41dc:	f7ff ffce 	bl	b417c <_ZNK5spark6Logger4infoEPKcz>
	case JsonParserGeneratorRK::JSMN_PRIMITIVE:
		typeName = "PRIMITIVE";
		break;
	}

}
   b41e0:	f20d 4d14 	addw	sp, sp, #1044	; 0x414
   b41e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b41e6:	bf00      	nop
   b41e8:	000b9dbc 	.word	0x000b9dbc
   b41ec:	000b9db5 	.word	0x000b9db5
   b41f0:	2003e6b0 	.word	0x2003e6b0

000b41f4 <_ZN10JsonWriter11insertValueEi>:
	 * @brief Inserts an integer value.
	 *
	 * You would normally use insertKeyValue() or insertArrayValue() instead of calling this directly
	 * as those functions take care of inserting the separators between items.
	 */
	void insertValue(int value) { insertsprintf("%d", value); }
   b41f4:	460a      	mov	r2, r1
   b41f6:	4901      	ldr	r1, [pc, #4]	; (b41fc <_ZN10JsonWriter11insertValueEi+0x8>)
   b41f8:	f001 ba39 	b.w	b566e <_ZN10JsonWriter13insertsprintfEPKcz>
   b41fc:	000ba8f1 	.word	0x000ba8f1

000b4200 <_Z7getTypei>:
byte getType(int nodeNumber) {
   b4200:	b513      	push	{r0, r1, r4, lr}
   b4202:	4604      	mov	r4, r0
	jp.getValueTokenByKey(jp.getOuterObject(), "nodes", nodesArrayContainer);
   b4204:	480c      	ldr	r0, [pc, #48]	; (b4238 <_Z7getTypei+0x38>)
   b4206:	f001 f844 	bl	b5292 <_ZNK10JsonParser14getOuterObjectEv>
   b420a:	4a0c      	ldr	r2, [pc, #48]	; (b423c <_Z7getTypei+0x3c>)
   b420c:	4601      	mov	r1, r0
   b420e:	ab01      	add	r3, sp, #4
   b4210:	4809      	ldr	r0, [pc, #36]	; (b4238 <_Z7getTypei+0x38>)
   b4212:	f001 f9a7 	bl	b5564 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
	nodeObjectContainer = jp.getTokenByIndex(nodesArrayContainer, nodeNumber-1);
   b4216:	9901      	ldr	r1, [sp, #4]
   b4218:	4807      	ldr	r0, [pc, #28]	; (b4238 <_Z7getTypei+0x38>)
   b421a:	1e62      	subs	r2, r4, #1
   b421c:	f001 f85b 	bl	b52d6 <_ZNK10JsonParser15getTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj>
	if(nodeObjectContainer == NULL) return false;								// Ran out of entries
   b4220:	b138      	cbz	r0, b4232 <_Z7getTypei+0x32>
	jp.getValueByKey(nodeObjectContainer, "type", type);
   b4222:	4601      	mov	r1, r0
   b4224:	4a06      	ldr	r2, [pc, #24]	; (b4240 <_Z7getTypei+0x40>)
   b4226:	4804      	ldr	r0, [pc, #16]	; (b4238 <_Z7getTypei+0x38>)
   b4228:	466b      	mov	r3, sp
   b422a:	f7ff ff68 	bl	b40fe <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
	return type;
   b422e:	f89d 0000 	ldrb.w	r0, [sp]
}
   b4232:	b002      	add	sp, #8
   b4234:	bd10      	pop	{r4, pc}
   b4236:	bf00      	nop
   b4238:	2003b778 	.word	0x2003b778
   b423c:	000b9de3 	.word	0x000b9de3
   b4240:	000b9de9 	.word	0x000b9de9

000b4244 <_Z10printTokenR10JsonParserPKN21JsonParserGeneratorRK9jsmntok_tE>:
	switch(tok->type) {
   b4244:	780b      	ldrb	r3, [r1, #0]
   b4246:	2b01      	cmp	r3, #1
   b4248:	d101      	bne.n	b424e <_Z10printTokenR10JsonParserPKN21JsonParserGeneratorRK9jsmntok_tE+0xa>
   b424a:	f7ff bfaf 	b.w	b41ac <_Z10printTokenR10JsonParserPKN21JsonParserGeneratorRK9jsmntok_tE.part.0>
}
   b424e:	4770      	bx	lr

000b4250 <_Z14decompressDatahPhS_>:
        bitOffset += bitSizes[i];
    }
    return compressedData;
}

void decompressData(uint8_t compressedData, uint8_t data[], uint8_t bitSizes[]) {
   b4250:	b5f0      	push	{r4, r5, r6, r7, lr}
   b4252:	3901      	subs	r1, #1
   b4254:	1e55      	subs	r5, r2, #1
    uint8_t bitOffset = 0;
   b4256:	2400      	movs	r4, #0
   b4258:	3203      	adds	r2, #3
    for (uint8_t i = 0; i < 4; ++i) {
        data[i] = (compressedData >> bitOffset) & ((1 << bitSizes[i]) - 1);
   b425a:	2701      	movs	r7, #1
   b425c:	f815 3f01 	ldrb.w	r3, [r5, #1]!
   b4260:	fa07 f303 	lsl.w	r3, r7, r3
   b4264:	fa40 f604 	asr.w	r6, r0, r4
   b4268:	3b01      	subs	r3, #1
   b426a:	4033      	ands	r3, r6
   b426c:	f801 3f01 	strb.w	r3, [r1, #1]!
        bitOffset += bitSizes[i];
   b4270:	782b      	ldrb	r3, [r5, #0]
    for (uint8_t i = 0; i < 4; ++i) {
   b4272:	42aa      	cmp	r2, r5
        bitOffset += bitSizes[i];
   b4274:	441c      	add	r4, r3
   b4276:	b2e4      	uxtb	r4, r4
    for (uint8_t i = 0; i < 4; ++i) {
   b4278:	d1f0      	bne.n	b425c <_Z14decompressDatahPhS_+0xc>
    }
}
   b427a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b427c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   b427c:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   b427e:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   b4280:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   b4282:	b17c      	cbz	r4, b42a4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   b4284:	6863      	ldr	r3, [r4, #4]
   b4286:	3b01      	subs	r3, #1
   b4288:	6063      	str	r3, [r4, #4]
   b428a:	b95b      	cbnz	r3, b42a4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   b428c:	6823      	ldr	r3, [r4, #0]
   b428e:	4620      	mov	r0, r4
   b4290:	689b      	ldr	r3, [r3, #8]
   b4292:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b4294:	68a3      	ldr	r3, [r4, #8]
   b4296:	3b01      	subs	r3, #1
   b4298:	60a3      	str	r3, [r4, #8]
   b429a:	b91b      	cbnz	r3, b42a4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   b429c:	6823      	ldr	r3, [r4, #0]
   b429e:	4620      	mov	r0, r4
   b42a0:	68db      	ldr	r3, [r3, #12]
   b42a2:	4798      	blx	r3
	  _M_pi->_M_release();
      }
   b42a4:	4628      	mov	r0, r5
   b42a6:	bd38      	pop	{r3, r4, r5, pc}

000b42a8 <_Z11printTokensR10JsonParserb>:
void printTokens(JsonParser &jp, bool verbose) {
   b42a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b42ac:	ed2d 8b02 	vpush	{d8}
   b42b0:	4604      	mov	r4, r0
   b42b2:	f6ad 4d24 	subw	sp, sp, #3108	; 0xc24
	if (verbose) Log.info("printing tokens");
   b42b6:	460e      	mov	r6, r1
   b42b8:	b119      	cbz	r1, b42c2 <_Z11printTokensR10JsonParserb+0x1a>
   b42ba:	493b      	ldr	r1, [pc, #236]	; (b43a8 <_Z11printTokensR10JsonParserb+0x100>)
   b42bc:	483b      	ldr	r0, [pc, #236]	; (b43ac <_Z11printTokensR10JsonParserb+0x104>)
   b42be:	f7ff ff5d 	bl	b417c <_ZNK5spark6Logger4infoEPKcz>
	JsonParserGeneratorRK::jsmntok_t *getTokens() { return tokens; };
   b42c2:	e9d4 5905 	ldrd	r5, r9, [r4, #20]
	memcpy(tempBuf, jp.getBuffer() + tok->start, tok->end - tok->start);
   b42c6:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
   b42ca:	6861      	ldr	r1, [r4, #4]
   b42cc:	1ad2      	subs	r2, r2, r3
   b42ce:	4419      	add	r1, r3
   b42d0:	a808      	add	r0, sp, #32
   b42d2:	f005 fb55 	bl	b9980 <memcpy>
	tempBuf[tok->end - tok->start] = 0;
   b42d6:	e9d5 2301 	ldrd	r2, r3, [r5, #4]
   b42da:	a908      	add	r1, sp, #32
   b42dc:	1a9b      	subs	r3, r3, r2
   b42de:	2200      	movs	r2, #0
   b42e0:	54ca      	strb	r2, [r1, r3]
	storageSize += tok->end;
   b42e2:	f8d5 8008 	ldr.w	r8, [r5, #8]
	if (verbose) Log.info("Outer object start=%d end=%d tokens=%d - %s", tok->start, tok->end, tok->size, tempBuf);
   b42e6:	b146      	cbz	r6, b42fa <_Z11printTokensR10JsonParserb+0x52>
   b42e8:	9101      	str	r1, [sp, #4]
   b42ea:	68eb      	ldr	r3, [r5, #12]
   b42ec:	9300      	str	r3, [sp, #0]
   b42ee:	686a      	ldr	r2, [r5, #4]
   b42f0:	492f      	ldr	r1, [pc, #188]	; (b43b0 <_Z11printTokensR10JsonParserb+0x108>)
   b42f2:	482e      	ldr	r0, [pc, #184]	; (b43ac <_Z11printTokensR10JsonParserb+0x104>)
   b42f4:	4643      	mov	r3, r8
   b42f6:	f7ff ff41 	bl	b417c <_ZNK5spark6Logger4infoEPKcz>
	sniprintf(tempBuf, sizeof(tempBuf), "test %s", charlike);
   b42fa:	4b2e      	ldr	r3, [pc, #184]	; (b43b4 <_Z11printTokensR10JsonParserb+0x10c>)
   b42fc:	4a2e      	ldr	r2, [pc, #184]	; (b43b8 <_Z11printTokensR10JsonParserb+0x110>)
   b42fe:	f44f 6140 	mov.w	r1, #3072	; 0xc00
   b4302:	a808      	add	r0, sp, #32
   b4304:	f002 fed8 	bl	b70b8 <sniprintf>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   b4308:	4b2c      	ldr	r3, [pc, #176]	; (b43bc <_Z11printTokensR10JsonParserb+0x114>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b430a:	492d      	ldr	r1, [pc, #180]	; (b43c0 <_Z11printTokensR10JsonParserb+0x118>)
   b430c:	781b      	ldrb	r3, [r3, #0]
   b430e:	f88d 3000 	strb.w	r3, [sp]
   b4312:	aa08      	add	r2, sp, #32
   b4314:	233c      	movs	r3, #60	; 0x3c
   b4316:	a806      	add	r0, sp, #24
   b4318:	f003 f8de 	bl	b74d8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   b431c:	a807      	add	r0, sp, #28
   b431e:	f7ff ffad 	bl	b427c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b4322:	6965      	ldr	r5, [r4, #20]
	int tokenCount = 0;
   b4324:	2700      	movs	r7, #0
	for(JsonParserGeneratorRK::jsmntok_t *tok = jp.getTokens(); tok < tokensEnd; tok++) {
   b4326:	454d      	cmp	r5, r9
   b4328:	d20b      	bcs.n	b4342 <_Z11printTokensR10JsonParserb+0x9a>
		if (tok->start > 0) {
   b432a:	686b      	ldr	r3, [r5, #4]
   b432c:	2b00      	cmp	r3, #0
			tokenCount += tok->size;
   b432e:	bfc4      	itt	gt
   b4330:	68eb      	ldrgt	r3, [r5, #12]
   b4332:	18ff      	addgt	r7, r7, r3
		if (verbose) {
   b4334:	b11e      	cbz	r6, b433e <_Z11printTokensR10JsonParserb+0x96>
			printToken(jp, tok);
   b4336:	4629      	mov	r1, r5
   b4338:	4620      	mov	r0, r4
   b433a:	f7ff ff83 	bl	b4244 <_Z10printTokenR10JsonParserPKN21JsonParserGeneratorRK9jsmntok_tE>
	for(JsonParserGeneratorRK::jsmntok_t *tok = jp.getTokens(); tok < tokensEnd; tok++) {
   b433e:	3510      	adds	r5, #16
   b4340:	e7f1      	b.n	b4326 <_Z11printTokensR10JsonParserb+0x7e>
	Log.info("Total tokens=%d (%4.2f%% full) storage=%d (%4.2f%% full)", tokenCount, (100*((float)tokenCount/(float)jp.getMaxTokens())), storageSize, (100*((float)storageSize/(float)jp.getBufferLen())));
   b4342:	ee07 8a90 	vmov	s15, r8
   b4346:	eef8 6ae7 	vcvt.f32.s32	s13, s15
   b434a:	edd4 7a02 	vldr	s15, [r4, #8]
   b434e:	ed9f 8a1d 	vldr	s16, [pc, #116]	; b43c4 <_Z11printTokensR10JsonParserb+0x11c>
   b4352:	eef8 7a67 	vcvt.f32.u32	s15, s15
   b4356:	ee86 7aa7 	vdiv.f32	s14, s13, s15
   b435a:	ee67 7a08 	vmul.f32	s15, s14, s16
   b435e:	ee17 0a90 	vmov	r0, s15
   b4362:	f005 faa7 	bl	b98b4 <__aeabi_f2d>
   b4366:	ee07 7a90 	vmov	s15, r7
   b436a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
   b436e:	edd4 7a07 	vldr	s15, [r4, #28]
   b4372:	f8cd 8008 	str.w	r8, [sp, #8]
   b4376:	eef8 7a67 	vcvt.f32.u32	s15, s15
   b437a:	e9cd 0104 	strd	r0, r1, [sp, #16]
   b437e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
   b4382:	ee67 7a08 	vmul.f32	s15, s14, s16
   b4386:	ee17 0a90 	vmov	r0, s15
   b438a:	f005 fa93 	bl	b98b4 <__aeabi_f2d>
   b438e:	463a      	mov	r2, r7
   b4390:	e9cd 0100 	strd	r0, r1, [sp]
   b4394:	490c      	ldr	r1, [pc, #48]	; (b43c8 <_Z11printTokensR10JsonParserb+0x120>)
   b4396:	4805      	ldr	r0, [pc, #20]	; (b43ac <_Z11printTokensR10JsonParserb+0x104>)
   b4398:	f7ff fef0 	bl	b417c <_ZNK5spark6Logger4infoEPKcz>
}
   b439c:	f60d 4d24 	addw	sp, sp, #3108	; 0xc24
   b43a0:	ecbd 8b02 	vpop	{d8}
   b43a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b43a8:	000b9dee 	.word	0x000b9dee
   b43ac:	2003e6b0 	.word	0x2003e6b0
   b43b0:	000b9dfe 	.word	0x000b9dfe
   b43b4:	000b9e2a 	.word	0x000b9e2a
   b43b8:	000b9e2f 	.word	0x000b9e2f
   b43bc:	2003b770 	.word	0x2003b770
   b43c0:	000b9e37 	.word	0x000b9e37
   b43c4:	42c80000 	.word	0x42c80000
   b43c8:	000b9e3c 	.word	0x000b9e3c

000b43cc <_Z22parseJoinPayloadValueshhRhS_S_S_>:
bool parseJoinPayloadValues(uint8_t sensorType, uint8_t compressedJoinPayload, uint8_t& payload1, uint8_t& payload2, uint8_t& payload3, uint8_t& payload4) {
   b43cc:	b570      	push	{r4, r5, r6, lr}
   b43ce:	4604      	mov	r4, r0
   b43d0:	b086      	sub	sp, #24
   b43d2:	461d      	mov	r5, r3
    switch (sensorType) {
   b43d4:	2c13      	cmp	r4, #19
    uint8_t data[4] = {0};
   b43d6:	f04f 0300 	mov.w	r3, #0
    uint8_t bitSizes[4] = {0};
   b43da:	e9cd 3302 	strd	r3, r3, [sp, #8]
bool parseJoinPayloadValues(uint8_t sensorType, uint8_t compressedJoinPayload, uint8_t& payload1, uint8_t& payload2, uint8_t& payload3, uint8_t& payload4) {
   b43de:	4608      	mov	r0, r1
   b43e0:	4616      	mov	r6, r2
    switch (sensorType) {
   b43e2:	d81c      	bhi.n	b441e <_Z22parseJoinPayloadValueshhRhS_S_S_+0x52>
   b43e4:	2c09      	cmp	r4, #9
   b43e6:	d83c      	bhi.n	b4462 <_Z22parseJoinPayloadValueshhRhS_S_S_+0x96>
   b43e8:	1e63      	subs	r3, r4, #1
   b43ea:	2b08      	cmp	r3, #8
   b43ec:	d922      	bls.n	b4434 <_Z22parseJoinPayloadValueshhRhS_S_S_+0x68>
            Log.info("Unknown sensor type in parseJoinPayloadValues %d", sensorType);
   b43ee:	4921      	ldr	r1, [pc, #132]	; (b4474 <_Z22parseJoinPayloadValueshhRhS_S_S_+0xa8>)
   b43f0:	4821      	ldr	r0, [pc, #132]	; (b4478 <_Z22parseJoinPayloadValueshhRhS_S_S_+0xac>)
   b43f2:	4622      	mov	r2, r4
   b43f4:	f7ff fec2 	bl	b417c <_ZNK5spark6Logger4infoEPKcz>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b43f8:	f002 fdb6 	bl	b6f68 <spark_cloud_flag_connected>
            if (Particle.connected()) Particle.publish("Alert", "Unknown sensor type in parseJoinPayloadValues", PRIVATE);
   b43fc:	b168      	cbz	r0, b441a <_Z22parseJoinPayloadValueshhRhS_S_S_+0x4e>
   b43fe:	4b1f      	ldr	r3, [pc, #124]	; (b447c <_Z22parseJoinPayloadValueshhRhS_S_S_+0xb0>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b4400:	4a1f      	ldr	r2, [pc, #124]	; (b4480 <_Z22parseJoinPayloadValueshhRhS_S_S_+0xb4>)
   b4402:	781b      	ldrb	r3, [r3, #0]
   b4404:	491f      	ldr	r1, [pc, #124]	; (b4484 <_Z22parseJoinPayloadValueshhRhS_S_S_+0xb8>)
   b4406:	f88d 3000 	strb.w	r3, [sp]
   b440a:	a804      	add	r0, sp, #16
   b440c:	233c      	movs	r3, #60	; 0x3c
   b440e:	f003 f863 	bl	b74d8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   b4412:	a805      	add	r0, sp, #20
   b4414:	f7ff ff32 	bl	b427c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            return false;
   b4418:	2000      	movs	r0, #0
}
   b441a:	b006      	add	sp, #24
   b441c:	bd70      	pop	{r4, r5, r6, pc}
    switch (sensorType) {
   b441e:	f1a4 0314 	sub.w	r3, r4, #20
   b4422:	2b09      	cmp	r3, #9
   b4424:	d8e3      	bhi.n	b43ee <_Z22parseJoinPayloadValueshhRhS_S_S_+0x22>
            bitSizes[0] = 6; // space (6 bits)
   b4426:	2306      	movs	r3, #6
   b4428:	f88d 300c 	strb.w	r3, [sp, #12]
            bitSizes[1] = 1; // placement (1 bit)
   b442c:	2301      	movs	r3, #1
   b442e:	f88d 300d 	strb.w	r3, [sp, #13]
        } break;
   b4432:	e002      	b.n	b443a <_Z22parseJoinPayloadValueshhRhS_S_S_+0x6e>
            bitSizes[0] = 1; // 2-Way (1 bit)
   b4434:	2301      	movs	r3, #1
   b4436:	f88d 300c 	strb.w	r3, [sp, #12]
    decompressData(compressedJoinPayload, data, bitSizes);
   b443a:	aa03      	add	r2, sp, #12
   b443c:	a902      	add	r1, sp, #8
   b443e:	f7ff ff07 	bl	b4250 <_Z14decompressDatahPhS_>
    payload1 = data[0];
   b4442:	f89d 3008 	ldrb.w	r3, [sp, #8]
   b4446:	7033      	strb	r3, [r6, #0]
    payload2 = data[1];
   b4448:	f89d 3009 	ldrb.w	r3, [sp, #9]
   b444c:	702b      	strb	r3, [r5, #0]
    payload3 = data[2];
   b444e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b4450:	f89d 200a 	ldrb.w	r2, [sp, #10]
   b4454:	701a      	strb	r2, [r3, #0]
    payload4 = data[3];
   b4456:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b4458:	f89d 200b 	ldrb.w	r2, [sp, #11]
   b445c:	701a      	strb	r2, [r3, #0]
    return true;
   b445e:	2001      	movs	r0, #1
   b4460:	e7db      	b.n	b441a <_Z22parseJoinPayloadValueshhRhS_S_S_+0x4e>
            bitSizes[0] = 6; // space (6 bits)
   b4462:	2306      	movs	r3, #6
   b4464:	f88d 300c 	strb.w	r3, [sp, #12]
            bitSizes[1] = 1; // placement (1 bit)
   b4468:	2301      	movs	r3, #1
   b446a:	f88d 300d 	strb.w	r3, [sp, #13]
            bitSizes[2] = 1; // multi (1 bit)
   b446e:	f88d 300e 	strb.w	r3, [sp, #14]
        } break;
   b4472:	e7e2      	b.n	b443a <_Z22parseJoinPayloadValueshhRhS_S_S_+0x6e>
   b4474:	000b9e75 	.word	0x000b9e75
   b4478:	2003e6b0 	.word	0x2003e6b0
   b447c:	2003b770 	.word	0x2003b770
   b4480:	000b9ea6 	.word	0x000b9ea6
   b4484:	000b9ed4 	.word	0x000b9ed4

000b4488 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   b4488:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b448a:	e9d0 5300 	ldrd	r5, r3, [r0]
   b448e:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   b4490:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b4492:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b4496:	42ae      	cmp	r6, r5
   b4498:	d004      	beq.n	b44a4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
class LogCategoryFilter {
   b449a:	4628      	mov	r0, r5
   b449c:	f004 fd5e 	bl	b8f5c <_ZN6StringD1Ev>
   b44a0:	3514      	adds	r5, #20
   b44a2:	e7f8      	b.n	b4496 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   b44a4:	6820      	ldr	r0, [r4, #0]
   b44a6:	f002 fde7 	bl	b7078 <free>
    AllocatorT::free(data_);
}
   b44aa:	4620      	mov	r0, r4
   b44ac:	bd70      	pop	{r4, r5, r6, pc}

000b44ae <_ZNK10JsonParser13getValueByKeyImEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_>:
	bool getValueByKey(const JsonParserGeneratorRK::jsmntok_t *container, const char *name, T &result) const {
   b44ae:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b44b0:	461d      	mov	r5, r3
		if (getValueTokenByKey(container, name, value)) {
   b44b2:	ab01      	add	r3, sp, #4
	bool getValueByKey(const JsonParserGeneratorRK::jsmntok_t *container, const char *name, T &result) const {
   b44b4:	4604      	mov	r4, r0
		if (getValueTokenByKey(container, name, value)) {
   b44b6:	f001 f855 	bl	b5564 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
   b44ba:	b120      	cbz	r0, b44c6 <_ZNK10JsonParser13getValueByKeyImEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_+0x18>
			return getTokenValue(value, result);
   b44bc:	9901      	ldr	r1, [sp, #4]
   b44be:	462a      	mov	r2, r5
   b44c0:	4620      	mov	r0, r4
   b44c2:	f000 ff73 	bl	b53ac <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tERm>
	}
   b44c6:	b003      	add	sp, #12
   b44c8:	bd30      	pop	{r4, r5, pc}
	...

000b44cc <_Z13printNodeDatab>:
void printNodeData(bool publish) {
   b44cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b44d0:	4607      	mov	r7, r0
   b44d2:	f5ad 7d37 	sub.w	sp, sp, #732	; 0x2dc
	jp.getValueTokenByKey(jp.getOuterObject(), "nodes", nodesArrayContainer);
   b44d6:	4877      	ldr	r0, [pc, #476]	; (b46b4 <_Z13printNodeDatab+0x1e8>)
		nodeObjectContainer = jp.getTokenByIndex(nodesArrayContainer, i);
   b44d8:	4d76      	ldr	r5, [pc, #472]	; (b46b4 <_Z13printNodeDatab+0x1e8>)
		jp.getValueByKey(nodeObjectContainer, "uID", uniqueID);
   b44da:	f8df a218 	ldr.w	sl, [pc, #536]	; b46f4 <_Z13printNodeDatab+0x228>
		jp.getValueByKey(nodeObjectContainer, "node", nodeNumber);
   b44de:	f8df b218 	ldr.w	fp, [pc, #536]	; b46f8 <_Z13printNodeDatab+0x22c>
	jp.getValueTokenByKey(jp.getOuterObject(), "nodes", nodesArrayContainer);
   b44e2:	f000 fed6 	bl	b5292 <_ZNK10JsonParser14getOuterObjectEv>
   b44e6:	4a74      	ldr	r2, [pc, #464]	; (b46b8 <_Z13printNodeDatab+0x1ec>)
   b44e8:	4601      	mov	r1, r0
   b44ea:	ab14      	add	r3, sp, #80	; 0x50
   b44ec:	4871      	ldr	r0, [pc, #452]	; (b46b4 <_Z13printNodeDatab+0x1e8>)
   b44ee:	f001 f839 	bl	b5564 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
	for (int i=0; i<100; i++) {												// Iterate through the array looking for a match
   b44f2:	2600      	movs	r6, #0
		nodeObjectContainer = jp.getTokenByIndex(nodesArrayContainer, i);
   b44f4:	9914      	ldr	r1, [sp, #80]	; 0x50
   b44f6:	4632      	mov	r2, r6
   b44f8:	4628      	mov	r0, r5
   b44fa:	f000 feec 	bl	b52d6 <_ZNK10JsonParser15getTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj>
		if(nodeObjectContainer == NULL) {
   b44fe:	4604      	mov	r4, r0
   b4500:	2800      	cmp	r0, #0
   b4502:	f000 80ab 	beq.w	b465c <_Z13printNodeDatab+0x190>
		jp.getValueByKey(nodeObjectContainer, "uID", uniqueID);
   b4506:	4601      	mov	r1, r0
   b4508:	ab0d      	add	r3, sp, #52	; 0x34
   b450a:	4652      	mov	r2, sl
   b450c:	4628      	mov	r0, r5
   b450e:	f7ff ffce 	bl	b44ae <_ZNK10JsonParser13getValueByKeyImEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_>
		jp.getValueByKey(nodeObjectContainer, "node", nodeNumber);
   b4512:	ab0c      	add	r3, sp, #48	; 0x30
   b4514:	465a      	mov	r2, fp
   b4516:	4621      	mov	r1, r4
   b4518:	4628      	mov	r0, r5
   b451a:	f7ff fdf0 	bl	b40fe <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
		jp.getValueByKey(nodeObjectContainer, "type", sensorType);
   b451e:	4a67      	ldr	r2, [pc, #412]	; (b46bc <_Z13printNodeDatab+0x1f0>)
   b4520:	ab0e      	add	r3, sp, #56	; 0x38
   b4522:	4621      	mov	r1, r4
   b4524:	4628      	mov	r0, r5
   b4526:	f7ff fdea 	bl	b40fe <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
		jp.getValueByKey(nodeObjectContainer, "p", compressedJoinPayload);
   b452a:	4a65      	ldr	r2, [pc, #404]	; (b46c0 <_Z13printNodeDatab+0x1f4>)
   b452c:	ab0f      	add	r3, sp, #60	; 0x3c
   b452e:	4621      	mov	r1, r4
   b4530:	4628      	mov	r0, r5
   b4532:	f7ff fde4 	bl	b40fe <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
		jp.getValueByKey(nodeObjectContainer, "p1", uncompressedJoinPayload1);
   b4536:	4a63      	ldr	r2, [pc, #396]	; (b46c4 <_Z13printNodeDatab+0x1f8>)
   b4538:	ab10      	add	r3, sp, #64	; 0x40
   b453a:	4621      	mov	r1, r4
   b453c:	4628      	mov	r0, r5
   b453e:	f7ff fdde 	bl	b40fe <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
		jp.getValueByKey(nodeObjectContainer, "p2", uncompressedJoinPayload2);
   b4542:	4a61      	ldr	r2, [pc, #388]	; (b46c8 <_Z13printNodeDatab+0x1fc>)
   b4544:	ab11      	add	r3, sp, #68	; 0x44
   b4546:	4621      	mov	r1, r4
   b4548:	4628      	mov	r0, r5
   b454a:	f7ff fdd8 	bl	b40fe <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
		jp.getValueByKey(nodeObjectContainer, "pend", pendingAlertCode);
   b454e:	4a5f      	ldr	r2, [pc, #380]	; (b46cc <_Z13printNodeDatab+0x200>)
   b4550:	ab12      	add	r3, sp, #72	; 0x48
   b4552:	4621      	mov	r1, r4
   b4554:	4628      	mov	r0, r5
   b4556:	f7ff fdd2 	bl	b40fe <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
		parseJoinPayloadValues(sensorType, compressedJoinPayload, payload1, payload2, payload3, payload4);
   b455a:	f10d 092f 	add.w	r9, sp, #47	; 0x2f
		jp.getValueByKey(nodeObjectContainer, "cont", pendingAlertContext);
   b455e:	4a5c      	ldr	r2, [pc, #368]	; (b46d0 <_Z13printNodeDatab+0x204>)
   b4560:	ab13      	add	r3, sp, #76	; 0x4c
   b4562:	4621      	mov	r1, r4
   b4564:	4628      	mov	r0, r5
		parseJoinPayloadValues(sensorType, compressedJoinPayload, payload1, payload2, payload3, payload4);
   b4566:	f10d 082e 	add.w	r8, sp, #46	; 0x2e
		jp.getValueByKey(nodeObjectContainer, "cont", pendingAlertContext);
   b456a:	f7ff fdc8 	bl	b40fe <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
		parseJoinPayloadValues(sensorType, compressedJoinPayload, payload1, payload2, payload3, payload4);
   b456e:	aa0b      	add	r2, sp, #44	; 0x2c
   b4570:	f89d 103c 	ldrb.w	r1, [sp, #60]	; 0x3c
   b4574:	f89d 0038 	ldrb.w	r0, [sp, #56]	; 0x38
   b4578:	f8cd 9004 	str.w	r9, [sp, #4]
   b457c:	f8cd 8000 	str.w	r8, [sp]
   b4580:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
   b4584:	f7ff ff22 	bl	b43cc <_Z22parseJoinPayloadValueshhRhS_S_S_>
		switch (sensorType) {
   b4588:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   b458a:	2a13      	cmp	r2, #19
   b458c:	dc1a      	bgt.n	b45c4 <_Z13printNodeDatab+0xf8>
   b458e:	2a09      	cmp	r2, #9
   b4590:	dc1c      	bgt.n	b45cc <_Z13printNodeDatab+0x100>
   b4592:	1e53      	subs	r3, r2, #1
   b4594:	2b08      	cmp	r3, #8
   b4596:	d972      	bls.n	b467e <_Z13printNodeDatab+0x1b2>
				Log.info("Unknown sensor type in printNodeData %d", sensorType);
   b4598:	494e      	ldr	r1, [pc, #312]	; (b46d4 <_Z13printNodeDatab+0x208>)
   b459a:	484f      	ldr	r0, [pc, #316]	; (b46d8 <_Z13printNodeDatab+0x20c>)
   b459c:	f7ff fdee 	bl	b417c <_ZNK5spark6Logger4infoEPKcz>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b45a0:	f002 fce2 	bl	b6f68 <spark_cloud_flag_connected>
				if (Particle.connected()) Particle.publish("Alert", "Unknown sensor type in printNodeData", PRIVATE);
   b45a4:	2800      	cmp	r0, #0
   b45a6:	d03c      	beq.n	b4622 <_Z13printNodeDatab+0x156>
   b45a8:	4b4c      	ldr	r3, [pc, #304]	; (b46dc <_Z13printNodeDatab+0x210>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b45aa:	4a4d      	ldr	r2, [pc, #308]	; (b46e0 <_Z13printNodeDatab+0x214>)
   b45ac:	781b      	ldrb	r3, [r3, #0]
   b45ae:	f88d 3000 	strb.w	r3, [sp]
   b45b2:	a816      	add	r0, sp, #88	; 0x58
   b45b4:	494b      	ldr	r1, [pc, #300]	; (b46e4 <_Z13printNodeDatab+0x218>)
   b45b6:	233c      	movs	r3, #60	; 0x3c
   b45b8:	f002 ff8e 	bl	b74d8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   b45bc:	a817      	add	r0, sp, #92	; 0x5c
   b45be:	f7ff fe5d 	bl	b427c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b45c2:	e02e      	b.n	b4622 <_Z13printNodeDatab+0x156>
		switch (sensorType) {
   b45c4:	f1a2 0314 	sub.w	r3, r2, #20
   b45c8:	2b09      	cmp	r3, #9
   b45ca:	e7e4      	b.n	b4596 <_Z13printNodeDatab+0xca>
				jp.getValueByKey(nodeObjectContainer, "p1", occupancyNet);
   b45cc:	4a3d      	ldr	r2, [pc, #244]	; (b46c4 <_Z13printNodeDatab+0x1f8>)
   b45ce:	ab15      	add	r3, sp, #84	; 0x54
   b45d0:	4621      	mov	r1, r4
   b45d2:	4628      	mov	r0, r5
   b45d4:	f7ff fd93 	bl	b40fe <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
				jp.getValueByKey(nodeObjectContainer, "p2", occupancyGross);
   b45d8:	4a3b      	ldr	r2, [pc, #236]	; (b46c8 <_Z13printNodeDatab+0x1fc>)
   b45da:	ab16      	add	r3, sp, #88	; 0x58
   b45dc:	4621      	mov	r1, r4
   b45de:	4628      	mov	r0, r5
   b45e0:	f7ff fd8d 	bl	b40fe <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
				snprintf(data, sizeof(data), "Node %d, uniqueID %lu, type %d, occupancyNet %d, occupancyGross %d, payload (%d/%d/%d/%d) with pending alert %d and alert context %d", nodeNumber, uniqueID, sensorType, occupancyNet, occupancyGross, payload1, payload2, payload3, payload4, pendingAlertCode, pendingAlertContext);
   b45e4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   b45e6:	9309      	str	r3, [sp, #36]	; 0x24
   b45e8:	9b12      	ldr	r3, [sp, #72]	; 0x48
   b45ea:	9308      	str	r3, [sp, #32]
   b45ec:	f899 3000 	ldrb.w	r3, [r9]
   b45f0:	9307      	str	r3, [sp, #28]
   b45f2:	f898 3000 	ldrb.w	r3, [r8]
   b45f6:	9306      	str	r3, [sp, #24]
   b45f8:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   b45fc:	9305      	str	r3, [sp, #20]
   b45fe:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   b4602:	9304      	str	r3, [sp, #16]
   b4604:	9b16      	ldr	r3, [sp, #88]	; 0x58
   b4606:	9303      	str	r3, [sp, #12]
   b4608:	9b15      	ldr	r3, [sp, #84]	; 0x54
   b460a:	9302      	str	r3, [sp, #8]
   b460c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   b460e:	9301      	str	r3, [sp, #4]
   b4610:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   b4612:	9300      	str	r3, [sp, #0]
   b4614:	4a34      	ldr	r2, [pc, #208]	; (b46e8 <_Z13printNodeDatab+0x21c>)
   b4616:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b4618:	f240 216e 	movw	r1, #622	; 0x26e
   b461c:	a81a      	add	r0, sp, #104	; 0x68
   b461e:	f002 fd43 	bl	b70a8 <snprintf>
		Log.info(data);
   b4622:	482d      	ldr	r0, [pc, #180]	; (b46d8 <_Z13printNodeDatab+0x20c>)
   b4624:	a91a      	add	r1, sp, #104	; 0x68
   b4626:	f7ff fda9 	bl	b417c <_ZNK5spark6Logger4infoEPKcz>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b462a:	f002 fc9d 	bl	b6f68 <spark_cloud_flag_connected>
		if (Particle.connected() && publish) {
   b462e:	b188      	cbz	r0, b4654 <_Z13printNodeDatab+0x188>
   b4630:	b187      	cbz	r7, b4654 <_Z13printNodeDatab+0x188>
   b4632:	4b2a      	ldr	r3, [pc, #168]	; (b46dc <_Z13printNodeDatab+0x210>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b4634:	492d      	ldr	r1, [pc, #180]	; (b46ec <_Z13printNodeDatab+0x220>)
   b4636:	781b      	ldrb	r3, [r3, #0]
   b4638:	f88d 3000 	strb.w	r3, [sp]
   b463c:	aa1a      	add	r2, sp, #104	; 0x68
   b463e:	233c      	movs	r3, #60	; 0x3c
   b4640:	a816      	add	r0, sp, #88	; 0x58
   b4642:	f002 ff49 	bl	b74d8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   b4646:	a817      	add	r0, sp, #92	; 0x5c
   b4648:	f7ff fe18 	bl	b427c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
			delay(1000);
   b464c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b4650:	f002 fd6a 	bl	b7128 <delay>
	for (int i=0; i<100; i++) {												// Iterate through the array looking for a match
   b4654:	3601      	adds	r6, #1
   b4656:	2e64      	cmp	r6, #100	; 0x64
   b4658:	f47f af4c 	bne.w	b44f4 <_Z13printNodeDatab+0x28>
	Log.info(nodeDatabase.get_nodeIDJson());  // See the raw JSON string
   b465c:	f001 fcdc 	bl	b6018 <_ZN10nodeIDData8instanceEv>
   b4660:	4601      	mov	r1, r0
   b4662:	a816      	add	r0, sp, #88	; 0x58
   b4664:	f001 fcfc 	bl	b6060 <_ZNK10nodeIDData14get_nodeIDJsonEv>
   b4668:	9916      	ldr	r1, [sp, #88]	; 0x58
   b466a:	481b      	ldr	r0, [pc, #108]	; (b46d8 <_Z13printNodeDatab+0x20c>)
   b466c:	f7ff fd86 	bl	b417c <_ZNK5spark6Logger4infoEPKcz>
   b4670:	a816      	add	r0, sp, #88	; 0x58
   b4672:	f004 fc73 	bl	b8f5c <_ZN6StringD1Ev>
}
   b4676:	f50d 7d37 	add.w	sp, sp, #732	; 0x2dc
   b467a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				snprintf(data, sizeof(data), "Node %d, uniqueID %lu, type %d, payload (%d/%d/%d/%d) with pending alert %d and alert context %d", nodeNumber, uniqueID, sensorType, payload1, payload2, payload3, payload4, pendingAlertCode, pendingAlertContext);
   b467e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   b4680:	9307      	str	r3, [sp, #28]
   b4682:	9b12      	ldr	r3, [sp, #72]	; 0x48
   b4684:	9306      	str	r3, [sp, #24]
   b4686:	f899 3000 	ldrb.w	r3, [r9]
   b468a:	9305      	str	r3, [sp, #20]
   b468c:	f898 3000 	ldrb.w	r3, [r8]
   b4690:	9304      	str	r3, [sp, #16]
   b4692:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   b4696:	9303      	str	r3, [sp, #12]
   b4698:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   b469c:	e9cd 2301 	strd	r2, r3, [sp, #4]
   b46a0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   b46a2:	9300      	str	r3, [sp, #0]
   b46a4:	4a12      	ldr	r2, [pc, #72]	; (b46f0 <_Z13printNodeDatab+0x224>)
   b46a6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b46a8:	f240 216e 	movw	r1, #622	; 0x26e
   b46ac:	a81a      	add	r0, sp, #104	; 0x68
   b46ae:	f002 fcfb 	bl	b70a8 <snprintf>
			} break;
   b46b2:	e7b6      	b.n	b4622 <_Z13printNodeDatab+0x156>
   b46b4:	2003b778 	.word	0x2003b778
   b46b8:	000b9de3 	.word	0x000b9de3
   b46bc:	000b9de9 	.word	0x000b9de9
   b46c0:	000bae00 	.word	0x000bae00
   b46c4:	000b9ee3 	.word	0x000b9ee3
   b46c8:	000b9ee6 	.word	0x000b9ee6
   b46cc:	000b9ee9 	.word	0x000b9ee9
   b46d0:	000b9eee 	.word	0x000b9eee
   b46d4:	000b9fd9 	.word	0x000b9fd9
   b46d8:	2003e6b0 	.word	0x2003e6b0
   b46dc:	2003b770 	.word	0x2003b770
   b46e0:	000ba001 	.word	0x000ba001
   b46e4:	000b9ed4 	.word	0x000b9ed4
   b46e8:	000b9ef3 	.word	0x000b9ef3
   b46ec:	000ba026 	.word	0x000ba026
   b46f0:	000b9f78 	.word	0x000b9f78
   b46f4:	000b9eda 	.word	0x000b9eda
   b46f8:	000b9ede 	.word	0x000b9ede

000b46fc <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>:
	 *
	 * Uses templates so you can pass any type object that's supported by insertValue() overloads,
	 * for example: bool, int, float, double, const char *.
	 */
	template<class T>
	void insertKeyValue(const char *key, T value) {
   b46fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b46fe:	4604      	mov	r4, r0
   b4700:	4615      	mov	r5, r2
   b4702:	9101      	str	r1, [sp, #4]
		insertCheckSeparator();
   b4704:	f001 f852 	bl	b57ac <_ZN10JsonWriter20insertCheckSeparatorEv>
	void insertValue(const char *value) { insertString(value, true); }
   b4708:	2201      	movs	r2, #1
   b470a:	9901      	ldr	r1, [sp, #4]
   b470c:	4620      	mov	r0, r4
   b470e:	f000 ffbb 	bl	b5688 <_ZN10JsonWriter12insertStringEPKcb>
		insertValue(key);
		insertChar(':');
   b4712:	4620      	mov	r0, r4
   b4714:	213a      	movs	r1, #58	; 0x3a
   b4716:	f000 ff6b 	bl	b55f0 <_ZN10JsonWriter10insertCharEc>
		insertValue(value);
   b471a:	4629      	mov	r1, r5
   b471c:	4620      	mov	r0, r4
   b471e:	f7ff fd69 	bl	b41f4 <_ZN10JsonWriter11insertValueEi>
	}
   b4722:	b003      	add	sp, #12
   b4724:	bd30      	pop	{r4, r5, pc}

000b4726 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   b4726:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b4728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b472a:	4604      	mov	r4, r0
   b472c:	460d      	mov	r5, r1
   b472e:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b4730:	d916      	bls.n	b4760 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
   b4732:	4290      	cmp	r0, r2
   b4734:	d215      	bcs.n	b4762 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            --end;
   b4736:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   b473a:	1a75      	subs	r5, r6, r1
   b473c:	f1a1 0714 	sub.w	r7, r1, #20
   b4740:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b4742:	42b7      	cmp	r7, r6
   b4744:	d01c      	beq.n	b4780 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
   b4746:	b12c      	cbz	r4, b4754 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
   b4748:	4631      	mov	r1, r6
   b474a:	4620      	mov	r0, r4
   b474c:	f004 fc83 	bl	b9056 <_ZN6StringC1EOS_>
   b4750:	7c33      	ldrb	r3, [r6, #16]
   b4752:	7423      	strb	r3, [r4, #16]
   b4754:	4630      	mov	r0, r6
   b4756:	f004 fc01 	bl	b8f5c <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   b475a:	3e14      	subs	r6, #20
   b475c:	3c14      	subs	r4, #20
   b475e:	e7f0      	b.n	b4742 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   b4760:	d00e      	beq.n	b4780 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
   b4762:	42b5      	cmp	r5, r6
   b4764:	d00c      	beq.n	b4780 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
   b4766:	b12c      	cbz	r4, b4774 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
   b4768:	4629      	mov	r1, r5
   b476a:	4620      	mov	r0, r4
   b476c:	f004 fc73 	bl	b9056 <_ZN6StringC1EOS_>
   b4770:	7c2b      	ldrb	r3, [r5, #16]
   b4772:	7423      	strb	r3, [r4, #16]
   b4774:	4628      	mov	r0, r5
   b4776:	f004 fbf1 	bl	b8f5c <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   b477a:	3514      	adds	r5, #20
   b477c:	3414      	adds	r4, #20
   b477e:	e7f0      	b.n	b4762 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
    }
   b4780:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b4782 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b4782:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   b4786:	2300      	movs	r3, #0
   b4788:	e9c0 3300 	strd	r3, r3, [r0]
   b478c:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b478e:	684f      	ldr	r7, [r1, #4]
   b4790:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b4792:	4604      	mov	r4, r0
   b4794:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b4796:	dd23      	ble.n	b47e0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
   b4798:	f04f 0814 	mov.w	r8, #20
    return ::malloc(size);
   b479c:	fb08 f007 	mul.w	r0, r8, r7
   b47a0:	f002 fc62 	bl	b7068 <malloc>
            if (!d) {
   b47a4:	4605      	mov	r5, r0
   b47a6:	b1d8      	cbz	r0, b47e0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            move(d, data_, data_ + size_);
   b47a8:	e9d4 1200 	ldrd	r1, r2, [r4]
   b47ac:	fb08 1202 	mla	r2, r8, r2, r1
   b47b0:	f7ff ffb9 	bl	b4726 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   b47b4:	6820      	ldr	r0, [r4, #0]
   b47b6:	f002 fc5f 	bl	b7078 <free>
        data_ = d;
   b47ba:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   b47bc:	60a7      	str	r7, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b47be:	e9d6 7300 	ldrd	r7, r3, [r6]
   b47c2:	fb08 7803 	mla	r8, r8, r3, r7
        for (; it != end; ++it, ++dest) {
   b47c6:	45b8      	cmp	r8, r7
   b47c8:	d008      	beq.n	b47dc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5a>
   b47ca:	4639      	mov	r1, r7
   b47cc:	4628      	mov	r0, r5
   b47ce:	f004 fc5c 	bl	b908a <_ZN6StringC1ERKS_>
   b47d2:	7c3b      	ldrb	r3, [r7, #16]
   b47d4:	742b      	strb	r3, [r5, #16]
   b47d6:	3714      	adds	r7, #20
   b47d8:	3514      	adds	r5, #20
   b47da:	e7f4      	b.n	b47c6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>
        size_ = vector.size_;
   b47dc:	6873      	ldr	r3, [r6, #4]
   b47de:	6063      	str	r3, [r4, #4]
}
   b47e0:	4620      	mov	r0, r4
   b47e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000b47e8 <_GLOBAL__sub_I_LogHandler>:
	mod.finish();

	nodeDatabase.set_nodeIDJson(jp.getBuffer());									// This should backup the nodeID database - now updated to persistent storage

	return true;
   b47e8:	b5f0      	push	{r4, r5, r6, r7, lr}
        val_(val) {
   b47ea:	4b2d      	ldr	r3, [pc, #180]	; (b48a0 <_GLOBAL__sub_I_LogHandler+0xb8>)
        filter_(level, filters) {
   b47ec:	4d2d      	ldr	r5, [pc, #180]	; (b48a4 <_GLOBAL__sub_I_LogHandler+0xbc>)
   b47ee:	b08f      	sub	sp, #60	; 0x3c
   b47f0:	2201      	movs	r2, #1
   b47f2:	701a      	strb	r2, [r3, #0]
        capacity_(0) {
   b47f4:	2400      	movs	r4, #0
   b47f6:	e9cd 4402 	strd	r4, r4, [sp, #8]
   b47fa:	9404      	str	r4, [sp, #16]
            StreamLogHandler(Serial, level, filters) {
   b47fc:	f004 fdac 	bl	b9358 <_Z16_fetch_usbserialv>
   b4800:	a902      	add	r1, sp, #8
   b4802:	4606      	mov	r6, r0
   b4804:	a805      	add	r0, sp, #20
   b4806:	f7ff ffbc 	bl	b4782 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b480a:	462f      	mov	r7, r5
        stream_(&stream) {
   b480c:	a905      	add	r1, sp, #20
   b480e:	a808      	add	r0, sp, #32
   b4810:	f7ff ffb7 	bl	b4782 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   b4814:	4b24      	ldr	r3, [pc, #144]	; (b48a8 <_GLOBAL__sub_I_LogHandler+0xc0>)
   b4816:	f847 3b04 	str.w	r3, [r7], #4
   b481a:	a908      	add	r1, sp, #32
   b481c:	a80b      	add	r0, sp, #44	; 0x2c
   b481e:	f7ff ffb0 	bl	b4782 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b4822:	aa0b      	add	r2, sp, #44	; 0x2c
   b4824:	211e      	movs	r1, #30
   b4826:	4638      	mov	r0, r7
   b4828:	f003 ff60 	bl	b86ec <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b482c:	a80b      	add	r0, sp, #44	; 0x2c
   b482e:	f7ff fe2b 	bl	b4488 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   b4832:	a808      	add	r0, sp, #32
   b4834:	f7ff fe28 	bl	b4488 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b4838:	4b1c      	ldr	r3, [pc, #112]	; (b48ac <_GLOBAL__sub_I_LogHandler+0xc4>)
   b483a:	602b      	str	r3, [r5, #0]
   b483c:	a805      	add	r0, sp, #20
   b483e:	622e      	str	r6, [r5, #32]
   b4840:	f7ff fe22 	bl	b4488 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b4844:	4b1a      	ldr	r3, [pc, #104]	; (b48b0 <_GLOBAL__sub_I_LogHandler+0xc8>)
   b4846:	602b      	str	r3, [r5, #0]
        Serial.begin();
   b4848:	f004 fd86 	bl	b9358 <_Z16_fetch_usbserialv>
   b484c:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b4850:	f004 fd72 	bl	b9338 <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
   b4854:	f003 fc2c 	bl	b80b0 <_ZN5spark10LogManager8instanceEv>
   b4858:	4629      	mov	r1, r5
   b485a:	f003 fe1d 	bl	b8498 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
SerialLogHandler LogHandler;
   b485e:	a802      	add	r0, sp, #8
   b4860:	f7ff fe12 	bl	b4488 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b4864:	4b13      	ldr	r3, [pc, #76]	; (b48b4 <_GLOBAL__sub_I_LogHandler+0xcc>)
    SleepResult() {}
   b4866:	4a14      	ldr	r2, [pc, #80]	; (b48b8 <_GLOBAL__sub_I_LogHandler+0xd0>)
   b4868:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b486a:	e9c3 4400 	strd	r4, r4, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b486e:	2003      	movs	r0, #3
   b4870:	f002 fb36 	bl	b6ee0 <set_system_mode>
	explicit JsonParserStatic() : JsonParser(staticBuffer, BUFFER_SIZE, staticTokens, MAX_TOKENS) {};
   b4874:	4b11      	ldr	r3, [pc, #68]	; (b48bc <_GLOBAL__sub_I_LogHandler+0xd4>)
   b4876:	f240 2226 	movw	r2, #550	; 0x226
   b487a:	f6a3 442c 	subw	r4, r3, #3116	; 0xc2c
   b487e:	9200      	str	r2, [sp, #0]
   b4880:	f5a3 6140 	sub.w	r1, r3, #3072	; 0xc00
   b4884:	f44f 6240 	mov.w	r2, #3072	; 0xc00
   b4888:	4620      	mov	r0, r4
   b488a:	f000 fce7 	bl	b525c <_ZN10JsonParserC1EPcjPN21JsonParserGeneratorRK9jsmntok_tEj>
   b488e:	4b0c      	ldr	r3, [pc, #48]	; (b48c0 <_GLOBAL__sub_I_LogHandler+0xd8>)
String s;
   b4890:	490c      	ldr	r1, [pc, #48]	; (b48c4 <_GLOBAL__sub_I_LogHandler+0xdc>)
   b4892:	480d      	ldr	r0, [pc, #52]	; (b48c8 <_GLOBAL__sub_I_LogHandler+0xe0>)
   b4894:	6023      	str	r3, [r4, #0]
   b4896:	b00f      	add	sp, #60	; 0x3c
   b4898:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
String s;
   b489c:	f004 bba9 	b.w	b8ff2 <_ZN6StringC1EPK19__FlashStringHelper>
   b48a0:	2003b770 	.word	0x2003b770
   b48a4:	2003b740 	.word	0x2003b740
   b48a8:	000ba9d0 	.word	0x000ba9d0
   b48ac:	000bae68 	.word	0x000bae68
   b48b0:	000ba9e8 	.word	0x000ba9e8
   b48b4:	2003b764 	.word	0x2003b764
   b48b8:	ffff0000 	.word	0xffff0000
   b48bc:	2003c3a4 	.word	0x2003c3a4
   b48c0:	000baa00 	.word	0x000baa00
   b48c4:	000bae2f 	.word	0x000bae2f
   b48c8:	2003e604 	.word	0x2003e604

000b48cc <_Z14findNodeNumberm>:
byte findNodeNumber(uint32_t uniqueID) {
   b48cc:	b5f0      	push	{r4, r5, r6, r7, lr}
   b48ce:	b097      	sub	sp, #92	; 0x5c
	int node = 0;
   b48d0:	2300      	movs	r3, #0
byte findNodeNumber(uint32_t uniqueID) {
   b48d2:	4605      	mov	r5, r0
	jp.getValueTokenByKey(jp.getOuterObject(), "nodes", nodesArrayContainer);
   b48d4:	4842      	ldr	r0, [pc, #264]	; (b49e0 <_Z14findNodeNumberm+0x114>)
	int node = 0;
   b48d6:	9304      	str	r3, [sp, #16]
	jp.getValueTokenByKey(jp.getOuterObject(), "nodes", nodesArrayContainer);
   b48d8:	f000 fcdb 	bl	b5292 <_ZNK10JsonParser14getOuterObjectEv>
   b48dc:	4a41      	ldr	r2, [pc, #260]	; (b49e4 <_Z14findNodeNumberm+0x118>)
		nodeObjectContainer = jp.getTokenByIndex(nodesArrayContainer, i);
   b48de:	4e40      	ldr	r6, [pc, #256]	; (b49e0 <_Z14findNodeNumberm+0x114>)
		jp.getValueByKey(nodeObjectContainer, "uID", nodeUniqueID);			// Get the uniqueID and compare
   b48e0:	4f41      	ldr	r7, [pc, #260]	; (b49e8 <_Z14findNodeNumberm+0x11c>)
	jp.getValueTokenByKey(jp.getOuterObject(), "nodes", nodesArrayContainer);
   b48e2:	4601      	mov	r1, r0
   b48e4:	ab05      	add	r3, sp, #20
   b48e6:	483e      	ldr	r0, [pc, #248]	; (b49e0 <_Z14findNodeNumberm+0x114>)
   b48e8:	f000 fe3c 	bl	b5564 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
	int index = 1;				// Start at one since node zero is the gateway
   b48ec:	2401      	movs	r4, #1
		nodeObjectContainer = jp.getTokenByIndex(nodesArrayContainer, i);
   b48ee:	9905      	ldr	r1, [sp, #20]
   b48f0:	1e62      	subs	r2, r4, #1
   b48f2:	4630      	mov	r0, r6
   b48f4:	f000 fcef 	bl	b52d6 <_ZNK10JsonParser15getTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj>
		if(nodeObjectContainer == NULL) break;								// Ran out of entries - no match found
   b48f8:	4601      	mov	r1, r0
   b48fa:	b1d8      	cbz	r0, b4934 <_Z14findNodeNumberm+0x68>
		jp.getValueByKey(nodeObjectContainer, "uID", nodeUniqueID);			// Get the uniqueID and compare
   b48fc:	ab03      	add	r3, sp, #12
   b48fe:	9001      	str	r0, [sp, #4]
   b4900:	463a      	mov	r2, r7
   b4902:	4630      	mov	r0, r6
   b4904:	f7ff fdd3 	bl	b44ae <_ZNK10JsonParser13getValueByKeyImEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_>
		if (nodeUniqueID == uniqueID) {
   b4908:	9b03      	ldr	r3, [sp, #12]
   b490a:	9901      	ldr	r1, [sp, #4]
   b490c:	42ab      	cmp	r3, r5
   b490e:	d10e      	bne.n	b492e <_Z14findNodeNumberm+0x62>
			jp.getValueByKey(nodeObjectContainer, "node", node);		// A match!
   b4910:	4a36      	ldr	r2, [pc, #216]	; (b49ec <_Z14findNodeNumberm+0x120>)
   b4912:	4833      	ldr	r0, [pc, #204]	; (b49e0 <_Z14findNodeNumberm+0x114>)
   b4914:	ab04      	add	r3, sp, #16
   b4916:	f7ff fbf2 	bl	b40fe <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
			Log.info("Found the uniqueID, node of %d",node);
   b491a:	9a04      	ldr	r2, [sp, #16]
   b491c:	4934      	ldr	r1, [pc, #208]	; (b49f0 <_Z14findNodeNumberm+0x124>)
   b491e:	4835      	ldr	r0, [pc, #212]	; (b49f4 <_Z14findNodeNumberm+0x128>)
   b4920:	f7ff fc2c 	bl	b417c <_ZNK5spark6Logger4infoEPKcz>
			return node;
   b4924:	f89d 4010 	ldrb.w	r4, [sp, #16]
}
   b4928:	4620      	mov	r0, r4
   b492a:	b017      	add	sp, #92	; 0x5c
   b492c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		index++;															// This will be the node number for the next node if no match is found
   b492e:	3401      	adds	r4, #1
	for (int i=0; i<50; i++) {												// Iterate through the array looking for a match
   b4930:	2c33      	cmp	r4, #51	; 0x33
   b4932:	d1dc      	bne.n	b48ee <_Z14findNodeNumberm+0x22>
	JsonModifier mod(jp);
   b4934:	492a      	ldr	r1, [pc, #168]	; (b49e0 <_Z14findNodeNumberm+0x114>)
   b4936:	a806      	add	r0, sp, #24
   b4938:	f000 ff5c 	bl	b57f4 <_ZN12JsonModifierC1ER10JsonParser>
	Log.info("Did not find the uniqueID, new node of %d",index);
   b493c:	4622      	mov	r2, r4
   b493e:	492e      	ldr	r1, [pc, #184]	; (b49f8 <_Z14findNodeNumberm+0x12c>)
   b4940:	482c      	ldr	r0, [pc, #176]	; (b49f4 <_Z14findNodeNumberm+0x128>)
   b4942:	f7ff fc1b 	bl	b417c <_ZNK5spark6Logger4infoEPKcz>
	mod.startAppend(jp.getOuterArray());
   b4946:	4826      	ldr	r0, [pc, #152]	; (b49e0 <_Z14findNodeNumberm+0x114>)
   b4948:	f000 fc98 	bl	b527c <_ZNK10JsonParser13getOuterArrayEv>
   b494c:	4601      	mov	r1, r0
   b494e:	a806      	add	r0, sp, #24
   b4950:	f000 ff8b 	bl	b586a <_ZN12JsonModifier11startAppendEPKN21JsonParserGeneratorRK9jsmntok_tE>
	bool startObject() { return startObjectOrArray('{', '}'); };
   b4954:	227d      	movs	r2, #125	; 0x7d
   b4956:	217b      	movs	r1, #123	; 0x7b
   b4958:	a806      	add	r0, sp, #24
   b495a:	f000 ff32 	bl	b57c2 <_ZN10JsonWriter18startObjectOrArrayEcc>
		mod.insertKeyValue("node", (int)index);
   b495e:	4622      	mov	r2, r4
   b4960:	4922      	ldr	r1, [pc, #136]	; (b49ec <_Z14findNodeNumberm+0x120>)
   b4962:	a806      	add	r0, sp, #24
   b4964:	f7ff feca 	bl	b46fc <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>
		insertCheckSeparator();
   b4968:	a806      	add	r0, sp, #24
   b496a:	f000 ff1f 	bl	b57ac <_ZN10JsonWriter20insertCheckSeparatorEv>
	void insertValue(const char *value) { insertString(value, true); }
   b496e:	2201      	movs	r2, #1
   b4970:	a806      	add	r0, sp, #24
   b4972:	491d      	ldr	r1, [pc, #116]	; (b49e8 <_Z14findNodeNumberm+0x11c>)
   b4974:	f000 fe88 	bl	b5688 <_ZN10JsonWriter12insertStringEPKcb>
		insertChar(':');
   b4978:	a806      	add	r0, sp, #24
   b497a:	213a      	movs	r1, #58	; 0x3a
   b497c:	f000 fe38 	bl	b55f0 <_ZN10JsonWriter10insertCharEc>
	void insertValue(unsigned long value) { insertsprintf("%lu", value); }
   b4980:	462a      	mov	r2, r5
   b4982:	a806      	add	r0, sp, #24
   b4984:	491d      	ldr	r1, [pc, #116]	; (b49fc <_Z14findNodeNumberm+0x130>)
   b4986:	f000 fe72 	bl	b566e <_ZN10JsonWriter13insertsprintfEPKcz>
		mod.insertKeyValue("type", (int)sensorType_1);
   b498a:	4b1d      	ldr	r3, [pc, #116]	; (b4a00 <_Z14findNodeNumberm+0x134>)
   b498c:	491d      	ldr	r1, [pc, #116]	; (b4a04 <_Z14findNodeNumberm+0x138>)
   b498e:	681a      	ldr	r2, [r3, #0]
   b4990:	a806      	add	r0, sp, #24
   b4992:	f7ff feb3 	bl	b46fc <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>
		mod.insertKeyValue("p", 0);
   b4996:	a806      	add	r0, sp, #24
   b4998:	491b      	ldr	r1, [pc, #108]	; (b4a08 <_Z14findNodeNumberm+0x13c>)
   b499a:	2200      	movs	r2, #0
   b499c:	f7ff feae 	bl	b46fc <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>
		mod.insertKeyValue("p1", 0);
   b49a0:	a806      	add	r0, sp, #24
   b49a2:	491a      	ldr	r1, [pc, #104]	; (b4a0c <_Z14findNodeNumberm+0x140>)
   b49a4:	2200      	movs	r2, #0
   b49a6:	f7ff fea9 	bl	b46fc <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>
		mod.insertKeyValue("p2", 0);
   b49aa:	a806      	add	r0, sp, #24
   b49ac:	4918      	ldr	r1, [pc, #96]	; (b4a10 <_Z14findNodeNumberm+0x144>)
   b49ae:	2200      	movs	r2, #0
   b49b0:	f7ff fea4 	bl	b46fc <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>
		mod.insertKeyValue("pend", 0);	
   b49b4:	a806      	add	r0, sp, #24
   b49b6:	4917      	ldr	r1, [pc, #92]	; (b4a14 <_Z14findNodeNumberm+0x148>)
   b49b8:	2200      	movs	r2, #0
   b49ba:	f7ff fe9f 	bl	b46fc <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>
		mod.insertKeyValue("cont", 0);
   b49be:	4916      	ldr	r1, [pc, #88]	; (b4a18 <_Z14findNodeNumberm+0x14c>)
   b49c0:	2200      	movs	r2, #0
   b49c2:	a806      	add	r0, sp, #24
   b49c4:	f7ff fe9a 	bl	b46fc <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>
		mod.finishObjectOrArray();
   b49c8:	a806      	add	r0, sp, #24
   b49ca:	f000 fe1f 	bl	b560c <_ZN10JsonWriter19finishObjectOrArrayEv>
	mod.finish();
   b49ce:	a806      	add	r0, sp, #24
   b49d0:	f001 f9a7 	bl	b5d22 <_ZN12JsonModifier6finishEv>
	JsonModifier mod(jp);
   b49d4:	a806      	add	r0, sp, #24
	return index;
   b49d6:	b2e4      	uxtb	r4, r4
	JsonModifier mod(jp);
   b49d8:	f000 fbca 	bl	b5170 <_ZN12JsonModifierD1Ev>
   b49dc:	e7a4      	b.n	b4928 <_Z14findNodeNumberm+0x5c>
   b49de:	bf00      	nop
   b49e0:	2003b778 	.word	0x2003b778
   b49e4:	000b9de3 	.word	0x000b9de3
   b49e8:	000b9eda 	.word	0x000b9eda
   b49ec:	000b9ede 	.word	0x000b9ede
   b49f0:	000ba02f 	.word	0x000ba02f
   b49f4:	2003e6b0 	.word	0x2003e6b0
   b49f8:	000ba04e 	.word	0x000ba04e
   b49fc:	000ba078 	.word	0x000ba078
   b4a00:	2003b6b8 	.word	0x2003b6b8
   b4a04:	000b9de9 	.word	0x000b9de9
   b4a08:	000bae00 	.word	0x000bae00
   b4a0c:	000b9ee3 	.word	0x000b9ee3
   b4a10:	000b9ee6 	.word	0x000b9ee6
   b4a14:	000b9ee9 	.word	0x000b9ee9
   b4a18:	000b9eee 	.word	0x000b9eee

000b4a1c <_Z7setTypeii>:
bool setType(int nodeNumber, int newType) {
   b4a1c:	b530      	push	{r4, r5, lr}
   b4a1e:	460d      	mov	r5, r1
   b4a20:	b097      	sub	sp, #92	; 0x5c
	if (nodeNumber == 0 || nodeNumber == 255) return false;
   b4a22:	4604      	mov	r4, r0
   b4a24:	2800      	cmp	r0, #0
   b4a26:	f000 8098 	beq.w	b4b5a <_Z7setTypeii+0x13e>
   b4a2a:	28ff      	cmp	r0, #255	; 0xff
   b4a2c:	f000 8095 	beq.w	b4b5a <_Z7setTypeii+0x13e>
	jp.getValueTokenByKey(jp.getOuterObject(), "nodes", nodesArrayContainer);
   b4a30:	484b      	ldr	r0, [pc, #300]	; (b4b60 <_Z7setTypeii+0x144>)
   b4a32:	f000 fc2e 	bl	b5292 <_ZNK10JsonParser14getOuterObjectEv>
   b4a36:	4a4b      	ldr	r2, [pc, #300]	; (b4b64 <_Z7setTypeii+0x148>)
   b4a38:	4601      	mov	r1, r0
   b4a3a:	ab04      	add	r3, sp, #16
   b4a3c:	4848      	ldr	r0, [pc, #288]	; (b4b60 <_Z7setTypeii+0x144>)
   b4a3e:	f000 fd91 	bl	b5564 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
	nodeObjectContainer = jp.getTokenByIndex(nodesArrayContainer, nodeNumber-1);
   b4a42:	1e62      	subs	r2, r4, #1
   b4a44:	9904      	ldr	r1, [sp, #16]
   b4a46:	4846      	ldr	r0, [pc, #280]	; (b4b60 <_Z7setTypeii+0x144>)
   b4a48:	f000 fc45 	bl	b52d6 <_ZNK10JsonParser15getTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj>
	if(nodeObjectContainer == NULL) return false;								// Ran out of entries 
   b4a4c:	4604      	mov	r4, r0
   b4a4e:	2800      	cmp	r0, #0
   b4a50:	f000 8083 	beq.w	b4b5a <_Z7setTypeii+0x13e>
	jp.getValueByKey(nodeObjectContainer, "uID", uniqueID);
   b4a54:	4601      	mov	r1, r0
   b4a56:	4a44      	ldr	r2, [pc, #272]	; (b4b68 <_Z7setTypeii+0x14c>)
   b4a58:	4841      	ldr	r0, [pc, #260]	; (b4b60 <_Z7setTypeii+0x144>)
   b4a5a:	ab03      	add	r3, sp, #12
   b4a5c:	f7ff fd27 	bl	b44ae <_ZNK10JsonParser13getValueByKeyImEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_>
	jp.getValueByKey(nodeObjectContainer, "type", type);
   b4a60:	4a42      	ldr	r2, [pc, #264]	; (b4b6c <_Z7setTypeii+0x150>)
   b4a62:	483f      	ldr	r0, [pc, #252]	; (b4b60 <_Z7setTypeii+0x144>)
   b4a64:	ab02      	add	r3, sp, #8
   b4a66:	4621      	mov	r1, r4
   b4a68:	f7ff fb49 	bl	b40fe <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
	Log.info("Changing sensor type for uniqueID %lu from %d to %d", uniqueID, type, newType);
   b4a6c:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   b4a70:	493f      	ldr	r1, [pc, #252]	; (b4b70 <_Z7setTypeii+0x154>)
   b4a72:	4840      	ldr	r0, [pc, #256]	; (b4b74 <_Z7setTypeii+0x158>)
   b4a74:	9500      	str	r5, [sp, #0]
   b4a76:	f7ff fb81 	bl	b417c <_ZNK5spark6Logger4infoEPKcz>
	jp.getValueTokenByKey(nodeObjectContainer, "type", value);
   b4a7a:	4a3c      	ldr	r2, [pc, #240]	; (b4b6c <_Z7setTypeii+0x150>)
   b4a7c:	4838      	ldr	r0, [pc, #224]	; (b4b60 <_Z7setTypeii+0x144>)
   b4a7e:	ab05      	add	r3, sp, #20
   b4a80:	4621      	mov	r1, r4
   b4a82:	f000 fd6f 	bl	b5564 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
	JsonModifier mod(jp);
   b4a86:	4936      	ldr	r1, [pc, #216]	; (b4b60 <_Z7setTypeii+0x144>)
   b4a88:	a806      	add	r0, sp, #24
   b4a8a:	f000 feb3 	bl	b57f4 <_ZN12JsonModifierC1ER10JsonParser>
	mod.startModify(value);
   b4a8e:	9905      	ldr	r1, [sp, #20]
   b4a90:	a806      	add	r0, sp, #24
   b4a92:	f000 fec1 	bl	b5818 <_ZN12JsonModifier11startModifyEPKN21JsonParserGeneratorRK9jsmntok_tE>
	mod.insertValue((int)newType);
   b4a96:	4629      	mov	r1, r5
   b4a98:	a806      	add	r0, sp, #24
   b4a9a:	f7ff fbab 	bl	b41f4 <_ZN10JsonWriter11insertValueEi>
	mod.finish();
   b4a9e:	a806      	add	r0, sp, #24
   b4aa0:	f001 f93f 	bl	b5d22 <_ZN12JsonModifier6finishEv>
	jp.getValueTokenByKey(nodeObjectContainer, "p", value);				// Is there a more efficient way to do this?
   b4aa4:	4a34      	ldr	r2, [pc, #208]	; (b4b78 <_Z7setTypeii+0x15c>)
   b4aa6:	482e      	ldr	r0, [pc, #184]	; (b4b60 <_Z7setTypeii+0x144>)
   b4aa8:	ab05      	add	r3, sp, #20
   b4aaa:	4621      	mov	r1, r4
   b4aac:	f000 fd5a 	bl	b5564 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
	mod.startModify(value);
   b4ab0:	9905      	ldr	r1, [sp, #20]
   b4ab2:	a806      	add	r0, sp, #24
   b4ab4:	f000 feb0 	bl	b5818 <_ZN12JsonModifier11startModifyEPKN21JsonParserGeneratorRK9jsmntok_tE>
	mod.insertValue(0);
   b4ab8:	2100      	movs	r1, #0
   b4aba:	a806      	add	r0, sp, #24
   b4abc:	f7ff fb9a 	bl	b41f4 <_ZN10JsonWriter11insertValueEi>
	mod.finish();
   b4ac0:	a806      	add	r0, sp, #24
   b4ac2:	f001 f92e 	bl	b5d22 <_ZN12JsonModifier6finishEv>
	jp.getValueTokenByKey(nodeObjectContainer, "p1", value);				// Is there a more efficient way to do this?
   b4ac6:	4a2d      	ldr	r2, [pc, #180]	; (b4b7c <_Z7setTypeii+0x160>)
   b4ac8:	4825      	ldr	r0, [pc, #148]	; (b4b60 <_Z7setTypeii+0x144>)
   b4aca:	ab05      	add	r3, sp, #20
   b4acc:	4621      	mov	r1, r4
   b4ace:	f000 fd49 	bl	b5564 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
	mod.startModify(value);
   b4ad2:	9905      	ldr	r1, [sp, #20]
   b4ad4:	a806      	add	r0, sp, #24
   b4ad6:	f000 fe9f 	bl	b5818 <_ZN12JsonModifier11startModifyEPKN21JsonParserGeneratorRK9jsmntok_tE>
	mod.insertValue(0);
   b4ada:	2100      	movs	r1, #0
   b4adc:	a806      	add	r0, sp, #24
   b4ade:	f7ff fb89 	bl	b41f4 <_ZN10JsonWriter11insertValueEi>
	mod.finish();
   b4ae2:	a806      	add	r0, sp, #24
   b4ae4:	f001 f91d 	bl	b5d22 <_ZN12JsonModifier6finishEv>
	jp.getValueTokenByKey(nodeObjectContainer, "p2", value);				// Is there a more efficient way to do this?
   b4ae8:	4a25      	ldr	r2, [pc, #148]	; (b4b80 <_Z7setTypeii+0x164>)
   b4aea:	481d      	ldr	r0, [pc, #116]	; (b4b60 <_Z7setTypeii+0x144>)
   b4aec:	ab05      	add	r3, sp, #20
   b4aee:	4621      	mov	r1, r4
   b4af0:	f000 fd38 	bl	b5564 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
	mod.startModify(value);
   b4af4:	9905      	ldr	r1, [sp, #20]
   b4af6:	a806      	add	r0, sp, #24
   b4af8:	f000 fe8e 	bl	b5818 <_ZN12JsonModifier11startModifyEPKN21JsonParserGeneratorRK9jsmntok_tE>
	mod.insertValue(0);
   b4afc:	2100      	movs	r1, #0
   b4afe:	a806      	add	r0, sp, #24
   b4b00:	f7ff fb78 	bl	b41f4 <_ZN10JsonWriter11insertValueEi>
	mod.finish();
   b4b04:	a806      	add	r0, sp, #24
   b4b06:	f001 f90c 	bl	b5d22 <_ZN12JsonModifier6finishEv>
	jp.getValueTokenByKey(nodeObjectContainer, "pend", value);				// Is there a more efficient way to do this?
   b4b0a:	4a1e      	ldr	r2, [pc, #120]	; (b4b84 <_Z7setTypeii+0x168>)
   b4b0c:	4814      	ldr	r0, [pc, #80]	; (b4b60 <_Z7setTypeii+0x144>)
   b4b0e:	ab05      	add	r3, sp, #20
   b4b10:	4621      	mov	r1, r4
   b4b12:	f000 fd27 	bl	b5564 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
	mod.startModify(value);
   b4b16:	9905      	ldr	r1, [sp, #20]
   b4b18:	a806      	add	r0, sp, #24
   b4b1a:	f000 fe7d 	bl	b5818 <_ZN12JsonModifier11startModifyEPKN21JsonParserGeneratorRK9jsmntok_tE>
	mod.insertValue(0);
   b4b1e:	2100      	movs	r1, #0
   b4b20:	a806      	add	r0, sp, #24
   b4b22:	f7ff fb67 	bl	b41f4 <_ZN10JsonWriter11insertValueEi>
	mod.finish();
   b4b26:	a806      	add	r0, sp, #24
   b4b28:	f001 f8fb 	bl	b5d22 <_ZN12JsonModifier6finishEv>
	jp.getValueTokenByKey(nodeObjectContainer, "cont", value);				// Is there a more efficient way to do this?
   b4b2c:	4a16      	ldr	r2, [pc, #88]	; (b4b88 <_Z7setTypeii+0x16c>)
   b4b2e:	480c      	ldr	r0, [pc, #48]	; (b4b60 <_Z7setTypeii+0x144>)
   b4b30:	ab05      	add	r3, sp, #20
   b4b32:	4621      	mov	r1, r4
   b4b34:	f000 fd16 	bl	b5564 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
	mod.startModify(value);
   b4b38:	9905      	ldr	r1, [sp, #20]
   b4b3a:	a806      	add	r0, sp, #24
   b4b3c:	f000 fe6c 	bl	b5818 <_ZN12JsonModifier11startModifyEPKN21JsonParserGeneratorRK9jsmntok_tE>
	mod.insertValue(0);
   b4b40:	2100      	movs	r1, #0
   b4b42:	a806      	add	r0, sp, #24
   b4b44:	f7ff fb56 	bl	b41f4 <_ZN10JsonWriter11insertValueEi>
	mod.finish();
   b4b48:	a806      	add	r0, sp, #24
   b4b4a:	f001 f8ea 	bl	b5d22 <_ZN12JsonModifier6finishEv>
	JsonModifier mod(jp);
   b4b4e:	a806      	add	r0, sp, #24
   b4b50:	f000 fb0e 	bl	b5170 <_ZN12JsonModifierD1Ev>
	return true;
   b4b54:	2001      	movs	r0, #1
}
   b4b56:	b017      	add	sp, #92	; 0x5c
   b4b58:	bd30      	pop	{r4, r5, pc}
	if (nodeNumber == 0 || nodeNumber == 255) return false;
   b4b5a:	2000      	movs	r0, #0
   b4b5c:	e7fb      	b.n	b4b56 <_Z7setTypeii+0x13a>
   b4b5e:	bf00      	nop
   b4b60:	2003b778 	.word	0x2003b778
   b4b64:	000b9de3 	.word	0x000b9de3
   b4b68:	000b9eda 	.word	0x000b9eda
   b4b6c:	000b9de9 	.word	0x000b9de9
   b4b70:	000ba07c 	.word	0x000ba07c
   b4b74:	2003e6b0 	.word	0x2003e6b0
   b4b78:	000bae00 	.word	0x000bae00
   b4b7c:	000b9ee3 	.word	0x000b9ee3
   b4b80:	000b9ee6 	.word	0x000b9ee6
   b4b84:	000b9ee9 	.word	0x000b9ee9
   b4b88:	000b9eee 	.word	0x000b9eee

000b4b8c <setup>:
void setup() {
   b4b8c:	b5f0      	push	{r4, r5, r6, r7, lr}
   b4b8e:	ed2d 8b02 	vpush	{d8}
	delay(2000);                        // Give the serial port time to connect
   b4b92:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
void setup() {
   b4b96:	b087      	sub	sp, #28
	delay(2000);                        // Give the serial port time to connect
   b4b98:	f002 fac6 	bl	b7128 <delay>
	nodeIDData::instance().setup();		// Initialize the nodeDatabase
   b4b9c:	f001 fa3c 	bl	b6018 <_ZN10nodeIDData8instanceEv>
   b4ba0:	6803      	ldr	r3, [r0, #0]
	printTokens(jp, false);
   b4ba2:	4c91      	ldr	r4, [pc, #580]	; (b4de8 <setup+0x25c>)
	nodeIDData::instance().setup();		// Initialize the nodeDatabase
   b4ba4:	681b      	ldr	r3, [r3, #0]
   b4ba6:	4798      	blx	r3
	Log.info("Starting tests");
   b4ba8:	4990      	ldr	r1, [pc, #576]	; (b4dec <setup+0x260>)
   b4baa:	4891      	ldr	r0, [pc, #580]	; (b4df0 <setup+0x264>)
   b4bac:	f7ff fae6 	bl	b417c <_ZNK5spark6Logger4infoEPKcz>
	Log.info("First Test, we will clear the Node Database and load the sample data set");
   b4bb0:	4990      	ldr	r1, [pc, #576]	; (b4df4 <setup+0x268>)
   b4bb2:	488f      	ldr	r0, [pc, #572]	; (b4df0 <setup+0x264>)
   b4bb4:	f7ff fae2 	bl	b417c <_ZNK5spark6Logger4infoEPKcz>
	nodeDatabase.resetNodeIDs();	// Clear the Node Database
   b4bb8:	f001 fa2e 	bl	b6018 <_ZN10nodeIDData8instanceEv>
   b4bbc:	f001 fae0 	bl	b6180 <_ZN10nodeIDData12resetNodeIDsEv>
	printTokens(jp, false);
   b4bc0:	2100      	movs	r1, #0
   b4bc2:	4620      	mov	r0, r4
   b4bc4:	f7ff fb70 	bl	b42a8 <_Z11printTokensR10JsonParserb>
	Log.info("Now that the nodeDatabase is empty, we will load the sample data set");
   b4bc8:	498b      	ldr	r1, [pc, #556]	; (b4df8 <setup+0x26c>)
   b4bca:	4889      	ldr	r0, [pc, #548]	; (b4df0 <setup+0x264>)
   b4bcc:	f7ff fad6 	bl	b417c <_ZNK5spark6Logger4infoEPKcz>
	Log.info("The data string is: %s",data);
   b4bd0:	4a8a      	ldr	r2, [pc, #552]	; (b4dfc <setup+0x270>)
   b4bd2:	498b      	ldr	r1, [pc, #556]	; (b4e00 <setup+0x274>)
   b4bd4:	4886      	ldr	r0, [pc, #536]	; (b4df0 <setup+0x264>)
   b4bd6:	f7ff fad1 	bl	b417c <_ZNK5spark6Logger4infoEPKcz>
	bool addString(const char *data) { return addData(data, strlen(data)); }
   b4bda:	4988      	ldr	r1, [pc, #544]	; (b4dfc <setup+0x270>)
   b4bdc:	f240 422c 	movw	r2, #1068	; 0x42c
   b4be0:	4620      	mov	r0, r4
   b4be2:	f000 fb14 	bl	b520e <_ZN10JsonBuffer7addDataEPKcj>
	if (jp.parse()) Log.info("Parsed Successfully");
   b4be6:	4620      	mov	r0, r4
   b4be8:	f001 f84e 	bl	b5c88 <_ZN10JsonParser5parseEv>
   b4bec:	2800      	cmp	r0, #0
   b4bee:	d065      	beq.n	b4cbc <setup+0x130>
   b4bf0:	4984      	ldr	r1, [pc, #528]	; (b4e04 <setup+0x278>)
   b4bf2:	487f      	ldr	r0, [pc, #508]	; (b4df0 <setup+0x264>)
   b4bf4:	f7ff fac2 	bl	b417c <_ZNK5spark6Logger4infoEPKcz>
	printTokens(jp, false);
   b4bf8:	2100      	movs	r1, #0
   b4bfa:	4620      	mov	r0, r4
   b4bfc:	f7ff fb54 	bl	b42a8 <_Z11printTokensR10JsonParserb>
	Log.info("Next, we will load and store the node database into memory");
   b4c00:	4981      	ldr	r1, [pc, #516]	; (b4e08 <setup+0x27c>)
   b4c02:	487b      	ldr	r0, [pc, #492]	; (b4df0 <setup+0x264>)
   b4c04:	f7ff faba 	bl	b417c <_ZNK5spark6Logger4infoEPKcz>
	nodeDatabase.set_nodeIDJson(data);				// Load the text object from this sketch into the nodeDatabase
   b4c08:	f001 fa06 	bl	b6018 <_ZN10nodeIDData8instanceEv>
   b4c0c:	497b      	ldr	r1, [pc, #492]	; (b4dfc <setup+0x270>)
   b4c0e:	f001 fa39 	bl	b6084 <_ZN10nodeIDData14set_nodeIDJsonEPKc>
	nodeDatabase.flush(false);						// Store the nodeDatabase into memory
   b4c12:	f001 fa01 	bl	b6018 <_ZN10nodeIDData8instanceEv>
   b4c16:	6803      	ldr	r3, [r0, #0]
   b4c18:	2100      	movs	r1, #0
   b4c1a:	68db      	ldr	r3, [r3, #12]
   b4c1c:	4798      	blx	r3
	Log.info("Note that our JSON object allocation is %4.2f%% of the memory allocated (less than 100%% is OK)", 100*(float)jp.getBufferLen()/(float)nodeDatabase.nodeDataStorageSize());
   b4c1e:	edd4 7a02 	vldr	s15, [r4, #8]
   b4c22:	eeb8 8a67 	vcvt.f32.u32	s16, s15
   b4c26:	eddf 7a79 	vldr	s15, [pc, #484]	; b4e0c <setup+0x280>
   b4c2a:	ee28 8a27 	vmul.f32	s16, s16, s15
   b4c2e:	f001 f9f3 	bl	b6018 <_ZN10nodeIDData8instanceEv>
   b4c32:	f001 fa11 	bl	b6058 <_ZN10nodeIDData19nodeDataStorageSizeEv>
   b4c36:	ee07 0a90 	vmov	s15, r0
   b4c3a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b4c3e:	eec8 7a27 	vdiv.f32	s15, s16, s15
   b4c42:	ee17 0a90 	vmov	r0, s15
   b4c46:	f004 fe35 	bl	b98b4 <__aeabi_f2d>
   b4c4a:	460b      	mov	r3, r1
   b4c4c:	4602      	mov	r2, r0
   b4c4e:	4970      	ldr	r1, [pc, #448]	; (b4e10 <setup+0x284>)
   b4c50:	4867      	ldr	r0, [pc, #412]	; (b4df0 <setup+0x264>)
   b4c52:	f7ff fa93 	bl	b417c <_ZNK5spark6Logger4infoEPKcz>
	jp.clear();										// Clear the JSON object from memory
   b4c56:	4620      	mov	r0, r4
   b4c58:	f000 faf6 	bl	b5248 <_ZN10JsonBuffer5clearEv>
	jp.addString(nodeDatabase.get_nodeIDJson());	// Read in the JSON string from memory
   b4c5c:	f001 f9dc 	bl	b6018 <_ZN10nodeIDData8instanceEv>
   b4c60:	4601      	mov	r1, r0
   b4c62:	a802      	add	r0, sp, #8
   b4c64:	f001 f9fc 	bl	b6060 <_ZNK10nodeIDData14get_nodeIDJsonEv>
    char operator [] (unsigned int index) const;
    char& operator [] (unsigned int index);
    void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
    void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
        {getBytes((unsigned char *)buf, bufsize, index);}
    const char * c_str() const { return buffer; }
   b4c68:	9902      	ldr	r1, [sp, #8]
   b4c6a:	9101      	str	r1, [sp, #4]
   b4c6c:	4608      	mov	r0, r1
   b4c6e:	f004 ff6a 	bl	b9b46 <strlen>
   b4c72:	9901      	ldr	r1, [sp, #4]
   b4c74:	4602      	mov	r2, r0
   b4c76:	4620      	mov	r0, r4
   b4c78:	f000 fac9 	bl	b520e <_ZN10JsonBuffer7addDataEPKcj>
   b4c7c:	a802      	add	r0, sp, #8
   b4c7e:	f004 f96d 	bl	b8f5c <_ZN6StringD1Ev>
	Log.info("The node string is: %s",nodeDatabase.get_nodeIDJson().c_str());
   b4c82:	f001 f9c9 	bl	b6018 <_ZN10nodeIDData8instanceEv>
   b4c86:	4601      	mov	r1, r0
   b4c88:	a802      	add	r0, sp, #8
   b4c8a:	f001 f9e9 	bl	b6060 <_ZNK10nodeIDData14get_nodeIDJsonEv>
   b4c8e:	9a02      	ldr	r2, [sp, #8]
   b4c90:	4960      	ldr	r1, [pc, #384]	; (b4e14 <setup+0x288>)
   b4c92:	4857      	ldr	r0, [pc, #348]	; (b4df0 <setup+0x264>)
   b4c94:	f7ff fa72 	bl	b417c <_ZNK5spark6Logger4infoEPKcz>
   b4c98:	a802      	add	r0, sp, #8
   b4c9a:	f004 f95f 	bl	b8f5c <_ZN6StringD1Ev>
	if (jp.parse()) Log.info("Parsed Successfully");
   b4c9e:	4620      	mov	r0, r4
   b4ca0:	f000 fff2 	bl	b5c88 <_ZN10JsonParser5parseEv>
   b4ca4:	b9a8      	cbnz	r0, b4cd2 <setup+0x146>
		nodeDatabase.resetNodeIDs();
   b4ca6:	f001 f9b7 	bl	b6018 <_ZN10nodeIDData8instanceEv>
   b4caa:	f001 fa69 	bl	b6180 <_ZN10nodeIDData12resetNodeIDsEv>
		Log.info("Parsing error - stopping execution");
   b4cae:	495a      	ldr	r1, [pc, #360]	; (b4e18 <setup+0x28c>)
   b4cb0:	484f      	ldr	r0, [pc, #316]	; (b4df0 <setup+0x264>)
   b4cb2:	f7ff fa63 	bl	b417c <_ZNK5spark6Logger4infoEPKcz>
		while(1) Particle.process();	// stop here on parsing error
   b4cb6:	f7ff fa31 	bl	b411c <_ZN10CloudClass7processEv.isra.0>
   b4cba:	e7fc      	b.n	b4cb6 <setup+0x12a>
		nodeDatabase.resetNodeIDs();
   b4cbc:	f001 f9ac 	bl	b6018 <_ZN10nodeIDData8instanceEv>
   b4cc0:	f001 fa5e 	bl	b6180 <_ZN10nodeIDData12resetNodeIDsEv>
		Log.info("Parsing error halting execution");
   b4cc4:	4955      	ldr	r1, [pc, #340]	; (b4e1c <setup+0x290>)
   b4cc6:	484a      	ldr	r0, [pc, #296]	; (b4df0 <setup+0x264>)
   b4cc8:	f7ff fa58 	bl	b417c <_ZNK5spark6Logger4infoEPKcz>
		while(1) Particle.process();	// stop here on parsing error
   b4ccc:	f7ff fa26 	bl	b411c <_ZN10CloudClass7processEv.isra.0>
   b4cd0:	e7fc      	b.n	b4ccc <setup+0x140>
	if (jp.parse()) Log.info("Parsed Successfully");
   b4cd2:	494c      	ldr	r1, [pc, #304]	; (b4e04 <setup+0x278>)
   b4cd4:	4846      	ldr	r0, [pc, #280]	; (b4df0 <setup+0x264>)
	byte nodeNumber = findNodeNumber(uniqueID_1);
   b4cd6:	4d52      	ldr	r5, [pc, #328]	; (b4e20 <setup+0x294>)
	setType(nodeNumber, sensorType_2);
   b4cd8:	4f52      	ldr	r7, [pc, #328]	; (b4e24 <setup+0x298>)
	setType(nodeNumber, sensorType_3);
   b4cda:	4e53      	ldr	r6, [pc, #332]	; (b4e28 <setup+0x29c>)
	if (jp.parse()) Log.info("Parsed Successfully");
   b4cdc:	f7ff fa4e 	bl	b417c <_ZNK5spark6Logger4infoEPKcz>
	printTokens(jp, false);
   b4ce0:	4620      	mov	r0, r4
   b4ce2:	2100      	movs	r1, #0
   b4ce4:	f7ff fae0 	bl	b42a8 <_Z11printTokensR10JsonParserb>
	Log.info("Finally, we will add a new node to the database and print the database");
   b4ce8:	4950      	ldr	r1, [pc, #320]	; (b4e2c <setup+0x2a0>)
   b4cea:	4841      	ldr	r0, [pc, #260]	; (b4df0 <setup+0x264>)
   b4cec:	f7ff fa46 	bl	b417c <_ZNK5spark6Logger4infoEPKcz>
	byte nodeNumber = findNodeNumber(uniqueID_1);
   b4cf0:	6828      	ldr	r0, [r5, #0]
   b4cf2:	f7ff fdeb 	bl	b48cc <_Z14findNodeNumberm>
	Log.info("The node number is: %d",nodeNumber);
   b4cf6:	494e      	ldr	r1, [pc, #312]	; (b4e30 <setup+0x2a4>)
	byte nodeNumber = findNodeNumber(uniqueID_1);
   b4cf8:	4602      	mov	r2, r0
	Log.info("The node number is: %d",nodeNumber);
   b4cfa:	483d      	ldr	r0, [pc, #244]	; (b4df0 <setup+0x264>)
   b4cfc:	f7ff fa3e 	bl	b417c <_ZNK5spark6Logger4infoEPKcz>
	printTokens(jp, false);
   b4d00:	2100      	movs	r1, #0
   b4d02:	4620      	mov	r0, r4
   b4d04:	f7ff fad0 	bl	b42a8 <_Z11printTokensR10JsonParserb>
	printNodeData(false);
   b4d08:	2000      	movs	r0, #0
   b4d0a:	f7ff fbdf 	bl	b44cc <_Z13printNodeDatab>
	Log.info("Now we will change the type of the node and print the database");
   b4d0e:	4949      	ldr	r1, [pc, #292]	; (b4e34 <setup+0x2a8>)
   b4d10:	4837      	ldr	r0, [pc, #220]	; (b4df0 <setup+0x264>)
   b4d12:	f7ff fa33 	bl	b417c <_ZNK5spark6Logger4infoEPKcz>
	nodeNumber = findNodeNumber(uniqueID_1);
   b4d16:	6828      	ldr	r0, [r5, #0]
   b4d18:	f7ff fdd8 	bl	b48cc <_Z14findNodeNumberm>
   b4d1c:	4605      	mov	r5, r0
	byte currentType = getType(nodeNumber);
   b4d1e:	f7ff fa6f 	bl	b4200 <_Z7getTypei>
	Log.info("The current type for node number %d is: %d",nodeNumber, currentType);
   b4d22:	462a      	mov	r2, r5
	byte currentType = getType(nodeNumber);
   b4d24:	4603      	mov	r3, r0
	Log.info("The current type for node number %d is: %d",nodeNumber, currentType);
   b4d26:	4944      	ldr	r1, [pc, #272]	; (b4e38 <setup+0x2ac>)
   b4d28:	4831      	ldr	r0, [pc, #196]	; (b4df0 <setup+0x264>)
   b4d2a:	f7ff fa27 	bl	b417c <_ZNK5spark6Logger4infoEPKcz>
	setType(nodeNumber, sensorType_2);
   b4d2e:	6839      	ldr	r1, [r7, #0]
   b4d30:	4628      	mov	r0, r5
   b4d32:	f7ff fe73 	bl	b4a1c <_Z7setTypeii>
	currentType = getType(nodeNumber);
   b4d36:	4628      	mov	r0, r5
   b4d38:	f7ff fa62 	bl	b4200 <_Z7getTypei>
	Log.info("The new type for node number %d is: %d",nodeNumber, currentType);
   b4d3c:	462a      	mov	r2, r5
	currentType = getType(nodeNumber);
   b4d3e:	4603      	mov	r3, r0
	Log.info("The new type for node number %d is: %d",nodeNumber, currentType);
   b4d40:	493e      	ldr	r1, [pc, #248]	; (b4e3c <setup+0x2b0>)
   b4d42:	482b      	ldr	r0, [pc, #172]	; (b4df0 <setup+0x264>)
   b4d44:	f7ff fa1a 	bl	b417c <_ZNK5spark6Logger4infoEPKcz>
	Log.info("Now we will change the type which will alter its structure and print the database");
   b4d48:	493d      	ldr	r1, [pc, #244]	; (b4e40 <setup+0x2b4>)
   b4d4a:	4829      	ldr	r0, [pc, #164]	; (b4df0 <setup+0x264>)
   b4d4c:	f7ff fa16 	bl	b417c <_ZNK5spark6Logger4infoEPKcz>
	setType(nodeNumber, sensorType_3);
   b4d50:	6831      	ldr	r1, [r6, #0]
   b4d52:	4628      	mov	r0, r5
   b4d54:	f7ff fe62 	bl	b4a1c <_Z7setTypeii>
	printTokens(jp, false);
   b4d58:	2100      	movs	r1, #0
   b4d5a:	4620      	mov	r0, r4
   b4d5c:	f7ff faa4 	bl	b42a8 <_Z11printTokensR10JsonParserb>
	printNodeData(false);
   b4d60:	2000      	movs	r0, #0
   b4d62:	f7ff fbb3 	bl	b44cc <_Z13printNodeDatab>
	Log.info("Now we will change the type on a note that is in the middle of the pack and then change it back. ");
   b4d66:	4937      	ldr	r1, [pc, #220]	; (b4e44 <setup+0x2b8>)
   b4d68:	4821      	ldr	r0, [pc, #132]	; (b4df0 <setup+0x264>)
   b4d6a:	f7ff fa07 	bl	b417c <_ZNK5spark6Logger4infoEPKcz>
	nodeNumber = findNodeNumber(uniqueID_2);
   b4d6e:	4b36      	ldr	r3, [pc, #216]	; (b4e48 <setup+0x2bc>)
   b4d70:	6818      	ldr	r0, [r3, #0]
   b4d72:	f7ff fdab 	bl	b48cc <_Z14findNodeNumberm>
   b4d76:	4605      	mov	r5, r0
	currentType = getType(nodeNumber);
   b4d78:	f7ff fa42 	bl	b4200 <_Z7getTypei>
	Log.info("The current type for node number %d is: %d",nodeNumber, currentType);
   b4d7c:	462a      	mov	r2, r5
	currentType = getType(nodeNumber);
   b4d7e:	4603      	mov	r3, r0
	Log.info("The current type for node number %d is: %d",nodeNumber, currentType);
   b4d80:	492d      	ldr	r1, [pc, #180]	; (b4e38 <setup+0x2ac>)
   b4d82:	481b      	ldr	r0, [pc, #108]	; (b4df0 <setup+0x264>)
   b4d84:	f7ff f9fa 	bl	b417c <_ZNK5spark6Logger4infoEPKcz>
	setType(nodeNumber, sensorType_2);
   b4d88:	6839      	ldr	r1, [r7, #0]
   b4d8a:	4628      	mov	r0, r5
   b4d8c:	f7ff fe46 	bl	b4a1c <_Z7setTypeii>
	printNodeData(false);
   b4d90:	2000      	movs	r0, #0
   b4d92:	f7ff fb9b 	bl	b44cc <_Z13printNodeDatab>
	currentType = getType(nodeNumber);
   b4d96:	4628      	mov	r0, r5
   b4d98:	f7ff fa32 	bl	b4200 <_Z7getTypei>
	Log.info("The new type for node number %d is: %d",nodeNumber, currentType);
   b4d9c:	462a      	mov	r2, r5
	currentType = getType(nodeNumber);
   b4d9e:	4603      	mov	r3, r0
	Log.info("The new type for node number %d is: %d",nodeNumber, currentType);
   b4da0:	4926      	ldr	r1, [pc, #152]	; (b4e3c <setup+0x2b0>)
   b4da2:	4813      	ldr	r0, [pc, #76]	; (b4df0 <setup+0x264>)
   b4da4:	f7ff f9ea 	bl	b417c <_ZNK5spark6Logger4infoEPKcz>
	setType(nodeNumber, sensorType_3);
   b4da8:	6831      	ldr	r1, [r6, #0]
   b4daa:	4628      	mov	r0, r5
   b4dac:	f7ff fe36 	bl	b4a1c <_Z7setTypeii>
	currentType = getType(nodeNumber);
   b4db0:	4628      	mov	r0, r5
   b4db2:	f7ff fa25 	bl	b4200 <_Z7getTypei>
	Log.info("The new type for node number %d is: %d",nodeNumber, currentType);
   b4db6:	462a      	mov	r2, r5
	currentType = getType(nodeNumber);
   b4db8:	4603      	mov	r3, r0
	Log.info("The new type for node number %d is: %d",nodeNumber, currentType);
   b4dba:	4920      	ldr	r1, [pc, #128]	; (b4e3c <setup+0x2b0>)
   b4dbc:	480c      	ldr	r0, [pc, #48]	; (b4df0 <setup+0x264>)
   b4dbe:	f7ff f9dd 	bl	b417c <_ZNK5spark6Logger4infoEPKcz>
	printTokens(jp, false);
   b4dc2:	2100      	movs	r1, #0
   b4dc4:	4620      	mov	r0, r4
   b4dc6:	f7ff fa6f 	bl	b42a8 <_Z11printTokensR10JsonParserb>
	printNodeData(false);
   b4dca:	2000      	movs	r0, #0
   b4dcc:	f7ff fb7e 	bl	b44cc <_Z13printNodeDatab>
	Log.info("Notice how the new node is no longer the end of the outer ojbect - this should work");
   b4dd0:	491e      	ldr	r1, [pc, #120]	; (b4e4c <setup+0x2c0>)
   b4dd2:	4807      	ldr	r0, [pc, #28]	; (b4df0 <setup+0x264>)
   b4dd4:	f7ff f9d2 	bl	b417c <_ZNK5spark6Logger4infoEPKcz>
	Log.info("Finished Parsing Test. Running data report tests in a loop.");
   b4dd8:	491d      	ldr	r1, [pc, #116]	; (b4e50 <setup+0x2c4>)
   b4dda:	4805      	ldr	r0, [pc, #20]	; (b4df0 <setup+0x264>)
   b4ddc:	f7ff f9ce 	bl	b417c <_ZNK5spark6Logger4infoEPKcz>
}
   b4de0:	b007      	add	sp, #28
   b4de2:	ecbd 8b02 	vpop	{d8}
   b4de6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b4de8:	2003b778 	.word	0x2003b778
   b4dec:	000ba0b0 	.word	0x000ba0b0
   b4df0:	2003e6b0 	.word	0x2003e6b0
   b4df4:	000ba0bf 	.word	0x000ba0bf
   b4df8:	000ba108 	.word	0x000ba108
   b4dfc:	000ba14d 	.word	0x000ba14d
   b4e00:	000ba57a 	.word	0x000ba57a
   b4e04:	000ba591 	.word	0x000ba591
   b4e08:	000ba5a5 	.word	0x000ba5a5
   b4e0c:	42c80000 	.word	0x42c80000
   b4e10:	000ba5e0 	.word	0x000ba5e0
   b4e14:	000ba640 	.word	0x000ba640
   b4e18:	000ba8aa 	.word	0x000ba8aa
   b4e1c:	000ba657 	.word	0x000ba657
   b4e20:	2003b6c4 	.word	0x2003b6c4
   b4e24:	2003b6bc 	.word	0x2003b6bc
   b4e28:	2003b6c0 	.word	0x2003b6c0
   b4e2c:	000ba677 	.word	0x000ba677
   b4e30:	000ba6be 	.word	0x000ba6be
   b4e34:	000ba6d5 	.word	0x000ba6d5
   b4e38:	000ba714 	.word	0x000ba714
   b4e3c:	000ba73f 	.word	0x000ba73f
   b4e40:	000ba766 	.word	0x000ba766
   b4e44:	000ba7b8 	.word	0x000ba7b8
   b4e48:	2003b6c8 	.word	0x2003b6c8
   b4e4c:	000ba81a 	.word	0x000ba81a
   b4e50:	000ba86e 	.word	0x000ba86e

000b4e54 <_Z12setJsonData1iii>:
bool setJsonData1(int nodeNumber, int sensorType, int newJsonData1) {
   b4e54:	b530      	push	{r4, r5, lr}
   b4e56:	4615      	mov	r5, r2
   b4e58:	b095      	sub	sp, #84	; 0x54
	if (nodeNumber == 0 || nodeNumber == 255) return false;
   b4e5a:	4604      	mov	r4, r0
   b4e5c:	b140      	cbz	r0, b4e70 <_Z12setJsonData1iii+0x1c>
   b4e5e:	28ff      	cmp	r0, #255	; 0xff
   b4e60:	d006      	beq.n	b4e70 <_Z12setJsonData1iii+0x1c>
	if (sensorType > 29) {													// Return false if node is not a valid sensor type
   b4e62:	291d      	cmp	r1, #29
   b4e64:	dd06      	ble.n	b4e74 <_Z12setJsonData1iii+0x20>
		Log.info("Invalid sensor type in setJsonData1 %d", sensorType);
   b4e66:	460a      	mov	r2, r1
   b4e68:	4820      	ldr	r0, [pc, #128]	; (b4eec <_Z12setJsonData1iii+0x98>)
   b4e6a:	4921      	ldr	r1, [pc, #132]	; (b4ef0 <_Z12setJsonData1iii+0x9c>)
   b4e6c:	f7ff f986 	bl	b417c <_ZNK5spark6Logger4infoEPKcz>
	if (nodeNumber == 0 || nodeNumber == 255) return false;
   b4e70:	2000      	movs	r0, #0
   b4e72:	e039      	b.n	b4ee8 <_Z12setJsonData1iii+0x94>
	jp.getValueTokenByKey(jp.getOuterObject(), "nodes", nodesArrayContainer);
   b4e74:	481f      	ldr	r0, [pc, #124]	; (b4ef4 <_Z12setJsonData1iii+0xa0>)
   b4e76:	f000 fa0c 	bl	b5292 <_ZNK10JsonParser14getOuterObjectEv>
   b4e7a:	4a1f      	ldr	r2, [pc, #124]	; (b4ef8 <_Z12setJsonData1iii+0xa4>)
   b4e7c:	4601      	mov	r1, r0
   b4e7e:	ab02      	add	r3, sp, #8
   b4e80:	481c      	ldr	r0, [pc, #112]	; (b4ef4 <_Z12setJsonData1iii+0xa0>)
   b4e82:	f000 fb6f 	bl	b5564 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
	nodeObjectContainer = jp.getTokenByIndex(nodesArrayContainer, nodeNumber-1);
   b4e86:	1e62      	subs	r2, r4, #1
   b4e88:	9902      	ldr	r1, [sp, #8]
   b4e8a:	481a      	ldr	r0, [pc, #104]	; (b4ef4 <_Z12setJsonData1iii+0xa0>)
   b4e8c:	f000 fa23 	bl	b52d6 <_ZNK10JsonParser15getTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj>
	if(nodeObjectContainer == NULL) { 										// Ran out of entries
   b4e90:	4604      	mov	r4, r0
   b4e92:	b920      	cbnz	r0, b4e9e <_Z12setJsonData1iii+0x4a>
		Log.info("Ran out of entries in setJsonData1");
   b4e94:	4919      	ldr	r1, [pc, #100]	; (b4efc <_Z12setJsonData1iii+0xa8>)
   b4e96:	4815      	ldr	r0, [pc, #84]	; (b4eec <_Z12setJsonData1iii+0x98>)
   b4e98:	f7ff f970 	bl	b417c <_ZNK5spark6Logger4infoEPKcz>
		return false;				
   b4e9c:	e7e8      	b.n	b4e70 <_Z12setJsonData1iii+0x1c>
	jp.getValueByKey(nodeObjectContainer, "p1", jsonData1);
   b4e9e:	4601      	mov	r1, r0
   b4ea0:	4a17      	ldr	r2, [pc, #92]	; (b4f00 <_Z12setJsonData1iii+0xac>)
   b4ea2:	4814      	ldr	r0, [pc, #80]	; (b4ef4 <_Z12setJsonData1iii+0xa0>)
   b4ea4:	ab01      	add	r3, sp, #4
   b4ea6:	f7ff f92a 	bl	b40fe <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
	Log.info("Updating jsonData1 value from %d to %d", jsonData1, newJsonData1);
   b4eaa:	9a01      	ldr	r2, [sp, #4]
   b4eac:	4915      	ldr	r1, [pc, #84]	; (b4f04 <_Z12setJsonData1iii+0xb0>)
   b4eae:	480f      	ldr	r0, [pc, #60]	; (b4eec <_Z12setJsonData1iii+0x98>)
   b4eb0:	462b      	mov	r3, r5
   b4eb2:	f7ff f963 	bl	b417c <_ZNK5spark6Logger4infoEPKcz>
	jp.getValueTokenByKey(nodeObjectContainer, "p1", value);
   b4eb6:	4a12      	ldr	r2, [pc, #72]	; (b4f00 <_Z12setJsonData1iii+0xac>)
   b4eb8:	480e      	ldr	r0, [pc, #56]	; (b4ef4 <_Z12setJsonData1iii+0xa0>)
   b4eba:	ab03      	add	r3, sp, #12
   b4ebc:	4621      	mov	r1, r4
   b4ebe:	f000 fb51 	bl	b5564 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
	JsonModifier mod(jp);
   b4ec2:	490c      	ldr	r1, [pc, #48]	; (b4ef4 <_Z12setJsonData1iii+0xa0>)
   b4ec4:	a804      	add	r0, sp, #16
   b4ec6:	f000 fc95 	bl	b57f4 <_ZN12JsonModifierC1ER10JsonParser>
	mod.startModify(value);
   b4eca:	9903      	ldr	r1, [sp, #12]
   b4ecc:	a804      	add	r0, sp, #16
   b4ece:	f000 fca3 	bl	b5818 <_ZN12JsonModifier11startModifyEPKN21JsonParserGeneratorRK9jsmntok_tE>
	mod.insertValue((int)newJsonData1);
   b4ed2:	4629      	mov	r1, r5
   b4ed4:	a804      	add	r0, sp, #16
   b4ed6:	f7ff f98d 	bl	b41f4 <_ZN10JsonWriter11insertValueEi>
	mod.finish();
   b4eda:	a804      	add	r0, sp, #16
   b4edc:	f000 ff21 	bl	b5d22 <_ZN12JsonModifier6finishEv>
	JsonModifier mod(jp);
   b4ee0:	a804      	add	r0, sp, #16
   b4ee2:	f000 f945 	bl	b5170 <_ZN12JsonModifierD1Ev>
	return true;
   b4ee6:	2001      	movs	r0, #1
}
   b4ee8:	b015      	add	sp, #84	; 0x54
   b4eea:	bd30      	pop	{r4, r5, pc}
   b4eec:	2003e6b0 	.word	0x2003e6b0
   b4ef0:	000ba8cd 	.word	0x000ba8cd
   b4ef4:	2003b778 	.word	0x2003b778
   b4ef8:	000b9de3 	.word	0x000b9de3
   b4efc:	000ba8f4 	.word	0x000ba8f4
   b4f00:	000b9ee3 	.word	0x000b9ee3
   b4f04:	000ba917 	.word	0x000ba917

000b4f08 <_Z12setJsonData2iii>:
bool setJsonData2(int nodeNumber, int sensorType, int newJsonData2) {
   b4f08:	b570      	push	{r4, r5, r6, lr}
   b4f0a:	4616      	mov	r6, r2
   b4f0c:	b094      	sub	sp, #80	; 0x50
	if (nodeNumber == 0 || nodeNumber == 255) return false;
   b4f0e:	4604      	mov	r4, r0
   b4f10:	2800      	cmp	r0, #0
   b4f12:	d042      	beq.n	b4f9a <_Z12setJsonData2iii+0x92>
   b4f14:	28ff      	cmp	r0, #255	; 0xff
   b4f16:	d040      	beq.n	b4f9a <_Z12setJsonData2iii+0x92>
	if (sensorType < 10 || sensorType > 19) return false; 					// Return false if node is not an occupancy counter
   b4f18:	f1a1 000a 	sub.w	r0, r1, #10
   b4f1c:	2809      	cmp	r0, #9
   b4f1e:	d83c      	bhi.n	b4f9a <_Z12setJsonData2iii+0x92>
	jp.getValueTokenByKey(jp.getOuterObject(), "nodes", nodesArrayContainer);
   b4f20:	4d1f      	ldr	r5, [pc, #124]	; (b4fa0 <_Z12setJsonData2iii+0x98>)
   b4f22:	4628      	mov	r0, r5
   b4f24:	f000 f9b5 	bl	b5292 <_ZNK10JsonParser14getOuterObjectEv>
   b4f28:	4a1e      	ldr	r2, [pc, #120]	; (b4fa4 <_Z12setJsonData2iii+0x9c>)
   b4f2a:	4601      	mov	r1, r0
   b4f2c:	ab02      	add	r3, sp, #8
   b4f2e:	4628      	mov	r0, r5
   b4f30:	f000 fb18 	bl	b5564 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
	nodeObjectContainer = jp.getTokenByIndex(nodesArrayContainer, nodeNumber-1);
   b4f34:	1e62      	subs	r2, r4, #1
   b4f36:	9902      	ldr	r1, [sp, #8]
   b4f38:	4628      	mov	r0, r5
   b4f3a:	f000 f9cc 	bl	b52d6 <_ZNK10JsonParser15getTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj>
	if(nodeObjectContainer == NULL) return false;								// Ran out of entries 
   b4f3e:	4604      	mov	r4, r0
   b4f40:	b358      	cbz	r0, b4f9a <_Z12setJsonData2iii+0x92>
	jp.getValueByKey(nodeObjectContainer, "p2", jsonData2);
   b4f42:	4601      	mov	r1, r0
   b4f44:	4a18      	ldr	r2, [pc, #96]	; (b4fa8 <_Z12setJsonData2iii+0xa0>)
   b4f46:	ab01      	add	r3, sp, #4
   b4f48:	4628      	mov	r0, r5
   b4f4a:	f7ff f8d8 	bl	b40fe <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
	Log.info("Updating jsonData2 value from %d to %d", jsonData2, newJsonData2);
   b4f4e:	9a01      	ldr	r2, [sp, #4]
   b4f50:	4916      	ldr	r1, [pc, #88]	; (b4fac <_Z12setJsonData2iii+0xa4>)
   b4f52:	4817      	ldr	r0, [pc, #92]	; (b4fb0 <_Z12setJsonData2iii+0xa8>)
   b4f54:	4633      	mov	r3, r6
   b4f56:	f7ff f911 	bl	b417c <_ZNK5spark6Logger4infoEPKcz>
	jp.getValueTokenByKey(nodeObjectContainer, "p2", value);
   b4f5a:	4a13      	ldr	r2, [pc, #76]	; (b4fa8 <_Z12setJsonData2iii+0xa0>)
   b4f5c:	ab03      	add	r3, sp, #12
   b4f5e:	4621      	mov	r1, r4
   b4f60:	4628      	mov	r0, r5
   b4f62:	f000 faff 	bl	b5564 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
	JsonModifier mod(jp);
   b4f66:	4629      	mov	r1, r5
   b4f68:	a804      	add	r0, sp, #16
   b4f6a:	f000 fc43 	bl	b57f4 <_ZN12JsonModifierC1ER10JsonParser>
	mod.startModify(value);
   b4f6e:	9903      	ldr	r1, [sp, #12]
   b4f70:	a804      	add	r0, sp, #16
   b4f72:	f000 fc51 	bl	b5818 <_ZN12JsonModifier11startModifyEPKN21JsonParserGeneratorRK9jsmntok_tE>
	mod.insertValue((int)newJsonData2);
   b4f76:	4631      	mov	r1, r6
   b4f78:	a804      	add	r0, sp, #16
   b4f7a:	f7ff f93b 	bl	b41f4 <_ZN10JsonWriter11insertValueEi>
	mod.finish();
   b4f7e:	a804      	add	r0, sp, #16
   b4f80:	f000 fecf 	bl	b5d22 <_ZN12JsonModifier6finishEv>
	nodeDatabase.set_nodeIDJson(jp.getBuffer());									// This should backup the nodeID database - now updated to persistent storage
   b4f84:	f001 f848 	bl	b6018 <_ZN10nodeIDData8instanceEv>
   b4f88:	6869      	ldr	r1, [r5, #4]
   b4f8a:	f001 f87b 	bl	b6084 <_ZN10nodeIDData14set_nodeIDJsonEPKc>
	JsonModifier mod(jp);
   b4f8e:	a804      	add	r0, sp, #16
   b4f90:	f000 f8ee 	bl	b5170 <_ZN12JsonModifierD1Ev>
	return true;
   b4f94:	2001      	movs	r0, #1
   b4f96:	b014      	add	sp, #80	; 0x50
   b4f98:	bd70      	pop	{r4, r5, r6, pc}
	if (nodeNumber == 0 || nodeNumber == 255) return false;
   b4f9a:	2000      	movs	r0, #0
   b4f9c:	e7fb      	b.n	b4f96 <_Z12setJsonData2iii+0x8e>
   b4f9e:	bf00      	nop
   b4fa0:	2003b778 	.word	0x2003b778
   b4fa4:	000b9de3 	.word	0x000b9de3
   b4fa8:	000b9ee6 	.word	0x000b9ee6
   b4fac:	000ba93e 	.word	0x000ba93e
   b4fb0:	2003e6b0 	.word	0x2003e6b0

000b4fb4 <loop>:
void loop() {
   b4fb4:	b5f0      	push	{r4, r5, r6, r7, lr}
    int currentIndex = numLoops % uniqueIDsCount;
   b4fb6:	4f4f      	ldr	r7, [pc, #316]	; (b50f4 <loop+0x140>)
void loop() {
   b4fb8:	b09f      	sub	sp, #124	; 0x7c
	delay(2000);
   b4fba:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   b4fbe:	f002 f8b3 	bl	b7128 <delay>
    int currentIndex = numLoops % uniqueIDsCount;
   b4fc2:	683c      	ldr	r4, [r7, #0]
   b4fc4:	210e      	movs	r1, #14
   b4fc6:	fbb4 f3f1 	udiv	r3, r4, r1
   b4fca:	fb01 4413 	mls	r4, r1, r3, r4
    unsigned long currentTime = Time.now();
   b4fce:	f004 f8eb 	bl	b91a8 <_ZN9TimeClass3nowEv>
    std::srand(currentTime);
   b4fd2:	f004 fd05 	bl	b99e0 <srand>
    DataReport report = DataReport(uniqueIDs[currentIndex]); 
   b4fd6:	4b48      	ldr	r3, [pc, #288]	; (b50f8 <loop+0x144>)
   b4fd8:	ae0f      	add	r6, sp, #60	; 0x3c
   b4fda:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
   b4fde:	4630      	mov	r0, r6
   b4fe0:	f001 fcde 	bl	b69a0 <_ZN10DataReportC1Em>
    report.setNodeNumber(currentIndex + 1); // The nodeNumber is equal to the index + 1 for all uniqueIDs
   b4fe4:	1c61      	adds	r1, r4, #1
   b4fe6:	4630      	mov	r0, r6
   b4fe8:	b2c9      	uxtb	r1, r1
   b4fea:	f001 fce9 	bl	b69c0 <_ZN10DataReport13setNodeNumberEh>
    report.setSensorType(10); // sensorType is 10 for occupancy nodes
   b4fee:	210a      	movs	r1, #10
   b4ff0:	4630      	mov	r0, r6
   b4ff2:	f001 fce7 	bl	b69c4 <_ZN10DataReport13setSensorTypeEh>
    report.setOccupancyNet(std::rand() % 1001); // The data report will have a random value for occupancyNet
   b4ff6:	f004 fd21 	bl	b9a3c <rand>
   b4ffa:	f240 34e9 	movw	r4, #1001	; 0x3e9
   b4ffe:	fb90 f1f4 	sdiv	r1, r0, r4
   b5002:	fb01 0114 	mls	r1, r1, r4, r0
   b5006:	b289      	uxth	r1, r1
   b5008:	4630      	mov	r0, r6
   b500a:	f001 fce0 	bl	b69ce <_ZN10DataReport15setOccupancyNetEt>
    report.setOccupancyGross(std::rand() % 1001); // The data report will have a random value for occupancyGross
   b500e:	f004 fd15 	bl	b9a3c <rand>
   b5012:	fb90 f1f4 	sdiv	r1, r0, r4
   b5016:	fb01 0114 	mls	r1, r1, r4, r0
   b501a:	b289      	uxth	r1, r1
   b501c:	4630      	mov	r0, r6
   b501e:	f001 fcd4 	bl	b69ca <_ZN10DataReport17setOccupancyGrossEt>
    Gateway::instance().processDataReport(report); // Send the data report to the gateway to populate MyPersistentData
   b5022:	f001 fd2f 	bl	b6a84 <_ZN7Gateway8instanceEv>
   b5026:	ad12      	add	r5, sp, #72	; 0x48
   b5028:	4684      	mov	ip, r0
   b502a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b502c:	466c      	mov	r4, sp
   b502e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5030:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5032:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5034:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   b5038:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   b503c:	4660      	mov	r0, ip
   b503e:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
   b5042:	f001 fd8b 	bl	b6b5c <_ZN7Gateway17processDataReportE10DataReport>
    bool result1 = setJsonData1(current.get_nodeNumber(), current.get_sensorType(), current.get_payload3() <<8 | current.get_payload4());
   b5046:	f000 ff67 	bl	b5f18 <_ZN17currentStatusData8instanceEv>
   b504a:	f001 f905 	bl	b6258 <_ZNK17currentStatusData14get_nodeNumberEv>
   b504e:	4604      	mov	r4, r0
   b5050:	f000 ff62 	bl	b5f18 <_ZN17currentStatusData8instanceEv>
   b5054:	f001 f905 	bl	b6262 <_ZNK17currentStatusData14get_sensorTypeEv>
   b5058:	900d      	str	r0, [sp, #52]	; 0x34
   b505a:	f000 ff5d 	bl	b5f18 <_ZN17currentStatusData8instanceEv>
   b505e:	f001 f90f 	bl	b6280 <_ZNK17currentStatusData12get_payload3Ev>
   b5062:	4605      	mov	r5, r0
   b5064:	f000 ff58 	bl	b5f18 <_ZN17currentStatusData8instanceEv>
   b5068:	f001 f90f 	bl	b628a <_ZNK17currentStatusData12get_payload4Ev>
   b506c:	990d      	ldr	r1, [sp, #52]	; 0x34
   b506e:	ea40 2205 	orr.w	r2, r0, r5, lsl #8
   b5072:	4620      	mov	r0, r4
   b5074:	f7ff feee 	bl	b4e54 <_Z12setJsonData1iii>
   b5078:	4604      	mov	r4, r0
    bool result2 = setJsonData2(current.get_nodeNumber(), current.get_sensorType(), current.get_payload1() <<8 | current.get_payload2());
   b507a:	f000 ff4d 	bl	b5f18 <_ZN17currentStatusData8instanceEv>
   b507e:	f001 f8eb 	bl	b6258 <_ZNK17currentStatusData14get_nodeNumberEv>
   b5082:	4605      	mov	r5, r0
   b5084:	f000 ff48 	bl	b5f18 <_ZN17currentStatusData8instanceEv>
   b5088:	f001 f8eb 	bl	b6262 <_ZNK17currentStatusData14get_sensorTypeEv>
   b508c:	900d      	str	r0, [sp, #52]	; 0x34
   b508e:	f000 ff43 	bl	b5f18 <_ZN17currentStatusData8instanceEv>
   b5092:	f001 f8eb 	bl	b626c <_ZNK17currentStatusData12get_payload1Ev>
   b5096:	4606      	mov	r6, r0
   b5098:	f000 ff3e 	bl	b5f18 <_ZN17currentStatusData8instanceEv>
   b509c:	f001 f8eb 	bl	b6276 <_ZNK17currentStatusData12get_payload2Ev>
   b50a0:	990d      	ldr	r1, [sp, #52]	; 0x34
   b50a2:	ea40 2206 	orr.w	r2, r0, r6, lsl #8
   b50a6:	4628      	mov	r0, r5
   b50a8:	f7ff ff2e 	bl	b4f08 <_Z12setJsonData2iii>
    if(!(result1 && result2)){
   b50ac:	4d13      	ldr	r5, [pc, #76]	; (b50fc <loop+0x148>)
   b50ae:	b19c      	cbz	r4, b50d8 <loop+0x124>
   b50b0:	b938      	cbnz	r0, b50c2 <loop+0x10e>
        Log.info("Failed to set Json Data!! with result1 = %s and result2 = %s", result1 ? "true" : "false", result2 ? "true" : "false");
   b50b2:	4a13      	ldr	r2, [pc, #76]	; (b5100 <loop+0x14c>)
   b50b4:	4b13      	ldr	r3, [pc, #76]	; (b5104 <loop+0x150>)
   b50b6:	4914      	ldr	r1, [pc, #80]	; (b5108 <loop+0x154>)
   b50b8:	4814      	ldr	r0, [pc, #80]	; (b510c <loop+0x158>)
   b50ba:	f7ff f85f 	bl	b417c <_ZNK5spark6Logger4infoEPKcz>
		keepTesting = false;
   b50be:	2300      	movs	r3, #0
   b50c0:	702b      	strb	r3, [r5, #0]
	printTokens(jp, false);
   b50c2:	4813      	ldr	r0, [pc, #76]	; (b5110 <loop+0x15c>)
   b50c4:	2100      	movs	r1, #0
   b50c6:	f7ff f8ef 	bl	b42a8 <_Z11printTokensR10JsonParserb>
	if (keepTesting) numLoops += 1;
   b50ca:	782b      	ldrb	r3, [r5, #0]
   b50cc:	b153      	cbz	r3, b50e4 <loop+0x130>
   b50ce:	683b      	ldr	r3, [r7, #0]
   b50d0:	3301      	adds	r3, #1
   b50d2:	603b      	str	r3, [r7, #0]
}
   b50d4:	b01f      	add	sp, #124	; 0x7c
   b50d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        Log.info("Failed to set Json Data!! with result1 = %s and result2 = %s", result1 ? "true" : "false", result2 ? "true" : "false");
   b50d8:	4a0a      	ldr	r2, [pc, #40]	; (b5104 <loop+0x150>)
   b50da:	b908      	cbnz	r0, b50e0 <loop+0x12c>
   b50dc:	4613      	mov	r3, r2
   b50de:	e7ea      	b.n	b50b6 <loop+0x102>
   b50e0:	4b07      	ldr	r3, [pc, #28]	; (b5100 <loop+0x14c>)
   b50e2:	e7e8      	b.n	b50b6 <loop+0x102>
		Log.info("Stop testing on failure");
   b50e4:	490b      	ldr	r1, [pc, #44]	; (b5114 <loop+0x160>)
   b50e6:	4809      	ldr	r0, [pc, #36]	; (b510c <loop+0x158>)
   b50e8:	f7ff f848 	bl	b417c <_ZNK5spark6Logger4infoEPKcz>
		while(1) Particle.process();
   b50ec:	f7ff f816 	bl	b411c <_ZN10CloudClass7processEv.isra.0>
   b50f0:	e7fc      	b.n	b50ec <loop+0x138>
   b50f2:	bf00      	nop
   b50f4:	2003b774 	.word	0x2003b774
   b50f8:	000baa08 	.word	0x000baa08
   b50fc:	2003b6b4 	.word	0x2003b6b4
   b5100:	000ba96b 	.word	0x000ba96b
   b5104:	000ba965 	.word	0x000ba965
   b5108:	000ba970 	.word	0x000ba970
   b510c:	2003e6b0 	.word	0x2003e6b0
   b5110:	2003b778 	.word	0x2003b778
   b5114:	000ba9ad 	.word	0x000ba9ad

000b5118 <_ZN10JsonBufferD1Ev>:


JsonBuffer::JsonBuffer()  : buffer(0), bufferLen(0), offset(0), staticBuffers(false) {

}
JsonBuffer::~JsonBuffer() {
   b5118:	b510      	push	{r4, lr}
   b511a:	4b05      	ldr	r3, [pc, #20]	; (b5130 <_ZN10JsonBufferD1Ev+0x18>)
   b511c:	6003      	str	r3, [r0, #0]
	if (!staticBuffers && buffer) {
   b511e:	7c03      	ldrb	r3, [r0, #16]
JsonBuffer::~JsonBuffer() {
   b5120:	4604      	mov	r4, r0
	if (!staticBuffers && buffer) {
   b5122:	b91b      	cbnz	r3, b512c <_ZN10JsonBufferD1Ev+0x14>
   b5124:	6840      	ldr	r0, [r0, #4]
   b5126:	b108      	cbz	r0, b512c <_ZN10JsonBufferD1Ev+0x14>
		free(buffer);
   b5128:	f001 ffa6 	bl	b7078 <free>
	}
}
   b512c:	4620      	mov	r0, r4
   b512e:	bd10      	pop	{r4, pc}
   b5130:	000baa50 	.word	0x000baa50

000b5134 <_ZN10JsonBufferD0Ev>:
JsonBuffer::~JsonBuffer() {
   b5134:	b510      	push	{r4, lr}
   b5136:	4604      	mov	r4, r0
}
   b5138:	f7ff ffee 	bl	b5118 <_ZN10JsonBufferD1Ev>
   b513c:	4620      	mov	r0, r4
   b513e:	2114      	movs	r1, #20
   b5140:	f7fe ffab 	bl	b409a <_ZdlPvj>
   b5144:	4620      	mov	r0, r4
   b5146:	bd10      	pop	{r4, pc}

000b5148 <_ZN10JsonWriterD1Ev>:
//
JsonWriter::JsonWriter() : JsonBuffer(), floatPlaces(-1) {
	init();
}

JsonWriter::~JsonWriter() {
   b5148:	b510      	push	{r4, lr}
   b514a:	4b03      	ldr	r3, [pc, #12]	; (b5158 <_ZN10JsonWriterD1Ev+0x10>)
   b514c:	6003      	str	r3, [r0, #0]
   b514e:	4604      	mov	r4, r0
   b5150:	f7ff ffe2 	bl	b5118 <_ZN10JsonBufferD1Ev>

}
   b5154:	4620      	mov	r0, r4
   b5156:	bd10      	pop	{r4, pc}
   b5158:	000baa70 	.word	0x000baa70

000b515c <_ZN10JsonWriterD0Ev>:
JsonWriter::~JsonWriter() {
   b515c:	b510      	push	{r4, lr}
   b515e:	4604      	mov	r4, r0
}
   b5160:	f7ff fff2 	bl	b5148 <_ZN10JsonWriterD1Ev>
   b5164:	4620      	mov	r0, r4
   b5166:	2130      	movs	r1, #48	; 0x30
   b5168:	f7fe ff97 	bl	b409a <_ZdlPvj>
   b516c:	4620      	mov	r0, r4
   b516e:	bd10      	pop	{r4, pc}

000b5170 <_ZN12JsonModifierD1Ev>:

JsonModifier::JsonModifier(JsonParser &jp) : jp(jp) {

}

JsonModifier::~JsonModifier() {
   b5170:	b510      	push	{r4, lr}
   b5172:	4b03      	ldr	r3, [pc, #12]	; (b5180 <_ZN12JsonModifierD1Ev+0x10>)
   b5174:	6003      	str	r3, [r0, #0]
   b5176:	4604      	mov	r4, r0
   b5178:	f7ff ffe6 	bl	b5148 <_ZN10JsonWriterD1Ev>

}
   b517c:	4620      	mov	r0, r4
   b517e:	bd10      	pop	{r4, pc}
   b5180:	000baa80 	.word	0x000baa80

000b5184 <_ZN12JsonModifierD0Ev>:
JsonModifier::~JsonModifier() {
   b5184:	b510      	push	{r4, lr}
   b5186:	4604      	mov	r4, r0
}
   b5188:	f7ff fff2 	bl	b5170 <_ZN12JsonModifierD1Ev>
   b518c:	4620      	mov	r0, r4
   b518e:	2140      	movs	r1, #64	; 0x40
   b5190:	f7fe ff83 	bl	b409a <_ZdlPvj>
   b5194:	4620      	mov	r0, r4
   b5196:	bd10      	pop	{r4, pc}

000b5198 <_ZN10JsonParserD1Ev>:
JsonParser::~JsonParser() {
   b5198:	b510      	push	{r4, lr}
   b519a:	4b07      	ldr	r3, [pc, #28]	; (b51b8 <_ZN10JsonParserD1Ev+0x20>)
   b519c:	6003      	str	r3, [r0, #0]
	if (!staticBuffers && tokens) {
   b519e:	7c03      	ldrb	r3, [r0, #16]
JsonParser::~JsonParser() {
   b51a0:	4604      	mov	r4, r0
	if (!staticBuffers && tokens) {
   b51a2:	b91b      	cbnz	r3, b51ac <_ZN10JsonParserD1Ev+0x14>
   b51a4:	6940      	ldr	r0, [r0, #20]
   b51a6:	b108      	cbz	r0, b51ac <_ZN10JsonParserD1Ev+0x14>
		free(tokens);
   b51a8:	f001 ff66 	bl	b7078 <free>
JsonParser::~JsonParser() {
   b51ac:	4620      	mov	r0, r4
   b51ae:	f7ff ffb3 	bl	b5118 <_ZN10JsonBufferD1Ev>
}
   b51b2:	4620      	mov	r0, r4
   b51b4:	bd10      	pop	{r4, pc}
   b51b6:	bf00      	nop
   b51b8:	000baa60 	.word	0x000baa60

000b51bc <_ZN10JsonParserD0Ev>:
JsonParser::~JsonParser() {
   b51bc:	b510      	push	{r4, lr}
   b51be:	4604      	mov	r4, r0
}
   b51c0:	f7ff ffea 	bl	b5198 <_ZN10JsonParserD1Ev>
   b51c4:	4620      	mov	r0, r4
   b51c6:	212c      	movs	r1, #44	; 0x2c
   b51c8:	f7fe ff67 	bl	b409a <_ZdlPvj>
   b51cc:	4620      	mov	r0, r4
   b51ce:	bd10      	pop	{r4, pc}

000b51d0 <_ZN10JsonBufferC1Ev>:
JsonBuffer::JsonBuffer()  : buffer(0), bufferLen(0), offset(0), staticBuffers(false) {
   b51d0:	4a03      	ldr	r2, [pc, #12]	; (b51e0 <_ZN10JsonBufferC1Ev+0x10>)
   b51d2:	6002      	str	r2, [r0, #0]
   b51d4:	2200      	movs	r2, #0
   b51d6:	e9c0 2201 	strd	r2, r2, [r0, #4]
   b51da:	60c2      	str	r2, [r0, #12]
   b51dc:	7402      	strb	r2, [r0, #16]
}
   b51de:	4770      	bx	lr
   b51e0:	000baa50 	.word	0x000baa50

000b51e4 <_ZN10JsonBuffer8allocateEj>:
bool JsonBuffer::allocate(size_t len) {
   b51e4:	b538      	push	{r3, r4, r5, lr}
	if (!staticBuffers) {
   b51e6:	7c03      	ldrb	r3, [r0, #16]
bool JsonBuffer::allocate(size_t len) {
   b51e8:	4604      	mov	r4, r0
   b51ea:	460d      	mov	r5, r1
	if (!staticBuffers) {
   b51ec:	b10b      	cbz	r3, b51f2 <_ZN10JsonBuffer8allocateEj+0xe>
		return false;
   b51ee:	2000      	movs	r0, #0
}
   b51f0:	bd38      	pop	{r3, r4, r5, pc}
		if (buffer) {
   b51f2:	6840      	ldr	r0, [r0, #4]
   b51f4:	b138      	cbz	r0, b5206 <_ZN10JsonBuffer8allocateEj+0x22>
			newBuffer = (char *) realloc(buffer, len);
   b51f6:	f001 ff47 	bl	b7088 <realloc>
		if (newBuffer) {
   b51fa:	2800      	cmp	r0, #0
   b51fc:	d0f7      	beq.n	b51ee <_ZN10JsonBuffer8allocateEj+0xa>
			bufferLen = len;
   b51fe:	e9c4 0501 	strd	r0, r5, [r4, #4]
			return true;
   b5202:	2001      	movs	r0, #1
   b5204:	e7f4      	b.n	b51f0 <_ZN10JsonBuffer8allocateEj+0xc>
			newBuffer = (char *) malloc(len);
   b5206:	4608      	mov	r0, r1
   b5208:	f001 ff2e 	bl	b7068 <malloc>
   b520c:	e7f5      	b.n	b51fa <_ZN10JsonBuffer8allocateEj+0x16>

000b520e <_ZN10JsonBuffer7addDataEPKcj>:
bool JsonBuffer::addData(const char *data, size_t dataLen) {
   b520e:	b570      	push	{r4, r5, r6, lr}
	if (!buffer || (offset + dataLen) > bufferLen) {
   b5210:	68c3      	ldr	r3, [r0, #12]
bool JsonBuffer::addData(const char *data, size_t dataLen) {
   b5212:	460e      	mov	r6, r1
   b5214:	4615      	mov	r5, r2
	if (!buffer || (offset + dataLen) > bufferLen) {
   b5216:	18d1      	adds	r1, r2, r3
   b5218:	6842      	ldr	r2, [r0, #4]
bool JsonBuffer::addData(const char *data, size_t dataLen) {
   b521a:	4604      	mov	r4, r0
	if (!buffer || (offset + dataLen) > bufferLen) {
   b521c:	b172      	cbz	r2, b523c <_ZN10JsonBuffer7addDataEPKcj+0x2e>
   b521e:	6882      	ldr	r2, [r0, #8]
   b5220:	428a      	cmp	r2, r1
   b5222:	d30b      	bcc.n	b523c <_ZN10JsonBuffer7addDataEPKcj+0x2e>
	memcpy(&buffer[offset], data, dataLen);
   b5224:	6860      	ldr	r0, [r4, #4]
   b5226:	68e3      	ldr	r3, [r4, #12]
   b5228:	462a      	mov	r2, r5
   b522a:	4631      	mov	r1, r6
   b522c:	4418      	add	r0, r3
   b522e:	f004 fba7 	bl	b9980 <memcpy>
	offset += dataLen;
   b5232:	68e2      	ldr	r2, [r4, #12]
   b5234:	442a      	add	r2, r5
   b5236:	60e2      	str	r2, [r4, #12]
	return true;
   b5238:	2001      	movs	r0, #1
}
   b523a:	bd70      	pop	{r4, r5, r6, pc}
		if (!allocate(offset + dataLen)) {
   b523c:	4620      	mov	r0, r4
   b523e:	f7ff ffd1 	bl	b51e4 <_ZN10JsonBuffer8allocateEj>
   b5242:	2800      	cmp	r0, #0
   b5244:	d1ee      	bne.n	b5224 <_ZN10JsonBuffer7addDataEPKcj+0x16>
   b5246:	e7f8      	b.n	b523a <_ZN10JsonBuffer7addDataEPKcj+0x2c>

000b5248 <_ZN10JsonBuffer5clearEv>:
	if (buffer && bufferLen) {
   b5248:	6843      	ldr	r3, [r0, #4]
	offset = 0;
   b524a:	2100      	movs	r1, #0
   b524c:	60c1      	str	r1, [r0, #12]
	if (buffer && bufferLen) {
   b524e:	b123      	cbz	r3, b525a <_ZN10JsonBuffer5clearEv+0x12>
   b5250:	6882      	ldr	r2, [r0, #8]
   b5252:	b112      	cbz	r2, b525a <_ZN10JsonBuffer5clearEv+0x12>
		memset(buffer, 0, bufferLen);
   b5254:	4618      	mov	r0, r3
   b5256:	f004 bbbb 	b.w	b99d0 <memset>
}
   b525a:	4770      	bx	lr

000b525c <_ZN10JsonParserC1EPcjPN21JsonParserGeneratorRK9jsmntok_tEj>:
JsonParser::JsonParser(char *buffer, size_t bufferLen, JsonParserGeneratorRK::jsmntok_t *tokens, size_t maxTokens) :
   b525c:	b510      	push	{r4, lr}
JsonBuffer::JsonBuffer(char *buffer, size_t bufferLen)  : buffer(buffer), bufferLen(bufferLen), offset(0), staticBuffers(true) {
   b525e:	e9c0 1201 	strd	r1, r2, [r0, #4]
   b5262:	2200      	movs	r2, #0
   b5264:	60c2      	str	r2, [r0, #12]
   b5266:	2201      	movs	r2, #1
   b5268:	7402      	strb	r2, [r0, #16]
		JsonBuffer(buffer, bufferLen), tokens(tokens), maxTokens(maxTokens) {
   b526a:	6143      	str	r3, [r0, #20]
   b526c:	4a02      	ldr	r2, [pc, #8]	; (b5278 <_ZN10JsonParserC1EPcjPN21JsonParserGeneratorRK9jsmntok_tEj+0x1c>)
   b526e:	9b02      	ldr	r3, [sp, #8]
   b5270:	6002      	str	r2, [r0, #0]
   b5272:	61c3      	str	r3, [r0, #28]
}
   b5274:	bd10      	pop	{r4, pc}
   b5276:	bf00      	nop
   b5278:	000baa60 	.word	0x000baa60

000b527c <_ZNK10JsonParser13getOuterArrayEv>:
	for(const JsonParserGeneratorRK::jsmntok_t *token = tokens; token < tokensEnd; token++) {
   b527c:	e9d0 0305 	ldrd	r0, r3, [r0, #20]
   b5280:	4283      	cmp	r3, r0
   b5282:	d904      	bls.n	b528e <_ZNK10JsonParser13getOuterArrayEv+0x12>
		if (token->type == JsonParserGeneratorRK::JSMN_ARRAY) {
   b5284:	7802      	ldrb	r2, [r0, #0]
   b5286:	2a02      	cmp	r2, #2
   b5288:	d002      	beq.n	b5290 <_ZNK10JsonParser13getOuterArrayEv+0x14>
	for(const JsonParserGeneratorRK::jsmntok_t *token = tokens; token < tokensEnd; token++) {
   b528a:	3010      	adds	r0, #16
   b528c:	e7f8      	b.n	b5280 <_ZNK10JsonParser13getOuterArrayEv+0x4>
	return 0;
   b528e:	2000      	movs	r0, #0
}
   b5290:	4770      	bx	lr

000b5292 <_ZNK10JsonParser14getOuterObjectEv>:
	if (tokens < tokensEnd && tokens[0].type == JsonParserGeneratorRK::JSMN_OBJECT) {
   b5292:	e9d0 0305 	ldrd	r0, r3, [r0, #20]
   b5296:	4298      	cmp	r0, r3
   b5298:	d204      	bcs.n	b52a4 <_ZNK10JsonParser14getOuterObjectEv+0x12>
   b529a:	7803      	ldrb	r3, [r0, #0]
		return 0;
   b529c:	2b01      	cmp	r3, #1
   b529e:	bf18      	it	ne
   b52a0:	2000      	movne	r0, #0
   b52a2:	4770      	bx	lr
   b52a4:	2000      	movs	r0, #0
}
   b52a6:	4770      	bx	lr

000b52a8 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>:
bool JsonParser::skipObject(const JsonParserGeneratorRK::jsmntok_t *container, const JsonParserGeneratorRK::jsmntok_t *&obj) const {
   b52a8:	b570      	push	{r4, r5, r6, lr}
	int curObjectEnd = obj->end;
   b52aa:	6813      	ldr	r3, [r2, #0]
   b52ac:	689d      	ldr	r5, [r3, #8]
	while(++obj < tokensEnd && obj->end < container->end && obj->end <= curObjectEnd) {
   b52ae:	6813      	ldr	r3, [r2, #0]
   b52b0:	f103 0410 	add.w	r4, r3, #16
   b52b4:	6014      	str	r4, [r2, #0]
   b52b6:	6986      	ldr	r6, [r0, #24]
   b52b8:	42b4      	cmp	r4, r6
   b52ba:	d20a      	bcs.n	b52d2 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_+0x2a>
   b52bc:	699b      	ldr	r3, [r3, #24]
   b52be:	688c      	ldr	r4, [r1, #8]
   b52c0:	42a3      	cmp	r3, r4
   b52c2:	da01      	bge.n	b52c8 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_+0x20>
   b52c4:	42ab      	cmp	r3, r5
   b52c6:	ddf2      	ble.n	b52ae <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_+0x6>
	if (obj >= tokensEnd || obj->end > container->end) {
   b52c8:	42a3      	cmp	r3, r4
   b52ca:	bfcc      	ite	gt
   b52cc:	2000      	movgt	r0, #0
   b52ce:	2001      	movle	r0, #1
   b52d0:	e000      	b.n	b52d4 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_+0x2c>
		return false;
   b52d2:	2000      	movs	r0, #0
}
   b52d4:	bd70      	pop	{r4, r5, r6, pc}

000b52d6 <_ZNK10JsonParser15getTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj>:
const JsonParserGeneratorRK::jsmntok_t *JsonParser::getTokenByIndex(const JsonParserGeneratorRK::jsmntok_t *container, size_t desiredIndex) const {
   b52d6:	b573      	push	{r0, r1, r4, r5, r6, lr}
	const JsonParserGeneratorRK::jsmntok_t *token = container + 1;
   b52d8:	f101 0310 	add.w	r3, r1, #16
const JsonParserGeneratorRK::jsmntok_t *JsonParser::getTokenByIndex(const JsonParserGeneratorRK::jsmntok_t *container, size_t desiredIndex) const {
   b52dc:	4604      	mov	r4, r0
   b52de:	4616      	mov	r6, r2
	const JsonParserGeneratorRK::jsmntok_t *token = container + 1;
   b52e0:	9301      	str	r3, [sp, #4]
	size_t index = 0;
   b52e2:	2500      	movs	r5, #0
	while(token < tokensEnd && token->end < container->end) {
   b52e4:	9801      	ldr	r0, [sp, #4]
   b52e6:	69a3      	ldr	r3, [r4, #24]
   b52e8:	4283      	cmp	r3, r0
   b52ea:	d90b      	bls.n	b5304 <_ZNK10JsonParser15getTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj+0x2e>
   b52ec:	6882      	ldr	r2, [r0, #8]
   b52ee:	688b      	ldr	r3, [r1, #8]
   b52f0:	429a      	cmp	r2, r3
   b52f2:	da07      	bge.n	b5304 <_ZNK10JsonParser15getTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj+0x2e>
		if (desiredIndex == index) {
   b52f4:	42b5      	cmp	r5, r6
   b52f6:	d006      	beq.n	b5306 <_ZNK10JsonParser15getTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj+0x30>
		skipObject(container, token);
   b52f8:	aa01      	add	r2, sp, #4
   b52fa:	4620      	mov	r0, r4
		index++;
   b52fc:	3501      	adds	r5, #1
		skipObject(container, token);
   b52fe:	f7ff ffd3 	bl	b52a8 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>
	while(token < tokensEnd && token->end < container->end) {
   b5302:	e7ef      	b.n	b52e4 <_ZNK10JsonParser15getTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj+0xe>
	return 0;
   b5304:	2000      	movs	r0, #0
}
   b5306:	b002      	add	sp, #8
   b5308:	bd70      	pop	{r4, r5, r6, pc}

000b530a <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j>:
bool JsonParser::getKeyValueTokenByIndex(const JsonParserGeneratorRK::jsmntok_t *container, const JsonParserGeneratorRK::jsmntok_t *&key, const JsonParserGeneratorRK::jsmntok_t *&value, size_t desiredIndex) const {
   b530a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b530e:	9d08      	ldr	r5, [sp, #32]
   b5310:	4698      	mov	r8, r3
	const JsonParserGeneratorRK::jsmntok_t *token = container + 1;
   b5312:	f101 0310 	add.w	r3, r1, #16
bool JsonParser::getKeyValueTokenByIndex(const JsonParserGeneratorRK::jsmntok_t *container, const JsonParserGeneratorRK::jsmntok_t *&key, const JsonParserGeneratorRK::jsmntok_t *&value, size_t desiredIndex) const {
   b5316:	4604      	mov	r4, r0
   b5318:	4617      	mov	r7, r2
	const JsonParserGeneratorRK::jsmntok_t *token = container + 1;
   b531a:	9301      	str	r3, [sp, #4]
	size_t index = 0;
   b531c:	2600      	movs	r6, #0
	while(token < tokensEnd && token->end < container->end) {
   b531e:	9801      	ldr	r0, [sp, #4]
   b5320:	69a3      	ldr	r3, [r4, #24]
   b5322:	4283      	cmp	r3, r0
   b5324:	d91a      	bls.n	b535c <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x52>
   b5326:	6882      	ldr	r2, [r0, #8]
   b5328:	688b      	ldr	r3, [r1, #8]
   b532a:	429a      	cmp	r2, r3
   b532c:	da16      	bge.n	b535c <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x52>
		if (desiredIndex == index) {
   b532e:	42ae      	cmp	r6, r5
   b5330:	d10b      	bne.n	b534a <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x40>
			key = token;
   b5332:	6038      	str	r0, [r7, #0]
			if (skipObject(container, token)) {
   b5334:	aa01      	add	r2, sp, #4
   b5336:	4620      	mov	r0, r4
   b5338:	f7ff ffb6 	bl	b52a8 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>
   b533c:	b128      	cbz	r0, b534a <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x40>
				value = token;
   b533e:	9b01      	ldr	r3, [sp, #4]
   b5340:	f8c8 3000 	str.w	r3, [r8]
}
   b5344:	b002      	add	sp, #8
   b5346:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		skipObject(container, token);
   b534a:	aa01      	add	r2, sp, #4
   b534c:	4620      	mov	r0, r4
   b534e:	f7ff ffab 	bl	b52a8 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>
		skipObject(container, token);
   b5352:	4620      	mov	r0, r4
		index++;
   b5354:	3601      	adds	r6, #1
		skipObject(container, token);
   b5356:	f7ff ffa7 	bl	b52a8 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>
	while(token < tokensEnd && token->end < container->end) {
   b535a:	e7e0      	b.n	b531e <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x14>
	return false;
   b535c:	2000      	movs	r0, #0
   b535e:	e7f1      	b.n	b5344 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x3a>

000b5360 <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj>:
void JsonParser::copyTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, char *dst, size_t dstLen) const {
   b5360:	b5f0      	push	{r4, r5, r6, r7, lr}
	for(ii = 0; ii < (token->end - token->start) && ii < ((int)dstLen - 1); ii++) {
   b5362:	3b01      	subs	r3, #1
   b5364:	2400      	movs	r4, #0
   b5366:	e9d1 7601 	ldrd	r7, r6, [r1, #4]
   b536a:	1bf6      	subs	r6, r6, r7
   b536c:	42a6      	cmp	r6, r4
   b536e:	dd08      	ble.n	b5382 <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj+0x22>
   b5370:	42a3      	cmp	r3, r4
   b5372:	dd06      	ble.n	b5382 <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj+0x22>
		dst[ii] = buffer[token->start + ii];
   b5374:	6845      	ldr	r5, [r0, #4]
   b5376:	443d      	add	r5, r7
   b5378:	5d2d      	ldrb	r5, [r5, r4]
   b537a:	f802 5b01 	strb.w	r5, [r2], #1
	for(ii = 0; ii < (token->end - token->start) && ii < ((int)dstLen - 1); ii++) {
   b537e:	3401      	adds	r4, #1
   b5380:	e7f1      	b.n	b5366 <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj+0x6>
	dst[ii] = 0;
   b5382:	2300      	movs	r3, #0
   b5384:	7013      	strb	r3, [r2, #0]
}
   b5386:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b5388 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tERi>:
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, int &result) const {
   b5388:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b538a:	4614      	mov	r4, r2
	copyTokenValue(token, tmp, sizeof(tmp));
   b538c:	2310      	movs	r3, #16
   b538e:	466a      	mov	r2, sp
   b5390:	f7ff ffe6 	bl	b5360 <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj>
	if (sscanf(tmp, "%d", &result) == 1) {
   b5394:	4904      	ldr	r1, [pc, #16]	; (b53a8 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tERi+0x20>)
   b5396:	4622      	mov	r2, r4
   b5398:	4668      	mov	r0, sp
   b539a:	f001 fe7d 	bl	b7098 <sscanf>
}
   b539e:	1e43      	subs	r3, r0, #1
   b53a0:	4258      	negs	r0, r3
   b53a2:	4158      	adcs	r0, r3
   b53a4:	b004      	add	sp, #16
   b53a6:	bd10      	pop	{r4, pc}
   b53a8:	000ba8f1 	.word	0x000ba8f1

000b53ac <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tERm>:
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, unsigned long &result) const {
   b53ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b53ae:	4614      	mov	r4, r2
	copyTokenValue(token, tmp, sizeof(tmp));
   b53b0:	2310      	movs	r3, #16
   b53b2:	466a      	mov	r2, sp
   b53b4:	f7ff ffd4 	bl	b5360 <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj>
	if (sscanf(tmp, "%lu", &result) == 1) {
   b53b8:	4904      	ldr	r1, [pc, #16]	; (b53cc <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tERm+0x20>)
   b53ba:	4622      	mov	r2, r4
   b53bc:	4668      	mov	r0, sp
   b53be:	f001 fe6b 	bl	b7098 <sscanf>
}
   b53c2:	1e43      	subs	r3, r0, #1
   b53c4:	4258      	negs	r0, r3
   b53c6:	4158      	adcs	r0, r3
   b53c8:	b004      	add	sp, #16
   b53ca:	bd10      	pop	{r4, pc}
   b53cc:	000ba078 	.word	0x000ba078

000b53d0 <_ZN16JsonParserString6appendEc>:
void JsonParserString::append(char ch) {
   b53d0:	b510      	push	{r4, lr}
   b53d2:	4604      	mov	r4, r0
	if (str) {
   b53d4:	6800      	ldr	r0, [r0, #0]
void JsonParserString::append(char ch) {
   b53d6:	460b      	mov	r3, r1
	if (str) {
   b53d8:	b128      	cbz	r0, b53e6 <_ZN16JsonParserString6appendEc+0x16>
		str->concat(ch);
   b53da:	f003 fe8a 	bl	b90f2 <_ZN6String6concatEc>
		length++;
   b53de:	68e3      	ldr	r3, [r4, #12]
   b53e0:	3301      	adds	r3, #1
   b53e2:	60e3      	str	r3, [r4, #12]
}
   b53e4:	bd10      	pop	{r4, pc}
		if (buf && length < (bufLen - 1)) {
   b53e6:	6860      	ldr	r0, [r4, #4]
   b53e8:	2800      	cmp	r0, #0
   b53ea:	d0f8      	beq.n	b53de <_ZN16JsonParserString6appendEc+0xe>
   b53ec:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
   b53f0:	3a01      	subs	r2, #1
   b53f2:	428a      	cmp	r2, r1
			buf[length] = ch;
   b53f4:	bf88      	it	hi
   b53f6:	5443      	strbhi	r3, [r0, r1]
   b53f8:	e7f1      	b.n	b53de <_ZN16JsonParserString6appendEc+0xe>

000b53fa <_ZN10JsonParser10appendUtf8EtR16JsonParserString>:
void JsonParser::appendUtf8(uint16_t unicode, JsonParserString &str) {
   b53fa:	4603      	mov	r3, r0
	if (unicode <= 0x007f) {
   b53fc:	2b7f      	cmp	r3, #127	; 0x7f
void JsonParser::appendUtf8(uint16_t unicode, JsonParserString &str) {
   b53fe:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b5400:	4608      	mov	r0, r1
		str.append((char)unicode);
   b5402:	b2d9      	uxtb	r1, r3
	if (unicode <= 0x007f) {
   b5404:	d804      	bhi.n	b5410 <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0x16>
}
   b5406:	b003      	add	sp, #12
   b5408:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		str.append((char)value);
   b540c:	f7ff bfe0 	b.w	b53d0 <_ZN16JsonParserString6appendEc>
		value = (0b10000000 | (unicode & 0b111111));
   b5410:	f001 013f 	and.w	r1, r1, #63	; 0x3f
	if (unicode <= 0x7ff) {
   b5414:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
		value = (0b11000000 | ((unicode >> 6) & 0b11111));
   b5418:	f3c3 1587 	ubfx	r5, r3, #6, #8
		value = (0b10000000 | (unicode & 0b111111));
   b541c:	f041 0480 	orr.w	r4, r1, #128	; 0x80
	if (unicode <= 0x7ff) {
   b5420:	d207      	bcs.n	b5432 <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0x38>
		str.append((char)value);
   b5422:	f045 01c0 	orr.w	r1, r5, #192	; 0xc0
   b5426:	9001      	str	r0, [sp, #4]
		str.append((char)value);
   b5428:	f7ff ffd2 	bl	b53d0 <_ZN16JsonParserString6appendEc>
		str.append((char)value);
   b542c:	9801      	ldr	r0, [sp, #4]
   b542e:	4621      	mov	r1, r4
   b5430:	e7e9      	b.n	b5406 <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0xc>
		value = 0b11100000 | ((unicode >> 12) & 0b1111);
   b5432:	0b1b      	lsrs	r3, r3, #12
		str.append((char)value);
   b5434:	f043 01e0 	orr.w	r1, r3, #224	; 0xe0
   b5438:	9001      	str	r0, [sp, #4]
   b543a:	f7ff ffc9 	bl	b53d0 <_ZN16JsonParserString6appendEc>
		value = 0b10000000 | ((unicode >> 6) & 0b111111);
   b543e:	f005 013f 	and.w	r1, r5, #63	; 0x3f
		str.append((char)value);
   b5442:	9801      	ldr	r0, [sp, #4]
   b5444:	f041 0180 	orr.w	r1, r1, #128	; 0x80
   b5448:	e7ee      	b.n	b5428 <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0x2e>
	...

000b544c <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString>:
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, JsonParserString &str) const {
   b544c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
	bool escape = false;
   b5450:	2400      	movs	r4, #0
	for(int ii = token->start; ii < token->end; ii++) {
   b5452:	684e      	ldr	r6, [r1, #4]
					if (sscanf(tmp, "%04x", &unicode) == 1) {
   b5454:	f8df a0cc 	ldr.w	sl, [pc, #204]	; b5524 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xd8>
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, JsonParserString &str) const {
   b5458:	4680      	mov	r8, r0
   b545a:	460f      	mov	r7, r1
   b545c:	4615      	mov	r5, r2
			escape = false;
   b545e:	46a1      	mov	r9, r4
	for(int ii = token->start; ii < token->end; ii++) {
   b5460:	68b8      	ldr	r0, [r7, #8]
   b5462:	42b0      	cmp	r0, r6
   b5464:	dd5a      	ble.n	b551c <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xd0>
			switch(buffer[ii]) {
   b5466:	f8d8 3004 	ldr.w	r3, [r8, #4]
   b546a:	5d99      	ldrb	r1, [r3, r6]
   b546c:	199a      	adds	r2, r3, r6
		if (escape) {
   b546e:	2c00      	cmp	r4, #0
   b5470:	d04b      	beq.n	b550a <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xbe>
			switch(buffer[ii]) {
   b5472:	2975      	cmp	r1, #117	; 0x75
   b5474:	d805      	bhi.n	b5482 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
   b5476:	296d      	cmp	r1, #109	; 0x6d
   b5478:	d807      	bhi.n	b548a <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x3e>
   b547a:	2962      	cmp	r1, #98	; 0x62
   b547c:	d01e      	beq.n	b54bc <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x70>
   b547e:	2966      	cmp	r1, #102	; 0x66
   b5480:	d01e      	beq.n	b54c0 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x74>
				str.append(buffer[ii]);
   b5482:	4628      	mov	r0, r5
   b5484:	f7ff ffa4 	bl	b53d0 <_ZN16JsonParserString6appendEc>
				break;
   b5488:	e03d      	b.n	b5506 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xba>
   b548a:	f1a1 046e 	sub.w	r4, r1, #110	; 0x6e
   b548e:	2c07      	cmp	r4, #7
   b5490:	d8f7      	bhi.n	b5482 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
   b5492:	f20f 0c08 	addw	ip, pc, #8
   b5496:	f85c f024 	ldr.w	pc, [ip, r4, lsl #2]
   b549a:	bf00      	nop
   b549c:	000b54c5 	.word	0x000b54c5
   b54a0:	000b5483 	.word	0x000b5483
   b54a4:	000b5483 	.word	0x000b5483
   b54a8:	000b5483 	.word	0x000b5483
   b54ac:	000b54c9 	.word	0x000b54c9
   b54b0:	000b5483 	.word	0x000b5483
   b54b4:	000b54cd 	.word	0x000b54cd
   b54b8:	000b54d1 	.word	0x000b54d1
				str.append('\b');
   b54bc:	2108      	movs	r1, #8
   b54be:	e7e0      	b.n	b5482 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				str.append('\f');
   b54c0:	210c      	movs	r1, #12
   b54c2:	e7de      	b.n	b5482 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				str.append('\n');
   b54c4:	210a      	movs	r1, #10
   b54c6:	e7dc      	b.n	b5482 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				str.append('\r');
   b54c8:	210d      	movs	r1, #13
   b54ca:	e7da      	b.n	b5482 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				str.append('\t');
   b54cc:	2109      	movs	r1, #9
   b54ce:	e7d8      	b.n	b5482 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				if ((ii + 4) < token->end) {
   b54d0:	1d31      	adds	r1, r6, #4
   b54d2:	4288      	cmp	r0, r1
   b54d4:	dd17      	ble.n	b5506 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xba>
   b54d6:	a902      	add	r1, sp, #8
   b54d8:	3304      	adds	r3, #4
   b54da:	4433      	add	r3, r6
   b54dc:	4608      	mov	r0, r1
						tmp[jj] = buffer[ii + jj + 1];
   b54de:	f812 4f01 	ldrb.w	r4, [r2, #1]!
   b54e2:	f801 4b01 	strb.w	r4, [r1], #1
					for(size_t jj = 0; jj < 4; jj++) {
   b54e6:	429a      	cmp	r2, r3
   b54e8:	d1f9      	bne.n	b54de <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x92>
					if (sscanf(tmp, "%04x", &unicode) == 1) {
   b54ea:	aa01      	add	r2, sp, #4
   b54ec:	4651      	mov	r1, sl
					tmp[4] = 0;
   b54ee:	f88d 900c 	strb.w	r9, [sp, #12]
					if (sscanf(tmp, "%04x", &unicode) == 1) {
   b54f2:	f001 fdd1 	bl	b7098 <sscanf>
   b54f6:	2801      	cmp	r0, #1
   b54f8:	d105      	bne.n	b5506 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xba>
						appendUtf8((uint16_t)unicode, str);
   b54fa:	f8bd 0004 	ldrh.w	r0, [sp, #4]
   b54fe:	4629      	mov	r1, r5
   b5500:	f7ff ff7b 	bl	b53fa <_ZN10JsonParser10appendUtf8EtR16JsonParserString>
						ii += 5; // also increments in loop
   b5504:	3605      	adds	r6, #5
			escape = false;
   b5506:	2400      	movs	r4, #0
   b5508:	e004      	b.n	b5514 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xc8>
		if (buffer[ii] == '\\') {
   b550a:	295c      	cmp	r1, #92	; 0x5c
   b550c:	d004      	beq.n	b5518 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xcc>
			str.append(buffer[ii]);
   b550e:	4628      	mov	r0, r5
   b5510:	f7ff ff5e 	bl	b53d0 <_ZN16JsonParserString6appendEc>
	for(int ii = token->start; ii < token->end; ii++) {
   b5514:	3601      	adds	r6, #1
   b5516:	e7a3      	b.n	b5460 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x14>
			escape = true;
   b5518:	2401      	movs	r4, #1
   b551a:	e7fb      	b.n	b5514 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xc8>
}
   b551c:	2001      	movs	r0, #1
   b551e:	b004      	add	sp, #16
   b5520:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b5524:	000badd0 	.word	0x000badd0

000b5528 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER6String>:
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, String &result) const {
   b5528:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b552a:	460c      	mov	r4, r1
   b552c:	4606      	mov	r6, r0
	result = "";
   b552e:	490c      	ldr	r1, [pc, #48]	; (b5560 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER6String+0x38>)
   b5530:	4610      	mov	r0, r2
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, String &result) const {
   b5532:	4615      	mov	r5, r2
	result = "";
   b5534:	f003 fdb4 	bl	b90a0 <_ZN6StringaSEPKc>
	result.reserve(token->end - token->start + 1);
   b5538:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
   b553c:	1ac9      	subs	r1, r1, r3
   b553e:	3101      	adds	r1, #1
   b5540:	4628      	mov	r0, r5
   b5542:	f003 fd29 	bl	b8f98 <_ZN6String7reserveEj>
JsonParserString::JsonParserString(String *str) : str(str), buf(0), bufLen(0), length(0){
   b5546:	2300      	movs	r3, #0
	return getTokenValue(token, strWrapper);
   b5548:	466a      	mov	r2, sp
   b554a:	4621      	mov	r1, r4
   b554c:	4630      	mov	r0, r6
JsonParserString::JsonParserString(String *str) : str(str), buf(0), bufLen(0), length(0){
   b554e:	e9cd 3301 	strd	r3, r3, [sp, #4]
   b5552:	9500      	str	r5, [sp, #0]
   b5554:	9303      	str	r3, [sp, #12]
	return getTokenValue(token, strWrapper);
   b5556:	f7ff ff79 	bl	b544c <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString>
}
   b555a:	b004      	add	sp, #16
   b555c:	bd70      	pop	{r4, r5, r6, pc}
   b555e:	bf00      	nop
   b5560:	000bae2f 	.word	0x000bae2f

000b5564 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>:
bool JsonParser::getValueTokenByKey(const JsonParserGeneratorRK::jsmntok_t *container, const char *name, const JsonParserGeneratorRK::jsmntok_t *&value) const {
   b5564:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b5568:	b089      	sub	sp, #36	; 0x24
   b556a:	4605      	mov	r5, r0
   b556c:	4688      	mov	r8, r1
	String keyName;
   b556e:	a804      	add	r0, sp, #16
   b5570:	4912      	ldr	r1, [pc, #72]	; (b55bc <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x58>)
bool JsonParser::getValueTokenByKey(const JsonParserGeneratorRK::jsmntok_t *container, const char *name, const JsonParserGeneratorRK::jsmntok_t *&value) const {
   b5572:	4616      	mov	r6, r2
   b5574:	4699      	mov	r9, r3
	String keyName;
   b5576:	f003 fd3c 	bl	b8ff2 <_ZN6StringC1EPK19__FlashStringHelper>
	for(size_t ii = 0; getKeyValueTokenByIndex(container, key, value, ii); ii++) {
   b557a:	2700      	movs	r7, #0
   b557c:	9700      	str	r7, [sp, #0]
   b557e:	464b      	mov	r3, r9
   b5580:	aa03      	add	r2, sp, #12
   b5582:	4641      	mov	r1, r8
   b5584:	4628      	mov	r0, r5
   b5586:	f7ff fec0 	bl	b530a <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j>
   b558a:	4604      	mov	r4, r0
   b558c:	b170      	cbz	r0, b55ac <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x48>
		if (getTokenValue(key, keyName) && keyName == name) {
   b558e:	9903      	ldr	r1, [sp, #12]
   b5590:	aa04      	add	r2, sp, #16
   b5592:	4628      	mov	r0, r5
   b5594:	f7ff ffc8 	bl	b5528 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER6String>
   b5598:	4604      	mov	r4, r0
   b559a:	b908      	cbnz	r0, b55a0 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x3c>
	for(size_t ii = 0; getKeyValueTokenByIndex(container, key, value, ii); ii++) {
   b559c:	3701      	adds	r7, #1
   b559e:	e7ed      	b.n	b557c <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x18>
    unsigned char operator == (const char *cstr) const {return equals(cstr);}
   b55a0:	4631      	mov	r1, r6
   b55a2:	a804      	add	r0, sp, #16
   b55a4:	f003 fdb2 	bl	b910c <_ZNK6String6equalsEPKc>
		if (getTokenValue(key, keyName) && keyName == name) {
   b55a8:	2800      	cmp	r0, #0
   b55aa:	d0f7      	beq.n	b559c <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x38>
	String keyName;
   b55ac:	a804      	add	r0, sp, #16
   b55ae:	f003 fcd5 	bl	b8f5c <_ZN6StringD1Ev>
}
   b55b2:	4620      	mov	r0, r4
   b55b4:	b009      	add	sp, #36	; 0x24
   b55b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b55ba:	bf00      	nop
   b55bc:	000bae2f 	.word	0x000bae2f

000b55c0 <_ZN10JsonWriter4initEv>:
	offset = 0;
   b55c0:	2300      	movs	r3, #0
	context[contextIndex].isFirst = true;
   b55c2:	2201      	movs	r2, #1
	offset = 0;
   b55c4:	60c3      	str	r3, [r0, #12]
	contextIndex = 0;
   b55c6:	6143      	str	r3, [r0, #20]
	context[contextIndex].isFirst = true;
   b55c8:	8302      	strh	r2, [r0, #24]
	truncated = false;
   b55ca:	f880 302a 	strb.w	r3, [r0, #42]	; 0x2a
}
   b55ce:	4770      	bx	lr

000b55d0 <_ZN10JsonWriterC1Ev>:
JsonWriter::JsonWriter() : JsonBuffer(), floatPlaces(-1) {
   b55d0:	b508      	push	{r3, lr}
   b55d2:	4603      	mov	r3, r0
   b55d4:	f7ff fdfc 	bl	b51d0 <_ZN10JsonBufferC1Ev>
   b55d8:	4a04      	ldr	r2, [pc, #16]	; (b55ec <_ZN10JsonWriterC1Ev+0x1c>)
   b55da:	601a      	str	r2, [r3, #0]
   b55dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	init();
   b55e0:	4618      	mov	r0, r3
JsonWriter::JsonWriter() : JsonBuffer(), floatPlaces(-1) {
   b55e2:	62da      	str	r2, [r3, #44]	; 0x2c
	init();
   b55e4:	f7ff ffec 	bl	b55c0 <_ZN10JsonWriter4initEv>
}
   b55e8:	bd08      	pop	{r3, pc}
   b55ea:	bf00      	nop
   b55ec:	000baa70 	.word	0x000baa70

000b55f0 <_ZN10JsonWriter10insertCharEc>:
	if (offset < bufferLen) {
   b55f0:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
void JsonWriter::insertChar(char ch) {
   b55f4:	b510      	push	{r4, lr}
	if (offset < bufferLen) {
   b55f6:	4293      	cmp	r3, r2
		buffer[offset++] = ch;
   b55f8:	bf3f      	itttt	cc
   b55fa:	6842      	ldrcc	r2, [r0, #4]
   b55fc:	1c5c      	addcc	r4, r3, #1
   b55fe:	60c4      	strcc	r4, [r0, #12]
   b5600:	54d1      	strbcc	r1, [r2, r3]
		truncated = true;
   b5602:	bf24      	itt	cs
   b5604:	2301      	movcs	r3, #1
   b5606:	f880 302a 	strbcs.w	r3, [r0, #42]	; 0x2a
}
   b560a:	bd10      	pop	{r4, pc}

000b560c <_ZN10JsonWriter19finishObjectOrArrayEv>:
void JsonWriter::finishObjectOrArray() {
   b560c:	b510      	push	{r4, lr}
	if (contextIndex > 0) {
   b560e:	6943      	ldr	r3, [r0, #20]
void JsonWriter::finishObjectOrArray() {
   b5610:	4604      	mov	r4, r0
	if (contextIndex > 0) {
   b5612:	b143      	cbz	r3, b5626 <_ZN10JsonWriter19finishObjectOrArrayEv+0x1a>
		if (context[contextIndex].terminator != 0) {
   b5614:	eb00 0343 	add.w	r3, r0, r3, lsl #1
   b5618:	7e59      	ldrb	r1, [r3, #25]
   b561a:	b109      	cbz	r1, b5620 <_ZN10JsonWriter19finishObjectOrArrayEv+0x14>
			insertChar(context[contextIndex].terminator);
   b561c:	f7ff ffe8 	bl	b55f0 <_ZN10JsonWriter10insertCharEc>
		contextIndex--;
   b5620:	6963      	ldr	r3, [r4, #20]
   b5622:	3b01      	subs	r3, #1
   b5624:	6163      	str	r3, [r4, #20]
	if (offset < bufferLen) {
   b5626:	e9d4 1002 	ldrd	r1, r0, [r4, #8]
		buffer[offset] = 0;
   b562a:	6863      	ldr	r3, [r4, #4]
	if (offset < bufferLen) {
   b562c:	4288      	cmp	r0, r1
   b562e:	f04f 0200 	mov.w	r2, #0
		buffer[bufferLen - 1] = 0;
   b5632:	bf2a      	itet	cs
   b5634:	185b      	addcs	r3, r3, r1
		buffer[offset] = 0;
   b5636:	541a      	strbcc	r2, [r3, r0]
		buffer[bufferLen - 1] = 0;
   b5638:	f803 2c01 	strbcs.w	r2, [r3, #-1]
}
   b563c:	bd10      	pop	{r4, pc}

000b563e <_ZN10JsonWriter14insertvsprintfEPKcSt9__va_list>:
void JsonWriter::insertvsprintf(const char *fmt, va_list ap) {
   b563e:	b570      	push	{r4, r5, r6, lr}
   b5640:	4604      	mov	r4, r0
	size_t spaceAvailable = bufferLen - offset;
   b5642:	e9d0 5002 	ldrd	r5, r0, [r0, #8]
	size_t count = vsnprintf(&buffer[offset], spaceAvailable, fmt, ap);
   b5646:	6866      	ldr	r6, [r4, #4]
	size_t spaceAvailable = bufferLen - offset;
   b5648:	1a2d      	subs	r5, r5, r0
void JsonWriter::insertvsprintf(const char *fmt, va_list ap) {
   b564a:	4613      	mov	r3, r2
	size_t count = vsnprintf(&buffer[offset], spaceAvailable, fmt, ap);
   b564c:	4430      	add	r0, r6
   b564e:	460a      	mov	r2, r1
   b5650:	4629      	mov	r1, r5
   b5652:	f001 fd39 	bl	b70c8 <vsnprintf>
	if (count <= spaceAvailable) {
   b5656:	4285      	cmp	r5, r0
		offset += count;
   b5658:	bf2d      	iteet	cs
   b565a:	68e3      	ldrcs	r3, [r4, #12]
		offset = bufferLen;
   b565c:	68a3      	ldrcc	r3, [r4, #8]
   b565e:	60e3      	strcc	r3, [r4, #12]
		offset += count;
   b5660:	18c0      	addcs	r0, r0, r3
		truncated = true;
   b5662:	bf36      	itet	cc
   b5664:	2301      	movcc	r3, #1
		offset += count;
   b5666:	60e0      	strcs	r0, [r4, #12]
		truncated = true;
   b5668:	f884 302a 	strbcc.w	r3, [r4, #42]	; 0x2a
}
   b566c:	bd70      	pop	{r4, r5, r6, pc}

000b566e <_ZN10JsonWriter13insertsprintfEPKcz>:
void JsonWriter::insertsprintf(const char *fmt, ...) {
   b566e:	b40e      	push	{r1, r2, r3}
   b5670:	b503      	push	{r0, r1, lr}
   b5672:	aa03      	add	r2, sp, #12
   b5674:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(ap, fmt);
   b5678:	9201      	str	r2, [sp, #4]
	insertvsprintf(fmt, ap);
   b567a:	f7ff ffe0 	bl	b563e <_ZN10JsonWriter14insertvsprintfEPKcSt9__va_list>
}
   b567e:	b002      	add	sp, #8
   b5680:	f85d eb04 	ldr.w	lr, [sp], #4
   b5684:	b003      	add	sp, #12
   b5686:	4770      	bx	lr

000b5688 <_ZN10JsonWriter12insertStringEPKcb>:
void JsonWriter::insertString(const char *s, bool quoted) {
   b5688:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b568c:	4604      	mov	r4, r0
   b568e:	460e      	mov	r6, r1
	if (quoted) {
   b5690:	4617      	mov	r7, r2
   b5692:	b112      	cbz	r2, b569a <_ZN10JsonWriter12insertStringEPKcb+0x12>
		insertChar('"');
   b5694:	2122      	movs	r1, #34	; 0x22
   b5696:	f7ff ffab 	bl	b55f0 <_ZN10JsonWriter10insertCharEc>
				insertsprintf("\\u%04X", utf16);
   b569a:	f8df 810c 	ldr.w	r8, [pc, #268]	; b57a8 <_ZN10JsonWriter12insertStringEPKcb+0x120>
void JsonWriter::insertString(const char *s, bool quoted) {
   b569e:	2500      	movs	r5, #0
	for(size_t ii = 0; s[ii] && offset < bufferLen; ii++) {
   b56a0:	5d71      	ldrb	r1, [r6, r5]
   b56a2:	eb06 0905 	add.w	r9, r6, r5
   b56a6:	2900      	cmp	r1, #0
   b56a8:	d074      	beq.n	b5794 <_ZN10JsonWriter12insertStringEPKcb+0x10c>
   b56aa:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   b56ae:	429a      	cmp	r2, r3
   b56b0:	d270      	bcs.n	b5794 <_ZN10JsonWriter12insertStringEPKcb+0x10c>
		if (s[ii] & 0x80) {
   b56b2:	060b      	lsls	r3, r1, #24
   b56b4:	d534      	bpl.n	b5720 <_ZN10JsonWriter12insertStringEPKcb+0x98>
			if (((s[ii] & 0b11110000) == 0b11100000) && ((s[ii+1] & 0b11000000) == 0b10000000) && ((s[ii+2] & 0b11000000) == 0b10000000)) {
   b56b6:	f001 03f0 	and.w	r3, r1, #240	; 0xf0
   b56ba:	2be0      	cmp	r3, #224	; 0xe0
   b56bc:	f105 0901 	add.w	r9, r5, #1
   b56c0:	d11d      	bne.n	b56fe <_ZN10JsonWriter12insertStringEPKcb+0x76>
   b56c2:	f816 2009 	ldrb.w	r2, [r6, r9]
   b56c6:	f002 03c0 	and.w	r3, r2, #192	; 0xc0
   b56ca:	2b80      	cmp	r3, #128	; 0x80
   b56cc:	d139      	bne.n	b5742 <_ZN10JsonWriter12insertStringEPKcb+0xba>
   b56ce:	f105 0902 	add.w	r9, r5, #2
   b56d2:	f816 3009 	ldrb.w	r3, [r6, r9]
   b56d6:	f003 00c0 	and.w	r0, r3, #192	; 0xc0
   b56da:	2880      	cmp	r0, #128	; 0x80
   b56dc:	d131      	bne.n	b5742 <_ZN10JsonWriter12insertStringEPKcb+0xba>
				uint16_t utf16 = ((s[ii] & 0b1111) << 12) | ((s[ii+1] & 0b111111) << 6) | (s[ii+2] & 0b111111);
   b56de:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   b56e2:	0192      	lsls	r2, r2, #6
   b56e4:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
   b56e8:	f402 627c 	and.w	r2, r2, #4032	; 0xfc0
   b56ec:	431a      	orrs	r2, r3
				insertsprintf("\\u%04X", utf16);
   b56ee:	b292      	uxth	r2, r2
				insertsprintf("\\u%04X", utf16);
   b56f0:	4641      	mov	r1, r8
   b56f2:	4620      	mov	r0, r4
   b56f4:	f7ff ffbb 	bl	b566e <_ZN10JsonWriter13insertsprintfEPKcz>
				ii++; // plus one more in loop increment
   b56f8:	464d      	mov	r5, r9
	for(size_t ii = 0; s[ii] && offset < bufferLen; ii++) {
   b56fa:	3501      	adds	r5, #1
   b56fc:	e7d0      	b.n	b56a0 <_ZN10JsonWriter12insertStringEPKcb+0x18>
			if (((s[ii] & 0b11100000) == 0b11000000) && ((s[ii+1] & 0b11000000) == 0b10000000)) {
   b56fe:	f001 03e0 	and.w	r3, r1, #224	; 0xe0
   b5702:	2bc0      	cmp	r3, #192	; 0xc0
   b5704:	d11d      	bne.n	b5742 <_ZN10JsonWriter12insertStringEPKcb+0xba>
   b5706:	f816 3009 	ldrb.w	r3, [r6, r9]
   b570a:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
   b570e:	2a80      	cmp	r2, #128	; 0x80
   b5710:	d117      	bne.n	b5742 <_ZN10JsonWriter12insertStringEPKcb+0xba>
				uint16_t utf16 = ((s[ii] & 0b11111) << 6) | (s[ii+1] & 0b111111);
   b5712:	0189      	lsls	r1, r1, #6
   b5714:	f401 62f8 	and.w	r2, r1, #1984	; 0x7c0
   b5718:	f003 033f 	and.w	r3, r3, #63	; 0x3f
				insertsprintf("\\u%04X", utf16);
   b571c:	431a      	orrs	r2, r3
   b571e:	e7e7      	b.n	b56f0 <_ZN10JsonWriter12insertStringEPKcb+0x68>
			switch(s[ii]) {
   b5720:	290d      	cmp	r1, #13
   b5722:	d80a      	bhi.n	b573a <_ZN10JsonWriter12insertStringEPKcb+0xb2>
   b5724:	2907      	cmp	r1, #7
   b5726:	d90c      	bls.n	b5742 <_ZN10JsonWriter12insertStringEPKcb+0xba>
   b5728:	f1a1 0308 	sub.w	r3, r1, #8
   b572c:	2b05      	cmp	r3, #5
   b572e:	d808      	bhi.n	b5742 <_ZN10JsonWriter12insertStringEPKcb+0xba>
   b5730:	e8df f003 	tbb	[pc, r3]
   b5734:	07172309 	.word	0x07172309
   b5738:	1d11      	.short	0x1d11
   b573a:	2922      	cmp	r1, #34	; 0x22
   b573c:	d023      	beq.n	b5786 <_ZN10JsonWriter12insertStringEPKcb+0xfe>
   b573e:	295c      	cmp	r1, #92	; 0x5c
   b5740:	d021      	beq.n	b5786 <_ZN10JsonWriter12insertStringEPKcb+0xfe>
				insertChar(s[ii]);
   b5742:	4620      	mov	r0, r4
   b5744:	e004      	b.n	b5750 <_ZN10JsonWriter12insertStringEPKcb+0xc8>
				insertChar('\\');
   b5746:	215c      	movs	r1, #92	; 0x5c
   b5748:	4620      	mov	r0, r4
   b574a:	f7ff ff51 	bl	b55f0 <_ZN10JsonWriter10insertCharEc>
				insertChar('b');
   b574e:	2162      	movs	r1, #98	; 0x62
				insertChar(s[ii]);
   b5750:	f7ff ff4e 	bl	b55f0 <_ZN10JsonWriter10insertCharEc>
				break;
   b5754:	e7d1      	b.n	b56fa <_ZN10JsonWriter12insertStringEPKcb+0x72>
				insertChar('\\');
   b5756:	215c      	movs	r1, #92	; 0x5c
   b5758:	4620      	mov	r0, r4
   b575a:	f7ff ff49 	bl	b55f0 <_ZN10JsonWriter10insertCharEc>
				insertChar('f');
   b575e:	2166      	movs	r1, #102	; 0x66
   b5760:	e7f6      	b.n	b5750 <_ZN10JsonWriter12insertStringEPKcb+0xc8>
				insertChar('\\');
   b5762:	215c      	movs	r1, #92	; 0x5c
   b5764:	4620      	mov	r0, r4
   b5766:	f7ff ff43 	bl	b55f0 <_ZN10JsonWriter10insertCharEc>
				insertChar('n');
   b576a:	216e      	movs	r1, #110	; 0x6e
   b576c:	e7f0      	b.n	b5750 <_ZN10JsonWriter12insertStringEPKcb+0xc8>
				insertChar('\\');
   b576e:	215c      	movs	r1, #92	; 0x5c
   b5770:	4620      	mov	r0, r4
   b5772:	f7ff ff3d 	bl	b55f0 <_ZN10JsonWriter10insertCharEc>
				insertChar('r');
   b5776:	2172      	movs	r1, #114	; 0x72
   b5778:	e7ea      	b.n	b5750 <_ZN10JsonWriter12insertStringEPKcb+0xc8>
				insertChar('\\');
   b577a:	215c      	movs	r1, #92	; 0x5c
   b577c:	4620      	mov	r0, r4
   b577e:	f7ff ff37 	bl	b55f0 <_ZN10JsonWriter10insertCharEc>
				insertChar('t');
   b5782:	2174      	movs	r1, #116	; 0x74
   b5784:	e7e4      	b.n	b5750 <_ZN10JsonWriter12insertStringEPKcb+0xc8>
				insertChar('\\');
   b5786:	215c      	movs	r1, #92	; 0x5c
   b5788:	4620      	mov	r0, r4
   b578a:	f7ff ff31 	bl	b55f0 <_ZN10JsonWriter10insertCharEc>
				insertChar(s[ii]);
   b578e:	f899 1000 	ldrb.w	r1, [r9]
   b5792:	e7dd      	b.n	b5750 <_ZN10JsonWriter12insertStringEPKcb+0xc8>
	if (quoted) {
   b5794:	b12f      	cbz	r7, b57a2 <_ZN10JsonWriter12insertStringEPKcb+0x11a>
		insertChar('"');
   b5796:	4620      	mov	r0, r4
   b5798:	2122      	movs	r1, #34	; 0x22
}
   b579a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		insertChar('"');
   b579e:	f7ff bf27 	b.w	b55f0 <_ZN10JsonWriter10insertCharEc>
}
   b57a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b57a6:	bf00      	nop
   b57a8:	000baa40 	.word	0x000baa40

000b57ac <_ZN10JsonWriter20insertCheckSeparatorEv>:
	if (context[contextIndex].isFirst) {
   b57ac:	6942      	ldr	r2, [r0, #20]
   b57ae:	eb00 0342 	add.w	r3, r0, r2, lsl #1
   b57b2:	7e1a      	ldrb	r2, [r3, #24]
   b57b4:	b112      	cbz	r2, b57bc <_ZN10JsonWriter20insertCheckSeparatorEv+0x10>
		context[contextIndex].isFirst = false;
   b57b6:	2200      	movs	r2, #0
   b57b8:	761a      	strb	r2, [r3, #24]
}
   b57ba:	4770      	bx	lr
		insertChar(',');
   b57bc:	212c      	movs	r1, #44	; 0x2c
   b57be:	f7ff bf17 	b.w	b55f0 <_ZN10JsonWriter10insertCharEc>

000b57c2 <_ZN10JsonWriter18startObjectOrArrayEcc>:
bool JsonWriter::startObjectOrArray(char startChar, char endChar) {
   b57c2:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if ((contextIndex + 1) >= MAX_NESTED_CONTEXT) {
   b57c4:	6943      	ldr	r3, [r0, #20]
bool JsonWriter::startObjectOrArray(char startChar, char endChar) {
   b57c6:	9101      	str	r1, [sp, #4]
	if ((contextIndex + 1) >= MAX_NESTED_CONTEXT) {
   b57c8:	3301      	adds	r3, #1
   b57ca:	2b08      	cmp	r3, #8
bool JsonWriter::startObjectOrArray(char startChar, char endChar) {
   b57cc:	4616      	mov	r6, r2
	if ((contextIndex + 1) >= MAX_NESTED_CONTEXT) {
   b57ce:	d80f      	bhi.n	b57f0 <_ZN10JsonWriter18startObjectOrArrayEcc+0x2e>
	insertCheckSeparator();
   b57d0:	f7ff ffec 	bl	b57ac <_ZN10JsonWriter20insertCheckSeparatorEv>
	contextIndex++;
   b57d4:	6943      	ldr	r3, [r0, #20]
	insertChar(startChar);
   b57d6:	9901      	ldr	r1, [sp, #4]
   b57d8:	eb00 0443 	add.w	r4, r0, r3, lsl #1
	contextIndex++;
   b57dc:	1c5a      	adds	r2, r3, #1
	context[contextIndex].isFirst = true;
   b57de:	2501      	movs	r5, #1
	contextIndex++;
   b57e0:	6142      	str	r2, [r0, #20]
	context[contextIndex].isFirst = true;
   b57e2:	76a5      	strb	r5, [r4, #26]
	context[contextIndex].terminator = endChar;
   b57e4:	76e6      	strb	r6, [r4, #27]
	insertChar(startChar);
   b57e6:	f7ff ff03 	bl	b55f0 <_ZN10JsonWriter10insertCharEc>
   b57ea:	4628      	mov	r0, r5
}
   b57ec:	b002      	add	sp, #8
   b57ee:	bd70      	pop	{r4, r5, r6, pc}
		return false;
   b57f0:	2000      	movs	r0, #0
   b57f2:	e7fb      	b.n	b57ec <_ZN10JsonWriter18startObjectOrArrayEcc+0x2a>

000b57f4 <_ZN12JsonModifierC1ER10JsonParser>:
JsonModifier::JsonModifier(JsonParser &jp) : jp(jp) {
   b57f4:	b510      	push	{r4, lr}
   b57f6:	4604      	mov	r4, r0
   b57f8:	f7ff feea 	bl	b55d0 <_ZN10JsonWriterC1Ev>
   b57fc:	4b05      	ldr	r3, [pc, #20]	; (b5814 <_ZN12JsonModifierC1ER10JsonParser+0x20>)
   b57fe:	6023      	str	r3, [r4, #0]
   b5800:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b5804:	2300      	movs	r3, #0
   b5806:	e9c4 230d 	strd	r2, r3, [r4, #52]	; 0x34
   b580a:	6321      	str	r1, [r4, #48]	; 0x30
   b580c:	63e3      	str	r3, [r4, #60]	; 0x3c
}
   b580e:	4620      	mov	r0, r4
   b5810:	bd10      	pop	{r4, pc}
   b5812:	bf00      	nop
   b5814:	000baa80 	.word	0x000baa80

000b5818 <_ZN12JsonModifier11startModifyEPKN21JsonParserGeneratorRK9jsmntok_tE>:
	jp.setOffset(left + origAfter);
	jp.parse();

	return true;
}
bool JsonModifier::startModify(const JsonParserGeneratorRK::jsmntok_t *token) {
   b5818:	b570      	push	{r4, r5, r6, lr}
	if (start != -1) {
   b581a:	6b43      	ldr	r3, [r0, #52]	; 0x34
   b581c:	3301      	adds	r3, #1
bool JsonModifier::startModify(const JsonParserGeneratorRK::jsmntok_t *token) {
   b581e:	4604      	mov	r4, r0
	if (start != -1) {
   b5820:	d121      	bne.n	b5866 <_ZN12JsonModifier11startModifyEPKN21JsonParserGeneratorRK9jsmntok_tE+0x4e>
		// Modification or insertion already in progress
		return false;
	}
	start = token->start;
	origAfter = jp.getOffset() - token->end;
   b5822:	6b05      	ldr	r5, [r0, #48]	; 0x30
	start = token->start;
   b5824:	684b      	ldr	r3, [r1, #4]
   b5826:	6343      	str	r3, [r0, #52]	; 0x34
	size_t getOffset() const { return offset; }
   b5828:	68eb      	ldr	r3, [r5, #12]
	origAfter = jp.getOffset() - token->end;
   b582a:	6888      	ldr	r0, [r1, #8]
   b582c:	1a1a      	subs	r2, r3, r0
   b582e:	63a2      	str	r2, [r4, #56]	; 0x38
	saveLoc = jp.getBufferLen() - origAfter;
   b5830:	68ae      	ldr	r6, [r5, #8]
   b5832:	4430      	add	r0, r6
   b5834:	1ac3      	subs	r3, r0, r3

	//printf("start=%d origAfter=%d saveLoc=%d bufferSize=%d\n", start, origAfter, saveLoc, saveLoc - start);

	if (origAfter > 0) {
   b5836:	2a00      	cmp	r2, #0
	saveLoc = jp.getBufferLen() - origAfter;
   b5838:	63e3      	str	r3, [r4, #60]	; 0x3c
	if (origAfter > 0) {
   b583a:	dd05      	ble.n	b5848 <_ZN12JsonModifier11startModifyEPKN21JsonParserGeneratorRK9jsmntok_tE+0x30>
	char *getBuffer() const { return buffer; }
   b583c:	6868      	ldr	r0, [r5, #4]
		memmove(jp.getBuffer() + saveLoc, jp.getBuffer() + token->end, origAfter);
   b583e:	6889      	ldr	r1, [r1, #8]
   b5840:	4401      	add	r1, r0
   b5842:	4418      	add	r0, r3
   b5844:	f004 f8aa 	bl	b999c <memmove>
   b5848:	6b22      	ldr	r2, [r4, #48]	; 0x30
	}

	setBuffer(jp.getBuffer() + start, saveLoc - start);
   b584a:	6b61      	ldr	r1, [r4, #52]	; 0x34
   b584c:	6852      	ldr	r2, [r2, #4]
   b584e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   b5850:	440a      	add	r2, r1
   b5852:	1a5b      	subs	r3, r3, r1
	this->staticBuffers = true;
   b5854:	2101      	movs	r1, #1
	init();
   b5856:	4620      	mov	r0, r4
	this->bufferLen = bufferLen;
   b5858:	e9c4 2301 	strd	r2, r3, [r4, #4]
	this->staticBuffers = true;
   b585c:	7421      	strb	r1, [r4, #16]
	init();
   b585e:	f7ff feaf 	bl	b55c0 <_ZN10JsonWriter4initEv>
   b5862:	4608      	mov	r0, r1

	return true;
}
   b5864:	bd70      	pop	{r4, r5, r6, pc}
		return false;
   b5866:	2000      	movs	r0, #0
   b5868:	e7fc      	b.n	b5864 <_ZN12JsonModifier11startModifyEPKN21JsonParserGeneratorRK9jsmntok_tE+0x4c>

000b586a <_ZN12JsonModifier11startAppendEPKN21JsonParserGeneratorRK9jsmntok_tE>:

bool JsonModifier::startAppend(const JsonParserGeneratorRK::jsmntok_t *arrayOrObjectToken) {
   b586a:	b570      	push	{r4, r5, r6, lr}
	if (start != -1) {
   b586c:	6b43      	ldr	r3, [r0, #52]	; 0x34
   b586e:	3301      	adds	r3, #1
bool JsonModifier::startAppend(const JsonParserGeneratorRK::jsmntok_t *arrayOrObjectToken) {
   b5870:	4604      	mov	r4, r0
   b5872:	460e      	mov	r6, r1
	if (start != -1) {
   b5874:	d129      	bne.n	b58ca <_ZN12JsonModifier11startAppendEPKN21JsonParserGeneratorRK9jsmntok_tE+0x60>
		// Modification or insertion already in progress
		return false;
	}

	start = arrayOrObjectToken->end - 1; // Before the closing ] or }
   b5876:	688d      	ldr	r5, [r1, #8]
	origAfter = jp.getOffset() - start;
   b5878:	6b01      	ldr	r1, [r0, #48]	; 0x30
	start = arrayOrObjectToken->end - 1; // Before the closing ] or }
   b587a:	3d01      	subs	r5, #1
   b587c:	6345      	str	r5, [r0, #52]	; 0x34
	size_t getOffset() const { return offset; }
   b587e:	68cb      	ldr	r3, [r1, #12]
	origAfter = jp.getOffset() - start;
   b5880:	1b5a      	subs	r2, r3, r5
   b5882:	6382      	str	r2, [r0, #56]	; 0x38
	saveLoc = jp.getBufferLen() - origAfter;
   b5884:	6888      	ldr	r0, [r1, #8]
   b5886:	4428      	add	r0, r5
   b5888:	1ac3      	subs	r3, r0, r3

	if (origAfter > 0) {
   b588a:	2a00      	cmp	r2, #0
	saveLoc = jp.getBufferLen() - origAfter;
   b588c:	63e3      	str	r3, [r4, #60]	; 0x3c
	if (origAfter > 0) {
   b588e:	dd04      	ble.n	b589a <_ZN12JsonModifier11startAppendEPKN21JsonParserGeneratorRK9jsmntok_tE+0x30>
	char *getBuffer() const { return buffer; }
   b5890:	6848      	ldr	r0, [r1, #4]
		memmove(jp.getBuffer() + saveLoc, jp.getBuffer() + start, origAfter);
   b5892:	1941      	adds	r1, r0, r5
   b5894:	4418      	add	r0, r3
   b5896:	f004 f881 	bl	b999c <memmove>
   b589a:	6b22      	ldr	r2, [r4, #48]	; 0x30
	}

	setBuffer(jp.getBuffer() + start, saveLoc - start);
   b589c:	6b61      	ldr	r1, [r4, #52]	; 0x34
   b589e:	6852      	ldr	r2, [r2, #4]
   b58a0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   b58a2:	440a      	add	r2, r1
   b58a4:	1a5b      	subs	r3, r3, r1
	this->staticBuffers = true;
   b58a6:	2501      	movs	r5, #1
	this->bufferLen = bufferLen;
   b58a8:	e9c4 2301 	strd	r2, r3, [r4, #4]
	init();
   b58ac:	4620      	mov	r0, r4
	this->staticBuffers = true;
   b58ae:	7425      	strb	r5, [r4, #16]
	init();
   b58b0:	f7ff fe86 	bl	b55c0 <_ZN10JsonWriter4initEv>
	context[contextIndex].isFirst = isFirst;
   b58b4:	6963      	ldr	r3, [r4, #20]
   b58b6:	f103 020c 	add.w	r2, r3, #12

	// If array is not empty, add a separator
	setIsFirst(arrayOrObjectToken->size == 0);
   b58ba:	68f3      	ldr	r3, [r6, #12]
   b58bc:	fab3 f383 	clz	r3, r3
   b58c0:	095b      	lsrs	r3, r3, #5
   b58c2:	f804 3012 	strb.w	r3, [r4, r2, lsl #1]
	context[contextIndex].isFirst = isFirst;
   b58c6:	4628      	mov	r0, r5

	return true;
}
   b58c8:	bd70      	pop	{r4, r5, r6, pc}
		return false;
   b58ca:	2000      	movs	r0, #0
   b58cc:	e7fc      	b.n	b58c8 <_ZN12JsonModifier11startAppendEPKN21JsonParserGeneratorRK9jsmntok_tE+0x5e>
	...

000b58d0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>:

/**
 * Parse JSON string and fill tokens.
 */
int jsmn_parse(jsmn_parser *parser, const char *js, size_t len,
		jsmntok_t *tokens, unsigned int num_tokens) {
   b58d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int r;
	int i;
	jsmntok_t *token;
	int count = parser->toknext;
   b58d4:	6844      	ldr	r4, [r0, #4]
   b58d6:	f04f 0c01 	mov.w	ip, #1
	tok->start = tok->end = -1;
   b58da:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff

	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b58de:	f8d0 e000 	ldr.w	lr, [r0]
   b58e2:	4596      	cmp	lr, r2
   b58e4:	f080 81b9 	bcs.w	b5c5a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x38a>
   b58e8:	f811 800e 	ldrb.w	r8, [r1, lr]
   b58ec:	f1b8 0f00 	cmp.w	r8, #0
   b58f0:	f000 81b3 	beq.w	b5c5a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x38a>
		char c;
		jsmntype_t type;

		c = js[parser->pos];
		switch (c) {
   b58f4:	f1b8 0f3a 	cmp.w	r8, #58	; 0x3a
   b58f8:	f000 8098 	beq.w	b5a2c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x15c>
   b58fc:	d833      	bhi.n	b5966 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x96>
   b58fe:	f1b8 0f22 	cmp.w	r8, #34	; 0x22
   b5902:	f000 80a6 	beq.w	b5a52 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x182>
   b5906:	d810      	bhi.n	b592a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x5a>
   b5908:	f1a8 0809 	sub.w	r8, r8, #9
   b590c:	fa5f f888 	uxtb.w	r8, r8
   b5910:	f1b8 0f17 	cmp.w	r8, #23
   b5914:	d80d      	bhi.n	b5932 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x62>
   b5916:	4d9f      	ldr	r5, [pc, #636]	; (b5b94 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2c4>)
   b5918:	fa0c f808 	lsl.w	r8, ip, r8
   b591c:	ea18 0f05 	tst.w	r8, r5
   b5920:	d007      	beq.n	b5932 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x62>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b5922:	6805      	ldr	r5, [r0, #0]
   b5924:	3501      	adds	r5, #1
   b5926:	6005      	str	r5, [r0, #0]
   b5928:	e7d9      	b.n	b58de <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xe>
		switch (c) {
   b592a:	f1b8 0f2c 	cmp.w	r8, #44	; 0x2c
   b592e:	f000 8133 	beq.w	b5b98 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2c8>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b5932:	f8d0 8000 	ldr.w	r8, [r0]
   b5936:	4542      	cmp	r2, r8
   b5938:	d90e      	bls.n	b5958 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x88>
   b593a:	f811 5008 	ldrb.w	r5, [r1, r8]
   b593e:	b15d      	cbz	r5, b5958 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x88>
		switch (js[parser->pos]) {
   b5940:	2d3a      	cmp	r5, #58	; 0x3a
   b5942:	f200 8169 	bhi.w	b5c18 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x348>
   b5946:	2d1f      	cmp	r5, #31
   b5948:	f200 8151 	bhi.w	b5bee <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x31e>
   b594c:	2d0a      	cmp	r5, #10
   b594e:	f200 8160 	bhi.w	b5c12 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x342>
   b5952:	2d08      	cmp	r5, #8
   b5954:	f240 8156 	bls.w	b5c04 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x334>
	if (tokens == NULL) {
   b5958:	2b00      	cmp	r3, #0
   b595a:	f040 8162 	bne.w	b5c22 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x352>
		parser->pos--;
   b595e:	f108 35ff 	add.w	r5, r8, #4294967295	; 0xffffffff
	parser->pos--;
   b5962:	6005      	str	r5, [r0, #0]
   b5964:	e0a5      	b.n	b5ab2 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1e2>
		switch (c) {
   b5966:	f1b8 0f7b 	cmp.w	r8, #123	; 0x7b
   b596a:	d037      	beq.n	b59dc <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x10c>
   b596c:	d82e      	bhi.n	b59cc <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xfc>
   b596e:	f1b8 0f5b 	cmp.w	r8, #91	; 0x5b
   b5972:	d033      	beq.n	b59dc <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x10c>
   b5974:	f1b8 0f5d 	cmp.w	r8, #93	; 0x5d
   b5978:	d1db      	bne.n	b5932 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x62>
				token->type = (c == '{' ? JSMN_OBJECT : JSMN_ARRAY);
				token->start = parser->pos;
				parser->toksuper = parser->toknext - 1;
				break;
			case '}': case ']':
				if (tokens == NULL)
   b597a:	2b00      	cmp	r3, #0
   b597c:	d0d1      	beq.n	b5922 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
					break;
				type = (c == '}' ? JSMN_OBJECT : JSMN_ARRAY);
   b597e:	f04f 0902 	mov.w	r9, #2
						break;
					}
					token = &tokens[token->parent];
				}
#else
				for (i = parser->toknext - 1; i >= 0; i--) {
   b5982:	6845      	ldr	r5, [r0, #4]
   b5984:	3d01      	subs	r5, #1
   b5986:	eb03 1805 	add.w	r8, r3, r5, lsl #4
   b598a:	2d00      	cmp	r5, #0
   b598c:	db55      	blt.n	b5a3a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x16a>
					token = &tokens[i];
					if (token->start != -1 && token->end == -1) {
   b598e:	f8d8 7004 	ldr.w	r7, [r8, #4]
   b5992:	3701      	adds	r7, #1
   b5994:	d04d      	beq.n	b5a32 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x162>
   b5996:	f8d8 a008 	ldr.w	sl, [r8, #8]
   b599a:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
   b599e:	d148      	bne.n	b5a32 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x162>
						if (token->type != type) {
   b59a0:	f898 b000 	ldrb.w	fp, [r8]
   b59a4:	45cb      	cmp	fp, r9
   b59a6:	d14b      	bne.n	b5a40 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x170>
							return JSMN_ERROR_INVAL;
						}
						parser->toksuper = -1;
						token->end = parser->pos + 1;
   b59a8:	f10e 0e01 	add.w	lr, lr, #1
						parser->toksuper = -1;
   b59ac:	f8c0 a008 	str.w	sl, [r0, #8]
						token->end = parser->pos + 1;
   b59b0:	f8c8 e008 	str.w	lr, [r8, #8]
						break;
					}
				}
				/* Error if unmatched closing bracket */
				if (i == -1) return JSMN_ERROR_INVAL;
   b59b4:	eb03 1e05 	add.w	lr, r3, r5, lsl #4
				for (; i >= 0; i--) {
					token = &tokens[i];
					if (token->start != -1 && token->end == -1) {
   b59b8:	f8de 7004 	ldr.w	r7, [lr, #4]
   b59bc:	3701      	adds	r7, #1
   b59be:	d042      	beq.n	b5a46 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x176>
   b59c0:	f8de 7008 	ldr.w	r7, [lr, #8]
   b59c4:	3701      	adds	r7, #1
   b59c6:	d13e      	bne.n	b5a46 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x176>
					tokens[parser->toksuper].size++;
				break;
			case '\t' : case '\r' : case '\n' : case ' ':
				break;
			case ':':
				parser->toksuper = parser->toknext - 1;
   b59c8:	6085      	str	r5, [r0, #8]
				break;
   b59ca:	e7aa      	b.n	b5922 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
		switch (c) {
   b59cc:	f1b8 0f7d 	cmp.w	r8, #125	; 0x7d
   b59d0:	d1af      	bne.n	b5932 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x62>
				if (tokens == NULL)
   b59d2:	2b00      	cmp	r3, #0
   b59d4:	d0a5      	beq.n	b5922 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
				type = (c == '}' ? JSMN_OBJECT : JSMN_ARRAY);
   b59d6:	f04f 0901 	mov.w	r9, #1
   b59da:	e7d2      	b.n	b5982 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xb2>
				count++;
   b59dc:	3401      	adds	r4, #1
				if (tokens == NULL) {
   b59de:	2b00      	cmp	r3, #0
   b59e0:	d09f      	beq.n	b5922 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
	if (parser->toknext >= num_tokens) {
   b59e2:	6845      	ldr	r5, [r0, #4]
   b59e4:	9f09      	ldr	r7, [sp, #36]	; 0x24
   b59e6:	42af      	cmp	r7, r5
   b59e8:	d94a      	bls.n	b5a80 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1b0>
	tok = &tokens[parser->toknext++];
   b59ea:	f105 0e01 	add.w	lr, r5, #1
   b59ee:	f8c0 e004 	str.w	lr, [r0, #4]
   b59f2:	eb03 1e05 	add.w	lr, r3, r5, lsl #4
	tok->start = tok->end = -1;
   b59f6:	e9ce 6601 	strd	r6, r6, [lr, #4]
	tok = &tokens[parser->toknext++];
   b59fa:	ea4f 1a05 	mov.w	sl, r5, lsl #4
	tok->size = 0;
   b59fe:	2500      	movs	r5, #0
   b5a00:	f8ce 500c 	str.w	r5, [lr, #12]
				if (parser->toksuper != -1) {
   b5a04:	6885      	ldr	r5, [r0, #8]
   b5a06:	1c6f      	adds	r7, r5, #1
					tokens[parser->toksuper].size++;
   b5a08:	bf1f      	itttt	ne
   b5a0a:	eb03 1905 	addne.w	r9, r3, r5, lsl #4
   b5a0e:	f8d9 500c 	ldrne.w	r5, [r9, #12]
   b5a12:	3501      	addne	r5, #1
   b5a14:	f8c9 500c 	strne.w	r5, [r9, #12]
				token->type = (c == '{' ? JSMN_OBJECT : JSMN_ARRAY);
   b5a18:	f1b8 0f7b 	cmp.w	r8, #123	; 0x7b
   b5a1c:	bf0c      	ite	eq
   b5a1e:	2501      	moveq	r5, #1
   b5a20:	2502      	movne	r5, #2
   b5a22:	f803 500a 	strb.w	r5, [r3, sl]
				token->start = parser->pos;
   b5a26:	6805      	ldr	r5, [r0, #0]
   b5a28:	f8ce 5004 	str.w	r5, [lr, #4]
				parser->toksuper = parser->toknext - 1;
   b5a2c:	6845      	ldr	r5, [r0, #4]
   b5a2e:	3d01      	subs	r5, #1
   b5a30:	e7ca      	b.n	b59c8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xf8>
				for (i = parser->toknext - 1; i >= 0; i--) {
   b5a32:	3d01      	subs	r5, #1
   b5a34:	f1a8 0810 	sub.w	r8, r8, #16
   b5a38:	e7a7      	b.n	b598a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xba>
				if (i == -1) return JSMN_ERROR_INVAL;
   b5a3a:	3501      	adds	r5, #1
   b5a3c:	f47f af71 	bne.w	b5922 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
							return JSMN_ERROR_INVAL;
   b5a40:	f06f 0401 	mvn.w	r4, #1
   b5a44:	e01e      	b.n	b5a84 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1b4>
				for (; i >= 0; i--) {
   b5a46:	3d01      	subs	r5, #1
   b5a48:	1c6f      	adds	r7, r5, #1
   b5a4a:	f1ae 0e10 	sub.w	lr, lr, #16
   b5a4e:	d1b3      	bne.n	b59b8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xe8>
   b5a50:	e767      	b.n	b5922 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
	parser->pos++;
   b5a52:	f10e 0901 	add.w	r9, lr, #1
   b5a56:	f8c0 9000 	str.w	r9, [r0]
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b5a5a:	f8d0 8000 	ldr.w	r8, [r0]
   b5a5e:	4542      	cmp	r2, r8
   b5a60:	f240 8093 	bls.w	b5b8a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ba>
   b5a64:	f811 5008 	ldrb.w	r5, [r1, r8]
   b5a68:	2d00      	cmp	r5, #0
   b5a6a:	f000 808e 	beq.w	b5b8a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ba>
		if (c == '\"') {
   b5a6e:	2d22      	cmp	r5, #34	; 0x22
   b5a70:	d130      	bne.n	b5ad4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x204>
			if (tokens == NULL) {
   b5a72:	b1f3      	cbz	r3, b5ab2 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1e2>
	if (parser->toknext >= num_tokens) {
   b5a74:	6845      	ldr	r5, [r0, #4]
   b5a76:	9f09      	ldr	r7, [sp, #36]	; 0x24
   b5a78:	42af      	cmp	r7, r5
   b5a7a:	d806      	bhi.n	b5a8a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1ba>
		parser->pos = start;
   b5a7c:	f8c0 e000 	str.w	lr, [r0]
					return JSMN_ERROR_NOMEM;
   b5a80:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
			}
		}
	}

	return count;
}
   b5a84:	4620      	mov	r0, r4
   b5a86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	tok = &tokens[parser->toknext++];
   b5a8a:	f105 0e01 	add.w	lr, r5, #1
   b5a8e:	ea4f 1805 	mov.w	r8, r5, lsl #4
   b5a92:	eb03 1505 	add.w	r5, r3, r5, lsl #4
   b5a96:	f8c0 e004 	str.w	lr, [r0, #4]
	tok->start = tok->end = -1;
   b5a9a:	e9c5 6601 	strd	r6, r6, [r5, #4]
	tok->size = 0;
   b5a9e:	2700      	movs	r7, #0
   b5aa0:	60ef      	str	r7, [r5, #12]
			jsmn_fill_token(token, JSMN_STRING, start+1, parser->pos);
   b5aa2:	f8d0 e000 	ldr.w	lr, [r0]
	token->type = type;
   b5aa6:	f04f 0a03 	mov.w	sl, #3
   b5aaa:	f803 a008 	strb.w	sl, [r3, r8]
	token->end = end;
   b5aae:	e9c5 9e01 	strd	r9, lr, [r5, #4]
				if (parser->toksuper != -1 && tokens != NULL)
   b5ab2:	6885      	ldr	r5, [r0, #8]
   b5ab4:	1c6f      	adds	r7, r5, #1
				count++;
   b5ab6:	f104 0401 	add.w	r4, r4, #1
				if (parser->toksuper != -1 && tokens != NULL)
   b5aba:	f43f af32 	beq.w	b5922 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
   b5abe:	2b00      	cmp	r3, #0
   b5ac0:	f43f af2f 	beq.w	b5922 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
					tokens[parser->toksuper].size++;
   b5ac4:	eb03 1e05 	add.w	lr, r3, r5, lsl #4
   b5ac8:	f8de 500c 	ldr.w	r5, [lr, #12]
   b5acc:	3501      	adds	r5, #1
   b5ace:	f8ce 500c 	str.w	r5, [lr, #12]
   b5ad2:	e726      	b.n	b5922 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
		if (c == '\\' && parser->pos + 1 < len) {
   b5ad4:	2d5c      	cmp	r5, #92	; 0x5c
   b5ad6:	d111      	bne.n	b5afc <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x22c>
   b5ad8:	f108 0501 	add.w	r5, r8, #1
   b5adc:	42aa      	cmp	r2, r5
   b5ade:	d90d      	bls.n	b5afc <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x22c>
			parser->pos++;
   b5ae0:	6005      	str	r5, [r0, #0]
			switch (js[parser->pos]) {
   b5ae2:	5d4d      	ldrb	r5, [r1, r5]
   b5ae4:	2d75      	cmp	r5, #117	; 0x75
   b5ae6:	d82b      	bhi.n	b5b40 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
   b5ae8:	2d6d      	cmp	r5, #109	; 0x6d
   b5aea:	d80b      	bhi.n	b5b04 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x234>
   b5aec:	2d66      	cmp	r5, #102	; 0x66
   b5aee:	d827      	bhi.n	b5b40 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
   b5af0:	2d5b      	cmp	r5, #91	; 0x5b
   b5af2:	d81d      	bhi.n	b5b30 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x260>
   b5af4:	2d22      	cmp	r5, #34	; 0x22
   b5af6:	d001      	beq.n	b5afc <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x22c>
   b5af8:	2d2f      	cmp	r5, #47	; 0x2f
   b5afa:	d121      	bne.n	b5b40 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b5afc:	6805      	ldr	r5, [r0, #0]
   b5afe:	3501      	adds	r5, #1
   b5b00:	6005      	str	r5, [r0, #0]
   b5b02:	e7aa      	b.n	b5a5a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x18a>
   b5b04:	3d6e      	subs	r5, #110	; 0x6e
   b5b06:	2d07      	cmp	r5, #7
   b5b08:	d81a      	bhi.n	b5b40 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
   b5b0a:	a701      	add	r7, pc, #4	; (adr r7, b5b10 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x240>)
   b5b0c:	f857 f025 	ldr.w	pc, [r7, r5, lsl #2]
   b5b10:	000b5afd 	.word	0x000b5afd
   b5b14:	000b5b41 	.word	0x000b5b41
   b5b18:	000b5b41 	.word	0x000b5b41
   b5b1c:	000b5b41 	.word	0x000b5b41
   b5b20:	000b5afd 	.word	0x000b5afd
   b5b24:	000b5b41 	.word	0x000b5b41
   b5b28:	000b5afd 	.word	0x000b5afd
   b5b2c:	000b5b47 	.word	0x000b5b47
   b5b30:	3d5c      	subs	r5, #92	; 0x5c
   b5b32:	b2ed      	uxtb	r5, r5
   b5b34:	fa0c f505 	lsl.w	r5, ip, r5
   b5b38:	f240 4741 	movw	r7, #1089	; 0x441
   b5b3c:	423d      	tst	r5, r7
   b5b3e:	d1dd      	bne.n	b5afc <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x22c>
			parser->pos = start;
   b5b40:	f8c0 e000 	str.w	lr, [r0]
				if (r < 0) return r;
   b5b44:	e77c      	b.n	b5a40 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x170>
					parser->pos++;
   b5b46:	f108 0502 	add.w	r5, r8, #2
   b5b4a:	6005      	str	r5, [r0, #0]
   b5b4c:	f04f 0a04 	mov.w	sl, #4
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
   b5b50:	f8d0 8000 	ldr.w	r8, [r0]
   b5b54:	4542      	cmp	r2, r8
   b5b56:	d803      	bhi.n	b5b60 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x290>
					parser->pos--;
   b5b58:	6805      	ldr	r5, [r0, #0]
   b5b5a:	3d01      	subs	r5, #1
   b5b5c:	6005      	str	r5, [r0, #0]
					break;
   b5b5e:	e7cd      	b.n	b5afc <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x22c>
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
   b5b60:	f811 5008 	ldrb.w	r5, [r1, r8]
   b5b64:	2d00      	cmp	r5, #0
   b5b66:	d0f7      	beq.n	b5b58 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x288>
						if(!((js[parser->pos] >= 48 && js[parser->pos] <= 57) || /* 0-9 */
   b5b68:	f1a5 0b30 	sub.w	fp, r5, #48	; 0x30
   b5b6c:	f1bb 0f09 	cmp.w	fp, #9
   b5b70:	d904      	bls.n	b5b7c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ac>
   b5b72:	f025 0520 	bic.w	r5, r5, #32
   b5b76:	3d41      	subs	r5, #65	; 0x41
   b5b78:	2d05      	cmp	r5, #5
   b5b7a:	d8e1      	bhi.n	b5b40 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
						parser->pos++;
   b5b7c:	f108 0501 	add.w	r5, r8, #1
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
   b5b80:	f1ba 0a01 	subs.w	sl, sl, #1
						parser->pos++;
   b5b84:	6005      	str	r5, [r0, #0]
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
   b5b86:	d1e3      	bne.n	b5b50 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x280>
   b5b88:	e7e6      	b.n	b5b58 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x288>
	parser->pos = start;
   b5b8a:	f8c0 e000 	str.w	lr, [r0]
				return JSMN_ERROR_PART;
   b5b8e:	f06f 0402 	mvn.w	r4, #2
   b5b92:	e777      	b.n	b5a84 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1b4>
   b5b94:	00800013 	.word	0x00800013
				if (tokens != NULL && parser->toksuper != -1 &&
   b5b98:	2b00      	cmp	r3, #0
   b5b9a:	f43f aec2 	beq.w	b5922 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
   b5b9e:	6885      	ldr	r5, [r0, #8]
   b5ba0:	1c6f      	adds	r7, r5, #1
   b5ba2:	f43f aebe 	beq.w	b5922 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
						tokens[parser->toksuper].type != JSMN_ARRAY &&
   b5ba6:	012d      	lsls	r5, r5, #4
   b5ba8:	5d5d      	ldrb	r5, [r3, r5]
   b5baa:	3d01      	subs	r5, #1
   b5bac:	2d01      	cmp	r5, #1
   b5bae:	f67f aeb8 	bls.w	b5922 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
					for (i = parser->toknext - 1; i >= 0; i--) {
   b5bb2:	6845      	ldr	r5, [r0, #4]
   b5bb4:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
   b5bb8:	eb03 1e05 	add.w	lr, r3, r5, lsl #4
   b5bbc:	f1b8 0f00 	cmp.w	r8, #0
   b5bc0:	f6ff aeaf 	blt.w	b5922 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
						if (tokens[i].type == JSMN_ARRAY || tokens[i].type == JSMN_OBJECT) {
   b5bc4:	f81e 5c10 	ldrb.w	r5, [lr, #-16]
   b5bc8:	3d01      	subs	r5, #1
   b5bca:	2d01      	cmp	r5, #1
   b5bcc:	d80a      	bhi.n	b5be4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x314>
							if (tokens[i].start != -1 && tokens[i].end == -1) {
   b5bce:	f85e 5c0c 	ldr.w	r5, [lr, #-12]
   b5bd2:	3501      	adds	r5, #1
   b5bd4:	d006      	beq.n	b5be4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x314>
   b5bd6:	f85e 5c08 	ldr.w	r5, [lr, #-8]
   b5bda:	3501      	adds	r5, #1
   b5bdc:	d102      	bne.n	b5be4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x314>
								parser->toksuper = i;
   b5bde:	f8c0 8008 	str.w	r8, [r0, #8]
								break;
   b5be2:	e69e      	b.n	b5922 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
					for (i = parser->toknext - 1; i >= 0; i--) {
   b5be4:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   b5be8:	f1ae 0e10 	sub.w	lr, lr, #16
   b5bec:	e7e6      	b.n	b5bbc <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ec>
   b5bee:	f1a5 0920 	sub.w	r9, r5, #32
   b5bf2:	4f24      	ldr	r7, [pc, #144]	; (b5c84 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x3b4>)
   b5bf4:	fa5f f989 	uxtb.w	r9, r9
   b5bf8:	fa0c f909 	lsl.w	r9, ip, r9
   b5bfc:	ea19 0f07 	tst.w	r9, r7
   b5c00:	f47f aeaa 	bne.w	b5958 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x88>
		if (js[parser->pos] < 32 || js[parser->pos] >= 127) {
   b5c04:	3d20      	subs	r5, #32
   b5c06:	2d5e      	cmp	r5, #94	; 0x5e
   b5c08:	d89a      	bhi.n	b5b40 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b5c0a:	f108 0501 	add.w	r5, r8, #1
   b5c0e:	6005      	str	r5, [r0, #0]
   b5c10:	e68f      	b.n	b5932 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x62>
		switch (js[parser->pos]) {
   b5c12:	2d0d      	cmp	r5, #13
   b5c14:	d1f6      	bne.n	b5c04 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x334>
   b5c16:	e69f      	b.n	b5958 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x88>
   b5c18:	f005 09df 	and.w	r9, r5, #223	; 0xdf
   b5c1c:	f1b9 0f5d 	cmp.w	r9, #93	; 0x5d
   b5c20:	e7f8      	b.n	b5c14 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x344>
	if (parser->toknext >= num_tokens) {
   b5c22:	6845      	ldr	r5, [r0, #4]
   b5c24:	9f09      	ldr	r7, [sp, #36]	; 0x24
   b5c26:	42af      	cmp	r7, r5
   b5c28:	f67f af28 	bls.w	b5a7c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1ac>
	tok = &tokens[parser->toknext++];
   b5c2c:	f105 0801 	add.w	r8, r5, #1
   b5c30:	ea4f 1905 	mov.w	r9, r5, lsl #4
   b5c34:	eb03 1505 	add.w	r5, r3, r5, lsl #4
   b5c38:	f8c0 8004 	str.w	r8, [r0, #4]
	tok->start = tok->end = -1;
   b5c3c:	e9c5 6601 	strd	r6, r6, [r5, #4]
	tok->size = 0;
   b5c40:	2700      	movs	r7, #0
   b5c42:	60ef      	str	r7, [r5, #12]
	jsmn_fill_token(token, JSMN_PRIMITIVE, start, parser->pos);
   b5c44:	f8d0 8000 	ldr.w	r8, [r0]
	token->type = type;
   b5c48:	f04f 0a04 	mov.w	sl, #4
   b5c4c:	f803 a009 	strb.w	sl, [r3, r9]
	token->end = end;
   b5c50:	e9c5 e801 	strd	lr, r8, [r5, #4]
	parser->pos--;
   b5c54:	6805      	ldr	r5, [r0, #0]
   b5c56:	3d01      	subs	r5, #1
   b5c58:	e683      	b.n	b5962 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x92>
	if (tokens != NULL) {
   b5c5a:	2b00      	cmp	r3, #0
   b5c5c:	f43f af12 	beq.w	b5a84 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1b4>
		for (i = parser->toknext - 1; i >= 0; i--) {
   b5c60:	6842      	ldr	r2, [r0, #4]
   b5c62:	1e51      	subs	r1, r2, #1
   b5c64:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   b5c68:	2900      	cmp	r1, #0
   b5c6a:	f6ff af0b 	blt.w	b5a84 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1b4>
			if (tokens[i].start != -1 && tokens[i].end == -1) {
   b5c6e:	f853 2c0c 	ldr.w	r2, [r3, #-12]
   b5c72:	3201      	adds	r2, #1
   b5c74:	d003      	beq.n	b5c7e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x3ae>
   b5c76:	f853 2c08 	ldr.w	r2, [r3, #-8]
   b5c7a:	3201      	adds	r2, #1
   b5c7c:	d087      	beq.n	b5b8e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2be>
		for (i = parser->toknext - 1; i >= 0; i--) {
   b5c7e:	3901      	subs	r1, #1
   b5c80:	3b10      	subs	r3, #16
   b5c82:	e7f1      	b.n	b5c68 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x398>
   b5c84:	04001001 	.word	0x04001001

000b5c88 <_ZN10JsonParser5parseEv>:
bool JsonParser::parse() {
   b5c88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (offset == 0) {
   b5c8a:	68c2      	ldr	r2, [r0, #12]
bool JsonParser::parse() {
   b5c8c:	4604      	mov	r4, r0
	if (offset == 0) {
   b5c8e:	b912      	cbnz	r2, b5c96 <_ZN10JsonParser5parseEv+0xe>
		return false;
   b5c90:	2000      	movs	r0, #0
}
   b5c92:	b003      	add	sp, #12
   b5c94:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (tokens) {
   b5c96:	6943      	ldr	r3, [r0, #20]
		JsonParserGeneratorRK::jsmn_init(&parser);
   b5c98:	f100 0620 	add.w	r6, r0, #32
	if (tokens) {
   b5c9c:	b1ab      	cbz	r3, b5cca <_ZN10JsonParser5parseEv+0x42>
/**
 * Creates a new parser based over a given  buffer with an array of tokens
 * available.
 */
void jsmn_init(jsmn_parser *parser) {
	parser->pos = 0;
   b5c9e:	2100      	movs	r1, #0
	parser->toknext = 0;
   b5ca0:	e9c0 1108 	strd	r1, r1, [r0, #32]
	parser->toksuper = -1;
   b5ca4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   b5ca8:	6281      	str	r1, [r0, #40]	; 0x28
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   b5caa:	69c1      	ldr	r1, [r0, #28]
   b5cac:	9100      	str	r1, [sp, #0]
   b5cae:	6841      	ldr	r1, [r0, #4]
   b5cb0:	4630      	mov	r0, r6
   b5cb2:	f7ff fe0d 	bl	b58d0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>
		if (result == JsonParserGeneratorRK::JSMN_ERROR_NOMEM) {
   b5cb6:	1c43      	adds	r3, r0, #1
   b5cb8:	d128      	bne.n	b5d0c <_ZN10JsonParser5parseEv+0x84>
			if (staticBuffers) {
   b5cba:	7c25      	ldrb	r5, [r4, #16]
   b5cbc:	2d00      	cmp	r5, #0
   b5cbe:	d1e7      	bne.n	b5c90 <_ZN10JsonParser5parseEv+0x8>
			free(tokens);
   b5cc0:	6960      	ldr	r0, [r4, #20]
   b5cc2:	f001 f9d9 	bl	b7078 <free>
			tokens = 0;
   b5cc6:	6165      	str	r5, [r4, #20]
			maxTokens = 0;
   b5cc8:	61e5      	str	r5, [r4, #28]
	parser->pos = 0;
   b5cca:	2500      	movs	r5, #0
	parser->toksuper = -1;
   b5ccc:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
	parser->toknext = 0;
   b5cd0:	e9c4 5508 	strd	r5, r5, [r4, #32]
	int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, 0, 0);
   b5cd4:	68e2      	ldr	r2, [r4, #12]
   b5cd6:	6861      	ldr	r1, [r4, #4]
	parser->toksuper = -1;
   b5cd8:	62a7      	str	r7, [r4, #40]	; 0x28
	int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, 0, 0);
   b5cda:	9500      	str	r5, [sp, #0]
   b5cdc:	462b      	mov	r3, r5
   b5cde:	4630      	mov	r0, r6
   b5ce0:	f7ff fdf6 	bl	b58d0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>
	if (result < 0) {
   b5ce4:	2800      	cmp	r0, #0
   b5ce6:	dbd3      	blt.n	b5c90 <_ZN10JsonParser5parseEv+0x8>
	maxTokens = (size_t) result;
   b5ce8:	61e0      	str	r0, [r4, #28]
	if (maxTokens > 0) {
   b5cea:	d017      	beq.n	b5d1c <_ZN10JsonParser5parseEv+0x94>
		tokens = (JsonParserGeneratorRK::jsmntok_t *)malloc(sizeof(JsonParserGeneratorRK::jsmntok_t) * maxTokens);
   b5cec:	0100      	lsls	r0, r0, #4
   b5cee:	f001 f9bb 	bl	b7068 <malloc>
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   b5cf2:	69e2      	ldr	r2, [r4, #28]
		tokens = (JsonParserGeneratorRK::jsmntok_t *)malloc(sizeof(JsonParserGeneratorRK::jsmntok_t) * maxTokens);
   b5cf4:	6160      	str	r0, [r4, #20]
   b5cf6:	4603      	mov	r3, r0
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   b5cf8:	9200      	str	r2, [sp, #0]
	parser->toknext = 0;
   b5cfa:	e9c4 5508 	strd	r5, r5, [r4, #32]
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   b5cfe:	68e2      	ldr	r2, [r4, #12]
   b5d00:	6861      	ldr	r1, [r4, #4]
	parser->toksuper = -1;
   b5d02:	62a7      	str	r7, [r4, #40]	; 0x28
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   b5d04:	4630      	mov	r0, r6
   b5d06:	f7ff fde3 	bl	b58d0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>
   b5d0a:	e001      	b.n	b5d10 <_ZN10JsonParser5parseEv+0x88>
		if (result < 0) {
   b5d0c:	2800      	cmp	r0, #0
   b5d0e:	dbbf      	blt.n	b5c90 <_ZN10JsonParser5parseEv+0x8>
		tokensEnd = &tokens[result];
   b5d10:	6963      	ldr	r3, [r4, #20]
   b5d12:	eb03 1000 	add.w	r0, r3, r0, lsl #4
   b5d16:	61a0      	str	r0, [r4, #24]
	return true;
   b5d18:	2001      	movs	r0, #1
   b5d1a:	e7ba      	b.n	b5c92 <_ZN10JsonParser5parseEv+0xa>
		tokensEnd = tokens;
   b5d1c:	6963      	ldr	r3, [r4, #20]
   b5d1e:	61a3      	str	r3, [r4, #24]
   b5d20:	e7fa      	b.n	b5d18 <_ZN10JsonParser5parseEv+0x90>

000b5d22 <_ZN12JsonModifier6finishEv>:
void JsonModifier::finish() {
   b5d22:	b538      	push	{r3, r4, r5, lr}
	if (start == -1) {
   b5d24:	6b43      	ldr	r3, [r0, #52]	; 0x34
   b5d26:	1c5a      	adds	r2, r3, #1
void JsonModifier::finish() {
   b5d28:	4604      	mov	r4, r0
	if (start == -1) {
   b5d2a:	d018      	beq.n	b5d5e <_ZN12JsonModifier6finishEv+0x3c>
	if (origAfter > 0) {
   b5d2c:	6b82      	ldr	r2, [r0, #56]	; 0x38
   b5d2e:	2a00      	cmp	r2, #0
   b5d30:	dd08      	ble.n	b5d44 <_ZN12JsonModifier6finishEv+0x22>
   b5d32:	6b01      	ldr	r1, [r0, #48]	; 0x30
		memmove(jp.getBuffer() + start + getOffset(), jp.getBuffer() + saveLoc, origAfter);
   b5d34:	68e5      	ldr	r5, [r4, #12]
   b5d36:	6848      	ldr	r0, [r1, #4]
   b5d38:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   b5d3a:	442b      	add	r3, r5
   b5d3c:	4401      	add	r1, r0
   b5d3e:	4418      	add	r0, r3
   b5d40:	f003 fe2c 	bl	b999c <memmove>
	jp.setOffset(start + getOffset() + origAfter);
   b5d44:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	; 0x30
   b5d48:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   b5d4a:	440b      	add	r3, r1
   b5d4c:	68e1      	ldr	r1, [r4, #12]
   b5d4e:	440b      	add	r3, r1
	void setOffset(size_t offset) { this->offset = offset; };
   b5d50:	60d3      	str	r3, [r2, #12]
	jp.parse();
   b5d52:	6b20      	ldr	r0, [r4, #48]	; 0x30
   b5d54:	f7ff ff98 	bl	b5c88 <_ZN10JsonParser5parseEv>
	start = -1;
   b5d58:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b5d5c:	6363      	str	r3, [r4, #52]	; 0x34
}
   b5d5e:	bd38      	pop	{r3, r4, r5, pc}

000b5d60 <_ZN8MB85RC64D1Ev>:
	size_t memorySize;
	int addr; // This is just 0-7, the (0b1010000 of the 7-bit address is ORed in later)

};

class MB85RC64 : public MB85RC {
   b5d60:	b510      	push	{r4, lr}
   b5d62:	4b03      	ldr	r3, [pc, #12]	; (b5d70 <_ZN8MB85RC64D1Ev+0x10>)
   b5d64:	6003      	str	r3, [r0, #0]
   b5d66:	4604      	mov	r4, r0
   b5d68:	f000 fb60 	bl	b642c <_ZN6MB85RCD1Ev>
   b5d6c:	4620      	mov	r0, r4
   b5d6e:	bd10      	pop	{r4, pc}
   b5d70:	000bab78 	.word	0x000bab78

000b5d74 <_ZN8MB85RC64D0Ev>:
   b5d74:	b510      	push	{r4, lr}
   b5d76:	4604      	mov	r4, r0
   b5d78:	f7ff fff2 	bl	b5d60 <_ZN8MB85RC64D1Ev>
   b5d7c:	4620      	mov	r0, r4
   b5d7e:	2110      	movs	r1, #16
   b5d80:	f7fe f98b 	bl	b409a <_ZdlPvj>
   b5d84:	4620      	mov	r0, r4
   b5d86:	bd10      	pop	{r4, pc}

000b5d88 <_ZN17currentStatusData8validateEj>:

void currentStatusData::loop() {
    current.flush(false);
}

bool currentStatusData::validate(size_t dataSize) {
   b5d88:	b510      	push	{r4, lr}
    bool valid = PersistentDataFRAM::validate(dataSize);
   b5d8a:	f000 fd61 	bl	b6850 <_ZN15StorageHelperRK18PersistentDataBase8validateEj>
    if (!valid) Log.info("current data is %s",(valid) ? "valid": "not valid");
   b5d8e:	4604      	mov	r4, r0
   b5d90:	b920      	cbnz	r0, b5d9c <_ZN17currentStatusData8validateEj+0x14>
   b5d92:	4a03      	ldr	r2, [pc, #12]	; (b5da0 <_ZN17currentStatusData8validateEj+0x18>)
   b5d94:	4903      	ldr	r1, [pc, #12]	; (b5da4 <_ZN17currentStatusData8validateEj+0x1c>)
   b5d96:	4804      	ldr	r0, [pc, #16]	; (b5da8 <_ZN17currentStatusData8validateEj+0x20>)
   b5d98:	f7fe f9f0 	bl	b417c <_ZNK5spark6Logger4infoEPKcz>
    return valid;
}
   b5d9c:	4620      	mov	r0, r4
   b5d9e:	bd10      	pop	{r4, pc}
   b5da0:	000baa88 	.word	0x000baa88
   b5da4:	000baa92 	.word	0x000baa92
   b5da8:	2003e6b0 	.word	0x2003e6b0

000b5dac <_ZN17currentStatusData10initializeEv>:

void currentStatusData::initialize() {
   b5dac:	b510      	push	{r4, lr}
   b5dae:	4604      	mov	r4, r0
    PersistentDataFRAM::initialize();
   b5db0:	f000 fdba 	bl	b6928 <_ZN15StorageHelperRK18PersistentDataBase10initializeEv>
    Log.info("Current Data Initialized");
   b5db4:	4804      	ldr	r0, [pc, #16]	; (b5dc8 <_ZN17currentStatusData10initializeEv+0x1c>)
   b5db6:	4905      	ldr	r1, [pc, #20]	; (b5dcc <_ZN17currentStatusData10initializeEv+0x20>)
   b5db8:	f7fe f9e0 	bl	b417c <_ZNK5spark6Logger4infoEPKcz>
    // If you manually update fields here, be sure to update the hash
    updateHash();
   b5dbc:	4620      	mov	r0, r4
}
   b5dbe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    updateHash();
   b5dc2:	f000 bd09 	b.w	b67d8 <_ZN15StorageHelperRK18PersistentDataBase10updateHashEv>
   b5dc6:	bf00      	nop
   b5dc8:	2003e6b0 	.word	0x2003e6b0
   b5dcc:	000baaa5 	.word	0x000baaa5

000b5dd0 <_ZN10nodeIDData8validateEj>:
    nodeDatabase.set_nodeIDJson(blank);
    nodeDatabase.flush(true);
    Log.info("NodeID data is now %s", nodeDatabase.get_nodeIDJson().c_str());
}

bool nodeIDData::validate(size_t dataSize) {
   b5dd0:	b510      	push	{r4, lr}
    bool valid = PersistentDataFRAM::validate(dataSize);
   b5dd2:	f000 fd3d 	bl	b6850 <_ZN15StorageHelperRK18PersistentDataBase8validateEj>
    if (!valid) Log.info("nodeID data is %s",(valid) ? "valid": "not valid");
   b5dd6:	4604      	mov	r4, r0
   b5dd8:	b920      	cbnz	r0, b5de4 <_ZN10nodeIDData8validateEj+0x14>
   b5dda:	4a03      	ldr	r2, [pc, #12]	; (b5de8 <_ZN10nodeIDData8validateEj+0x18>)
   b5ddc:	4903      	ldr	r1, [pc, #12]	; (b5dec <_ZN10nodeIDData8validateEj+0x1c>)
   b5dde:	4804      	ldr	r0, [pc, #16]	; (b5df0 <_ZN10nodeIDData8validateEj+0x20>)
   b5de0:	f7fe f9cc 	bl	b417c <_ZNK5spark6Logger4infoEPKcz>
    return valid;
}
   b5de4:	4620      	mov	r0, r4
   b5de6:	bd10      	pop	{r4, pc}
   b5de8:	000baa88 	.word	0x000baa88
   b5dec:	000baabe 	.word	0x000baabe
   b5df0:	2003e6b0 	.word	0x2003e6b0

000b5df4 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>:
         * 
         * Blocks if another thread has obtained the mutex, continues when the other thread releases it.
         * 
         * Never call lock from a SINGLE_THREADED_BLOCK since deadlock can occur.
         */
        void lock() const { 
   b5df4:	b510      	push	{r4, lr}
            if (!handle_) {
   b5df6:	6803      	ldr	r3, [r0, #0]
        void lock() const { 
   b5df8:	4604      	mov	r4, r0
            if (!handle_) {
   b5dfa:	b90b      	cbnz	r3, b5e00 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv+0xc>
                os_mutex_recursive_create(&handle_);
   b5dfc:	f000 fef0 	bl	b6be0 <os_mutex_recursive_create>
            }
            os_mutex_recursive_lock(handle_); 
   b5e00:	6820      	ldr	r0, [r4, #0]
        }
   b5e02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            os_mutex_recursive_lock(handle_); 
   b5e06:	f000 befb 	b.w	b6c00 <os_mutex_recursive_lock>

000b5e0a <_ZN15StorageHelperRK18PersistentDataFRAM4saveEv>:
        }

        /**
         * @brief Save the persistent data file. You normally do not need to call this; it will be saved automatically.
         */
        virtual void save() {
   b5e0a:	b538      	push	{r3, r4, r5, lr}
   b5e0c:	4604      	mov	r4, r0
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
      { _M_device.lock(); }
   b5e0e:	3004      	adds	r0, #4
   b5e10:	f7ff fff0 	bl	b5df4 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
            WITH_LOCK(*this) {
                fram.writeData(framOffset, (const uint8_t*)savedDataHeader, savedDataSize);
   b5e14:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b5e16:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   b5e18:	6803      	ldr	r3, [r0, #0]
   b5e1a:	68dd      	ldr	r5, [r3, #12]
   b5e1c:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   b5e20:	47a8      	blx	r5
            os_mutex_recursive_unlock(handle_); 
   b5e22:	6860      	ldr	r0, [r4, #4]
   b5e24:	f000 fef4 	bl	b6c10 <os_mutex_recursive_unlock>
            }
            PersistentDataBase::save();
   b5e28:	4620      	mov	r0, r4
        } 
   b5e2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            PersistentDataBase::save();
   b5e2e:	f000 bd91 	b.w	b6954 <_ZN15StorageHelperRK18PersistentDataBase4saveEv>

000b5e32 <_ZN15StorageHelperRK18PersistentDataFRAM4loadEv>:
        virtual bool load() {
   b5e32:	b538      	push	{r3, r4, r5, lr}
   b5e34:	4604      	mov	r4, r0
   b5e36:	3004      	adds	r0, #4
   b5e38:	f7ff ffdc 	bl	b5df4 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                fram.readData(framOffset, (uint8_t*)savedDataHeader, savedDataSize);
   b5e3c:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b5e3e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   b5e40:	6803      	ldr	r3, [r0, #0]
   b5e42:	689d      	ldr	r5, [r3, #8]
   b5e44:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   b5e48:	47a8      	blx	r5
                if (!validate(savedDataHeader->size)) {
   b5e4a:	68a2      	ldr	r2, [r4, #8]
   b5e4c:	6823      	ldr	r3, [r4, #0]
   b5e4e:	88d1      	ldrh	r1, [r2, #6]
   b5e50:	695b      	ldr	r3, [r3, #20]
   b5e52:	4620      	mov	r0, r4
   b5e54:	4798      	blx	r3
   b5e56:	b918      	cbnz	r0, b5e60 <_ZN15StorageHelperRK18PersistentDataFRAM4loadEv+0x2e>
                    initialize();
   b5e58:	6823      	ldr	r3, [r4, #0]
   b5e5a:	4620      	mov	r0, r4
   b5e5c:	699b      	ldr	r3, [r3, #24]
   b5e5e:	4798      	blx	r3
            os_mutex_recursive_unlock(handle_); 
   b5e60:	6860      	ldr	r0, [r4, #4]
   b5e62:	f000 fed5 	bl	b6c10 <os_mutex_recursive_unlock>
        }
   b5e66:	2001      	movs	r0, #1
   b5e68:	bd38      	pop	{r3, r4, r5, pc}
	...

000b5e6c <_ZN15StorageHelperRK18PersistentDataFRAMD1Ev>:
    class PersistentDataFRAM : public PersistentDataBase {
   b5e6c:	b510      	push	{r4, lr}
    class PersistentDataBase : public CustomRecursiveMutex {
   b5e6e:	4b04      	ldr	r3, [pc, #16]	; (b5e80 <_ZN15StorageHelperRK18PersistentDataFRAMD1Ev+0x14>)
   b5e70:	6003      	str	r3, [r0, #0]
    class PersistentDataFRAM : public PersistentDataBase {
   b5e72:	4604      	mov	r4, r0
            if (handle_) {
   b5e74:	6840      	ldr	r0, [r0, #4]
   b5e76:	b108      	cbz	r0, b5e7c <_ZN15StorageHelperRK18PersistentDataFRAMD1Ev+0x10>
                os_mutex_recursive_destroy(handle_);
   b5e78:	f000 feba 	bl	b6bf0 <os_mutex_recursive_destroy>
    class PersistentDataFRAM : public PersistentDataBase {
   b5e7c:	4620      	mov	r0, r4
   b5e7e:	bd10      	pop	{r4, pc}
   b5e80:	000bac98 	.word	0x000bac98

000b5e84 <_ZN17currentStatusDataD1Ev>:
currentStatusData::~currentStatusData() {
   b5e84:	b510      	push	{r4, lr}
   b5e86:	4b03      	ldr	r3, [pc, #12]	; (b5e94 <_ZN17currentStatusDataD1Ev+0x10>)
   b5e88:	6003      	str	r3, [r0, #0]
   b5e8a:	4604      	mov	r4, r0
   b5e8c:	f7ff ffee 	bl	b5e6c <_ZN15StorageHelperRK18PersistentDataFRAMD1Ev>
}
   b5e90:	4620      	mov	r0, r4
   b5e92:	bd10      	pop	{r4, pc}
   b5e94:	000babc0 	.word	0x000babc0

000b5e98 <_ZN17currentStatusDataD0Ev>:
currentStatusData::~currentStatusData() {
   b5e98:	b510      	push	{r4, lr}
   b5e9a:	4604      	mov	r4, r0
}
   b5e9c:	f7ff fff2 	bl	b5e84 <_ZN17currentStatusDataD1Ev>
   b5ea0:	4620      	mov	r0, r4
   b5ea2:	2160      	movs	r1, #96	; 0x60
   b5ea4:	f7fe f8f9 	bl	b409a <_ZdlPvj>
   b5ea8:	4620      	mov	r0, r4
   b5eaa:	bd10      	pop	{r4, pc}

000b5eac <_ZN10nodeIDDataD1Ev>:
nodeIDData::~nodeIDData() {
   b5eac:	b510      	push	{r4, lr}
   b5eae:	4b03      	ldr	r3, [pc, #12]	; (b5ebc <_ZN10nodeIDDataD1Ev+0x10>)
   b5eb0:	6003      	str	r3, [r0, #0]
   b5eb2:	4604      	mov	r4, r0
   b5eb4:	f7ff ffda 	bl	b5e6c <_ZN15StorageHelperRK18PersistentDataFRAMD1Ev>
}
   b5eb8:	4620      	mov	r0, r4
   b5eba:	bd10      	pop	{r4, pc}
   b5ebc:	000bab94 	.word	0x000bab94

000b5ec0 <_ZN10nodeIDDataD0Ev>:
nodeIDData::~nodeIDData() {
   b5ec0:	b510      	push	{r4, lr}
   b5ec2:	4604      	mov	r4, r0
}
   b5ec4:	f7ff fff2 	bl	b5eac <_ZN10nodeIDDataD1Ev>
   b5ec8:	4620      	mov	r0, r4
   b5eca:	f640 413c 	movw	r1, #3132	; 0xc3c
   b5ece:	f7fe f8e4 	bl	b409a <_ZdlPvj>
   b5ed2:	4620      	mov	r0, r4
   b5ed4:	bd10      	pop	{r4, pc}
	...

000b5ed8 <_ZN17currentStatusDataC1Ev>:
currentStatusData::currentStatusData() : StorageHelperRK::PersistentDataFRAM(::fram, 100, &currentData.currentHeader, sizeof(CurrentData), CURRENT_DATA_MAGIC, CURRENT_DATA_VERSION) {
   b5ed8:	f100 012c 	add.w	r1, r0, #44	; 0x2c
        CustomRecursiveMutex() : handle_(nullptr) {
   b5edc:	2200      	movs	r2, #0
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b5ede:	6081      	str	r1, [r0, #8]
   b5ee0:	490a      	ldr	r1, [pc, #40]	; (b5f0c <_ZN17currentStatusDataC1Ev+0x34>)
        CustomRecursiveMutex() : handle_(nullptr) {
   b5ee2:	6042      	str	r2, [r0, #4]
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b5ee4:	f04f 0c34 	mov.w	ip, #52	; 0x34
   b5ee8:	6182      	str	r2, [r0, #24]
   b5eea:	f880 2020 	strb.w	r2, [r0, #32]
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion), fram(fram), framOffset(framOffset) {
   b5eee:	4a08      	ldr	r2, [pc, #32]	; (b5f10 <_ZN17currentStatusDataC1Ev+0x38>)
   b5ef0:	6242      	str	r2, [r0, #36]	; 0x24
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b5ef2:	e9c0 c103 	strd	ip, r1, [r0, #12]
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion), fram(fram), framOffset(framOffset) {
   b5ef6:	2264      	movs	r2, #100	; 0x64
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b5ef8:	2103      	movs	r1, #3
   b5efa:	8281      	strh	r1, [r0, #20]
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion), fram(fram), framOffset(framOffset) {
   b5efc:	6282      	str	r2, [r0, #40]	; 0x28
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b5efe:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   b5f02:	4a04      	ldr	r2, [pc, #16]	; (b5f14 <_ZN17currentStatusDataC1Ev+0x3c>)
   b5f04:	61c1      	str	r1, [r0, #28]
   b5f06:	6002      	str	r2, [r0, #0]
};
   b5f08:	4770      	bx	lr
   b5f0a:	bf00      	nop
   b5f0c:	20a99e80 	.word	0x20a99e80
   b5f10:	2003e620 	.word	0x2003e620
   b5f14:	000babc0 	.word	0x000babc0

000b5f18 <_ZN17currentStatusData8instanceEv>:
currentStatusData &currentStatusData::instance() {
   b5f18:	b510      	push	{r4, lr}
    if (!_instance) {
   b5f1a:	4c06      	ldr	r4, [pc, #24]	; (b5f34 <_ZN17currentStatusData8instanceEv+0x1c>)
   b5f1c:	6823      	ldr	r3, [r4, #0]
   b5f1e:	b93b      	cbnz	r3, b5f30 <_ZN17currentStatusData8instanceEv+0x18>
        _instance = new currentStatusData();
   b5f20:	2060      	movs	r0, #96	; 0x60
   b5f22:	f7fe f8b6 	bl	b4092 <_Znwj>
   b5f26:	4603      	mov	r3, r0
   b5f28:	b108      	cbz	r0, b5f2e <_ZN17currentStatusData8instanceEv+0x16>
   b5f2a:	f7ff ffd5 	bl	b5ed8 <_ZN17currentStatusDataC1Ev>
   b5f2e:	6023      	str	r3, [r4, #0]
}
   b5f30:	6820      	ldr	r0, [r4, #0]
   b5f32:	bd10      	pop	{r4, pc}
   b5f34:	2003e61c 	.word	0x2003e61c

000b5f38 <_ZN17currentStatusData5setupEv>:
void currentStatusData::setup() {
   b5f38:	b510      	push	{r4, lr}
    fram.begin();
   b5f3a:	6a40      	ldr	r0, [r0, #36]	; 0x24
   b5f3c:	f000 fa8c 	bl	b6458 <_ZN6MB85RC5beginEv>
    current
   b5f40:	f7ff ffea 	bl	b5f18 <_ZN17currentStatusData8instanceEv>
            saveDelayMs = value;
   b5f44:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
        .load();
   b5f48:	6803      	ldr	r3, [r0, #0]
   b5f4a:	61c2      	str	r2, [r0, #28]
}
   b5f4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        .load();
   b5f50:	685b      	ldr	r3, [r3, #4]
   b5f52:	4718      	bx	r3

000b5f54 <_ZNK17currentStatusData12get_uniqueIDEv>:
uint32_t currentStatusData::get_uniqueID() const {
   b5f54:	b538      	push	{r3, r4, r5, lr}
   b5f56:	4604      	mov	r4, r0
   b5f58:	3004      	adds	r0, #4
   b5f5a:	f7ff ff4b 	bl	b5df4 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b5f5e:	68e3      	ldr	r3, [r4, #12]
            os_mutex_recursive_unlock(handle_); 
   b5f60:	6860      	ldr	r0, [r4, #4]
                if (offset <= (savedDataSize - sizeof(T))) {
   b5f62:	3b04      	subs	r3, #4
   b5f64:	2b17      	cmp	r3, #23
                    result = *(const T *)p;
   b5f66:	bf86      	itte	hi
   b5f68:	68a3      	ldrhi	r3, [r4, #8]
   b5f6a:	699d      	ldrhi	r5, [r3, #24]
            T result = 0;
   b5f6c:	2500      	movls	r5, #0
            os_mutex_recursive_unlock(handle_); 
   b5f6e:	f000 fe4f 	bl	b6c10 <os_mutex_recursive_unlock>
}
   b5f72:	4628      	mov	r0, r5
   b5f74:	bd38      	pop	{r3, r4, r5, pc}

000b5f76 <_ZN17currentStatusData12set_uniqueIDEm>:
void currentStatusData::set_uniqueID(uint32_t value) {
   b5f76:	b538      	push	{r3, r4, r5, lr}
   b5f78:	4604      	mov	r4, r0
   b5f7a:	3004      	adds	r0, #4
   b5f7c:	460d      	mov	r5, r1
   b5f7e:	f7ff ff39 	bl	b5df4 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b5f82:	68e3      	ldr	r3, [r4, #12]
   b5f84:	3b04      	subs	r3, #4
   b5f86:	2b17      	cmp	r3, #23
   b5f88:	d907      	bls.n	b5f9a <_ZN17currentStatusData12set_uniqueIDEm+0x24>
                    uint8_t *p = (uint8_t *)savedDataHeader;
   b5f8a:	68a3      	ldr	r3, [r4, #8]
                    if (oldValue != value) {
   b5f8c:	699a      	ldr	r2, [r3, #24]
   b5f8e:	4295      	cmp	r5, r2
   b5f90:	d003      	beq.n	b5f9a <_ZN17currentStatusData12set_uniqueIDEm+0x24>
                        *(T *)p = value;
   b5f92:	619d      	str	r5, [r3, #24]
                        updateHash();
   b5f94:	4620      	mov	r0, r4
   b5f96:	f000 fc1f 	bl	b67d8 <_ZN15StorageHelperRK18PersistentDataBase10updateHashEv>
            os_mutex_recursive_unlock(handle_); 
   b5f9a:	6860      	ldr	r0, [r4, #4]
}
   b5f9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b5fa0:	f000 be36 	b.w	b6c10 <os_mutex_recursive_unlock>

000b5fa4 <_ZN17currentStatusData17set_stateOfChargeEa>:
void currentStatusData::set_stateOfCharge(int8_t value) {
   b5fa4:	b538      	push	{r3, r4, r5, lr}
   b5fa6:	4604      	mov	r4, r0
   b5fa8:	3004      	adds	r0, #4
   b5faa:	460d      	mov	r5, r1
   b5fac:	f7ff ff22 	bl	b5df4 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b5fb0:	68e3      	ldr	r3, [r4, #12]
   b5fb2:	3b01      	subs	r3, #1
   b5fb4:	2b24      	cmp	r3, #36	; 0x24
   b5fb6:	d909      	bls.n	b5fcc <_ZN17currentStatusData17set_stateOfChargeEa+0x28>
                    uint8_t *p = (uint8_t *)savedDataHeader;
   b5fb8:	68a3      	ldr	r3, [r4, #8]
                    if (oldValue != value) {
   b5fba:	f993 2025 	ldrsb.w	r2, [r3, #37]	; 0x25
   b5fbe:	42aa      	cmp	r2, r5
   b5fc0:	d004      	beq.n	b5fcc <_ZN17currentStatusData17set_stateOfChargeEa+0x28>
                        *(T *)p = value;
   b5fc2:	f883 5025 	strb.w	r5, [r3, #37]	; 0x25
                        updateHash();
   b5fc6:	4620      	mov	r0, r4
   b5fc8:	f000 fc06 	bl	b67d8 <_ZN15StorageHelperRK18PersistentDataBase10updateHashEv>
            os_mutex_recursive_unlock(handle_); 
   b5fcc:	6860      	ldr	r0, [r4, #4]
}
   b5fce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b5fd2:	f000 be1d 	b.w	b6c10 <os_mutex_recursive_unlock>
	...

000b5fd8 <_ZN10nodeIDDataC1Ev>:
nodeIDData::nodeIDData() : StorageHelperRK::PersistentDataFRAM(::fram, 200, &nodeData.nodeHeader, sizeof(NodeData), NODEID_DATA_MAGIC, NODEID_DATA_VERSION) {
   b5fd8:	f100 012c 	add.w	r1, r0, #44	; 0x2c
        CustomRecursiveMutex() : handle_(nullptr) {
   b5fdc:	2200      	movs	r2, #0
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b5fde:	6081      	str	r1, [r0, #8]
   b5fe0:	490a      	ldr	r1, [pc, #40]	; (b600c <_ZN10nodeIDDataC1Ev+0x34>)
        CustomRecursiveMutex() : handle_(nullptr) {
   b5fe2:	6042      	str	r2, [r0, #4]
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b5fe4:	f44f 6c41 	mov.w	ip, #3088	; 0xc10
   b5fe8:	6182      	str	r2, [r0, #24]
   b5fea:	f880 2020 	strb.w	r2, [r0, #32]
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion), fram(fram), framOffset(framOffset) {
   b5fee:	4a08      	ldr	r2, [pc, #32]	; (b6010 <_ZN10nodeIDDataC1Ev+0x38>)
   b5ff0:	6242      	str	r2, [r0, #36]	; 0x24
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b5ff2:	e9c0 c103 	strd	ip, r1, [r0, #12]
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion), fram(fram), framOffset(framOffset) {
   b5ff6:	22c8      	movs	r2, #200	; 0xc8
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b5ff8:	2102      	movs	r1, #2
   b5ffa:	8281      	strh	r1, [r0, #20]
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion), fram(fram), framOffset(framOffset) {
   b5ffc:	6282      	str	r2, [r0, #40]	; 0x28
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b5ffe:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   b6002:	4a04      	ldr	r2, [pc, #16]	; (b6014 <_ZN10nodeIDDataC1Ev+0x3c>)
   b6004:	61c1      	str	r1, [r0, #28]
   b6006:	6002      	str	r2, [r0, #0]
};
   b6008:	4770      	bx	lr
   b600a:	bf00      	nop
   b600c:	20a99e60 	.word	0x20a99e60
   b6010:	2003e620 	.word	0x2003e620
   b6014:	000bab94 	.word	0x000bab94

000b6018 <_ZN10nodeIDData8instanceEv>:
nodeIDData &nodeIDData::instance() {
   b6018:	b510      	push	{r4, lr}
    if (!_instance) {
   b601a:	4c07      	ldr	r4, [pc, #28]	; (b6038 <_ZN10nodeIDData8instanceEv+0x20>)
   b601c:	6823      	ldr	r3, [r4, #0]
   b601e:	b943      	cbnz	r3, b6032 <_ZN10nodeIDData8instanceEv+0x1a>
        _instance = new nodeIDData();
   b6020:	f640 403c 	movw	r0, #3132	; 0xc3c
   b6024:	f7fe f835 	bl	b4092 <_Znwj>
   b6028:	4603      	mov	r3, r0
   b602a:	b108      	cbz	r0, b6030 <_ZN10nodeIDData8instanceEv+0x18>
   b602c:	f7ff ffd4 	bl	b5fd8 <_ZN10nodeIDDataC1Ev>
   b6030:	6023      	str	r3, [r4, #0]
}
   b6032:	6820      	ldr	r0, [r4, #0]
   b6034:	bd10      	pop	{r4, pc}
   b6036:	bf00      	nop
   b6038:	2003e618 	.word	0x2003e618

000b603c <_ZN10nodeIDData5setupEv>:
void nodeIDData::setup() {
   b603c:	b510      	push	{r4, lr}
    fram.begin();
   b603e:	6a40      	ldr	r0, [r0, #36]	; 0x24
   b6040:	f000 fa0a 	bl	b6458 <_ZN6MB85RC5beginEv>
    nodeDatabase
   b6044:	f7ff ffe8 	bl	b6018 <_ZN10nodeIDData8instanceEv>
            saveDelayMs = value;
   b6048:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
        .load();
   b604c:	6803      	ldr	r3, [r0, #0]
   b604e:	61c2      	str	r2, [r0, #28]
}
   b6050:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        .load();
   b6054:	685b      	ldr	r3, [r3, #4]
   b6056:	4718      	bx	r3

000b6058 <_ZN10nodeIDData19nodeDataStorageSizeEv>:
}
   b6058:	f44f 6041 	mov.w	r0, #3088	; 0xc10
   b605c:	4770      	bx	lr
	...

000b6060 <_ZNK10nodeIDData14get_nodeIDJsonEv>:
    nodeIDData::resetNodeIDs();
    updateHash();                                       // If you manually update fields here, be sure to update the hash
}


String nodeIDData::get_nodeIDJson() const {
   b6060:	b538      	push	{r3, r4, r5, lr}
   b6062:	4604      	mov	r4, r0
   b6064:	460d      	mov	r5, r1
	String result;
   b6066:	4906      	ldr	r1, [pc, #24]	; (b6080 <_ZNK10nodeIDData14get_nodeIDJsonEv+0x20>)
   b6068:	f002 ffc3 	bl	b8ff2 <_ZN6StringC1EPK19__FlashStringHelper>
	getValueString(offsetof(NodeData, nodeIDJson), sizeof(NodeData::nodeIDJson), result);
   b606c:	4623      	mov	r3, r4
   b606e:	f44f 6240 	mov.w	r2, #3072	; 0xc00
   b6072:	2110      	movs	r1, #16
   b6074:	4628      	mov	r0, r5
   b6076:	f000 fb3d 	bl	b66f4 <_ZNK15StorageHelperRK18PersistentDataBase14getValueStringEjjR6String>
	return result;
}
   b607a:	4620      	mov	r0, r4
   b607c:	bd38      	pop	{r3, r4, r5, pc}
   b607e:	bf00      	nop
   b6080:	000bae2f 	.word	0x000bae2f

000b6084 <_ZN10nodeIDData14set_nodeIDJsonEPKc>:

bool nodeIDData::set_nodeIDJson(const char* str) {
   b6084:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6088:	f5ad 7d21 	sub.w	sp, sp, #644	; 0x284
   b608c:	4680      	mov	r8, r0
   b608e:	460c      	mov	r4, r1
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b6090:	f000 ff6a 	bl	b6f68 <spark_cloud_flag_connected>

    if (Particle.connected()) {
   b6094:	b360      	cbz	r0, b60f0 <_ZN10nodeIDData14set_nodeIDJsonEPKc+0x6c>
        const size_t maxChunkSize = 622; // max report size
        size_t messageLength = strlen(str);
   b6096:	4620      	mov	r0, r4
   b6098:	f003 fd55 	bl	b9b46 <strlen>
            // Calculate chunk size for the current iteration
            size_t chunkSize = std::min(maxChunkSize, messageLength - offset);

            // Create a buffer for the current chunk
            char chunk[maxChunkSize + 1]; // +1 for null terminator
            snprintf(chunk, sizeof(chunk), "%.*s", static_cast<int>(chunkSize), str + offset);
   b609c:	f8df b0d0 	ldr.w	fp, [pc, #208]	; b6170 <_ZN10nodeIDData14set_nodeIDJsonEPKc+0xec>
   b60a0:	f8df a0d0 	ldr.w	sl, [pc, #208]	; b6174 <_ZN10nodeIDData14set_nodeIDJsonEPKc+0xf0>
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b60a4:	f8df 90d0 	ldr.w	r9, [pc, #208]	; b6178 <_ZN10nodeIDData14set_nodeIDJsonEPKc+0xf4>
        size_t messageLength = strlen(str);
   b60a8:	4607      	mov	r7, r0
        size_t offset = 0;
   b60aa:	2500      	movs	r5, #0
        while (offset < messageLength) {
   b60ac:	42bd      	cmp	r5, r7
   b60ae:	d21f      	bcs.n	b60f0 <_ZN10nodeIDData14set_nodeIDJsonEPKc+0x6c>
            size_t chunkSize = std::min(maxChunkSize, messageLength - offset);
   b60b0:	1b7e      	subs	r6, r7, r5
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return __b < __a ? __b : __a;
      if (__b < __a)
	return __b;
      return __a;
   b60b2:	f240 226d 	movw	r2, #621	; 0x26d
   b60b6:	f240 236e 	movw	r3, #622	; 0x26e
   b60ba:	4296      	cmp	r6, r2
   b60bc:	bf88      	it	hi
   b60be:	461e      	movhi	r6, r3
            snprintf(chunk, sizeof(chunk), "%.*s", static_cast<int>(chunkSize), str + offset);
   b60c0:	1963      	adds	r3, r4, r5
   b60c2:	9300      	str	r3, [sp, #0]
   b60c4:	465a      	mov	r2, fp
   b60c6:	4633      	mov	r3, r6
   b60c8:	f240 216f 	movw	r1, #623	; 0x26f
   b60cc:	a804      	add	r0, sp, #16
   b60ce:	f000 ffeb 	bl	b70a8 <snprintf>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   b60d2:	f89a 3000 	ldrb.w	r3, [sl]
   b60d6:	f88d 3000 	strb.w	r3, [sp]
   b60da:	aa04      	add	r2, sp, #16
   b60dc:	233c      	movs	r3, #60	; 0x3c
   b60de:	4649      	mov	r1, r9
   b60e0:	a802      	add	r0, sp, #8
   b60e2:	f001 f9f9 	bl	b74d8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   b60e6:	a803      	add	r0, sp, #12
   b60e8:	f7fe f8c8 	bl	b427c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>

            // Publish the current chunk
            Particle.publish("Node Database before set:", chunk, PRIVATE);

            // Move to the next chunk
            offset += chunkSize;
   b60ec:	4435      	add	r5, r6
        while (offset < messageLength) {
   b60ee:	e7dd      	b.n	b60ac <_ZN10nodeIDData14set_nodeIDJsonEPKc+0x28>
    // char cleanedJson[3072];
    // strcpy(cleanedJson, str);
    // cleanJSON(cleanedJson);

    // Set the cleaned JSON value
    bool result = setValueString(offsetof(NodeData, nodeIDJson), sizeof(NodeData::nodeIDJson), str);
   b60f0:	4623      	mov	r3, r4
   b60f2:	f44f 6240 	mov.w	r2, #3072	; 0xc00
   b60f6:	2110      	movs	r1, #16
   b60f8:	4640      	mov	r0, r8
   b60fa:	f000 fb79 	bl	b67f0 <_ZN15StorageHelperRK18PersistentDataBase14setValueStringEjjPKc>

    if (result && Particle.connected()) {
   b60fe:	4607      	mov	r7, r0
   b6100:	b380      	cbz	r0, b6164 <_ZN10nodeIDData14set_nodeIDJsonEPKc+0xe0>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b6102:	f000 ff31 	bl	b6f68 <spark_cloud_flag_connected>
   b6106:	b368      	cbz	r0, b6164 <_ZN10nodeIDData14set_nodeIDJsonEPKc+0xe0>
        const size_t maxChunkSize = 622; // max report size
        size_t messageLength = strlen(str);
   b6108:	4620      	mov	r0, r4
   b610a:	f003 fd1c 	bl	b9b46 <strlen>
            // Calculate chunk size for the current iteration
            size_t chunkSize = std::min(maxChunkSize, messageLength - offset);

            // Create a buffer for the current chunk
            char chunk[maxChunkSize + 1]; // +1 for null terminator
            snprintf(chunk, sizeof(chunk), "%.*s", static_cast<int>(chunkSize), str + offset);
   b610e:	f8df b060 	ldr.w	fp, [pc, #96]	; b6170 <_ZN10nodeIDData14set_nodeIDJsonEPKc+0xec>
   b6112:	f8df a060 	ldr.w	sl, [pc, #96]	; b6174 <_ZN10nodeIDData14set_nodeIDJsonEPKc+0xf0>
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b6116:	f8df 9064 	ldr.w	r9, [pc, #100]	; b617c <_ZN10nodeIDData14set_nodeIDJsonEPKc+0xf8>
        size_t messageLength = strlen(str);
   b611a:	4680      	mov	r8, r0
        size_t offset = 0;
   b611c:	2500      	movs	r5, #0
        while (offset < messageLength) {
   b611e:	4545      	cmp	r5, r8
   b6120:	d220      	bcs.n	b6164 <_ZN10nodeIDData14set_nodeIDJsonEPKc+0xe0>
            size_t chunkSize = std::min(maxChunkSize, messageLength - offset);
   b6122:	eba8 0605 	sub.w	r6, r8, r5
   b6126:	f240 226d 	movw	r2, #621	; 0x26d
   b612a:	f240 236e 	movw	r3, #622	; 0x26e
   b612e:	4296      	cmp	r6, r2
   b6130:	bf88      	it	hi
   b6132:	461e      	movhi	r6, r3
            snprintf(chunk, sizeof(chunk), "%.*s", static_cast<int>(chunkSize), str + offset);
   b6134:	1963      	adds	r3, r4, r5
   b6136:	9300      	str	r3, [sp, #0]
   b6138:	465a      	mov	r2, fp
   b613a:	4633      	mov	r3, r6
   b613c:	f240 216f 	movw	r1, #623	; 0x26f
   b6140:	a804      	add	r0, sp, #16
   b6142:	f000 ffb1 	bl	b70a8 <snprintf>
   b6146:	f89a 3000 	ldrb.w	r3, [sl]
   b614a:	f88d 3000 	strb.w	r3, [sp]
   b614e:	aa04      	add	r2, sp, #16
   b6150:	233c      	movs	r3, #60	; 0x3c
   b6152:	4649      	mov	r1, r9
   b6154:	a802      	add	r0, sp, #8
   b6156:	f001 f9bf 	bl	b74d8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   b615a:	a803      	add	r0, sp, #12
   b615c:	f7fe f88e 	bl	b427c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>

            // Publish the current chunk
            Particle.publish("Node Database after set:", chunk, PRIVATE);

            // Move to the next chunk
            offset += chunkSize;
   b6160:	4435      	add	r5, r6
        while (offset < messageLength) {
   b6162:	e7dc      	b.n	b611e <_ZN10nodeIDData14set_nodeIDJsonEPKc+0x9a>
        }
    }

    return result;
}
   b6164:	4638      	mov	r0, r7
   b6166:	f50d 7d21 	add.w	sp, sp, #644	; 0x284
   b616a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b616e:	bf00      	nop
   b6170:	000baad0 	.word	0x000baad0
   b6174:	2003e614 	.word	0x2003e614
   b6178:	000baad5 	.word	0x000baad5
   b617c:	000baaef 	.word	0x000baaef

000b6180 <_ZN10nodeIDData12resetNodeIDsEv>:
void nodeIDData::resetNodeIDs() {
   b6180:	b510      	push	{r4, lr}
    Log.info("Resettig NodeID config to: %s", blank.c_str());
   b6182:	4c14      	ldr	r4, [pc, #80]	; (b61d4 <_ZN10nodeIDData12resetNodeIDsEv+0x54>)
    String blank = "{\"nodes\":[]}";
   b6184:	4914      	ldr	r1, [pc, #80]	; (b61d8 <_ZN10nodeIDData12resetNodeIDsEv+0x58>)
void nodeIDData::resetNodeIDs() {
   b6186:	b088      	sub	sp, #32
    String blank = "{\"nodes\":[]}";
   b6188:	4668      	mov	r0, sp
   b618a:	f002 ff32 	bl	b8ff2 <_ZN6StringC1EPK19__FlashStringHelper>
    Log.info("Resettig NodeID config to: %s", blank.c_str());
   b618e:	9a00      	ldr	r2, [sp, #0]
   b6190:	4912      	ldr	r1, [pc, #72]	; (b61dc <_ZN10nodeIDData12resetNodeIDsEv+0x5c>)
   b6192:	4620      	mov	r0, r4
   b6194:	f7fd fff2 	bl	b417c <_ZNK5spark6Logger4infoEPKcz>
    nodeDatabase.set_nodeIDJson(blank);
   b6198:	f7ff ff3e 	bl	b6018 <_ZN10nodeIDData8instanceEv>
   b619c:	9900      	ldr	r1, [sp, #0]
   b619e:	f7ff ff71 	bl	b6084 <_ZN10nodeIDData14set_nodeIDJsonEPKc>
    nodeDatabase.flush(true);
   b61a2:	f7ff ff39 	bl	b6018 <_ZN10nodeIDData8instanceEv>
   b61a6:	6803      	ldr	r3, [r0, #0]
   b61a8:	2101      	movs	r1, #1
   b61aa:	68db      	ldr	r3, [r3, #12]
   b61ac:	4798      	blx	r3
    Log.info("NodeID data is now %s", nodeDatabase.get_nodeIDJson().c_str());
   b61ae:	f7ff ff33 	bl	b6018 <_ZN10nodeIDData8instanceEv>
   b61b2:	4601      	mov	r1, r0
   b61b4:	a804      	add	r0, sp, #16
   b61b6:	f7ff ff53 	bl	b6060 <_ZNK10nodeIDData14get_nodeIDJsonEv>
   b61ba:	9a04      	ldr	r2, [sp, #16]
   b61bc:	4908      	ldr	r1, [pc, #32]	; (b61e0 <_ZN10nodeIDData12resetNodeIDsEv+0x60>)
   b61be:	4620      	mov	r0, r4
   b61c0:	f7fd ffdc 	bl	b417c <_ZNK5spark6Logger4infoEPKcz>
   b61c4:	a804      	add	r0, sp, #16
   b61c6:	f002 fec9 	bl	b8f5c <_ZN6StringD1Ev>
    String blank = "{\"nodes\":[]}";
   b61ca:	4668      	mov	r0, sp
   b61cc:	f002 fec6 	bl	b8f5c <_ZN6StringD1Ev>
}
   b61d0:	b008      	add	sp, #32
   b61d2:	bd10      	pop	{r4, pc}
   b61d4:	2003e6b0 	.word	0x2003e6b0
   b61d8:	000bab08 	.word	0x000bab08
   b61dc:	000bab15 	.word	0x000bab15
   b61e0:	000bab33 	.word	0x000bab33

000b61e4 <_ZN10nodeIDData10initializeEv>:
void nodeIDData::initialize() {
   b61e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    Log.info("Erasing FRAM region");
   b61e6:	4910      	ldr	r1, [pc, #64]	; (b6228 <_ZN10nodeIDData10initializeEv+0x44>)
void nodeIDData::initialize() {
   b61e8:	4604      	mov	r4, r0
    Log.info("Erasing FRAM region");
   b61ea:	4810      	ldr	r0, [pc, #64]	; (b622c <_ZN10nodeIDData10initializeEv+0x48>)
   b61ec:	f7fd ffc6 	bl	b417c <_ZNK5spark6Logger4infoEPKcz>
   b61f0:	25c8      	movs	r5, #200	; 0xc8
    for (unsigned int i=0; i < sizeof(NodeData); i++) {
   b61f2:	f640 46d8 	movw	r6, #3288	; 0xcd8
        fram.writeData(i+200,(uint8_t *)0xFF,2);
   b61f6:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b61f8:	6803      	ldr	r3, [r0, #0]
   b61fa:	4629      	mov	r1, r5
   b61fc:	68df      	ldr	r7, [r3, #12]
   b61fe:	22ff      	movs	r2, #255	; 0xff
   b6200:	2302      	movs	r3, #2
    for (unsigned int i=0; i < sizeof(NodeData); i++) {
   b6202:	3501      	adds	r5, #1
        fram.writeData(i+200,(uint8_t *)0xFF,2);
   b6204:	47b8      	blx	r7
    for (unsigned int i=0; i < sizeof(NodeData); i++) {
   b6206:	42b5      	cmp	r5, r6
   b6208:	d1f5      	bne.n	b61f6 <_ZN10nodeIDData10initializeEv+0x12>
    Log.info("Initializing data");
   b620a:	4909      	ldr	r1, [pc, #36]	; (b6230 <_ZN10nodeIDData10initializeEv+0x4c>)
   b620c:	4807      	ldr	r0, [pc, #28]	; (b622c <_ZN10nodeIDData10initializeEv+0x48>)
   b620e:	f7fd ffb5 	bl	b417c <_ZNK5spark6Logger4infoEPKcz>
    PersistentDataFRAM::initialize();
   b6212:	4620      	mov	r0, r4
   b6214:	f000 fb88 	bl	b6928 <_ZN15StorageHelperRK18PersistentDataBase10initializeEv>
    nodeIDData::resetNodeIDs();
   b6218:	4620      	mov	r0, r4
   b621a:	f7ff ffb1 	bl	b6180 <_ZN10nodeIDData12resetNodeIDsEv>
    updateHash();                                       // If you manually update fields here, be sure to update the hash
   b621e:	4620      	mov	r0, r4
}
   b6220:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    updateHash();                                       // If you manually update fields here, be sure to update the hash
   b6224:	f000 bad8 	b.w	b67d8 <_ZN15StorageHelperRK18PersistentDataBase10updateHashEv>
   b6228:	000bab49 	.word	0x000bab49
   b622c:	2003e6b0 	.word	0x2003e6b0
   b6230:	000bab5d 	.word	0x000bab5d

000b6234 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>:
        T getValue(size_t offset) const {
   b6234:	b538      	push	{r3, r4, r5, lr}
   b6236:	4604      	mov	r4, r0
   b6238:	3004      	adds	r0, #4
   b623a:	460d      	mov	r5, r1
   b623c:	f7ff fdda 	bl	b5df4 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b6240:	68e3      	ldr	r3, [r4, #12]
            os_mutex_recursive_unlock(handle_); 
   b6242:	6860      	ldr	r0, [r4, #4]
                if (offset <= (savedDataSize - sizeof(T))) {
   b6244:	3b01      	subs	r3, #1
   b6246:	42ab      	cmp	r3, r5
                    const uint8_t *p = (uint8_t *)savedDataHeader;
   b6248:	bf26      	itte	cs
   b624a:	68a3      	ldrcs	r3, [r4, #8]
                    result = *(const T *)p;
   b624c:	5d5d      	ldrbcs	r5, [r3, r5]
            T result = 0;
   b624e:	2500      	movcc	r5, #0
            os_mutex_recursive_unlock(handle_); 
   b6250:	f000 fcde 	bl	b6c10 <os_mutex_recursive_unlock>
        }
   b6254:	4628      	mov	r0, r5
   b6256:	bd38      	pop	{r3, r4, r5, pc}

000b6258 <_ZNK17currentStatusData14get_nodeNumberEv>:
uint8_t currentStatusData::get_nodeNumber() const {
   b6258:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(CurrentData, nodeNumber));
   b625a:	2110      	movs	r1, #16
   b625c:	f7ff ffea 	bl	b6234 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b6260:	bd08      	pop	{r3, pc}

000b6262 <_ZNK17currentStatusData14get_sensorTypeEv>:
uint8_t currentStatusData::get_sensorType() const {
   b6262:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(CurrentData, sensorType));
   b6264:	2114      	movs	r1, #20
   b6266:	f7ff ffe5 	bl	b6234 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b626a:	bd08      	pop	{r3, pc}

000b626c <_ZNK17currentStatusData12get_payload1Ev>:
uint8_t currentStatusData::get_payload1() const {
   b626c:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(CurrentData, payload1));
   b626e:	211c      	movs	r1, #28
   b6270:	f7ff ffe0 	bl	b6234 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b6274:	bd08      	pop	{r3, pc}

000b6276 <_ZNK17currentStatusData12get_payload2Ev>:
uint8_t currentStatusData::get_payload2() const {
   b6276:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(CurrentData, payload2));
   b6278:	211d      	movs	r1, #29
   b627a:	f7ff ffdb 	bl	b6234 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b627e:	bd08      	pop	{r3, pc}

000b6280 <_ZNK17currentStatusData12get_payload3Ev>:
uint8_t currentStatusData::get_payload3() const {
   b6280:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(CurrentData, payload3));
   b6282:	211e      	movs	r1, #30
   b6284:	f7ff ffd6 	bl	b6234 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b6288:	bd08      	pop	{r3, pc}

000b628a <_ZNK17currentStatusData12get_payload4Ev>:
uint8_t currentStatusData::get_payload4() const {
   b628a:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(CurrentData, payload4));
   b628c:	211f      	movs	r1, #31
   b628e:	f7ff ffd1 	bl	b6234 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b6292:	bd08      	pop	{r3, pc}

000b6294 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>:
        void setValue(size_t offset, T value)  {
   b6294:	b570      	push	{r4, r5, r6, lr}
   b6296:	4604      	mov	r4, r0
   b6298:	3004      	adds	r0, #4
   b629a:	460d      	mov	r5, r1
   b629c:	4616      	mov	r6, r2
   b629e:	f7ff fda9 	bl	b5df4 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b62a2:	68e3      	ldr	r3, [r4, #12]
   b62a4:	3b01      	subs	r3, #1
   b62a6:	42ab      	cmp	r3, r5
   b62a8:	d307      	bcc.n	b62ba <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_+0x26>
                    uint8_t *p = (uint8_t *)savedDataHeader;
   b62aa:	68a3      	ldr	r3, [r4, #8]
                    if (oldValue != value) {
   b62ac:	5d5a      	ldrb	r2, [r3, r5]
   b62ae:	42b2      	cmp	r2, r6
   b62b0:	d003      	beq.n	b62ba <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_+0x26>
                        *(T *)p = value;
   b62b2:	555e      	strb	r6, [r3, r5]
                        updateHash();
   b62b4:	4620      	mov	r0, r4
   b62b6:	f000 fa8f 	bl	b67d8 <_ZN15StorageHelperRK18PersistentDataBase10updateHashEv>
            os_mutex_recursive_unlock(handle_); 
   b62ba:	6860      	ldr	r0, [r4, #4]
        }
   b62bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            os_mutex_recursive_unlock(handle_); 
   b62c0:	f000 bca6 	b.w	b6c10 <os_mutex_recursive_unlock>

000b62c4 <_ZN17currentStatusData14set_sensorTypeEh>:
void currentStatusData::set_sensorType(uint8_t value) {
   b62c4:	b508      	push	{r3, lr}
   b62c6:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(CurrentData, sensorType), value);
   b62c8:	2114      	movs	r1, #20
   b62ca:	f7ff ffe3 	bl	b6294 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b62ce:	bd08      	pop	{r3, pc}

000b62d0 <_ZN17currentStatusData12set_payload1Eh>:
void currentStatusData::set_payload1(uint8_t value) {
   b62d0:	b508      	push	{r3, lr}
   b62d2:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(CurrentData, payload1), value);
   b62d4:	211c      	movs	r1, #28
   b62d6:	f7ff ffdd 	bl	b6294 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}   
   b62da:	bd08      	pop	{r3, pc}

000b62dc <_ZN17currentStatusData12set_payload2Eh>:
void currentStatusData::set_payload2(uint8_t value) {
   b62dc:	b508      	push	{r3, lr}
   b62de:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(CurrentData, payload2), value);
   b62e0:	211d      	movs	r1, #29
   b62e2:	f7ff ffd7 	bl	b6294 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}   
   b62e6:	bd08      	pop	{r3, pc}

000b62e8 <_ZN17currentStatusData12set_payload3Eh>:
void currentStatusData::set_payload3(uint8_t value) {
   b62e8:	b508      	push	{r3, lr}
   b62ea:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(CurrentData, payload3), value);
   b62ec:	211e      	movs	r1, #30
   b62ee:	f7ff ffd1 	bl	b6294 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b62f2:	bd08      	pop	{r3, pc}

000b62f4 <_ZN17currentStatusData12set_payload4Eh>:
void currentStatusData::set_payload4(uint8_t value) {
   b62f4:	b508      	push	{r3, lr}
   b62f6:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(CurrentData, payload4), value);
   b62f8:	211f      	movs	r1, #31
   b62fa:	f7ff ffcb 	bl	b6294 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}   
   b62fe:	bd08      	pop	{r3, pc}

000b6300 <_ZN17currentStatusData12set_payload5Eh>:
void currentStatusData::set_payload5(uint8_t value) {
   b6300:	b508      	push	{r3, lr}
   b6302:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(CurrentData, payload5), value);
   b6304:	2120      	movs	r1, #32
   b6306:	f7ff ffc5 	bl	b6294 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b630a:	bd08      	pop	{r3, pc}

000b630c <_ZN17currentStatusData12set_payload6Eh>:
void currentStatusData::set_payload6(uint8_t value) {
   b630c:	b508      	push	{r3, lr}
   b630e:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(CurrentData, payload6), value);
   b6310:	2121      	movs	r1, #33	; 0x21
   b6312:	f7ff ffbf 	bl	b6294 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b6316:	bd08      	pop	{r3, pc}

000b6318 <_ZN17currentStatusData12set_payload7Eh>:
void currentStatusData::set_payload7(uint8_t value) {
   b6318:	b508      	push	{r3, lr}
   b631a:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(CurrentData, payload7), value);
   b631c:	2122      	movs	r1, #34	; 0x22
   b631e:	f7ff ffb9 	bl	b6294 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b6322:	bd08      	pop	{r3, pc}

000b6324 <_ZN17currentStatusData12set_payload8Eh>:
void currentStatusData::set_payload8(uint8_t value) {
   b6324:	b508      	push	{r3, lr}
   b6326:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(CurrentData, payload8), value);
   b6328:	2123      	movs	r1, #35	; 0x23
   b632a:	f7ff ffb3 	bl	b6294 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b632e:	bd08      	pop	{r3, pc}

000b6330 <_ZN17currentStatusData17set_internalTempCEh>:
void currentStatusData::set_internalTempC(uint8_t value) {
   b6330:	b508      	push	{r3, lr}
   b6332:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(CurrentData, internalTempC), value);
   b6334:	2124      	movs	r1, #36	; 0x24
   b6336:	f7ff ffad 	bl	b6294 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b633a:	bd08      	pop	{r3, pc}

000b633c <_ZN17currentStatusData16set_batteryStateEh>:
void currentStatusData::set_batteryState(uint8_t value) {
   b633c:	b508      	push	{r3, lr}
   b633e:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(CurrentData, batteryState), value);
   b6340:	2126      	movs	r1, #38	; 0x26
   b6342:	f7ff ffa7 	bl	b6294 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b6346:	bd08      	pop	{r3, pc}

000b6348 <_ZN17currentStatusData14set_resetCountEh>:
void currentStatusData::set_resetCount(uint8_t value) {
   b6348:	b508      	push	{r3, lr}
   b634a:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(CurrentData, resetCount), value);
   b634c:	2127      	movs	r1, #39	; 0x27
   b634e:	f7ff ffa1 	bl	b6294 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b6352:	bd08      	pop	{r3, pc}

000b6354 <_ZN17currentStatusData17set_alertCodeNodeEh>:
void currentStatusData::set_alertCodeNode(uint8_t value) {
   b6354:	b508      	push	{r3, lr}
   b6356:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(CurrentData, alertCodeNode), value);
   b6358:	212c      	movs	r1, #44	; 0x2c
   b635a:	f7ff ff9b 	bl	b6294 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b635e:	bd08      	pop	{r3, pc}

000b6360 <_ZN17currentStatusData14set_retryCountEh>:
void currentStatusData::set_retryCount(uint8_t value) {
   b6360:	b508      	push	{r3, lr}
   b6362:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(CurrentData, retryCount), value);
   b6364:	2130      	movs	r1, #48	; 0x30
   b6366:	f7ff ff95 	bl	b6294 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b636a:	bd08      	pop	{r3, pc}

000b636c <_ZN17currentStatusData23set_retransmissionDelayEh>:
void currentStatusData::set_retransmissionDelay(uint8_t value) {
   b636c:	b508      	push	{r3, lr}
   b636e:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(CurrentData, retransmissionDelay), value);
   b6370:	2131      	movs	r1, #49	; 0x31
   b6372:	f7ff ff8f 	bl	b6294 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b6376:	bd08      	pop	{r3, pc}

000b6378 <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_>:
        void setValue(size_t offset, T value)  {
   b6378:	b570      	push	{r4, r5, r6, lr}
   b637a:	4604      	mov	r4, r0
   b637c:	3004      	adds	r0, #4
   b637e:	460d      	mov	r5, r1
   b6380:	4616      	mov	r6, r2
   b6382:	f7ff fd37 	bl	b5df4 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b6386:	68e3      	ldr	r3, [r4, #12]
   b6388:	3b02      	subs	r3, #2
   b638a:	42ab      	cmp	r3, r5
   b638c:	d307      	bcc.n	b639e <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_+0x26>
                    uint8_t *p = (uint8_t *)savedDataHeader;
   b638e:	68a3      	ldr	r3, [r4, #8]
                    if (oldValue != value) {
   b6390:	5b5a      	ldrh	r2, [r3, r5]
   b6392:	42b2      	cmp	r2, r6
   b6394:	d003      	beq.n	b639e <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_+0x26>
                        *(T *)p = value;
   b6396:	535e      	strh	r6, [r3, r5]
                        updateHash();
   b6398:	4620      	mov	r0, r4
   b639a:	f000 fa1d 	bl	b67d8 <_ZN15StorageHelperRK18PersistentDataBase10updateHashEv>
            os_mutex_recursive_unlock(handle_); 
   b639e:	6860      	ldr	r0, [r4, #4]
        }
   b63a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            os_mutex_recursive_unlock(handle_); 
   b63a4:	f000 bc34 	b.w	b6c10 <os_mutex_recursive_unlock>

000b63a8 <_ZN17currentStatusData9set_tokenEt>:
void currentStatusData::set_token(uint16_t value) {
   b63a8:	b508      	push	{r3, lr}
   b63aa:	460a      	mov	r2, r1
    setValue<uint16_t>(offsetof(CurrentData, token), value);
   b63ac:	2112      	movs	r1, #18
   b63ae:	f7ff ffe3 	bl	b6378 <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_>
}
   b63b2:	bd08      	pop	{r3, pc}

000b63b4 <_ZN15StorageHelperRK18PersistentDataBase8setValueIsEEvjT_>:
        void setValue(size_t offset, T value)  {
   b63b4:	b570      	push	{r4, r5, r6, lr}
   b63b6:	4604      	mov	r4, r0
   b63b8:	3004      	adds	r0, #4
   b63ba:	460d      	mov	r5, r1
   b63bc:	4616      	mov	r6, r2
   b63be:	f7ff fd19 	bl	b5df4 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b63c2:	68e3      	ldr	r3, [r4, #12]
   b63c4:	3b02      	subs	r3, #2
   b63c6:	42ab      	cmp	r3, r5
   b63c8:	d307      	bcc.n	b63da <_ZN15StorageHelperRK18PersistentDataBase8setValueIsEEvjT_+0x26>
                    uint8_t *p = (uint8_t *)savedDataHeader;
   b63ca:	68a3      	ldr	r3, [r4, #8]
                    if (oldValue != value) {
   b63cc:	5f5a      	ldrsh	r2, [r3, r5]
   b63ce:	42b2      	cmp	r2, r6
   b63d0:	d003      	beq.n	b63da <_ZN15StorageHelperRK18PersistentDataBase8setValueIsEEvjT_+0x26>
                        *(T *)p = value;
   b63d2:	535e      	strh	r6, [r3, r5]
                        updateHash();
   b63d4:	4620      	mov	r0, r4
   b63d6:	f000 f9ff 	bl	b67d8 <_ZN15StorageHelperRK18PersistentDataBase10updateHashEv>
            os_mutex_recursive_unlock(handle_); 
   b63da:	6860      	ldr	r0, [r4, #4]
        }
   b63dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            os_mutex_recursive_unlock(handle_); 
   b63e0:	f000 bc16 	b.w	b6c10 <os_mutex_recursive_unlock>

000b63e4 <_ZN17currentStatusData8set_RSSIEs>:
void currentStatusData::set_RSSI(int16_t value) {
   b63e4:	b508      	push	{r3, lr}
   b63e6:	460a      	mov	r2, r1
    setValue<int16_t>(offsetof(CurrentData, RSSI), value);
   b63e8:	2128      	movs	r1, #40	; 0x28
   b63ea:	f7ff ffe3 	bl	b63b4 <_ZN15StorageHelperRK18PersistentDataBase8setValueIsEEvjT_>
}
   b63ee:	bd08      	pop	{r3, pc}

000b63f0 <_ZN17currentStatusData7set_SNREs>:
void currentStatusData::set_SNR(int16_t value) {
   b63f0:	b508      	push	{r3, lr}
   b63f2:	460a      	mov	r2, r1
    setValue<int16_t>(offsetof(CurrentData, SNR), value);
   b63f4:	212a      	movs	r1, #42	; 0x2a
   b63f6:	f7ff ffdd 	bl	b63b4 <_ZN15StorageHelperRK18PersistentDataBase8setValueIsEEvjT_>
}
   b63fa:	bd08      	pop	{r3, pc}

000b63fc <_GLOBAL__sub_I_fram>:
        val_(val) {
   b63fc:	4b08      	ldr	r3, [pc, #32]	; (b6420 <_GLOBAL__sub_I_fram+0x24>)
   b63fe:	2201      	movs	r2, #1
    // Null-terminate the withoutDoubleCommas array
    withoutDoubleCommas[j] = '\0';

    // Copy the cleaned JSON back to the original string
    strcpy(jsonString, withoutDoubleCommas);
   b6400:	b510      	push	{r4, lr}
   b6402:	701a      	strb	r2, [r3, #0]
MB85RC64 fram(Wire, 0);
   b6404:	f003 f886 	bl	b9514 <_Z19__fetch_global_Wirev>
	 *
	 * @param addr The address 0-7 based on the setting of A0, A1 and A2.
	 *
	 * You typically create one of these objects as a global variable.
	 */
	MB85RC64(TwoWire &wire, int addr = 0) : MB85RC(wire, 8192, addr) {};
   b6408:	4c06      	ldr	r4, [pc, #24]	; (b6424 <_GLOBAL__sub_I_fram+0x28>)
   b640a:	4601      	mov	r1, r0
   b640c:	2300      	movs	r3, #0
   b640e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   b6412:	4620      	mov	r0, r4
   b6414:	f000 f816 	bl	b6444 <_ZN6MB85RCC1ER7TwoWireji>
   b6418:	4b03      	ldr	r3, [pc, #12]	; (b6428 <_GLOBAL__sub_I_fram+0x2c>)
   b641a:	6023      	str	r3, [r4, #0]
   b641c:	bd10      	pop	{r4, pc}
   b641e:	bf00      	nop
   b6420:	2003e614 	.word	0x2003e614
   b6424:	2003e620 	.word	0x2003e620
   b6428:	000bab78 	.word	0x000bab78

000b642c <_ZN6MB85RCD1Ev>:
MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
	wire(wire), memorySize(memorySize), addr(addr) {
}

MB85RC::~MB85RC() {
}
   b642c:	4770      	bx	lr

000b642e <_ZN6MB85RCD0Ev>:
MB85RC::~MB85RC() {
   b642e:	b510      	push	{r4, lr}
}
   b6430:	2110      	movs	r1, #16
MB85RC::~MB85RC() {
   b6432:	4604      	mov	r4, r0
}
   b6434:	f7fd fe31 	bl	b409a <_ZdlPvj>
   b6438:	4620      	mov	r0, r4
   b643a:	bd10      	pop	{r4, pc}

000b643c <_ZN7TwoWire5writeEj>:
  bool lock();
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
   b643c:	6803      	ldr	r3, [r0, #0]
   b643e:	b2c9      	uxtb	r1, r1
   b6440:	689b      	ldr	r3, [r3, #8]
   b6442:	4718      	bx	r3

000b6444 <_ZN6MB85RCC1ER7TwoWireji>:
MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
   b6444:	b530      	push	{r4, r5, lr}
	wire(wire), memorySize(memorySize), addr(addr) {
   b6446:	4d03      	ldr	r5, [pc, #12]	; (b6454 <_ZN6MB85RCC1ER7TwoWireji+0x10>)
   b6448:	e9c0 2302 	strd	r2, r3, [r0, #8]
   b644c:	e9c0 5100 	strd	r5, r1, [r0]
}
   b6450:	bd30      	pop	{r4, r5, pc}
   b6452:	bf00      	nop
   b6454:	000babec 	.word	0x000babec

000b6458 <_ZN6MB85RC5beginEv>:

void MB85RC::begin() {
	wire.begin();
   b6458:	6840      	ldr	r0, [r0, #4]
   b645a:	f001 ba31 	b.w	b78c0 <_ZN7TwoWire5beginEv>

000b645e <_ZNSt10lock_guardIR7TwoWireED1Ev>:

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   b645e:	b510      	push	{r4, lr}
   b6460:	4604      	mov	r4, r0
      { _M_device.unlock(); }
   b6462:	6800      	ldr	r0, [r0, #0]
   b6464:	f001 fa6f 	bl	b7946 <_ZN7TwoWire6unlockEv>
   b6468:	4620      	mov	r0, r4
   b646a:	bd10      	pop	{r4, pc}

000b646c <_ZN6MB85RC8readDataEjPhj>:

	return true;
}


bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
   b646c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b6470:	4604      	mov	r4, r0
	bool result = true;

	WITH_LOCK(wire) {
   b6472:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b6474:	9001      	str	r0, [sp, #4]
bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
   b6476:	460d      	mov	r5, r1
   b6478:	4616      	mov	r6, r2
   b647a:	461f      	mov	r7, r3
      { _M_device.lock(); }
   b647c:	f001 fa5a 	bl	b7934 <_ZN7TwoWire4lockEv>

		while(dataLen > 0) {
   b6480:	b1a7      	cbz	r7, b64ac <_ZN6MB85RC8readDataEjPhj+0x40>
			wire.beginTransmission(addr | DEVICE_ADDR);
   b6482:	68e1      	ldr	r1, [r4, #12]
   b6484:	6860      	ldr	r0, [r4, #4]
   b6486:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   b648a:	f001 fa4c 	bl	b7926 <_ZN7TwoWire17beginTransmissionEi>
			wire.write(framAddr >> 8);
   b648e:	0a29      	lsrs	r1, r5, #8
   b6490:	6860      	ldr	r0, [r4, #4]
   b6492:	f7ff ffd3 	bl	b643c <_ZN7TwoWire5writeEj>
			wire.write(framAddr);
   b6496:	4629      	mov	r1, r5
   b6498:	6860      	ldr	r0, [r4, #4]
   b649a:	f7ff ffcf 	bl	b643c <_ZN7TwoWire5writeEj>
			int stat = wire.endTransmission(false);
   b649e:	6860      	ldr	r0, [r4, #4]
   b64a0:	2100      	movs	r1, #0
   b64a2:	f001 fa43 	bl	b792c <_ZN7TwoWire15endTransmissionEh>
			if (stat != 0) {
   b64a6:	b148      	cbz	r0, b64bc <_ZN6MB85RC8readDataEjPhj+0x50>
				//Serial.printlnf("read set address failed %d", stat);
				result = false;
   b64a8:	2400      	movs	r4, #0
   b64aa:	e000      	b.n	b64ae <_ZN6MB85RC8readDataEjPhj+0x42>
   b64ac:	2401      	movs	r4, #1
	WITH_LOCK(wire) {
   b64ae:	a801      	add	r0, sp, #4
   b64b0:	f7ff ffd5 	bl	b645e <_ZNSt10lock_guardIR7TwoWireED1Ev>
				dataLen--;
			}
		}
	}
	return result;
}
   b64b4:	4620      	mov	r0, r4
   b64b6:	b003      	add	sp, #12
   b64b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			if (bytesToRead > 32) {
   b64bc:	2f20      	cmp	r7, #32
			wire.requestFrom((uint8_t)(addr | DEVICE_ADDR), bytesToRead, (uint8_t) true);
   b64be:	7b21      	ldrb	r1, [r4, #12]
   b64c0:	6860      	ldr	r0, [r4, #4]
   b64c2:	46b8      	mov	r8, r7
   b64c4:	bf28      	it	cs
   b64c6:	f04f 0820 	movcs.w	r8, #32
   b64ca:	2301      	movs	r3, #1
   b64cc:	4642      	mov	r2, r8
   b64ce:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   b64d2:	f001 fa12 	bl	b78fa <_ZN7TwoWire11requestFromEhjh>
			if (Wire.available() < (int) bytesToRead) {
   b64d6:	f003 f81d 	bl	b9514 <_Z19__fetch_global_Wirev>
   b64da:	6803      	ldr	r3, [r0, #0]
   b64dc:	691b      	ldr	r3, [r3, #16]
   b64de:	4798      	blx	r3
   b64e0:	4540      	cmp	r0, r8
   b64e2:	dbe1      	blt.n	b64a8 <_ZN6MB85RC8readDataEjPhj+0x3c>
   b64e4:	eb06 0908 	add.w	r9, r6, r8
				*data++ = Wire.read();    // receive a byte as character
   b64e8:	f003 f814 	bl	b9514 <_Z19__fetch_global_Wirev>
   b64ec:	6803      	ldr	r3, [r0, #0]
   b64ee:	695b      	ldr	r3, [r3, #20]
   b64f0:	4798      	blx	r3
   b64f2:	f806 0b01 	strb.w	r0, [r6], #1
			for(size_t ii = 0; ii < bytesToRead; ii++) {
   b64f6:	454e      	cmp	r6, r9
   b64f8:	d1f6      	bne.n	b64e8 <_ZN6MB85RC8readDataEjPhj+0x7c>
				framAddr++;
   b64fa:	4445      	add	r5, r8
				dataLen--;
   b64fc:	eba7 0708 	sub.w	r7, r7, r8
   b6500:	e7be      	b.n	b6480 <_ZN6MB85RC8readDataEjPhj+0x14>

000b6502 <_ZN6MB85RC9writeDataEjPKhj>:


bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
   b6502:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6506:	4604      	mov	r4, r0
	bool result = true;

	WITH_LOCK(wire) {
   b6508:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b650a:	9001      	str	r0, [sp, #4]
bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
   b650c:	460e      	mov	r6, r1
   b650e:	4690      	mov	r8, r2
   b6510:	461d      	mov	r5, r3
      { _M_device.lock(); }
   b6512:	f001 fa0f 	bl	b7934 <_ZN7TwoWire4lockEv>
   b6516:	f04f 0901 	mov.w	r9, #1
	WITH_LOCK(wire) {
   b651a:	f1b9 0f00 	cmp.w	r9, #0
   b651e:	d02a      	beq.n	b6576 <_ZN6MB85RC9writeDataEjPKhj+0x74>
		while(dataLen > 0) {
   b6520:	b34d      	cbz	r5, b6576 <_ZN6MB85RC9writeDataEjPKhj+0x74>
			wire.beginTransmission(addr | DEVICE_ADDR);
   b6522:	68e1      	ldr	r1, [r4, #12]
   b6524:	6860      	ldr	r0, [r4, #4]
   b6526:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   b652a:	f001 f9fc 	bl	b7926 <_ZN7TwoWire17beginTransmissionEi>
			wire.write(framAddr >> 8);
   b652e:	0a31      	lsrs	r1, r6, #8
   b6530:	6860      	ldr	r0, [r4, #4]
   b6532:	f7ff ff83 	bl	b643c <_ZN7TwoWire5writeEj>
			wire.write(framAddr);
   b6536:	6860      	ldr	r0, [r4, #4]
   b6538:	4631      	mov	r1, r6
   b653a:	f7ff ff7f 	bl	b643c <_ZN7TwoWire5writeEj>

			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   b653e:	f1a5 0a1e 	sub.w	sl, r5, #30
			wire.write(framAddr);
   b6542:	4647      	mov	r7, r8
   b6544:	eba6 0b08 	sub.w	fp, r6, r8
				wire.write(*data);
   b6548:	6860      	ldr	r0, [r4, #4]
   b654a:	f817 1b01 	ldrb.w	r1, [r7], #1
   b654e:	6803      	ldr	r3, [r0, #0]
				framAddr++;
				data++;
				dataLen--;
   b6550:	3d01      	subs	r5, #1
				wire.write(*data);
   b6552:	689b      	ldr	r3, [r3, #8]
   b6554:	4798      	blx	r3
			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   b6556:	4555      	cmp	r5, sl
   b6558:	eb0b 0607 	add.w	r6, fp, r7
				data++;
   b655c:	46b8      	mov	r8, r7
			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   b655e:	d001      	beq.n	b6564 <_ZN6MB85RC9writeDataEjPKhj+0x62>
   b6560:	2d00      	cmp	r5, #0
   b6562:	d1f1      	bne.n	b6548 <_ZN6MB85RC9writeDataEjPKhj+0x46>
			}

			int stat = wire.endTransmission(true);
   b6564:	6860      	ldr	r0, [r4, #4]
   b6566:	2101      	movs	r1, #1
   b6568:	f001 f9e0 	bl	b792c <_ZN7TwoWire15endTransmissionEh>
			if (stat != 0) {
   b656c:	2800      	cmp	r0, #0
   b656e:	d0d7      	beq.n	b6520 <_ZN6MB85RC9writeDataEjPKhj+0x1e>
				//Serial.printlnf("write failed %d", stat);
				result = false;
   b6570:	f04f 0900 	mov.w	r9, #0
   b6574:	e7d1      	b.n	b651a <_ZN6MB85RC9writeDataEjPKhj+0x18>
	WITH_LOCK(wire) {
   b6576:	a801      	add	r0, sp, #4
   b6578:	f7ff ff71 	bl	b645e <_ZNSt10lock_guardIR7TwoWireED1Ev>
				break;
			}
		}
	}
	return result;
}
   b657c:	4648      	mov	r0, r9
   b657e:	b003      	add	sp, #12
   b6580:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b6584 <_ZN6MB85RC8moveDataEjjj>:


bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   b6584:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b6588:	b08b      	sub	sp, #44	; 0x2c
   b658a:	460e      	mov	r6, r1
   b658c:	4615      	mov	r5, r2
   b658e:	4680      	mov	r8, r0
	bool result = true;

	// Maximum number of bytes we can write is 30
	uint8_t buf[30];

	WITH_LOCK(wire) {
   b6590:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b6592:	9001      	str	r0, [sp, #4]
bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   b6594:	461c      	mov	r4, r3
      { _M_device.lock(); }
   b6596:	f001 f9cd 	bl	b7934 <_ZN7TwoWire4lockEv>
		if (framAddrFrom < framAddrTo) {
   b659a:	42ae      	cmp	r6, r5
   b659c:	d229      	bcs.n	b65f2 <_ZN6MB85RC8moveDataEjjj+0x6e>
			// Moving to a higher address - copy from the end of the from buffer
			framAddrFrom += numBytes;
   b659e:	4426      	add	r6, r4
			framAddrTo += numBytes;
   b65a0:	4425      	add	r5, r4
			while(numBytes > 0) {
   b65a2:	b18c      	cbz	r4, b65c8 <_ZN6MB85RC8moveDataEjjj+0x44>
				size_t count = numBytes;
				if (count > sizeof(buf)) {
   b65a4:	2c1e      	cmp	r4, #30
   b65a6:	4627      	mov	r7, r4
					count = sizeof(buf);
				}
				framAddrFrom -= count;
				framAddrTo -= count;

				result = readData(framAddrFrom, buf, count);
   b65a8:	f8d8 3000 	ldr.w	r3, [r8]
   b65ac:	bf28      	it	cs
   b65ae:	271e      	movcs	r7, #30
				framAddrFrom -= count;
   b65b0:	1bf6      	subs	r6, r6, r7
				result = readData(framAddrFrom, buf, count);
   b65b2:	f8d3 9008 	ldr.w	r9, [r3, #8]
   b65b6:	aa02      	add	r2, sp, #8
   b65b8:	463b      	mov	r3, r7
   b65ba:	4631      	mov	r1, r6
   b65bc:	4640      	mov	r0, r8
				framAddrTo -= count;
   b65be:	1bed      	subs	r5, r5, r7
				result = readData(framAddrFrom, buf, count);
   b65c0:	47c8      	blx	r9
				if (!result) {
   b65c2:	b948      	cbnz	r0, b65d8 <_ZN6MB85RC8moveDataEjjj+0x54>
bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   b65c4:	2400      	movs	r4, #0
   b65c6:	e000      	b.n	b65ca <_ZN6MB85RC8moveDataEjjj+0x46>
   b65c8:	2401      	movs	r4, #1
	WITH_LOCK(wire) {
   b65ca:	a801      	add	r0, sp, #4
   b65cc:	f7ff ff47 	bl	b645e <_ZNSt10lock_guardIR7TwoWireED1Ev>
				numBytes -= count;
			}
		}
	}
	return result;
}
   b65d0:	4620      	mov	r0, r4
   b65d2:	b00b      	add	sp, #44	; 0x2c
   b65d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				result = writeData(framAddrTo, buf, count);
   b65d8:	f8d8 3000 	ldr.w	r3, [r8]
   b65dc:	aa02      	add	r2, sp, #8
   b65de:	f8d3 900c 	ldr.w	r9, [r3, #12]
   b65e2:	4629      	mov	r1, r5
   b65e4:	463b      	mov	r3, r7
   b65e6:	4640      	mov	r0, r8
   b65e8:	47c8      	blx	r9
				if (!result) {
   b65ea:	2800      	cmp	r0, #0
   b65ec:	d0ea      	beq.n	b65c4 <_ZN6MB85RC8moveDataEjjj+0x40>
				numBytes -= count;
   b65ee:	1be4      	subs	r4, r4, r7
			while(numBytes > 0) {
   b65f0:	e7d7      	b.n	b65a2 <_ZN6MB85RC8moveDataEjjj+0x1e>
		if (framAddrFrom > framAddrTo) {
   b65f2:	d9e9      	bls.n	b65c8 <_ZN6MB85RC8moveDataEjjj+0x44>
			while(numBytes > 0) {
   b65f4:	2c00      	cmp	r4, #0
   b65f6:	d0e7      	beq.n	b65c8 <_ZN6MB85RC8moveDataEjjj+0x44>
				result = readData(framAddrFrom, buf, count);
   b65f8:	f8d8 3000 	ldr.w	r3, [r8]
   b65fc:	2c1e      	cmp	r4, #30
   b65fe:	4627      	mov	r7, r4
   b6600:	bf28      	it	cs
   b6602:	271e      	movcs	r7, #30
   b6604:	f8d3 9008 	ldr.w	r9, [r3, #8]
   b6608:	aa02      	add	r2, sp, #8
   b660a:	463b      	mov	r3, r7
   b660c:	4631      	mov	r1, r6
   b660e:	4640      	mov	r0, r8
   b6610:	47c8      	blx	r9
				if (!result) {
   b6612:	2800      	cmp	r0, #0
   b6614:	d0d6      	beq.n	b65c4 <_ZN6MB85RC8moveDataEjjj+0x40>
				result = writeData(framAddrTo, buf, count);
   b6616:	f8d8 3000 	ldr.w	r3, [r8]
   b661a:	aa02      	add	r2, sp, #8
   b661c:	f8d3 900c 	ldr.w	r9, [r3, #12]
   b6620:	4629      	mov	r1, r5
   b6622:	463b      	mov	r3, r7
   b6624:	4640      	mov	r0, r8
   b6626:	47c8      	blx	r9
				if (!result) {
   b6628:	2800      	cmp	r0, #0
   b662a:	d0cb      	beq.n	b65c4 <_ZN6MB85RC8moveDataEjjj+0x40>
				framAddrFrom += count;
   b662c:	443e      	add	r6, r7
				framAddrTo += count;
   b662e:	443d      	add	r5, r7
				numBytes -= count;
   b6630:	1be4      	subs	r4, r4, r7
			while(numBytes > 0) {
   b6632:	e7df      	b.n	b65f4 <_ZN6MB85RC8moveDataEjjj+0x70>

000b6634 <_ZN15StorageHelperRK18PersistentDataBase5setupEv>:
// PersistentDataBase
//

void StorageHelperRK::PersistentDataBase::setup() {
    // Load data at boot
    load();
   b6634:	6803      	ldr	r3, [r0, #0]
   b6636:	685b      	ldr	r3, [r3, #4]
   b6638:	4718      	bx	r3

000b663a <_ZN15StorageHelperRK18PersistentDataBase5flushEb>:

    return true;
}


void StorageHelperRK::PersistentDataBase::flush(bool force) {
   b663a:	b510      	push	{r4, lr}
    if (lastUpdate) {
   b663c:	6983      	ldr	r3, [r0, #24]
void StorageHelperRK::PersistentDataBase::flush(bool force) {
   b663e:	4604      	mov	r4, r0
    if (lastUpdate) {
   b6640:	b133      	cbz	r3, b6650 <_ZN15StorageHelperRK18PersistentDataBase5flushEb+0x16>
        if (force || (millis() - lastUpdate >= saveDelayMs)) {
   b6642:	b131      	cbz	r1, b6652 <_ZN15StorageHelperRK18PersistentDataBase5flushEb+0x18>
            save();
   b6644:	6823      	ldr	r3, [r4, #0]
   b6646:	4620      	mov	r0, r4
   b6648:	689b      	ldr	r3, [r3, #8]
   b664a:	4798      	blx	r3
            lastUpdate = 0;
   b664c:	2300      	movs	r3, #0
   b664e:	61a3      	str	r3, [r4, #24]
        }
    }
}
   b6650:	bd10      	pop	{r4, pc}

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b6652:	f000 faf5 	bl	b6c40 <HAL_Timer_Get_Milli_Seconds>
        if (force || (millis() - lastUpdate >= saveDelayMs)) {
   b6656:	69a3      	ldr	r3, [r4, #24]
   b6658:	1ac0      	subs	r0, r0, r3
   b665a:	69e3      	ldr	r3, [r4, #28]
   b665c:	4298      	cmp	r0, r3
   b665e:	d2f1      	bcs.n	b6644 <_ZN15StorageHelperRK18PersistentDataBase5flushEb+0xa>
   b6660:	e7f6      	b.n	b6650 <_ZN15StorageHelperRK18PersistentDataBase5flushEb+0x16>

000b6662 <_ZN15StorageHelperRK18PersistentDataBase11saveOrDeferEv>:

void StorageHelperRK::PersistentDataBase::saveOrDefer() {
   b6662:	b510      	push	{r4, lr}
    if (saveDelayMs) {
   b6664:	69c3      	ldr	r3, [r0, #28]
void StorageHelperRK::PersistentDataBase::saveOrDefer() {
   b6666:	4604      	mov	r4, r0
    if (saveDelayMs) {
   b6668:	b11b      	cbz	r3, b6672 <_ZN15StorageHelperRK18PersistentDataBase11saveOrDeferEv+0x10>
   b666a:	f000 fae9 	bl	b6c40 <HAL_Timer_Get_Milli_Seconds>
        lastUpdate = millis();
   b666e:	61a0      	str	r0, [r4, #24]
    }
    else {
        save();
    }
}
   b6670:	bd10      	pop	{r4, pc}
        save();
   b6672:	6803      	ldr	r3, [r0, #0]
}
   b6674:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        save();
   b6678:	689b      	ldr	r3, [r3, #8]
   b667a:	4718      	bx	r3

000b667c <_ZNK15StorageHelperRK20CustomRecursiveMutex6unlockEv.isra.0>:
   b667c:	f000 bac8 	b.w	b6c10 <os_mutex_recursive_unlock>

000b6680 <_ZNK5spark6Logger5traceEPKcz>:
inline void spark::Logger::trace(const char *fmt, ...) const {
   b6680:	b40e      	push	{r1, r2, r3}
   b6682:	b500      	push	{lr}
   b6684:	b08c      	sub	sp, #48	; 0x30
   b6686:	aa0d      	add	r2, sp, #52	; 0x34
    attr.flags = 0;
   b6688:	f04f 0c20 	mov.w	ip, #32
inline void spark::Logger::trace(const char *fmt, ...) const {
   b668c:	f852 1b04 	ldr.w	r1, [r2], #4
    va_start(args, fmt);
   b6690:	9203      	str	r2, [sp, #12]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b6692:	e9cd 1200 	strd	r1, r2, [sp]
    attr.flags = 0;
   b6696:	2300      	movs	r3, #0
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b6698:	6801      	ldr	r1, [r0, #0]
   b669a:	aa04      	add	r2, sp, #16
   b669c:	2001      	movs	r0, #1
    attr.flags = 0;
   b669e:	e9cd c304 	strd	ip, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b66a2:	f000 fbed 	bl	b6e80 <log_message_v>
}
   b66a6:	b00c      	add	sp, #48	; 0x30
   b66a8:	f85d eb04 	ldr.w	lr, [sp], #4
   b66ac:	b003      	add	sp, #12
   b66ae:	4770      	bx	lr

000b66b0 <_ZNK5spark6Logger4dumpEPKvj>:
inline void spark::Logger::dump(const void *data, size_t size) const {
   b66b0:	b507      	push	{r0, r1, r2, lr}
   b66b2:	4613      	mov	r3, r2
    if (data) {
   b66b4:	b139      	cbz	r1, b66c6 <_ZNK5spark6Logger4dumpEPKvj+0x16>
        log_dump(level, name_, data, size, 0, nullptr);
   b66b6:	2200      	movs	r2, #0
   b66b8:	e9cd 2200 	strd	r2, r2, [sp]
   b66bc:	460a      	mov	r2, r1
   b66be:	6801      	ldr	r1, [r0, #0]
   b66c0:	201e      	movs	r0, #30
   b66c2:	f000 fbed 	bl	b6ea0 <log_dump>
}
   b66c6:	b003      	add	sp, #12
   b66c8:	f85d fb04 	ldr.w	pc, [sp], #4

000b66cc <_ZN15StorageHelperRK18PersistentDataBase4loadEv>:
bool StorageHelperRK::PersistentDataBase::load() {
   b66cc:	b510      	push	{r4, lr}
   b66ce:	4604      	mov	r4, r0
   b66d0:	3004      	adds	r0, #4
   b66d2:	f7ff fb8f 	bl	b5df4 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
        if (!validate(savedDataSize)) {
   b66d6:	6823      	ldr	r3, [r4, #0]
   b66d8:	68e1      	ldr	r1, [r4, #12]
   b66da:	695b      	ldr	r3, [r3, #20]
   b66dc:	4620      	mov	r0, r4
   b66de:	4798      	blx	r3
   b66e0:	b918      	cbnz	r0, b66ea <_ZN15StorageHelperRK18PersistentDataBase4loadEv+0x1e>
            initialize();
   b66e2:	6823      	ldr	r3, [r4, #0]
   b66e4:	4620      	mov	r0, r4
   b66e6:	699b      	ldr	r3, [r3, #24]
   b66e8:	4798      	blx	r3
      { _M_device.unlock(); }
   b66ea:	6860      	ldr	r0, [r4, #4]
   b66ec:	f7ff ffc6 	bl	b667c <_ZNK15StorageHelperRK20CustomRecursiveMutex6unlockEv.isra.0>
}
   b66f0:	2001      	movs	r0, #1
   b66f2:	bd10      	pop	{r4, pc}

000b66f4 <_ZNK15StorageHelperRK18PersistentDataBase14getValueStringEjjR6String>:



bool StorageHelperRK::PersistentDataBase::getValueString(size_t offset, size_t size, String &value) const {
   b66f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b66f6:	4605      	mov	r5, r0
      { _M_device.lock(); }
   b66f8:	3004      	adds	r0, #4
   b66fa:	4614      	mov	r4, r2
   b66fc:	460e      	mov	r6, r1
   b66fe:	461f      	mov	r7, r3
   b6700:	f7ff fb78 	bl	b5df4 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
    bool result = false;

    WITH_LOCK(*this) {
        if (offset <= (savedDataSize - (size - 1))) {
   b6704:	68ea      	ldr	r2, [r5, #12]
   b6706:	f1c4 0401 	rsb	r4, r4, #1
   b670a:	4414      	add	r4, r2
   b670c:	42b4      	cmp	r4, r6
   b670e:	d30a      	bcc.n	b6726 <_ZNK15StorageHelperRK18PersistentDataBase14getValueStringEjjR6String+0x32>
            const char *p = (const char *)savedDataHeader;
   b6710:	68a9      	ldr	r1, [r5, #8]
            p += offset;
            value = p; // copies string
   b6712:	4638      	mov	r0, r7
   b6714:	4431      	add	r1, r6
   b6716:	f002 fcc3 	bl	b90a0 <_ZN6StringaSEPKc>
            result = true;
   b671a:	2401      	movs	r4, #1
      { _M_device.unlock(); }
   b671c:	6868      	ldr	r0, [r5, #4]
   b671e:	f7ff ffad 	bl	b667c <_ZNK15StorageHelperRK20CustomRecursiveMutex6unlockEv.isra.0>
        }
    }
    return result;
}
   b6722:	4620      	mov	r0, r4
   b6724:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bool result = false;
   b6726:	2400      	movs	r4, #0
   b6728:	e7f8      	b.n	b671c <_ZNK15StorageHelperRK18PersistentDataBase14getValueStringEjjR6String+0x28>
	...

000b672c <_ZN15StorageHelperRK10murmur3_32EPKhjm>:
    }
    PersistentDataBase::save();
}


uint32_t StorageHelperRK::murmur3_32(const uint8_t* key, size_t len, uint32_t seed) {
   b672c:	b5f0      	push	{r4, r5, r6, r7, lr}
   b672e:	f021 0403 	bic.w	r4, r1, #3
     * 
     * @param k 
     * @return uint32_t 
     */
    static inline uint32_t murmur_32_scramble(uint32_t k) {
        k *= 0xcc9e2d51;
   b6732:	4f18      	ldr	r7, [pc, #96]	; (b6794 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x68>)
        k = (k << 15) | (k >> 17);
        k *= 0x1b873593;
   b6734:	4e18      	ldr	r6, [pc, #96]	; (b6798 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x6c>)
        // A swap here has no effects on hash properties though.
        memcpy(&k, key, sizeof(uint32_t));
        key += sizeof(uint32_t);
        h ^= murmur_32_scramble(k);
        h = (h << 13) | (h >> 19);
        h = h * 5 + 0xe6546b64;
   b6736:	4d19      	ldr	r5, [pc, #100]	; (b679c <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x70>)
   b6738:	4404      	add	r4, r0
    for (size_t i = len >> 2; i; i--) {
   b673a:	42a0      	cmp	r0, r4
   b673c:	d00c      	beq.n	b6758 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x2c>
        memcpy(&k, key, sizeof(uint32_t));
   b673e:	f850 3b04 	ldr.w	r3, [r0], #4
        k *= 0xcc9e2d51;
   b6742:	437b      	muls	r3, r7
        k = (k << 15) | (k >> 17);
   b6744:	ea4f 4373 	mov.w	r3, r3, ror #17
        k *= 0x1b873593;
   b6748:	4373      	muls	r3, r6
        h ^= murmur_32_scramble(k);
   b674a:	405a      	eors	r2, r3
        h = (h << 13) | (h >> 19);
   b674c:	ea4f 42f2 	mov.w	r2, r2, ror #19
        h = h * 5 + 0xe6546b64;
   b6750:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   b6754:	442a      	add	r2, r5
    for (size_t i = len >> 2; i; i--) {
   b6756:	e7f0      	b.n	b673a <_ZN15StorageHelperRK10murmur3_32EPKhjm+0xe>
    }
    /* Read the rest. */
    k = 0;
    for (size_t i = len & 3; i; i--) {
   b6758:	f001 0403 	and.w	r4, r1, #3
   b675c:	4404      	add	r4, r0
    k = 0;
   b675e:	2300      	movs	r3, #0
    for (size_t i = len & 3; i; i--) {
   b6760:	42a0      	cmp	r0, r4
   b6762:	d004      	beq.n	b676e <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x42>
        k <<= 8;
        k |= key[i - 1];
   b6764:	f814 5d01 	ldrb.w	r5, [r4, #-1]!
   b6768:	ea45 2303 	orr.w	r3, r5, r3, lsl #8
    for (size_t i = len & 3; i; i--) {
   b676c:	e7f8      	b.n	b6760 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x34>
        k *= 0xcc9e2d51;
   b676e:	4809      	ldr	r0, [pc, #36]	; (b6794 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x68>)
   b6770:	4343      	muls	r3, r0
        k *= 0x1b873593;
   b6772:	4809      	ldr	r0, [pc, #36]	; (b6798 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x6c>)
        k = (k << 15) | (k >> 17);
   b6774:	ea4f 4373 	mov.w	r3, r3, ror #17
        return k;
   b6778:	404a      	eors	r2, r1
        k *= 0x1b873593;
   b677a:	4358      	muls	r0, r3
    // A swap is *not* necessary here because the preceding loop already
    // places the low bytes in the low places according to whatever endianness
    // we use. Swaps only apply when the memory is copied in a chunk.
    h ^= murmur_32_scramble(k);
    /* Finalize. */
	h ^= len;
   b677c:	4050      	eors	r0, r2
	h ^= h >> 16;
	h *= 0x85ebca6b;
   b677e:	4b08      	ldr	r3, [pc, #32]	; (b67a0 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x74>)
	h ^= h >> 16;
   b6780:	ea80 4010 	eor.w	r0, r0, r0, lsr #16
	h *= 0x85ebca6b;
   b6784:	4358      	muls	r0, r3
	h ^= h >> 13;
	h *= 0xc2b2ae35;
   b6786:	4b07      	ldr	r3, [pc, #28]	; (b67a4 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x78>)
	h ^= h >> 13;
   b6788:	ea80 3050 	eor.w	r0, r0, r0, lsr #13
	h *= 0xc2b2ae35;
   b678c:	4358      	muls	r0, r3
	h ^= h >> 16;
	return h;
}
   b678e:	ea80 4010 	eor.w	r0, r0, r0, lsr #16
   b6792:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b6794:	cc9e2d51 	.word	0xcc9e2d51
   b6798:	1b873593 	.word	0x1b873593
   b679c:	e6546b64 	.word	0xe6546b64
   b67a0:	85ebca6b 	.word	0x85ebca6b
   b67a4:	c2b2ae35 	.word	0xc2b2ae35

000b67a8 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>:
uint32_t StorageHelperRK::PersistentDataBase::getHash() const {
   b67a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b67aa:	4604      	mov	r4, r0
      { _M_device.lock(); }
   b67ac:	3004      	adds	r0, #4
   b67ae:	f7ff fb21 	bl	b5df4 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
        uint32_t savedHash = savedDataHeader->hash;
   b67b2:	68a3      	ldr	r3, [r4, #8]
        savedDataHeader->hash = 0;
   b67b4:	2200      	movs	r2, #0
        uint32_t savedHash = savedDataHeader->hash;
   b67b6:	689f      	ldr	r7, [r3, #8]
        savedDataHeader->hash = 0;
   b67b8:	609a      	str	r2, [r3, #8]
        hash = StorageHelperRK::murmur3_32((const uint8_t *)savedDataHeader, savedDataHeader->size, HASH_SEED);
   b67ba:	68a6      	ldr	r6, [r4, #8]
   b67bc:	4a05      	ldr	r2, [pc, #20]	; (b67d4 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv+0x2c>)
   b67be:	88f1      	ldrh	r1, [r6, #6]
   b67c0:	4630      	mov	r0, r6
   b67c2:	f7ff ffb3 	bl	b672c <_ZN15StorageHelperRK10murmur3_32EPKhjm>
        savedDataHeader->hash = savedHash;
   b67c6:	60b7      	str	r7, [r6, #8]
        hash = StorageHelperRK::murmur3_32((const uint8_t *)savedDataHeader, savedDataHeader->size, HASH_SEED);
   b67c8:	4605      	mov	r5, r0
      { _M_device.unlock(); }
   b67ca:	6860      	ldr	r0, [r4, #4]
   b67cc:	f7ff ff56 	bl	b667c <_ZNK15StorageHelperRK20CustomRecursiveMutex6unlockEv.isra.0>
}
   b67d0:	4628      	mov	r0, r5
   b67d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b67d4:	851c2a3f 	.word	0x851c2a3f

000b67d8 <_ZN15StorageHelperRK18PersistentDataBase10updateHashEv>:
void StorageHelperRK::PersistentDataBase::updateHash() {
   b67d8:	b570      	push	{r4, r5, r6, lr}
   b67da:	4604      	mov	r4, r0
    savedDataHeader->hash = getHash();
   b67dc:	6885      	ldr	r5, [r0, #8]
   b67de:	f7ff ffe3 	bl	b67a8 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
   b67e2:	60a8      	str	r0, [r5, #8]
    saveOrDefer();
   b67e4:	6823      	ldr	r3, [r4, #0]
   b67e6:	4620      	mov	r0, r4
   b67e8:	691b      	ldr	r3, [r3, #16]
}
   b67ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    saveOrDefer();
   b67ee:	4718      	bx	r3

000b67f0 <_ZN15StorageHelperRK18PersistentDataBase14setValueStringEjjPKc>:
bool StorageHelperRK::PersistentDataBase::setValueString(size_t offset, size_t size, const char *value) {
   b67f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b67f4:	4604      	mov	r4, r0
      { _M_device.lock(); }
   b67f6:	3004      	adds	r0, #4
   b67f8:	4690      	mov	r8, r2
   b67fa:	460d      	mov	r5, r1
   b67fc:	461f      	mov	r7, r3
   b67fe:	f7ff faf9 	bl	b5df4 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
        if (offset <= (savedDataSize - (size - 1)) && strlen(value) < size) {
   b6802:	68e2      	ldr	r2, [r4, #12]
   b6804:	f1c8 0301 	rsb	r3, r8, #1
   b6808:	4413      	add	r3, r2
   b680a:	42ab      	cmp	r3, r5
   b680c:	d319      	bcc.n	b6842 <_ZN15StorageHelperRK18PersistentDataBase14setValueStringEjjPKc+0x52>
   b680e:	4638      	mov	r0, r7
   b6810:	f003 f999 	bl	b9b46 <strlen>
   b6814:	4540      	cmp	r0, r8
   b6816:	d214      	bcs.n	b6842 <_ZN15StorageHelperRK18PersistentDataBase14setValueStringEjjPKc+0x52>
            char *p = (char *)savedDataHeader;
   b6818:	68a6      	ldr	r6, [r4, #8]
            p += offset;
   b681a:	4435      	add	r5, r6
            if (strcmp(value, p) != 0) {
   b681c:	4629      	mov	r1, r5
   b681e:	4638      	mov	r0, r7
   b6820:	f003 f961 	bl	b9ae6 <strcmp>
   b6824:	b158      	cbz	r0, b683e <_ZN15StorageHelperRK18PersistentDataBase14setValueStringEjjPKc+0x4e>
                memset(p, 0, size);
   b6826:	4642      	mov	r2, r8
   b6828:	2100      	movs	r1, #0
   b682a:	4628      	mov	r0, r5
   b682c:	f003 f8d0 	bl	b99d0 <memset>
                strcpy(p, value);
   b6830:	4639      	mov	r1, r7
   b6832:	4628      	mov	r0, r5
   b6834:	f003 f961 	bl	b9afa <strcpy>
                updateHash();
   b6838:	4620      	mov	r0, r4
   b683a:	f7ff ffcd 	bl	b67d8 <_ZN15StorageHelperRK18PersistentDataBase10updateHashEv>
            result = true;
   b683e:	2501      	movs	r5, #1
   b6840:	e000      	b.n	b6844 <_ZN15StorageHelperRK18PersistentDataBase14setValueStringEjjPKc+0x54>
    bool result = false;
   b6842:	2500      	movs	r5, #0
      { _M_device.unlock(); }
   b6844:	6860      	ldr	r0, [r4, #4]
   b6846:	f7ff ff19 	bl	b667c <_ZNK15StorageHelperRK20CustomRecursiveMutex6unlockEv.isra.0>
}
   b684a:	4628      	mov	r0, r5
   b684c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b6850 <_ZN15StorageHelperRK18PersistentDataBase8validateEj>:
bool StorageHelperRK::PersistentDataBase::validate(size_t dataSize) {
   b6850:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if (logData && dataSize < 4096) {
   b6852:	f890 3020 	ldrb.w	r3, [r0, #32]
bool StorageHelperRK::PersistentDataBase::validate(size_t dataSize) {
   b6856:	4604      	mov	r4, r0
   b6858:	460d      	mov	r5, r1
    if (logData && dataSize < 4096) {
   b685a:	b1ab      	cbz	r3, b6888 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x38>
   b685c:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
   b6860:	d217      	bcs.n	b6892 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x42>
        Log.info("validating data size=%d", (int)dataSize);
   b6862:	4e2c      	ldr	r6, [pc, #176]	; (b6914 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0xc4>)
   b6864:	460a      	mov	r2, r1
   b6866:	4630      	mov	r0, r6
   b6868:	492b      	ldr	r1, [pc, #172]	; (b6918 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0xc8>)
   b686a:	f7fd fc87 	bl	b417c <_ZNK5spark6Logger4infoEPKcz>
        Log.dump((const uint8_t *)savedDataHeader, dataSize);
   b686e:	68a1      	ldr	r1, [r4, #8]
   b6870:	462a      	mov	r2, r5
   b6872:	4630      	mov	r0, r6
   b6874:	f7ff ff1c 	bl	b66b0 <_ZNK5spark6Logger4dumpEPKvj>
        log_write(level, name_, data, size, nullptr);
   b6878:	2300      	movs	r3, #0
   b687a:	9300      	str	r3, [sp, #0]
   b687c:	4a27      	ldr	r2, [pc, #156]	; (b691c <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0xcc>)
   b687e:	6831      	ldr	r1, [r6, #0]
   b6880:	2301      	movs	r3, #1
   b6882:	201e      	movs	r0, #30
   b6884:	f000 fb04 	bl	b6e90 <log_write>
    if (dataSize >= 12 && 
   b6888:	2d0b      	cmp	r5, #11
   b688a:	d802      	bhi.n	b6892 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x42>
    if (!isValid && dataSize != 0 && savedDataHeader->magic != 0) {
   b688c:	bb55      	cbnz	r5, b68e4 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x94>
   b688e:	2000      	movs	r0, #0
   b6890:	e026      	b.n	b68e0 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x90>
        savedDataHeader->magic == savedDataMagic && 
   b6892:	68a3      	ldr	r3, [r4, #8]
    if (dataSize >= 12 && 
   b6894:	6922      	ldr	r2, [r4, #16]
   b6896:	6819      	ldr	r1, [r3, #0]
   b6898:	4291      	cmp	r1, r2
   b689a:	d123      	bne.n	b68e4 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x94>
        savedDataHeader->magic == savedDataMagic && 
   b689c:	8899      	ldrh	r1, [r3, #4]
   b689e:	8aa2      	ldrh	r2, [r4, #20]
   b68a0:	4291      	cmp	r1, r2
   b68a2:	d11f      	bne.n	b68e4 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x94>
        savedDataHeader->version == savedDataVersion &&
   b68a4:	88da      	ldrh	r2, [r3, #6]
   b68a6:	b2ab      	uxth	r3, r5
   b68a8:	429a      	cmp	r2, r3
   b68aa:	d81b      	bhi.n	b68e4 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x94>
        hash = getHash();
   b68ac:	4620      	mov	r0, r4
   b68ae:	f7ff ff7b 	bl	b67a8 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
        if (savedDataHeader->hash == hash) {                
   b68b2:	68a3      	ldr	r3, [r4, #8]
   b68b4:	689a      	ldr	r2, [r3, #8]
   b68b6:	4282      	cmp	r2, r0
        hash = getHash();
   b68b8:	4606      	mov	r6, r0
        if (savedDataHeader->hash == hash) {                
   b68ba:	d114      	bne.n	b68e6 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x96>
            if ((size_t)dataSize < savedDataSize) {
   b68bc:	68e2      	ldr	r2, [r4, #12]
   b68be:	42aa      	cmp	r2, r5
   b68c0:	d905      	bls.n	b68ce <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x7e>
                    p[ii] = 0;
   b68c2:	2100      	movs	r1, #0
   b68c4:	5559      	strb	r1, [r3, r5]
                for(size_t ii = (size_t)dataSize; ii < savedDataSize; ii++) {
   b68c6:	68e2      	ldr	r2, [r4, #12]
   b68c8:	3501      	adds	r5, #1
   b68ca:	42aa      	cmp	r2, r5
   b68cc:	d8fa      	bhi.n	b68c4 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x74>
            savedDataHeader->size = (uint16_t) savedDataSize;
   b68ce:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
            savedDataHeader->hash = getHash();
   b68d2:	4620      	mov	r0, r4
            savedDataHeader->size = (uint16_t) savedDataSize;
   b68d4:	80da      	strh	r2, [r3, #6]
            savedDataHeader->hash = getHash();
   b68d6:	68a5      	ldr	r5, [r4, #8]
   b68d8:	f7ff ff66 	bl	b67a8 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
   b68dc:	60a8      	str	r0, [r5, #8]
            isValid = true;
   b68de:	2001      	movs	r0, #1
}
   b68e0:	b002      	add	sp, #8
   b68e2:	bd70      	pop	{r4, r5, r6, pc}
    uint32_t hash = 0;
   b68e4:	2600      	movs	r6, #0
    if (!isValid && dataSize != 0 && savedDataHeader->magic != 0) {
   b68e6:	68a1      	ldr	r1, [r4, #8]
   b68e8:	680a      	ldr	r2, [r1, #0]
   b68ea:	2a00      	cmp	r2, #0
   b68ec:	d0cf      	beq.n	b688e <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x3e>
        Log.trace("got: magic=%08x version=%04x size=%04x hash=%08x", (int)savedDataHeader->magic, (int)savedDataHeader->version, (int)savedDataHeader->size, (int)savedDataHeader->hash);
   b68ee:	6888      	ldr	r0, [r1, #8]
   b68f0:	888b      	ldrh	r3, [r1, #4]
   b68f2:	9001      	str	r0, [sp, #4]
   b68f4:	88c9      	ldrh	r1, [r1, #6]
   b68f6:	9100      	str	r1, [sp, #0]
   b68f8:	4806      	ldr	r0, [pc, #24]	; (b6914 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0xc4>)
   b68fa:	4909      	ldr	r1, [pc, #36]	; (b6920 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0xd0>)
   b68fc:	f7ff fec0 	bl	b6680 <_ZNK5spark6Logger5traceEPKcz>
        Log.trace("exp: magic=%08x version=%04x size=%04x hash=%08x", (int)savedDataMagic, (int)savedDataVersion, (int)dataSize, (int)hash);
   b6900:	e9cd 5600 	strd	r5, r6, [sp]
   b6904:	8aa3      	ldrh	r3, [r4, #20]
   b6906:	6922      	ldr	r2, [r4, #16]
   b6908:	4906      	ldr	r1, [pc, #24]	; (b6924 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0xd4>)
   b690a:	4802      	ldr	r0, [pc, #8]	; (b6914 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0xc4>)
   b690c:	f7ff feb8 	bl	b6680 <_ZNK5spark6Logger5traceEPKcz>
   b6910:	e7bd      	b.n	b688e <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x3e>
   b6912:	bf00      	nop
   b6914:	2003e6b0 	.word	0x2003e6b0
   b6918:	000bac00 	.word	0x000bac00
   b691c:	000bae2e 	.word	0x000bae2e
   b6920:	000bac18 	.word	0x000bac18
   b6924:	000bac49 	.word	0x000bac49

000b6928 <_ZN15StorageHelperRK18PersistentDataBase10initializeEv>:
void StorageHelperRK::PersistentDataBase::initialize() {
   b6928:	b538      	push	{r3, r4, r5, lr}
   b692a:	4604      	mov	r4, r0
    memset(savedDataHeader, 0, savedDataSize);
   b692c:	68c2      	ldr	r2, [r0, #12]
   b692e:	6880      	ldr	r0, [r0, #8]
   b6930:	2100      	movs	r1, #0
   b6932:	f003 f84d 	bl	b99d0 <memset>
    savedDataHeader->magic = savedDataMagic;
   b6936:	68a3      	ldr	r3, [r4, #8]
   b6938:	6922      	ldr	r2, [r4, #16]
   b693a:	601a      	str	r2, [r3, #0]
    savedDataHeader->version = savedDataVersion;
   b693c:	68a3      	ldr	r3, [r4, #8]
   b693e:	8aa2      	ldrh	r2, [r4, #20]
   b6940:	809a      	strh	r2, [r3, #4]
    savedDataHeader->size = (uint16_t) savedDataSize;
   b6942:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    savedDataHeader->hash = getHash();
   b6946:	4620      	mov	r0, r4
    savedDataHeader->size = (uint16_t) savedDataSize;
   b6948:	80da      	strh	r2, [r3, #6]
    savedDataHeader->hash = getHash();
   b694a:	68a5      	ldr	r5, [r4, #8]
   b694c:	f7ff ff2c 	bl	b67a8 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
   b6950:	60a8      	str	r0, [r5, #8]
}
   b6952:	bd38      	pop	{r3, r4, r5, pc}

000b6954 <_ZN15StorageHelperRK18PersistentDataBase4saveEv>:
void StorageHelperRK::PersistentDataBase::save() {
   b6954:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b6956:	4604      	mov	r4, r0
    savedDataHeader->hash = getHash();
   b6958:	6885      	ldr	r5, [r0, #8]
   b695a:	f7ff ff25 	bl	b67a8 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
   b695e:	60a8      	str	r0, [r5, #8]
    if (logData) {
   b6960:	f894 3020 	ldrb.w	r3, [r4, #32]
   b6964:	b19b      	cbz	r3, b698e <_ZN15StorageHelperRK18PersistentDataBase4saveEv+0x3a>
        Log.info("saving data size=%d", (int)savedDataHeader->size);
   b6966:	68a3      	ldr	r3, [r4, #8]
   b6968:	4d0a      	ldr	r5, [pc, #40]	; (b6994 <_ZN15StorageHelperRK18PersistentDataBase4saveEv+0x40>)
   b696a:	88da      	ldrh	r2, [r3, #6]
   b696c:	490a      	ldr	r1, [pc, #40]	; (b6998 <_ZN15StorageHelperRK18PersistentDataBase4saveEv+0x44>)
   b696e:	4628      	mov	r0, r5
   b6970:	f7fd fc04 	bl	b417c <_ZNK5spark6Logger4infoEPKcz>
        Log.dump((const uint8_t *)savedDataHeader, savedDataHeader->size);
   b6974:	68a1      	ldr	r1, [r4, #8]
   b6976:	4628      	mov	r0, r5
   b6978:	88ca      	ldrh	r2, [r1, #6]
   b697a:	f7ff fe99 	bl	b66b0 <_ZNK5spark6Logger4dumpEPKvj>
   b697e:	2300      	movs	r3, #0
   b6980:	9300      	str	r3, [sp, #0]
   b6982:	4a06      	ldr	r2, [pc, #24]	; (b699c <_ZN15StorageHelperRK18PersistentDataBase4saveEv+0x48>)
   b6984:	6829      	ldr	r1, [r5, #0]
   b6986:	2301      	movs	r3, #1
   b6988:	201e      	movs	r0, #30
   b698a:	f000 fa81 	bl	b6e90 <log_write>
}
   b698e:	b003      	add	sp, #12
   b6990:	bd30      	pop	{r4, r5, pc}
   b6992:	bf00      	nop
   b6994:	2003e6b0 	.word	0x2003e6b0
   b6998:	000bac7a 	.word	0x000bac7a
   b699c:	000bae2e 	.word	0x000bae2e

000b69a0 <_ZN10DataReportC1Em>:
#include "DataReport.h"

// Constructor with default initialization to 0
DataReport::DataReport(uint32_t uniqueID) : 
   b69a0:	b510      	push	{r4, lr}
                            batteryState(0),
                            resetCount(0), 
                            RSSI(0), 
                            SNR(0),
                            retransmissions(0), 
                            retransmissionDelays(0) {}
   b69a2:	2200      	movs	r2, #0
   b69a4:	f243 0439 	movw	r4, #12345	; 0x3039
   b69a8:	e9c0 1209 	strd	r1, r2, [r0, #36]	; 0x24
   b69ac:	e9c0 220b 	strd	r2, r2, [r0, #44]	; 0x2c
   b69b0:	8382      	strh	r2, [r0, #28]
   b69b2:	7782      	strb	r2, [r0, #30]
   b69b4:	8404      	strh	r4, [r0, #32]
   b69b6:	f880 2022 	strb.w	r2, [r0, #34]	; 0x22
   b69ba:	6342      	str	r2, [r0, #52]	; 0x34
   b69bc:	8702      	strh	r2, [r0, #56]	; 0x38
   b69be:	bd10      	pop	{r4, pc}

000b69c0 <_ZN10DataReport13setNodeNumberEh>:
void DataReport::setMagicNumber(uint16_t magicNumber) {
    this->magicNumber = magicNumber;
}

void DataReport::setNodeNumber(uint8_t nodeNumber) {
    this->nodeNumber = nodeNumber;
   b69c0:	7781      	strb	r1, [r0, #30]
}
   b69c2:	4770      	bx	lr

000b69c4 <_ZN10DataReport13setSensorTypeEh>:
void DataReport::setToken(uint16_t token) {
    this->token = token;
}

void DataReport::setSensorType(uint8_t sensorType) {
    this->sensorType = sensorType;
   b69c4:	f880 1022 	strb.w	r1, [r0, #34]	; 0x22
}
   b69c8:	4770      	bx	lr

000b69ca <_ZN10DataReport17setOccupancyGrossEt>:

void DataReport::setOccupancyGross(uint16_t occupancyGross) {
    this->occupancyGross = occupancyGross;
   b69ca:	8501      	strh	r1, [r0, #40]	; 0x28
}
   b69cc:	4770      	bx	lr

000b69ce <_ZN10DataReport15setOccupancyNetEt>:

void DataReport::setOccupancyNet(uint16_t occupancyNet) {
    this->occupancyNet = occupancyNet;
   b69ce:	8541      	strh	r1, [r0, #42]	; 0x2a
}
   b69d0:	4770      	bx	lr

000b69d2 <_ZNK10DataReport13getReportDataEPhj>:
    this->retransmissionDelays = retransmissionDelays;
}

// Function to populate a passed-in buffer with the data
bool DataReport::getReportData(uint8_t* buf, size_t size) const {
    if (size < 28) {
   b69d2:	2a1b      	cmp	r2, #27
   b69d4:	d94c      	bls.n	b6a70 <_ZNK10DataReport13getReportDataEPhj+0x9e>
        return false;
    }
    buf[0] = highByte(magicNumber);
   b69d6:	8b83      	ldrh	r3, [r0, #28]
   b69d8:	0a1b      	lsrs	r3, r3, #8
   b69da:	700b      	strb	r3, [r1, #0]
    buf[1] = lowByte(magicNumber);
   b69dc:	8b83      	ldrh	r3, [r0, #28]
   b69de:	704b      	strb	r3, [r1, #1]
    buf[2] = nodeNumber;
   b69e0:	7f83      	ldrb	r3, [r0, #30]
   b69e2:	708b      	strb	r3, [r1, #2]
    buf[3] = highByte(token);
   b69e4:	8c03      	ldrh	r3, [r0, #32]
   b69e6:	0a1b      	lsrs	r3, r3, #8
   b69e8:	70cb      	strb	r3, [r1, #3]
    buf[4] = lowByte(token);
   b69ea:	8c03      	ldrh	r3, [r0, #32]
   b69ec:	710b      	strb	r3, [r1, #4]
    buf[5] = sensorType;
   b69ee:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
   b69f2:	714b      	strb	r3, [r1, #5]
    buf[6] = uniqueID >> 24;
   b69f4:	f890 3027 	ldrb.w	r3, [r0, #39]	; 0x27
   b69f8:	718b      	strb	r3, [r1, #6]
    buf[7] = uniqueID >> 16;
   b69fa:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
   b69fc:	71cb      	strb	r3, [r1, #7]
    buf[8] = uniqueID >> 8;
   b69fe:	6a43      	ldr	r3, [r0, #36]	; 0x24
   b6a00:	0a1b      	lsrs	r3, r3, #8
   b6a02:	720b      	strb	r3, [r1, #8]
    buf[9] = uniqueID;
   b6a04:	6a43      	ldr	r3, [r0, #36]	; 0x24
   b6a06:	724b      	strb	r3, [r1, #9]
    buf[10] = highByte(occupancyGross);
   b6a08:	8d03      	ldrh	r3, [r0, #40]	; 0x28
   b6a0a:	0a1b      	lsrs	r3, r3, #8
   b6a0c:	728b      	strb	r3, [r1, #10]
    buf[11] = lowByte(occupancyGross);
   b6a0e:	8d03      	ldrh	r3, [r0, #40]	; 0x28
   b6a10:	72cb      	strb	r3, [r1, #11]
    buf[12] = highByte(occupancyNet);
   b6a12:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
   b6a14:	0a1b      	lsrs	r3, r3, #8
   b6a16:	730b      	strb	r3, [r1, #12]
    buf[13] = lowByte(occupancyNet);
   b6a18:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
   b6a1a:	734b      	strb	r3, [r1, #13]
    buf[14] = space;
   b6a1c:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
   b6a20:	738b      	strb	r3, [r1, #14]
    buf[15] = placement;
   b6a22:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
   b6a26:	73cb      	strb	r3, [r1, #15]
    buf[16] = multi;
   b6a28:	f890 302e 	ldrb.w	r3, [r0, #46]	; 0x2e
   b6a2c:	740b      	strb	r3, [r1, #16]
    buf[17] = zoneMode;
   b6a2e:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
   b6a32:	744b      	strb	r3, [r1, #17]
    buf[18] = internalTempC;
   b6a34:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
   b6a38:	748b      	strb	r3, [r1, #18]
    buf[19] = stateOfCharge;
   b6a3a:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
   b6a3e:	74cb      	strb	r3, [r1, #19]
    buf[20] = batteryState;
   b6a40:	f890 3032 	ldrb.w	r3, [r0, #50]	; 0x32
   b6a44:	750b      	strb	r3, [r1, #20]
    buf[21] = resetCount;
   b6a46:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
   b6a4a:	754b      	strb	r3, [r1, #21]
    buf[22] = highByte(RSSI);
   b6a4c:	8e83      	ldrh	r3, [r0, #52]	; 0x34
   b6a4e:	0a1b      	lsrs	r3, r3, #8
   b6a50:	758b      	strb	r3, [r1, #22]
    buf[23] = lowByte(RSSI);
   b6a52:	8e83      	ldrh	r3, [r0, #52]	; 0x34
   b6a54:	75cb      	strb	r3, [r1, #23]
    buf[24] = highByte(SNR);
   b6a56:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
   b6a58:	0a1b      	lsrs	r3, r3, #8
   b6a5a:	760b      	strb	r3, [r1, #24]
    buf[25] = lowByte(SNR);
   b6a5c:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
   b6a5e:	764b      	strb	r3, [r1, #25]
    buf[26] = retransmissions;
   b6a60:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   b6a64:	768b      	strb	r3, [r1, #26]
    buf[27] = retransmissionDelays;
   b6a66:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
   b6a6a:	76cb      	strb	r3, [r1, #27]
   b6a6c:	2001      	movs	r0, #1
   b6a6e:	4770      	bx	lr
        return false;
   b6a70:	2000      	movs	r0, #0

    return true;
   b6a72:	4770      	bx	lr

000b6a74 <_ZN7GatewayD1Ev>:
    return *_instance;
}

Gateway::Gateway() {}

Gateway::~Gateway() {}
   b6a74:	4770      	bx	lr

000b6a76 <_ZN7GatewayD0Ev>:
   b6a76:	b510      	push	{r4, lr}
   b6a78:	2104      	movs	r1, #4
   b6a7a:	4604      	mov	r4, r0
   b6a7c:	f7fd fb0d 	bl	b409a <_ZdlPvj>
   b6a80:	4620      	mov	r0, r4
   b6a82:	bd10      	pop	{r4, pc}

000b6a84 <_ZN7Gateway8instanceEv>:
Gateway &Gateway::instance() {
   b6a84:	b510      	push	{r4, lr}
    if (!_instance) {
   b6a86:	4c06      	ldr	r4, [pc, #24]	; (b6aa0 <_ZN7Gateway8instanceEv+0x1c>)
   b6a88:	6823      	ldr	r3, [r4, #0]
   b6a8a:	b933      	cbnz	r3, b6a9a <_ZN7Gateway8instanceEv+0x16>
        _instance = new Gateway();
   b6a8c:	2004      	movs	r0, #4
   b6a8e:	f7fd fb00 	bl	b4092 <_Znwj>
   b6a92:	b108      	cbz	r0, b6a98 <_ZN7Gateway8instanceEv+0x14>
Gateway::Gateway() {}
   b6a94:	4b03      	ldr	r3, [pc, #12]	; (b6aa4 <_ZN7Gateway8instanceEv+0x20>)
   b6a96:	6003      	str	r3, [r0, #0]
        _instance = new Gateway();
   b6a98:	6020      	str	r0, [r4, #0]
}
   b6a9a:	6820      	ldr	r0, [r4, #0]
   b6a9c:	bd10      	pop	{r4, pc}
   b6a9e:	bf00      	nop
   b6aa0:	2003e630 	.word	0x2003e630
   b6aa4:	000bacf4 	.word	0x000bacf4

000b6aa8 <_ZN7Gateway18decipherDataReportEv>:
    Log.info("Node %d with uniqueID %lu sent a data report message", current.get_nodeNumber(), current.get_uniqueID());

    Gateway::instance().decipherDataReport();
}

void Gateway::decipherDataReport() {
   b6aa8:	b510      	push	{r4, lr}
    // buf[2] - nodeNumber processed above
    // buf[3] - buf[4] is token - processed above
    // buf[5] - Sensor type - processed above
    // buf[6] - buf[9] is the unique ID of the node - processed above
    current.set_payload1(buf[10]);
   b6aaa:	4c2b      	ldr	r4, [pc, #172]	; (b6b58 <_ZN7Gateway18decipherDataReportEv+0xb0>)
   b6aac:	f7ff fa34 	bl	b5f18 <_ZN17currentStatusData8instanceEv>
   b6ab0:	7aa1      	ldrb	r1, [r4, #10]
   b6ab2:	f7ff fc0d 	bl	b62d0 <_ZN17currentStatusData12set_payload1Eh>
    current.set_payload2(buf[11]);
   b6ab6:	f7ff fa2f 	bl	b5f18 <_ZN17currentStatusData8instanceEv>
   b6aba:	7ae1      	ldrb	r1, [r4, #11]
   b6abc:	f7ff fc0e 	bl	b62dc <_ZN17currentStatusData12set_payload2Eh>
    current.set_payload3(buf[12]);
   b6ac0:	f7ff fa2a 	bl	b5f18 <_ZN17currentStatusData8instanceEv>
   b6ac4:	7b21      	ldrb	r1, [r4, #12]
   b6ac6:	f7ff fc0f 	bl	b62e8 <_ZN17currentStatusData12set_payload3Eh>
    current.set_payload4(buf[13]);
   b6aca:	f7ff fa25 	bl	b5f18 <_ZN17currentStatusData8instanceEv>
   b6ace:	7b61      	ldrb	r1, [r4, #13]
   b6ad0:	f7ff fc10 	bl	b62f4 <_ZN17currentStatusData12set_payload4Eh>
    current.set_payload5(buf[14]);
   b6ad4:	f7ff fa20 	bl	b5f18 <_ZN17currentStatusData8instanceEv>
   b6ad8:	7ba1      	ldrb	r1, [r4, #14]
   b6ada:	f7ff fc11 	bl	b6300 <_ZN17currentStatusData12set_payload5Eh>
    current.set_payload6(buf[15]);
   b6ade:	f7ff fa1b 	bl	b5f18 <_ZN17currentStatusData8instanceEv>
   b6ae2:	7be1      	ldrb	r1, [r4, #15]
   b6ae4:	f7ff fc12 	bl	b630c <_ZN17currentStatusData12set_payload6Eh>
    current.set_payload7(buf[16]);
   b6ae8:	f7ff fa16 	bl	b5f18 <_ZN17currentStatusData8instanceEv>
   b6aec:	7c21      	ldrb	r1, [r4, #16]
   b6aee:	f7ff fc13 	bl	b6318 <_ZN17currentStatusData12set_payload7Eh>
    current.set_payload8(buf[17]);
   b6af2:	f7ff fa11 	bl	b5f18 <_ZN17currentStatusData8instanceEv>
   b6af6:	7c61      	ldrb	r1, [r4, #17]
   b6af8:	f7ff fc14 	bl	b6324 <_ZN17currentStatusData12set_payload8Eh>
    // Then, we will get the rest of the data from the report
    current.set_internalTempC(buf[18]);
   b6afc:	f7ff fa0c 	bl	b5f18 <_ZN17currentStatusData8instanceEv>
   b6b00:	7ca1      	ldrb	r1, [r4, #18]
   b6b02:	f7ff fc15 	bl	b6330 <_ZN17currentStatusData17set_internalTempCEh>
    current.set_stateOfCharge(buf[19]);
   b6b06:	f7ff fa07 	bl	b5f18 <_ZN17currentStatusData8instanceEv>
   b6b0a:	f994 1013 	ldrsb.w	r1, [r4, #19]
   b6b0e:	f7ff fa49 	bl	b5fa4 <_ZN17currentStatusData17set_stateOfChargeEa>
    current.set_batteryState(buf[20]);
   b6b12:	f7ff fa01 	bl	b5f18 <_ZN17currentStatusData8instanceEv>
   b6b16:	7d21      	ldrb	r1, [r4, #20]
   b6b18:	f7ff fc10 	bl	b633c <_ZN17currentStatusData16set_batteryStateEh>
    current.set_resetCount(buf[21]);
   b6b1c:	f7ff f9fc 	bl	b5f18 <_ZN17currentStatusData8instanceEv>
   b6b20:	7d61      	ldrb	r1, [r4, #21]
   b6b22:	f7ff fc11 	bl	b6348 <_ZN17currentStatusData14set_resetCountEh>
    current.set_RSSI(buf[22] << 8 | buf[23]);
   b6b26:	f7ff f9f7 	bl	b5f18 <_ZN17currentStatusData8instanceEv>
   b6b2a:	8ae1      	ldrh	r1, [r4, #22]
   b6b2c:	bac9      	revsh	r1, r1
   b6b2e:	f7ff fc59 	bl	b63e4 <_ZN17currentStatusData8set_RSSIEs>
    current.set_SNR(buf[24] << 8 | buf[25]);
   b6b32:	f7ff f9f1 	bl	b5f18 <_ZN17currentStatusData8instanceEv>
   b6b36:	8b21      	ldrh	r1, [r4, #24]
   b6b38:	bac9      	revsh	r1, r1
   b6b3a:	f7ff fc59 	bl	b63f0 <_ZN17currentStatusData7set_SNREs>
    current.set_retryCount(buf[26]);
   b6b3e:	f7ff f9eb 	bl	b5f18 <_ZN17currentStatusData8instanceEv>
   b6b42:	7ea1      	ldrb	r1, [r4, #26]
   b6b44:	f7ff fc0c 	bl	b6360 <_ZN17currentStatusData14set_retryCountEh>
    current.set_retransmissionDelay(buf[27]);
   b6b48:	f7ff f9e6 	bl	b5f18 <_ZN17currentStatusData8instanceEv>
   b6b4c:	7ee1      	ldrb	r1, [r4, #27]
}
   b6b4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    current.set_retransmissionDelay(buf[27]);
   b6b52:	f7ff bc0b 	b.w	b636c <_ZN17currentStatusData23set_retransmissionDelayEh>
   b6b56:	bf00      	nop
   b6b58:	2003e634 	.word	0x2003e634

000b6b5c <_ZN7Gateway17processDataReportE10DataReport>:
void Gateway::processDataReport(DataReport report) {
   b6b5c:	b084      	sub	sp, #16
   b6b5e:	b513      	push	{r0, r1, r4, lr}
    report.getReportData(buf, sizeof(buf));
   b6b60:	4c1c      	ldr	r4, [pc, #112]	; (b6bd4 <_ZN7Gateway17processDataReportE10DataReport+0x78>)
void Gateway::processDataReport(DataReport report) {
   b6b62:	a805      	add	r0, sp, #20
   b6b64:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    report.getReportData(buf, sizeof(buf));
   b6b68:	2232      	movs	r2, #50	; 0x32
   b6b6a:	4621      	mov	r1, r4
   b6b6c:	f7ff ff31 	bl	b69d2 <_ZNK10DataReport13getReportDataEPhj>
    current.set_alertCodeNode(0);			// reset data report							
   b6b70:	f7ff f9d2 	bl	b5f18 <_ZN17currentStatusData8instanceEv>
   b6b74:	2100      	movs	r1, #0
   b6b76:	f7ff fbed 	bl	b6354 <_ZN17currentStatusData17set_alertCodeNodeEh>
    current.set_token(buf[3] << 8 | buf[4]);									
   b6b7a:	f7ff f9cd 	bl	b5f18 <_ZN17currentStatusData8instanceEv>
   b6b7e:	f8b4 1003 	ldrh.w	r1, [r4, #3]
   b6b82:	ba49      	rev16	r1, r1
   b6b84:	b289      	uxth	r1, r1
   b6b86:	f7ff fc0f 	bl	b63a8 <_ZN17currentStatusData9set_tokenEt>
    current.set_sensorType(buf[5]);												
   b6b8a:	f7ff f9c5 	bl	b5f18 <_ZN17currentStatusData8instanceEv>
   b6b8e:	7961      	ldrb	r1, [r4, #5]
   b6b90:	f7ff fb98 	bl	b62c4 <_ZN17currentStatusData14set_sensorTypeEh>
    current.set_uniqueID(buf[6] << 24 | buf[7] << 16 | buf[8] << 8 | buf[9]);	
   b6b94:	f7ff f9c0 	bl	b5f18 <_ZN17currentStatusData8instanceEv>
   b6b98:	f8d4 1006 	ldr.w	r1, [r4, #6]
   b6b9c:	ba09      	rev	r1, r1
   b6b9e:	f7ff f9ea 	bl	b5f76 <_ZN17currentStatusData12set_uniqueIDEm>
    Log.info("Node %d with uniqueID %lu sent a data report message", current.get_nodeNumber(), current.get_uniqueID());
   b6ba2:	f7ff f9b9 	bl	b5f18 <_ZN17currentStatusData8instanceEv>
   b6ba6:	f7ff fb57 	bl	b6258 <_ZNK17currentStatusData14get_nodeNumberEv>
   b6baa:	9001      	str	r0, [sp, #4]
   b6bac:	f7ff f9b4 	bl	b5f18 <_ZN17currentStatusData8instanceEv>
   b6bb0:	f7ff f9d0 	bl	b5f54 <_ZNK17currentStatusData12get_uniqueIDEv>
   b6bb4:	9a01      	ldr	r2, [sp, #4]
   b6bb6:	4908      	ldr	r1, [pc, #32]	; (b6bd8 <_ZN7Gateway17processDataReportE10DataReport+0x7c>)
   b6bb8:	4603      	mov	r3, r0
   b6bba:	4808      	ldr	r0, [pc, #32]	; (b6bdc <_ZN7Gateway17processDataReportE10DataReport+0x80>)
   b6bbc:	f7fd fade 	bl	b417c <_ZNK5spark6Logger4infoEPKcz>
    Gateway::instance().decipherDataReport();
   b6bc0:	f7ff ff60 	bl	b6a84 <_ZN7Gateway8instanceEv>
   b6bc4:	f7ff ff70 	bl	b6aa8 <_ZN7Gateway18decipherDataReportEv>
}
   b6bc8:	b002      	add	sp, #8
   b6bca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b6bce:	b004      	add	sp, #16
   b6bd0:	4770      	bx	lr
   b6bd2:	bf00      	nop
   b6bd4:	2003e634 	.word	0x2003e634
   b6bd8:	000bacb4 	.word	0x000bacb4
   b6bdc:	2003e6b0 	.word	0x2003e6b0

000b6be0 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b6be0:	b508      	push	{r3, lr}
   b6be2:	4b02      	ldr	r3, [pc, #8]	; (b6bec <os_mutex_recursive_create+0xc>)
   b6be4:	681b      	ldr	r3, [r3, #0]
   b6be6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b6be8:	9301      	str	r3, [sp, #4]
   b6bea:	bd08      	pop	{r3, pc}
   b6bec:	00030248 	.word	0x00030248

000b6bf0 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   b6bf0:	b508      	push	{r3, lr}
   b6bf2:	4b02      	ldr	r3, [pc, #8]	; (b6bfc <os_mutex_recursive_destroy+0xc>)
   b6bf4:	681b      	ldr	r3, [r3, #0]
   b6bf6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   b6bf8:	9301      	str	r3, [sp, #4]
   b6bfa:	bd08      	pop	{r3, pc}
   b6bfc:	00030248 	.word	0x00030248

000b6c00 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   b6c00:	b508      	push	{r3, lr}
   b6c02:	4b02      	ldr	r3, [pc, #8]	; (b6c0c <os_mutex_recursive_lock+0xc>)
   b6c04:	681b      	ldr	r3, [r3, #0]
   b6c06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b6c08:	9301      	str	r3, [sp, #4]
   b6c0a:	bd08      	pop	{r3, pc}
   b6c0c:	00030248 	.word	0x00030248

000b6c10 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   b6c10:	b508      	push	{r3, lr}
   b6c12:	4b02      	ldr	r3, [pc, #8]	; (b6c1c <os_mutex_recursive_unlock+0xc>)
   b6c14:	681b      	ldr	r3, [r3, #0]
   b6c16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b6c18:	9301      	str	r3, [sp, #4]
   b6c1a:	bd08      	pop	{r3, pc}
   b6c1c:	00030248 	.word	0x00030248

000b6c20 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b6c20:	b508      	push	{r3, lr}
   b6c22:	4b02      	ldr	r3, [pc, #8]	; (b6c2c <HAL_RNG_GetRandomNumber+0xc>)
   b6c24:	681b      	ldr	r3, [r3, #0]
   b6c26:	685b      	ldr	r3, [r3, #4]
   b6c28:	9301      	str	r3, [sp, #4]
   b6c2a:	bd08      	pop	{r3, pc}
   b6c2c:	00030218 	.word	0x00030218

000b6c30 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b6c30:	b508      	push	{r3, lr}
   b6c32:	4b02      	ldr	r3, [pc, #8]	; (b6c3c <HAL_Delay_Microseconds+0xc>)
   b6c34:	681b      	ldr	r3, [r3, #0]
   b6c36:	68db      	ldr	r3, [r3, #12]
   b6c38:	9301      	str	r3, [sp, #4]
   b6c3a:	bd08      	pop	{r3, pc}
   b6c3c:	00030218 	.word	0x00030218

000b6c40 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b6c40:	b508      	push	{r3, lr}
   b6c42:	4b02      	ldr	r3, [pc, #8]	; (b6c4c <HAL_Timer_Get_Milli_Seconds+0xc>)
   b6c44:	681b      	ldr	r3, [r3, #0]
   b6c46:	695b      	ldr	r3, [r3, #20]
   b6c48:	9301      	str	r3, [sp, #4]
   b6c4a:	bd08      	pop	{r3, pc}
   b6c4c:	00030218 	.word	0x00030218

000b6c50 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   b6c50:	b508      	push	{r3, lr}
   b6c52:	4b02      	ldr	r3, [pc, #8]	; (b6c5c <hal_rtc_time_is_valid+0xc>)
   b6c54:	681b      	ldr	r3, [r3, #0]
   b6c56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b6c58:	9301      	str	r3, [sp, #4]
   b6c5a:	bd08      	pop	{r3, pc}
   b6c5c:	00030218 	.word	0x00030218

000b6c60 <hal_rtc_get_time>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   b6c60:	b508      	push	{r3, lr}
   b6c62:	4b02      	ldr	r3, [pc, #8]	; (b6c6c <hal_rtc_get_time+0xc>)
   b6c64:	681b      	ldr	r3, [r3, #0]
   b6c66:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   b6c68:	9301      	str	r3, [sp, #4]
   b6c6a:	bd08      	pop	{r3, pc}
   b6c6c:	00030218 	.word	0x00030218

000b6c70 <hal_i2c_begin>:
DYNALIB_BEGIN(hal_i2c)

DYNALIB_FN(0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b6c70:	b508      	push	{r3, lr}
   b6c72:	4b02      	ldr	r3, [pc, #8]	; (b6c7c <hal_i2c_begin+0xc>)
   b6c74:	681b      	ldr	r3, [r3, #0]
   b6c76:	68db      	ldr	r3, [r3, #12]
   b6c78:	9301      	str	r3, [sp, #4]
   b6c7a:	bd08      	pop	{r3, pc}
   b6c7c:	00030228 	.word	0x00030228

000b6c80 <hal_i2c_begin_transmission>:
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b6c80:	b508      	push	{r3, lr}
   b6c82:	4b02      	ldr	r3, [pc, #8]	; (b6c8c <hal_i2c_begin_transmission+0xc>)
   b6c84:	681b      	ldr	r3, [r3, #0]
   b6c86:	699b      	ldr	r3, [r3, #24]
   b6c88:	9301      	str	r3, [sp, #4]
   b6c8a:	bd08      	pop	{r3, pc}
   b6c8c:	00030228 	.word	0x00030228

000b6c90 <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b6c90:	b508      	push	{r3, lr}
   b6c92:	4b02      	ldr	r3, [pc, #8]	; (b6c9c <hal_i2c_end_transmission+0xc>)
   b6c94:	681b      	ldr	r3, [r3, #0]
   b6c96:	69db      	ldr	r3, [r3, #28]
   b6c98:	9301      	str	r3, [sp, #4]
   b6c9a:	bd08      	pop	{r3, pc}
   b6c9c:	00030228 	.word	0x00030228

000b6ca0 <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b6ca0:	b508      	push	{r3, lr}
   b6ca2:	4b02      	ldr	r3, [pc, #8]	; (b6cac <hal_i2c_write+0xc>)
   b6ca4:	681b      	ldr	r3, [r3, #0]
   b6ca6:	6a1b      	ldr	r3, [r3, #32]
   b6ca8:	9301      	str	r3, [sp, #4]
   b6caa:	bd08      	pop	{r3, pc}
   b6cac:	00030228 	.word	0x00030228

000b6cb0 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b6cb0:	b508      	push	{r3, lr}
   b6cb2:	4b02      	ldr	r3, [pc, #8]	; (b6cbc <hal_i2c_available+0xc>)
   b6cb4:	681b      	ldr	r3, [r3, #0]
   b6cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b6cb8:	9301      	str	r3, [sp, #4]
   b6cba:	bd08      	pop	{r3, pc}
   b6cbc:	00030228 	.word	0x00030228

000b6cc0 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b6cc0:	b508      	push	{r3, lr}
   b6cc2:	4b02      	ldr	r3, [pc, #8]	; (b6ccc <hal_i2c_read+0xc>)
   b6cc4:	681b      	ldr	r3, [r3, #0]
   b6cc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b6cc8:	9301      	str	r3, [sp, #4]
   b6cca:	bd08      	pop	{r3, pc}
   b6ccc:	00030228 	.word	0x00030228

000b6cd0 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b6cd0:	b508      	push	{r3, lr}
   b6cd2:	4b02      	ldr	r3, [pc, #8]	; (b6cdc <hal_i2c_peek+0xc>)
   b6cd4:	681b      	ldr	r3, [r3, #0]
   b6cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6cd8:	9301      	str	r3, [sp, #4]
   b6cda:	bd08      	pop	{r3, pc}
   b6cdc:	00030228 	.word	0x00030228

000b6ce0 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b6ce0:	b508      	push	{r3, lr}
   b6ce2:	4b02      	ldr	r3, [pc, #8]	; (b6cec <hal_i2c_flush+0xc>)
   b6ce4:	681b      	ldr	r3, [r3, #0]
   b6ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6ce8:	9301      	str	r3, [sp, #4]
   b6cea:	bd08      	pop	{r3, pc}
   b6cec:	00030228 	.word	0x00030228

000b6cf0 <hal_i2c_init>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b6cf0:	b508      	push	{r3, lr}
   b6cf2:	4b02      	ldr	r3, [pc, #8]	; (b6cfc <hal_i2c_init+0xc>)
   b6cf4:	681b      	ldr	r3, [r3, #0]
   b6cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6cf8:	9301      	str	r3, [sp, #4]
   b6cfa:	bd08      	pop	{r3, pc}
   b6cfc:	00030228 	.word	0x00030228

000b6d00 <hal_i2c_lock>:
DYNALIB_FN(17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
   b6d00:	b508      	push	{r3, lr}
   b6d02:	4b02      	ldr	r3, [pc, #8]	; (b6d0c <hal_i2c_lock+0xc>)
   b6d04:	681b      	ldr	r3, [r3, #0]
   b6d06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   b6d08:	9301      	str	r3, [sp, #4]
   b6d0a:	bd08      	pop	{r3, pc}
   b6d0c:	00030228 	.word	0x00030228

000b6d10 <hal_i2c_unlock>:
DYNALIB_FN(19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
   b6d10:	b508      	push	{r3, lr}
   b6d12:	4b02      	ldr	r3, [pc, #8]	; (b6d1c <hal_i2c_unlock+0xc>)
   b6d14:	681b      	ldr	r3, [r3, #0]
   b6d16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b6d18:	9301      	str	r3, [sp, #4]
   b6d1a:	bd08      	pop	{r3, pc}
   b6d1c:	00030228 	.word	0x00030228

000b6d20 <hal_i2c_request_ex>:
DYNALIB_FN(20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   b6d20:	b508      	push	{r3, lr}
   b6d22:	4b02      	ldr	r3, [pc, #8]	; (b6d2c <hal_i2c_request_ex+0xc>)
   b6d24:	681b      	ldr	r3, [r3, #0]
   b6d26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b6d28:	9301      	str	r3, [sp, #4]
   b6d2a:	bd08      	pop	{r3, pc}
   b6d2c:	00030228 	.word	0x00030228

000b6d30 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b6d30:	b508      	push	{r3, lr}
   b6d32:	4b02      	ldr	r3, [pc, #8]	; (b6d3c <inet_inet_ntop+0xc>)
   b6d34:	681b      	ldr	r3, [r3, #0]
   b6d36:	695b      	ldr	r3, [r3, #20]
   b6d38:	9301      	str	r3, [sp, #4]
   b6d3a:	bd08      	pop	{r3, pc}
   b6d3c:	00030264 	.word	0x00030264

000b6d40 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b6d40:	b508      	push	{r3, lr}
   b6d42:	4b02      	ldr	r3, [pc, #8]	; (b6d4c <netdb_freeaddrinfo+0xc>)
   b6d44:	681b      	ldr	r3, [r3, #0]
   b6d46:	689b      	ldr	r3, [r3, #8]
   b6d48:	9301      	str	r3, [sp, #4]
   b6d4a:	bd08      	pop	{r3, pc}
   b6d4c:	00030268 	.word	0x00030268

000b6d50 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b6d50:	b508      	push	{r3, lr}
   b6d52:	4b02      	ldr	r3, [pc, #8]	; (b6d5c <netdb_getaddrinfo+0xc>)
   b6d54:	681b      	ldr	r3, [r3, #0]
   b6d56:	68db      	ldr	r3, [r3, #12]
   b6d58:	9301      	str	r3, [sp, #4]
   b6d5a:	bd08      	pop	{r3, pc}
   b6d5c:	00030268 	.word	0x00030268

000b6d60 <hal_usart_end>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
   b6d60:	b508      	push	{r3, lr}
   b6d62:	4b02      	ldr	r3, [pc, #8]	; (b6d6c <hal_usart_end+0xc>)
   b6d64:	681b      	ldr	r3, [r3, #0]
   b6d66:	689b      	ldr	r3, [r3, #8]
   b6d68:	9301      	str	r3, [sp, #4]
   b6d6a:	bd08      	pop	{r3, pc}
   b6d6c:	0003023c 	.word	0x0003023c

000b6d70 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b6d70:	b508      	push	{r3, lr}
   b6d72:	4b02      	ldr	r3, [pc, #8]	; (b6d7c <hal_usart_write+0xc>)
   b6d74:	681b      	ldr	r3, [r3, #0]
   b6d76:	68db      	ldr	r3, [r3, #12]
   b6d78:	9301      	str	r3, [sp, #4]
   b6d7a:	bd08      	pop	{r3, pc}
   b6d7c:	0003023c 	.word	0x0003023c

000b6d80 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b6d80:	b508      	push	{r3, lr}
   b6d82:	4b02      	ldr	r3, [pc, #8]	; (b6d8c <hal_usart_available+0xc>)
   b6d84:	681b      	ldr	r3, [r3, #0]
   b6d86:	691b      	ldr	r3, [r3, #16]
   b6d88:	9301      	str	r3, [sp, #4]
   b6d8a:	bd08      	pop	{r3, pc}
   b6d8c:	0003023c 	.word	0x0003023c

000b6d90 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b6d90:	b508      	push	{r3, lr}
   b6d92:	4b02      	ldr	r3, [pc, #8]	; (b6d9c <hal_usart_read+0xc>)
   b6d94:	681b      	ldr	r3, [r3, #0]
   b6d96:	695b      	ldr	r3, [r3, #20]
   b6d98:	9301      	str	r3, [sp, #4]
   b6d9a:	bd08      	pop	{r3, pc}
   b6d9c:	0003023c 	.word	0x0003023c

000b6da0 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b6da0:	b508      	push	{r3, lr}
   b6da2:	4b02      	ldr	r3, [pc, #8]	; (b6dac <hal_usart_peek+0xc>)
   b6da4:	681b      	ldr	r3, [r3, #0]
   b6da6:	699b      	ldr	r3, [r3, #24]
   b6da8:	9301      	str	r3, [sp, #4]
   b6daa:	bd08      	pop	{r3, pc}
   b6dac:	0003023c 	.word	0x0003023c

000b6db0 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b6db0:	b508      	push	{r3, lr}
   b6db2:	4b02      	ldr	r3, [pc, #8]	; (b6dbc <hal_usart_flush+0xc>)
   b6db4:	681b      	ldr	r3, [r3, #0]
   b6db6:	69db      	ldr	r3, [r3, #28]
   b6db8:	9301      	str	r3, [sp, #4]
   b6dba:	bd08      	pop	{r3, pc}
   b6dbc:	0003023c 	.word	0x0003023c

000b6dc0 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b6dc0:	b508      	push	{r3, lr}
   b6dc2:	4b02      	ldr	r3, [pc, #8]	; (b6dcc <hal_usart_available_data_for_write+0xc>)
   b6dc4:	681b      	ldr	r3, [r3, #0]
   b6dc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b6dc8:	9301      	str	r3, [sp, #4]
   b6dca:	bd08      	pop	{r3, pc}
   b6dcc:	0003023c 	.word	0x0003023c

000b6dd0 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
   b6dd0:	b508      	push	{r3, lr}
   b6dd2:	4b02      	ldr	r3, [pc, #8]	; (b6ddc <hal_usart_begin_config+0xc>)
   b6dd4:	681b      	ldr	r3, [r3, #0]
   b6dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6dd8:	9301      	str	r3, [sp, #4]
   b6dda:	bd08      	pop	{r3, pc}
   b6ddc:	0003023c 	.word	0x0003023c

000b6de0 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b6de0:	b508      	push	{r3, lr}
   b6de2:	4b02      	ldr	r3, [pc, #8]	; (b6dec <hal_usart_init_ex+0xc>)
   b6de4:	681b      	ldr	r3, [r3, #0]
   b6de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6de8:	9301      	str	r3, [sp, #4]
   b6dea:	bd08      	pop	{r3, pc}
   b6dec:	0003023c 	.word	0x0003023c

000b6df0 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b6df0:	b508      	push	{r3, lr}
   b6df2:	4b02      	ldr	r3, [pc, #8]	; (b6dfc <HAL_USB_USART_Init+0xc>)
   b6df4:	681b      	ldr	r3, [r3, #0]
   b6df6:	681b      	ldr	r3, [r3, #0]
   b6df8:	9301      	str	r3, [sp, #4]
   b6dfa:	bd08      	pop	{r3, pc}
   b6dfc:	0003024c 	.word	0x0003024c

000b6e00 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b6e00:	b508      	push	{r3, lr}
   b6e02:	4b02      	ldr	r3, [pc, #8]	; (b6e0c <HAL_USB_USART_Begin+0xc>)
   b6e04:	681b      	ldr	r3, [r3, #0]
   b6e06:	685b      	ldr	r3, [r3, #4]
   b6e08:	9301      	str	r3, [sp, #4]
   b6e0a:	bd08      	pop	{r3, pc}
   b6e0c:	0003024c 	.word	0x0003024c

000b6e10 <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
   b6e10:	b508      	push	{r3, lr}
   b6e12:	4b02      	ldr	r3, [pc, #8]	; (b6e1c <HAL_USB_USART_End+0xc>)
   b6e14:	681b      	ldr	r3, [r3, #0]
   b6e16:	689b      	ldr	r3, [r3, #8]
   b6e18:	9301      	str	r3, [sp, #4]
   b6e1a:	bd08      	pop	{r3, pc}
   b6e1c:	0003024c 	.word	0x0003024c

000b6e20 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b6e20:	b508      	push	{r3, lr}
   b6e22:	4b02      	ldr	r3, [pc, #8]	; (b6e2c <HAL_USB_USART_Available_Data+0xc>)
   b6e24:	681b      	ldr	r3, [r3, #0]
   b6e26:	691b      	ldr	r3, [r3, #16]
   b6e28:	9301      	str	r3, [sp, #4]
   b6e2a:	bd08      	pop	{r3, pc}
   b6e2c:	0003024c 	.word	0x0003024c

000b6e30 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b6e30:	b508      	push	{r3, lr}
   b6e32:	4b02      	ldr	r3, [pc, #8]	; (b6e3c <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b6e34:	681b      	ldr	r3, [r3, #0]
   b6e36:	695b      	ldr	r3, [r3, #20]
   b6e38:	9301      	str	r3, [sp, #4]
   b6e3a:	bd08      	pop	{r3, pc}
   b6e3c:	0003024c 	.word	0x0003024c

000b6e40 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b6e40:	b508      	push	{r3, lr}
   b6e42:	4b02      	ldr	r3, [pc, #8]	; (b6e4c <HAL_USB_USART_Receive_Data+0xc>)
   b6e44:	681b      	ldr	r3, [r3, #0]
   b6e46:	699b      	ldr	r3, [r3, #24]
   b6e48:	9301      	str	r3, [sp, #4]
   b6e4a:	bd08      	pop	{r3, pc}
   b6e4c:	0003024c 	.word	0x0003024c

000b6e50 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b6e50:	b508      	push	{r3, lr}
   b6e52:	4b02      	ldr	r3, [pc, #8]	; (b6e5c <HAL_USB_USART_Send_Data+0xc>)
   b6e54:	681b      	ldr	r3, [r3, #0]
   b6e56:	69db      	ldr	r3, [r3, #28]
   b6e58:	9301      	str	r3, [sp, #4]
   b6e5a:	bd08      	pop	{r3, pc}
   b6e5c:	0003024c 	.word	0x0003024c

000b6e60 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b6e60:	b508      	push	{r3, lr}
   b6e62:	4b02      	ldr	r3, [pc, #8]	; (b6e6c <HAL_USB_USART_Flush_Data+0xc>)
   b6e64:	681b      	ldr	r3, [r3, #0]
   b6e66:	6a1b      	ldr	r3, [r3, #32]
   b6e68:	9301      	str	r3, [sp, #4]
   b6e6a:	bd08      	pop	{r3, pc}
   b6e6c:	0003024c 	.word	0x0003024c

000b6e70 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b6e70:	b508      	push	{r3, lr}
   b6e72:	4b02      	ldr	r3, [pc, #8]	; (b6e7c <panic_+0xc>)
   b6e74:	681b      	ldr	r3, [r3, #0]
   b6e76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b6e78:	9301      	str	r3, [sp, #4]
   b6e7a:	bd08      	pop	{r3, pc}
   b6e7c:	00030260 	.word	0x00030260

000b6e80 <log_message_v>:
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
   b6e80:	b508      	push	{r3, lr}
   b6e82:	4b02      	ldr	r3, [pc, #8]	; (b6e8c <log_message_v+0xc>)
   b6e84:	681b      	ldr	r3, [r3, #0]
   b6e86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b6e88:	9301      	str	r3, [sp, #4]
   b6e8a:	bd08      	pop	{r3, pc}
   b6e8c:	00030260 	.word	0x00030260

000b6e90 <log_write>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
   b6e90:	b508      	push	{r3, lr}
   b6e92:	4b02      	ldr	r3, [pc, #8]	; (b6e9c <log_write+0xc>)
   b6e94:	681b      	ldr	r3, [r3, #0]
   b6e96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b6e98:	9301      	str	r3, [sp, #4]
   b6e9a:	bd08      	pop	{r3, pc}
   b6e9c:	00030260 	.word	0x00030260

000b6ea0 <log_dump>:
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
   b6ea0:	b508      	push	{r3, lr}
   b6ea2:	4b02      	ldr	r3, [pc, #8]	; (b6eac <log_dump+0xc>)
   b6ea4:	681b      	ldr	r3, [r3, #0]
   b6ea6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   b6ea8:	9301      	str	r3, [sp, #4]
   b6eaa:	bd08      	pop	{r3, pc}
   b6eac:	00030260 	.word	0x00030260

000b6eb0 <log_level_name>:
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
   b6eb0:	b508      	push	{r3, lr}
   b6eb2:	4b02      	ldr	r3, [pc, #8]	; (b6ebc <log_level_name+0xc>)
   b6eb4:	681b      	ldr	r3, [r3, #0]
   b6eb6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   b6eb8:	9301      	str	r3, [sp, #4]
   b6eba:	bd08      	pop	{r3, pc}
   b6ebc:	00030260 	.word	0x00030260

000b6ec0 <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
   b6ec0:	b508      	push	{r3, lr}
   b6ec2:	4b02      	ldr	r3, [pc, #8]	; (b6ecc <log_set_callbacks+0xc>)
   b6ec4:	681b      	ldr	r3, [r3, #0]
   b6ec6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   b6ec8:	9301      	str	r3, [sp, #4]
   b6eca:	bd08      	pop	{r3, pc}
   b6ecc:	00030260 	.word	0x00030260

000b6ed0 <system_mode>:
#include "system_ble_prov.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   b6ed0:	b508      	push	{r3, lr}
   b6ed2:	4b02      	ldr	r3, [pc, #8]	; (b6edc <system_mode+0xc>)
   b6ed4:	681b      	ldr	r3, [r3, #0]
   b6ed6:	681b      	ldr	r3, [r3, #0]
   b6ed8:	9301      	str	r3, [sp, #4]
   b6eda:	bd08      	pop	{r3, pc}
   b6edc:	00030220 	.word	0x00030220

000b6ee0 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b6ee0:	b508      	push	{r3, lr}
   b6ee2:	4b02      	ldr	r3, [pc, #8]	; (b6eec <set_system_mode+0xc>)
   b6ee4:	681b      	ldr	r3, [r3, #0]
   b6ee6:	685b      	ldr	r3, [r3, #4]
   b6ee8:	9301      	str	r3, [sp, #4]
   b6eea:	bd08      	pop	{r3, pc}
   b6eec:	00030220 	.word	0x00030220

000b6ef0 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b6ef0:	b508      	push	{r3, lr}
   b6ef2:	4b02      	ldr	r3, [pc, #8]	; (b6efc <system_delay_ms+0xc>)
   b6ef4:	681b      	ldr	r3, [r3, #0]
   b6ef6:	695b      	ldr	r3, [r3, #20]
   b6ef8:	9301      	str	r3, [sp, #4]
   b6efa:	bd08      	pop	{r3, pc}
   b6efc:	00030220 	.word	0x00030220

000b6f00 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   b6f00:	b508      	push	{r3, lr}
   b6f02:	4b02      	ldr	r3, [pc, #8]	; (b6f0c <application_thread_current+0xc>)
   b6f04:	681b      	ldr	r3, [r3, #0]
   b6f06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b6f08:	9301      	str	r3, [sp, #4]
   b6f0a:	bd08      	pop	{r3, pc}
   b6f0c:	00030220 	.word	0x00030220

000b6f10 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   b6f10:	b508      	push	{r3, lr}
   b6f12:	4b02      	ldr	r3, [pc, #8]	; (b6f1c <application_thread_invoke+0xc>)
   b6f14:	681b      	ldr	r3, [r3, #0]
   b6f16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b6f18:	9301      	str	r3, [sp, #4]
   b6f1a:	bd08      	pop	{r3, pc}
   b6f1c:	00030220 	.word	0x00030220

000b6f20 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   b6f20:	b508      	push	{r3, lr}
   b6f22:	4b02      	ldr	r3, [pc, #8]	; (b6f2c <system_thread_get_state+0xc>)
   b6f24:	681b      	ldr	r3, [r3, #0]
   b6f26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b6f28:	9301      	str	r3, [sp, #4]
   b6f2a:	bd08      	pop	{r3, pc}
   b6f2c:	00030220 	.word	0x00030220

000b6f30 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b6f30:	b508      	push	{r3, lr}
   b6f32:	4b03      	ldr	r3, [pc, #12]	; (b6f40 <system_ctrl_set_app_request_handler+0x10>)
   b6f34:	681b      	ldr	r3, [r3, #0]
   b6f36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b6f3a:	9301      	str	r3, [sp, #4]
   b6f3c:	bd08      	pop	{r3, pc}
   b6f3e:	0000      	.short	0x0000
   b6f40:	00030220 	.word	0x00030220

000b6f44 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b6f44:	b508      	push	{r3, lr}
   b6f46:	4b03      	ldr	r3, [pc, #12]	; (b6f54 <system_ctrl_set_result+0x10>)
   b6f48:	681b      	ldr	r3, [r3, #0]
   b6f4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b6f4e:	9301      	str	r3, [sp, #4]
   b6f50:	bd08      	pop	{r3, pc}
   b6f52:	0000      	.short	0x0000
   b6f54:	00030220 	.word	0x00030220

000b6f58 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, bool(void))
   b6f58:	b508      	push	{r3, lr}
   b6f5a:	4b02      	ldr	r3, [pc, #8]	; (b6f64 <spark_process+0xc>)
   b6f5c:	681b      	ldr	r3, [r3, #0]
   b6f5e:	689b      	ldr	r3, [r3, #8]
   b6f60:	9301      	str	r3, [sp, #4]
   b6f62:	bd08      	pop	{r3, pc}
   b6f64:	00030244 	.word	0x00030244

000b6f68 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   b6f68:	b508      	push	{r3, lr}
   b6f6a:	4b02      	ldr	r3, [pc, #8]	; (b6f74 <spark_cloud_flag_connected+0xc>)
   b6f6c:	681b      	ldr	r3, [r3, #0]
   b6f6e:	695b      	ldr	r3, [r3, #20]
   b6f70:	9301      	str	r3, [sp, #4]
   b6f72:	bd08      	pop	{r3, pc}
   b6f74:	00030244 	.word	0x00030244

000b6f78 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   b6f78:	b508      	push	{r3, lr}
   b6f7a:	4b02      	ldr	r3, [pc, #8]	; (b6f84 <spark_send_event+0xc>)
   b6f7c:	681b      	ldr	r3, [r3, #0]
   b6f7e:	6a1b      	ldr	r3, [r3, #32]
   b6f80:	9301      	str	r3, [sp, #4]
   b6f82:	bd08      	pop	{r3, pc}
   b6f84:	00030244 	.word	0x00030244

000b6f88 <spark_sync_time_pending>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   b6f88:	b508      	push	{r3, lr}
   b6f8a:	4b02      	ldr	r3, [pc, #8]	; (b6f94 <spark_sync_time_pending+0xc>)
   b6f8c:	681b      	ldr	r3, [r3, #0]
   b6f8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6f90:	9301      	str	r3, [sp, #4]
   b6f92:	bd08      	pop	{r3, pc}
   b6f94:	00030244 	.word	0x00030244

000b6f98 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b6f98:	b508      	push	{r3, lr}
   b6f9a:	4b02      	ldr	r3, [pc, #8]	; (b6fa4 <spark_set_random_seed_from_cloud_handler+0xc>)
   b6f9c:	681b      	ldr	r3, [r3, #0]
   b6f9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b6fa0:	9301      	str	r3, [sp, #4]
   b6fa2:	bd08      	pop	{r3, pc}
   b6fa4:	00030244 	.word	0x00030244

000b6fa8 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b6fa8:	b508      	push	{r3, lr}
   b6faa:	4b02      	ldr	r3, [pc, #8]	; (b6fb4 <network_connect+0xc>)
   b6fac:	681b      	ldr	r3, [r3, #0]
   b6fae:	685b      	ldr	r3, [r3, #4]
   b6fb0:	9301      	str	r3, [sp, #4]
   b6fb2:	bd08      	pop	{r3, pc}
   b6fb4:	00030240 	.word	0x00030240

000b6fb8 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b6fb8:	b508      	push	{r3, lr}
   b6fba:	4b02      	ldr	r3, [pc, #8]	; (b6fc4 <network_connecting+0xc>)
   b6fbc:	681b      	ldr	r3, [r3, #0]
   b6fbe:	689b      	ldr	r3, [r3, #8]
   b6fc0:	9301      	str	r3, [sp, #4]
   b6fc2:	bd08      	pop	{r3, pc}
   b6fc4:	00030240 	.word	0x00030240

000b6fc8 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b6fc8:	b508      	push	{r3, lr}
   b6fca:	4b02      	ldr	r3, [pc, #8]	; (b6fd4 <network_disconnect+0xc>)
   b6fcc:	681b      	ldr	r3, [r3, #0]
   b6fce:	68db      	ldr	r3, [r3, #12]
   b6fd0:	9301      	str	r3, [sp, #4]
   b6fd2:	bd08      	pop	{r3, pc}
   b6fd4:	00030240 	.word	0x00030240

000b6fd8 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b6fd8:	b508      	push	{r3, lr}
   b6fda:	4b02      	ldr	r3, [pc, #8]	; (b6fe4 <network_ready+0xc>)
   b6fdc:	681b      	ldr	r3, [r3, #0]
   b6fde:	691b      	ldr	r3, [r3, #16]
   b6fe0:	9301      	str	r3, [sp, #4]
   b6fe2:	bd08      	pop	{r3, pc}
   b6fe4:	00030240 	.word	0x00030240

000b6fe8 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b6fe8:	b508      	push	{r3, lr}
   b6fea:	4b02      	ldr	r3, [pc, #8]	; (b6ff4 <network_on+0xc>)
   b6fec:	681b      	ldr	r3, [r3, #0]
   b6fee:	695b      	ldr	r3, [r3, #20]
   b6ff0:	9301      	str	r3, [sp, #4]
   b6ff2:	bd08      	pop	{r3, pc}
   b6ff4:	00030240 	.word	0x00030240

000b6ff8 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b6ff8:	b508      	push	{r3, lr}
   b6ffa:	4b02      	ldr	r3, [pc, #8]	; (b7004 <network_off+0xc>)
   b6ffc:	681b      	ldr	r3, [r3, #0]
   b6ffe:	699b      	ldr	r3, [r3, #24]
   b7000:	9301      	str	r3, [sp, #4]
   b7002:	bd08      	pop	{r3, pc}
   b7004:	00030240 	.word	0x00030240

000b7008 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b7008:	b508      	push	{r3, lr}
   b700a:	4b02      	ldr	r3, [pc, #8]	; (b7014 <network_listen+0xc>)
   b700c:	681b      	ldr	r3, [r3, #0]
   b700e:	69db      	ldr	r3, [r3, #28]
   b7010:	9301      	str	r3, [sp, #4]
   b7012:	bd08      	pop	{r3, pc}
   b7014:	00030240 	.word	0x00030240

000b7018 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b7018:	b508      	push	{r3, lr}
   b701a:	4b02      	ldr	r3, [pc, #8]	; (b7024 <network_listening+0xc>)
   b701c:	681b      	ldr	r3, [r3, #0]
   b701e:	6a1b      	ldr	r3, [r3, #32]
   b7020:	9301      	str	r3, [sp, #4]
   b7022:	bd08      	pop	{r3, pc}
   b7024:	00030240 	.word	0x00030240

000b7028 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b7028:	b508      	push	{r3, lr}
   b702a:	4b02      	ldr	r3, [pc, #8]	; (b7034 <network_set_listen_timeout+0xc>)
   b702c:	681b      	ldr	r3, [r3, #0]
   b702e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b7030:	9301      	str	r3, [sp, #4]
   b7032:	bd08      	pop	{r3, pc}
   b7034:	00030240 	.word	0x00030240

000b7038 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b7038:	b508      	push	{r3, lr}
   b703a:	4b02      	ldr	r3, [pc, #8]	; (b7044 <network_get_listen_timeout+0xc>)
   b703c:	681b      	ldr	r3, [r3, #0]
   b703e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b7040:	9301      	str	r3, [sp, #4]
   b7042:	bd08      	pop	{r3, pc}
   b7044:	00030240 	.word	0x00030240

000b7048 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b7048:	b508      	push	{r3, lr}
   b704a:	4b02      	ldr	r3, [pc, #8]	; (b7054 <network_is_on+0xc>)
   b704c:	681b      	ldr	r3, [r3, #0]
   b704e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b7050:	9301      	str	r3, [sp, #4]
   b7052:	bd08      	pop	{r3, pc}
   b7054:	00030240 	.word	0x00030240

000b7058 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b7058:	b508      	push	{r3, lr}
   b705a:	4b02      	ldr	r3, [pc, #8]	; (b7064 <network_is_off+0xc>)
   b705c:	681b      	ldr	r3, [r3, #0]
   b705e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b7060:	9301      	str	r3, [sp, #4]
   b7062:	bd08      	pop	{r3, pc}
   b7064:	00030240 	.word	0x00030240

000b7068 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b7068:	b508      	push	{r3, lr}
   b706a:	4b02      	ldr	r3, [pc, #8]	; (b7074 <malloc+0xc>)
   b706c:	681b      	ldr	r3, [r3, #0]
   b706e:	681b      	ldr	r3, [r3, #0]
   b7070:	9301      	str	r3, [sp, #4]
   b7072:	bd08      	pop	{r3, pc}
   b7074:	0003021c 	.word	0x0003021c

000b7078 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b7078:	b508      	push	{r3, lr}
   b707a:	4b02      	ldr	r3, [pc, #8]	; (b7084 <free+0xc>)
   b707c:	681b      	ldr	r3, [r3, #0]
   b707e:	685b      	ldr	r3, [r3, #4]
   b7080:	9301      	str	r3, [sp, #4]
   b7082:	bd08      	pop	{r3, pc}
   b7084:	0003021c 	.word	0x0003021c

000b7088 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b7088:	b508      	push	{r3, lr}
   b708a:	4b02      	ldr	r3, [pc, #8]	; (b7094 <realloc+0xc>)
   b708c:	681b      	ldr	r3, [r3, #0]
   b708e:	689b      	ldr	r3, [r3, #8]
   b7090:	9301      	str	r3, [sp, #4]
   b7092:	bd08      	pop	{r3, pc}
   b7094:	0003021c 	.word	0x0003021c

000b7098 <sscanf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
   b7098:	b508      	push	{r3, lr}
   b709a:	4b02      	ldr	r3, [pc, #8]	; (b70a4 <sscanf+0xc>)
   b709c:	681b      	ldr	r3, [r3, #0]
   b709e:	695b      	ldr	r3, [r3, #20]
   b70a0:	9301      	str	r3, [sp, #4]
   b70a2:	bd08      	pop	{r3, pc}
   b70a4:	0003021c 	.word	0x0003021c

000b70a8 <snprintf>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   b70a8:	b508      	push	{r3, lr}
   b70aa:	4b02      	ldr	r3, [pc, #8]	; (b70b4 <snprintf+0xc>)
   b70ac:	681b      	ldr	r3, [r3, #0]
   b70ae:	69db      	ldr	r3, [r3, #28]
   b70b0:	9301      	str	r3, [sp, #4]
   b70b2:	bd08      	pop	{r3, pc}
   b70b4:	0003021c 	.word	0x0003021c

000b70b8 <sniprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
   b70b8:	b508      	push	{r3, lr}
   b70ba:	4b02      	ldr	r3, [pc, #8]	; (b70c4 <sniprintf+0xc>)
   b70bc:	681b      	ldr	r3, [r3, #0]
   b70be:	6a1b      	ldr	r3, [r3, #32]
   b70c0:	9301      	str	r3, [sp, #4]
   b70c2:	bd08      	pop	{r3, pc}
   b70c4:	0003021c 	.word	0x0003021c

000b70c8 <vsnprintf>:
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b70c8:	b508      	push	{r3, lr}
   b70ca:	4b02      	ldr	r3, [pc, #8]	; (b70d4 <vsnprintf+0xc>)
   b70cc:	681b      	ldr	r3, [r3, #0]
   b70ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b70d0:	9301      	str	r3, [sp, #4]
   b70d2:	bd08      	pop	{r3, pc}
   b70d4:	0003021c 	.word	0x0003021c

000b70d8 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b70d8:	b508      	push	{r3, lr}
   b70da:	4b02      	ldr	r3, [pc, #8]	; (b70e4 <abort+0xc>)
   b70dc:	681b      	ldr	r3, [r3, #0]
   b70de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b70e0:	9301      	str	r3, [sp, #4]
   b70e2:	bd08      	pop	{r3, pc}
   b70e4:	0003021c 	.word	0x0003021c

000b70e8 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   b70e8:	b508      	push	{r3, lr}
   b70ea:	4b02      	ldr	r3, [pc, #8]	; (b70f4 <_malloc_r+0xc>)
   b70ec:	681b      	ldr	r3, [r3, #0]
   b70ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b70f0:	9301      	str	r3, [sp, #4]
   b70f2:	bd08      	pop	{r3, pc}
   b70f4:	0003021c 	.word	0x0003021c

000b70f8 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b70f8:	b508      	push	{r3, lr}
   b70fa:	4b02      	ldr	r3, [pc, #8]	; (b7104 <__errno+0xc>)
   b70fc:	681b      	ldr	r3, [r3, #0]
   b70fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b7100:	9301      	str	r3, [sp, #4]
   b7102:	bd08      	pop	{r3, pc}
   b7104:	0003021c 	.word	0x0003021c

000b7108 <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b7108:	b508      	push	{r3, lr}
   b710a:	4b02      	ldr	r3, [pc, #8]	; (b7114 <__assert_func+0xc>)
   b710c:	681b      	ldr	r3, [r3, #0]
   b710e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b7110:	9301      	str	r3, [sp, #4]
   b7112:	bd08      	pop	{r3, pc}
   b7114:	0003021c 	.word	0x0003021c

000b7118 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b7118:	b508      	push	{r3, lr}
   b711a:	4b02      	ldr	r3, [pc, #8]	; (b7124 <newlib_impure_ptr_callback+0xc>)
   b711c:	681b      	ldr	r3, [r3, #0]
   b711e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b7120:	9301      	str	r3, [sp, #4]
   b7122:	bd08      	pop	{r3, pc}
   b7124:	0003021c 	.word	0x0003021c

000b7128 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b7128:	2100      	movs	r1, #0
   b712a:	f7ff bee1 	b.w	b6ef0 <system_delay_ms>

000b712e <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   b712e:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   b7130:	6883      	ldr	r3, [r0, #8]
   b7132:	4604      	mov	r4, r0
   b7134:	b90b      	cbnz	r3, b713a <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   b7136:	f002 fa55 	bl	b95e4 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b713a:	68c3      	ldr	r3, [r0, #12]
   b713c:	4798      	blx	r3
      if (_M_manager)
   b713e:	68a3      	ldr	r3, [r4, #8]
   b7140:	b11b      	cbz	r3, b714a <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b7142:	2203      	movs	r2, #3
   b7144:	4621      	mov	r1, r4
   b7146:	4620      	mov	r0, r4
   b7148:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   b714a:	4620      	mov	r0, r4
   b714c:	2110      	movs	r1, #16
}
   b714e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   b7152:	f7fc bfa2 	b.w	b409a <_ZdlPvj>

000b7156 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   b7156:	b510      	push	{r4, lr}
      if (_M_manager)
   b7158:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b715a:	4604      	mov	r4, r0
      if (_M_manager)
   b715c:	b113      	cbz	r3, b7164 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b715e:	2203      	movs	r2, #3
   b7160:	4601      	mov	r1, r0
   b7162:	4798      	blx	r3
    }
   b7164:	4620      	mov	r0, r4
   b7166:	bd10      	pop	{r4, pc}

000b7168 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    {
   b7168:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   b716a:	6843      	ldr	r3, [r0, #4]
   b716c:	3b01      	subs	r3, #1
    {
   b716e:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   b7170:	6043      	str	r3, [r0, #4]
   b7172:	b963      	cbnz	r3, b718e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
          _M_dispose();
   b7174:	6803      	ldr	r3, [r0, #0]
   b7176:	689b      	ldr	r3, [r3, #8]
   b7178:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b717a:	68a3      	ldr	r3, [r4, #8]
   b717c:	3b01      	subs	r3, #1
   b717e:	60a3      	str	r3, [r4, #8]
   b7180:	b92b      	cbnz	r3, b718e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   b7182:	6823      	ldr	r3, [r4, #0]
   b7184:	4620      	mov	r0, r4
   b7186:	68db      	ldr	r3, [r3, #12]
    }
   b7188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   b718c:	4718      	bx	r3
    }
   b718e:	bd10      	pop	{r4, pc}

000b7190 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   b7190:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b7192:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b7196:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b7198:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
   b719c:	42ae      	cmp	r6, r5
   b719e:	d004      	beq.n	b71aa <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
   b71a0:	4628      	mov	r0, r5
   b71a2:	f001 fedb 	bl	b8f5c <_ZN6StringD1Ev>
        for (; p != end; ++p) {
   b71a6:	3510      	adds	r5, #16
   b71a8:	e7f8      	b.n	b719c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b71aa:	6820      	ldr	r0, [r4, #0]
   b71ac:	f7ff ff64 	bl	b7078 <free>
    AllocatorT::free(data_);
}
   b71b0:	4620      	mov	r0, r4
   b71b2:	bd70      	pop	{r4, r5, r6, pc}

000b71b4 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
   b71b4:	b513      	push	{r0, r1, r4, lr}
   b71b6:	460b      	mov	r3, r1
   b71b8:	4602      	mov	r2, r0
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b71ba:	e9d0 0100 	ldrd	r0, r1, [r0]
   b71be:	466c      	mov	r4, sp
   b71c0:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b71c4:	e893 0003 	ldmia.w	r3, {r0, r1}
   b71c8:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b71cc:	e894 0003 	ldmia.w	r4, {r0, r1}
   b71d0:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   b71d4:	b002      	add	sp, #8
   b71d6:	bd10      	pop	{r4, pc}

000b71d8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b71d8:	4802      	ldr	r0, [pc, #8]	; (b71e4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b71da:	2300      	movs	r3, #0
   b71dc:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b71de:	f7ff bcff 	b.w	b6be0 <os_mutex_recursive_create>
   b71e2:	bf00      	nop
   b71e4:	2003e668 	.word	0x2003e668

000b71e8 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   b71e8:	2200      	movs	r2, #0
   b71ea:	6840      	ldr	r0, [r0, #4]
   b71ec:	4611      	mov	r1, r2
   b71ee:	f7ff bef3 	b.w	b6fd8 <network_ready>

000b71f2 <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   b71f2:	2200      	movs	r2, #0
   b71f4:	6840      	ldr	r0, [r0, #4]
   b71f6:	4611      	mov	r1, r2
   b71f8:	f7ff bf0e 	b.w	b7018 <network_listening>

000b71fc <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b71fc:	2200      	movs	r2, #0
   b71fe:	6840      	ldr	r0, [r0, #4]
   b7200:	4611      	mov	r1, r2
   b7202:	f7ff bf19 	b.w	b7038 <network_get_listen_timeout>

000b7206 <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b7206:	6840      	ldr	r0, [r0, #4]
   b7208:	2200      	movs	r2, #0
   b720a:	f7ff bf0d 	b.w	b7028 <network_set_listen_timeout>

000b720e <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b720e:	6840      	ldr	r0, [r0, #4]
   b7210:	2200      	movs	r2, #0
   b7212:	f081 0101 	eor.w	r1, r1, #1
   b7216:	f7ff bef7 	b.w	b7008 <network_listen>

000b721a <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b721a:	2300      	movs	r3, #0
   b721c:	6840      	ldr	r0, [r0, #4]
   b721e:	461a      	mov	r2, r3
   b7220:	4619      	mov	r1, r3
   b7222:	f7ff bee9 	b.w	b6ff8 <network_off>

000b7226 <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b7226:	2300      	movs	r3, #0
   b7228:	6840      	ldr	r0, [r0, #4]
   b722a:	461a      	mov	r2, r3
   b722c:	4619      	mov	r1, r3
   b722e:	f7ff bedb 	b.w	b6fe8 <network_on>

000b7232 <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b7232:	2200      	movs	r2, #0
   b7234:	6840      	ldr	r0, [r0, #4]
   b7236:	4611      	mov	r1, r2
   b7238:	f7ff bebe 	b.w	b6fb8 <network_connecting>

000b723c <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b723c:	6840      	ldr	r0, [r0, #4]
   b723e:	2200      	movs	r2, #0
   b7240:	2102      	movs	r1, #2
   b7242:	f7ff bec1 	b.w	b6fc8 <network_disconnect>

000b7246 <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b7246:	2300      	movs	r3, #0
   b7248:	6840      	ldr	r0, [r0, #4]
   b724a:	461a      	mov	r2, r3
   b724c:	f7ff beac 	b.w	b6fa8 <network_connect>

000b7250 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   b7250:	4b08      	ldr	r3, [pc, #32]	; (b7274 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   b7252:	b510      	push	{r4, lr}
   b7254:	2428      	movs	r4, #40	; 0x28
   b7256:	4622      	mov	r2, r4
   b7258:	4618      	mov	r0, r3
   b725a:	2100      	movs	r1, #0
   b725c:	f002 fbb8 	bl	b99d0 <memset>
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b7260:	4b05      	ldr	r3, [pc, #20]	; (b7278 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   b7262:	8004      	strh	r4, [r0, #0]
        cid = -1;
   b7264:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b7268:	6042      	str	r2, [r0, #4]
   b726a:	2204      	movs	r2, #4
   b726c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   b726e:	4a03      	ldr	r2, [pc, #12]	; (b727c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   b7270:	601a      	str	r2, [r3, #0]
   b7272:	bd10      	pop	{r4, pc}
   b7274:	2003e674 	.word	0x2003e674
   b7278:	2003e66c 	.word	0x2003e66c
   b727c:	000bad04 	.word	0x000bad04

000b7280 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b7280:	4770      	bx	lr

000b7282 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   b7282:	2000      	movs	r0, #0
   b7284:	4770      	bx	lr

000b7286 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b7286:	b510      	push	{r4, lr}
   b7288:	2110      	movs	r1, #16
   b728a:	4604      	mov	r4, r0
   b728c:	f7fc ff05 	bl	b409a <_ZdlPvj>
   b7290:	4620      	mov	r0, r4
   b7292:	bd10      	pop	{r4, pc}

000b7294 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   b7294:	b508      	push	{r3, lr}
      { delete this; }
   b7296:	f7ff fff6 	bl	b7286 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   b729a:	bd08      	pop	{r3, pc}

000b729c <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   b729c:	b530      	push	{r4, r5, lr}
        type_(type) {
   b729e:	2200      	movs	r2, #0
   b72a0:	f64f 749c 	movw	r4, #65436	; 0xff9c
   b72a4:	6002      	str	r2, [r0, #0]
   b72a6:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   b72a8:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   b72aa:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   b72ac:	680c      	ldr	r4, [r1, #0]
   b72ae:	8085      	strh	r5, [r0, #4]
   b72b0:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b72b2:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   b72b4:	bd30      	pop	{r4, r5, pc}

000b72b6 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   b72b6:	b510      	push	{r4, lr}
   b72b8:	4604      	mov	r4, r0
    free((void*)msg_);
   b72ba:	6800      	ldr	r0, [r0, #0]
   b72bc:	f7ff fedc 	bl	b7078 <free>
}
   b72c0:	4620      	mov	r0, r4
   b72c2:	bd10      	pop	{r4, pc}

000b72c4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b72c4:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   b72c6:	68c4      	ldr	r4, [r0, #12]
   b72c8:	b1f4      	cbz	r4, b7308 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   b72ca:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   b72cc:	2b02      	cmp	r3, #2
   b72ce:	d103      	bne.n	b72d8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   b72d0:	f104 000c 	add.w	r0, r4, #12
   b72d4:	f7ff ffef 	bl	b72b6 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   b72d8:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   b72da:	b135      	cbz	r5, b72ea <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   b72dc:	4628      	mov	r0, r5
   b72de:	f7ff ff3a 	bl	b7156 <_ZNSt14_Function_baseD1Ev>
   b72e2:	2110      	movs	r1, #16
   b72e4:	4628      	mov	r0, r5
   b72e6:	f7fc fed8 	bl	b409a <_ZdlPvj>
   b72ea:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   b72ec:	b135      	cbz	r5, b72fc <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   b72ee:	4628      	mov	r0, r5
   b72f0:	f7ff ff31 	bl	b7156 <_ZNSt14_Function_baseD1Ev>
   b72f4:	2110      	movs	r1, #16
   b72f6:	4628      	mov	r0, r5
   b72f8:	f7fc fecf 	bl	b409a <_ZdlPvj>
   b72fc:	4620      	mov	r0, r4
   b72fe:	2114      	movs	r1, #20
   b7300:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b7304:	f7fc bec9 	b.w	b409a <_ZdlPvj>
   b7308:	bd38      	pop	{r3, r4, r5, pc}

000b730a <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b730a:	680b      	ldr	r3, [r1, #0]
   b730c:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   b730e:	684b      	ldr	r3, [r1, #4]
   b7310:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   b7312:	b113      	cbz	r3, b731a <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_+0x10>
    { ++_M_use_count; }
   b7314:	685a      	ldr	r2, [r3, #4]
   b7316:	3201      	adds	r2, #1
   b7318:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b731a:	4770      	bx	lr

000b731c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   b731c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b731e:	4604      	mov	r4, r0
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b7320:	4668      	mov	r0, sp
   b7322:	460d      	mov	r5, r1
   b7324:	f7ff fff1 	bl	b730a <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   b7328:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b732a:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b732c:	6023      	str	r3, [r4, #0]
	_M_pi = __tmp;
   b732e:	6062      	str	r2, [r4, #4]
	__r._M_pi = _M_pi;
   b7330:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   b7332:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   b7334:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   b7336:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   b7338:	f7fc ffa0 	bl	b427c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   b733c:	b135      	cbz	r5, b734c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv+0x30>
   b733e:	1d28      	adds	r0, r5, #4
   b7340:	f7fc ff9c 	bl	b427c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b7344:	2108      	movs	r1, #8
   b7346:	4628      	mov	r0, r5
   b7348:	f7fc fea7 	bl	b409a <_ZdlPvj>
        return p;
    }
   b734c:	4620      	mov	r0, r4
   b734e:	b003      	add	sp, #12
   b7350:	bd30      	pop	{r4, r5, pc}

000b7352 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   b7352:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b7354:	b510      	push	{r4, lr}
      if (_M_empty())
   b7356:	b90a      	cbnz	r2, b735c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   b7358:	f002 f944 	bl	b95e4 <_ZSt25__throw_bad_function_callv>
    }
   b735c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b7360:	68c3      	ldr	r3, [r0, #12]
   b7362:	4718      	bx	r3

000b7364 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b7364:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b7366:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b7368:	f100 0110 	add.w	r1, r0, #16
   b736c:	f7ff fff1 	bl	b7352 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   b7370:	bd08      	pop	{r3, pc}

000b7372 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   b7372:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b7374:	b510      	push	{r4, lr}
      if (_M_empty())
   b7376:	b90a      	cbnz	r2, b737c <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   b7378:	f002 f934 	bl	b95e4 <_ZSt25__throw_bad_function_callv>
    }
   b737c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b7380:	68c3      	ldr	r3, [r0, #12]
   b7382:	4718      	bx	r3

000b7384 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b7384:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b7386:	6800      	ldr	r0, [r0, #0]
   b7388:	f100 0110 	add.w	r1, r0, #16
   b738c:	f7ff fff1 	bl	b7372 <_ZNKSt8functionIFvRKbEEclES1_>
      }
   b7390:	bd08      	pop	{r3, pc}
	...

000b7394 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   b7394:	b538      	push	{r3, r4, r5, lr}
   b7396:	2300      	movs	r3, #0
   b7398:	4604      	mov	r4, r0
   b739a:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b739c:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   b739e:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b73a0:	f7fc fe77 	bl	b4092 <_Znwj>
   b73a4:	b128      	cbz	r0, b73b2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   b73a6:	2301      	movs	r3, #1
   b73a8:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   b73ac:	4b02      	ldr	r3, [pc, #8]	; (b73b8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   b73ae:	6003      	str	r3, [r0, #0]
   b73b0:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b73b2:	6020      	str	r0, [r4, #0]
	}
   b73b4:	4620      	mov	r0, r4
   b73b6:	bd38      	pop	{r3, r4, r5, pc}
   b73b8:	000bad40 	.word	0x000bad40

000b73bc <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   b73bc:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b73be:	2300      	movs	r3, #0
   b73c0:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b73c2:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b73c4:	4604      	mov	r4, r0
   b73c6:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b73c8:	b12b      	cbz	r3, b73d6 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b73ca:	2202      	movs	r2, #2
   b73cc:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b73ce:	68eb      	ldr	r3, [r5, #12]
   b73d0:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b73d2:	68ab      	ldr	r3, [r5, #8]
   b73d4:	60a3      	str	r3, [r4, #8]
    }
   b73d6:	4620      	mov	r0, r4
   b73d8:	bd38      	pop	{r3, r4, r5, pc}
	...

000b73dc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   b73dc:	b5f0      	push	{r4, r5, r6, r7, lr}
   b73de:	b089      	sub	sp, #36	; 0x24
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b73e0:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   b73e2:	4668      	mov	r0, sp
   b73e4:	f7ff ff5a 	bl	b729c <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b73e8:	f04f 0302 	mov.w	r3, #2
   b73ec:	e8d4 2f4f 	ldrexb	r2, [r4]
   b73f0:	2a00      	cmp	r2, #0
   b73f2:	d103      	bne.n	b73fc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   b73f4:	e8c4 3f41 	strexb	r1, r3, [r4]
   b73f8:	2900      	cmp	r1, #0
   b73fa:	d1f7      	bne.n	b73ec <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   b73fc:	d125      	bne.n	b744a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   b73fe:	f104 050c 	add.w	r5, r4, #12
   b7402:	4669      	mov	r1, sp
   b7404:	4628      	mov	r0, r5
   b7406:	f7ff ff49 	bl	b729c <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   b740a:	f3bf 8f5b 	dmb	ish
   b740e:	2301      	movs	r3, #1
   b7410:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b7412:	2000      	movs	r0, #0
   b7414:	f104 0308 	add.w	r3, r4, #8
   b7418:	f3bf 8f5b 	dmb	ish
   b741c:	e853 6f00 	ldrex	r6, [r3]
   b7420:	e843 0200 	strex	r2, r0, [r3]
   b7424:	2a00      	cmp	r2, #0
   b7426:	d1f9      	bne.n	b741c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   b7428:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b742c:	b16e      	cbz	r6, b744a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   b742e:	f7ff fd67 	bl	b6f00 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b7432:	b178      	cbz	r0, b7454 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b7434:	4629      	mov	r1, r5
   b7436:	4630      	mov	r0, r6
   b7438:	f7ff ff8b 	bl	b7352 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   b743c:	4630      	mov	r0, r6
   b743e:	f7ff fe8a 	bl	b7156 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b7442:	2110      	movs	r1, #16
   b7444:	4630      	mov	r0, r6
   b7446:	f7fc fe28 	bl	b409a <_ZdlPvj>
        p_->setError(std::move(error));
   b744a:	4668      	mov	r0, sp
   b744c:	f7ff ff33 	bl	b72b6 <_ZN8particle5ErrorD1Ev>
    }
   b7450:	b009      	add	sp, #36	; 0x24
   b7452:	bdf0      	pop	{r4, r5, r6, r7, pc}

     public:
      template<typename... _Args>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b7454:	4631      	mov	r1, r6
   b7456:	a802      	add	r0, sp, #8
   b7458:	f7ff ffb0 	bl	b73bc <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b745c:	68e0      	ldr	r0, [r4, #12]
   b745e:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b7462:	b108      	cbz	r0, b7468 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   b7464:	f002 fb52 	bl	b9b0c <strdup>
        type_(type) {
   b7468:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b746a:	2010      	movs	r0, #16
   b746c:	f8ad 501c 	strh.w	r5, [sp, #28]
   b7470:	f7fc fe0f 	bl	b4092 <_Znwj>
   b7474:	4605      	mov	r5, r0
   b7476:	b1e8      	cbz	r0, b74b4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   b7478:	2700      	movs	r7, #0
   b747a:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b747c:	2018      	movs	r0, #24
   b747e:	f7fc fe08 	bl	b4092 <_Znwj>
   b7482:	4604      	mov	r4, r0
   b7484:	b188      	cbz	r0, b74aa <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   b7486:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   b7488:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b748a:	a802      	add	r0, sp, #8
   b748c:	f7ff fe92 	bl	b71b4 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b7490:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   b7492:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b7494:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b7496:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b7498:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b749a:	a906      	add	r1, sp, #24
   b749c:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b749e:	60e3      	str	r3, [r4, #12]
   b74a0:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   b74a4:	9205      	str	r2, [sp, #20]
   b74a6:	f7ff fef9 	bl	b729c <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   b74aa:	4b08      	ldr	r3, [pc, #32]	; (b74cc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   b74ac:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b74ae:	4b08      	ldr	r3, [pc, #32]	; (b74d0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b74b0:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b74b2:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   b74b4:	a806      	add	r0, sp, #24
   b74b6:	f7ff fefe 	bl	b72b6 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b74ba:	a802      	add	r0, sp, #8
   b74bc:	f7ff fe4b 	bl	b7156 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b74c0:	2200      	movs	r2, #0
   b74c2:	4629      	mov	r1, r5
   b74c4:	4803      	ldr	r0, [pc, #12]	; (b74d4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   b74c6:	f7ff fd23 	bl	b6f10 <application_thread_invoke>
   b74ca:	e7b7      	b.n	b743c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   b74cc:	000b7365 	.word	0x000b7365
   b74d0:	000b75e9 	.word	0x000b75e9
   b74d4:	000b712f 	.word	0x000b712f

000b74d8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   b74d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b74dc:	b08b      	sub	sp, #44	; 0x2c
   b74de:	4605      	mov	r5, r0
   b74e0:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   b74e4:	460f      	mov	r7, r1
   b74e6:	4690      	mov	r8, r2
   b74e8:	4699      	mov	r9, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   b74ea:	f7ff fd3d 	bl	b6f68 <spark_cloud_flag_connected>
   b74ee:	ae07      	add	r6, sp, #28
    if (!connected()) {
   b74f0:	4683      	mov	fp, r0
   b74f2:	bb38      	cbnz	r0, b7544 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   b74f4:	f64f 732e 	movw	r3, #65326	; 0xff2e
   b74f8:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   b74fa:	a905      	add	r1, sp, #20
   b74fc:	4630      	mov	r0, r6
   b74fe:	f8ad 3018 	strh.w	r3, [sp, #24]
   b7502:	f7ff fecb 	bl	b729c <_ZN8particle5ErrorC1EOS0_>
   b7506:	2014      	movs	r0, #20
   b7508:	f7fc fdc3 	bl	b4092 <_Znwj>
   b750c:	4604      	mov	r4, r0
   b750e:	b148      	cbz	r0, b7524 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   b7510:	2302      	movs	r3, #2
   b7512:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b7514:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   b7516:	e9c0 bb01 	strd	fp, fp, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b751a:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   b751c:	4631      	mov	r1, r6
   b751e:	300c      	adds	r0, #12
   b7520:	f7ff febc 	bl	b729c <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b7524:	4628      	mov	r0, r5
	: __shared_count(__p)
   b7526:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b7528:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   b752c:	f7ff ff32 	bl	b7394 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   b7530:	4630      	mov	r0, r6
   b7532:	f7ff fec0 	bl	b72b6 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   b7536:	a805      	add	r0, sp, #20
   b7538:	f7ff febd 	bl	b72b6 <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   b753c:	4628      	mov	r0, r5
   b753e:	b00b      	add	sp, #44	; 0x2c
   b7540:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d.size = sizeof(spark_send_event_data);
   b7544:	230c      	movs	r3, #12
    spark_send_event_data d = {};
   b7546:	2400      	movs	r4, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   b7548:	2014      	movs	r0, #20
   b754a:	e9cd 4408 	strd	r4, r4, [sp, #32]
    d.size = sizeof(spark_send_event_data);
   b754e:	9307      	str	r3, [sp, #28]
   b7550:	f7fc fd9f 	bl	b4092 <_Znwj>
   b7554:	4601      	mov	r1, r0
   b7556:	b118      	cbz	r0, b7560 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x88>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   b7558:	e9c0 4401 	strd	r4, r4, [r0, #4]
   b755c:	7004      	strb	r4, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b755e:	7044      	strb	r4, [r0, #1]
   b7560:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b7562:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   b7564:	f7ff ff16 	bl	b7394 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   b7568:	4b1e      	ldr	r3, [pc, #120]	; (b75e4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x10c>)
   b756a:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   b756c:	2008      	movs	r0, #8
   b756e:	f7fc fd90 	bl	b4092 <_Znwj>
   b7572:	4604      	mov	r4, r0
   b7574:	b110      	cbz	r0, b757c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa4>
   b7576:	a903      	add	r1, sp, #12
   b7578:	f7ff fec7 	bl	b730a <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   b757c:	9600      	str	r6, [sp, #0]
   b757e:	fa5f f38a 	uxtb.w	r3, sl
   b7582:	464a      	mov	r2, r9
   b7584:	4641      	mov	r1, r8
   b7586:	4638      	mov	r0, r7
    d.handler_data = p.dataPtr();
   b7588:	9409      	str	r4, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   b758a:	f7ff fcf5 	bl	b6f78 <spark_send_event>
   b758e:	b9b8      	cbnz	r0, b75c0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
	return __atomic_load_n(&_M_i, int(__m));
   b7590:	9b03      	ldr	r3, [sp, #12]
   b7592:	785b      	ldrb	r3, [r3, #1]
   b7594:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   b7598:	b993      	cbnz	r3, b75c0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   b759a:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   b759e:	a905      	add	r1, sp, #20
   b75a0:	a803      	add	r0, sp, #12
   b75a2:	9205      	str	r2, [sp, #20]
   b75a4:	f8ad 3018 	strh.w	r3, [sp, #24]
   b75a8:	f7ff ff18 	bl	b73dc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b75ac:	a805      	add	r0, sp, #20
   b75ae:	f7ff fe82 	bl	b72b6 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   b75b2:	a805      	add	r0, sp, #20
   b75b4:	9909      	ldr	r1, [sp, #36]	; 0x24
   b75b6:	f7ff feb1 	bl	b731c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   b75ba:	a806      	add	r0, sp, #24
   b75bc:	f7fc fe5e 	bl	b427c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b75c0:	a903      	add	r1, sp, #12
   b75c2:	a805      	add	r0, sp, #20
   b75c4:	f7ff fea1 	bl	b730a <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   b75c8:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b75ca:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b75cc:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   b75ce:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   b75d0:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   b75d2:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   b75d4:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   b75d6:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   b75d8:	f7fc fe50 	bl	b427c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b75dc:	a804      	add	r0, sp, #16
   b75de:	f7fc fe4d 	bl	b427c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   b75e2:	e7ab      	b.n	b753c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   b75e4:	000b7665 	.word	0x000b7665

000b75e8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	switch (__op)
   b75e8:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b75ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b75ec:	4605      	mov	r5, r0
	switch (__op)
   b75ee:	d103      	bne.n	b75f8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b75f0:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b75f2:	6003      	str	r3, [r0, #0]
      }
   b75f4:	2000      	movs	r0, #0
   b75f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  switch (__op)
   b75f8:	2a02      	cmp	r2, #2
   b75fa:	d010      	beq.n	b761e <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   b75fc:	2a03      	cmp	r2, #3
   b75fe:	d1f9      	bne.n	b75f4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b7600:	6804      	ldr	r4, [r0, #0]
   b7602:	2c00      	cmp	r4, #0
   b7604:	d0f6      	beq.n	b75f4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
   b7606:	f104 0010 	add.w	r0, r4, #16
   b760a:	f7ff fe54 	bl	b72b6 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b760e:	4620      	mov	r0, r4
   b7610:	f7ff fda1 	bl	b7156 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b7614:	2118      	movs	r1, #24
   b7616:	4620      	mov	r0, r4
   b7618:	f7fc fd3f 	bl	b409a <_ZdlPvj>
   b761c:	e7ea      	b.n	b75f4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b761e:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   b7620:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b7622:	f7fc fd36 	bl	b4092 <_Znwj>
   b7626:	4604      	mov	r4, r0
   b7628:	b150      	cbz	r0, b7640 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x58>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   b762a:	4631      	mov	r1, r6
   b762c:	f7ff fec6 	bl	b73bc <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b7630:	6930      	ldr	r0, [r6, #16]
   b7632:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b7636:	b108      	cbz	r0, b763c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
   b7638:	f002 fa68 	bl	b9b0c <strdup>
        type_(type) {
   b763c:	6120      	str	r0, [r4, #16]
   b763e:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   b7640:	602c      	str	r4, [r5, #0]
	}
   b7642:	e7d7      	b.n	b75f4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>

000b7644 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   b7644:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b7646:	2300      	movs	r3, #0
   b7648:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b764a:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b764c:	4604      	mov	r4, r0
   b764e:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b7650:	b12b      	cbz	r3, b765e <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b7652:	2202      	movs	r2, #2
   b7654:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b7656:	68eb      	ldr	r3, [r5, #12]
   b7658:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b765a:	68ab      	ldr	r3, [r5, #8]
   b765c:	60a3      	str	r3, [r4, #8]
    }
   b765e:	4620      	mov	r0, r4
   b7660:	bd38      	pop	{r3, r4, r5, pc}
	...

000b7664 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   b7664:	b5f0      	push	{r4, r5, r6, r7, lr}
   b7666:	b089      	sub	sp, #36	; 0x24
   b7668:	4604      	mov	r4, r0
   b766a:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   b766c:	a801      	add	r0, sp, #4
   b766e:	4611      	mov	r1, r2
   b7670:	f7ff fe54 	bl	b731c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   b7674:	b1a4      	cbz	r4, b76a0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   b7676:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b7678:	b11d      	cbz	r5, b7682 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   b767a:	4628      	mov	r0, r5
   b767c:	f002 fa46 	bl	b9b0c <strdup>
   b7680:	4605      	mov	r5, r0
   b7682:	a801      	add	r0, sp, #4
   b7684:	a903      	add	r1, sp, #12
        type_(type) {
   b7686:	9503      	str	r5, [sp, #12]
   b7688:	f8ad 4010 	strh.w	r4, [sp, #16]
   b768c:	f7ff fea6 	bl	b73dc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b7690:	a803      	add	r0, sp, #12
   b7692:	f7ff fe10 	bl	b72b6 <_ZN8particle5ErrorD1Ev>
   b7696:	a802      	add	r0, sp, #8
   b7698:	f7fc fdf0 	bl	b427c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b769c:	b009      	add	sp, #36	; 0x24
   b769e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return _M_ptr; }
   b76a0:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b76a2:	2301      	movs	r3, #1
   b76a4:	e8d5 2f4f 	ldrexb	r2, [r5]
   b76a8:	2a00      	cmp	r2, #0
   b76aa:	d103      	bne.n	b76b4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   b76ac:	e8c5 3f41 	strexb	r1, r3, [r5]
   b76b0:	2900      	cmp	r1, #0
   b76b2:	d1f7      	bne.n	b76a4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   b76b4:	d1ef      	bne.n	b7696 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   b76b6:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   b76b8:	f3bf 8f5b 	dmb	ish
   b76bc:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b76be:	1d2b      	adds	r3, r5, #4
   b76c0:	f3bf 8f5b 	dmb	ish
   b76c4:	e853 6f00 	ldrex	r6, [r3]
   b76c8:	e843 4200 	strex	r2, r4, [r3]
   b76cc:	2a00      	cmp	r2, #0
   b76ce:	d1f9      	bne.n	b76c4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   b76d0:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b76d4:	2e00      	cmp	r6, #0
   b76d6:	d0de      	beq.n	b7696 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   b76d8:	4620      	mov	r0, r4
   b76da:	f7ff fc11 	bl	b6f00 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b76de:	4607      	mov	r7, r0
   b76e0:	b160      	cbz	r0, b76fc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b76e2:	f105 010c 	add.w	r1, r5, #12
   b76e6:	4630      	mov	r0, r6
   b76e8:	f7ff fe43 	bl	b7372 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   b76ec:	4630      	mov	r0, r6
   b76ee:	f7ff fd32 	bl	b7156 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b76f2:	2110      	movs	r1, #16
   b76f4:	4630      	mov	r0, r6
   b76f6:	f7fc fcd0 	bl	b409a <_ZdlPvj>
   b76fa:	e7cc      	b.n	b7696 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b76fc:	4631      	mov	r1, r6
   b76fe:	a803      	add	r0, sp, #12
   b7700:	f7ff ffa0 	bl	b7644 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b7704:	7b2b      	ldrb	r3, [r5, #12]
   b7706:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b770a:	2010      	movs	r0, #16
   b770c:	f7fc fcc1 	bl	b4092 <_Znwj>
   b7710:	4605      	mov	r5, r0
   b7712:	b1d0      	cbz	r0, b774a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   b7714:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b7716:	2014      	movs	r0, #20
   b7718:	f7fc fcbb 	bl	b4092 <_Znwj>
   b771c:	4604      	mov	r4, r0
   b771e:	b178      	cbz	r0, b7740 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   b7720:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b7722:	4601      	mov	r1, r0
   b7724:	a803      	add	r0, sp, #12
   b7726:	f7ff fd45 	bl	b71b4 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b772a:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b772c:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b772e:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b7730:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   b7732:	9205      	str	r2, [sp, #20]
   b7734:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b7736:	60e3      	str	r3, [r4, #12]
   b7738:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   b773c:	9206      	str	r2, [sp, #24]
   b773e:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   b7740:	4b06      	ldr	r3, [pc, #24]	; (b775c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   b7742:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b7744:	4b06      	ldr	r3, [pc, #24]	; (b7760 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b7746:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b7748:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   b774a:	a803      	add	r0, sp, #12
   b774c:	f7ff fd03 	bl	b7156 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b7750:	2200      	movs	r2, #0
   b7752:	4629      	mov	r1, r5
   b7754:	4803      	ldr	r0, [pc, #12]	; (b7764 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   b7756:	f7ff fbdb 	bl	b6f10 <application_thread_invoke>
   b775a:	e7c7      	b.n	b76ec <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   b775c:	000b7385 	.word	0x000b7385
   b7760:	000b7769 	.word	0x000b7769
   b7764:	000b712f 	.word	0x000b712f

000b7768 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	switch (__op)
   b7768:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b776a:	b570      	push	{r4, r5, r6, lr}
   b776c:	4604      	mov	r4, r0
	switch (__op)
   b776e:	d103      	bne.n	b7778 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b7770:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b7772:	6003      	str	r3, [r0, #0]
      }
   b7774:	2000      	movs	r0, #0
   b7776:	bd70      	pop	{r4, r5, r6, pc}
	  switch (__op)
   b7778:	2a02      	cmp	r2, #2
   b777a:	d00c      	beq.n	b7796 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   b777c:	2a03      	cmp	r2, #3
   b777e:	d1f9      	bne.n	b7774 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b7780:	6804      	ldr	r4, [r0, #0]
   b7782:	2c00      	cmp	r4, #0
   b7784:	d0f6      	beq.n	b7774 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
   b7786:	4620      	mov	r0, r4
   b7788:	f7ff fce5 	bl	b7156 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b778c:	2114      	movs	r1, #20
   b778e:	4620      	mov	r0, r4
   b7790:	f7fc fc83 	bl	b409a <_ZdlPvj>
   b7794:	e7ee      	b.n	b7774 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b7796:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   b7798:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b779a:	f7fc fc7a 	bl	b4092 <_Znwj>
   b779e:	4605      	mov	r5, r0
   b77a0:	b120      	cbz	r0, b77ac <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x44>
      _Bind(const _Bind&) = default;
   b77a2:	4631      	mov	r1, r6
   b77a4:	f7ff ff4e 	bl	b7644 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   b77a8:	7c33      	ldrb	r3, [r6, #16]
   b77aa:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   b77ac:	6025      	str	r5, [r4, #0]
	}
   b77ae:	e7e1      	b.n	b7774 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>

000b77b0 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b77b0:	2200      	movs	r2, #0
   b77b2:	6840      	ldr	r0, [r0, #4]
   b77b4:	4611      	mov	r1, r2
   b77b6:	f7ff bc2f 	b.w	b7018 <network_listening>

000b77ba <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b77ba:	2200      	movs	r2, #0
   b77bc:	6840      	ldr	r0, [r0, #4]
   b77be:	4611      	mov	r1, r2
   b77c0:	f7ff bc3a 	b.w	b7038 <network_get_listen_timeout>

000b77c4 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b77c4:	6840      	ldr	r0, [r0, #4]
   b77c6:	2200      	movs	r2, #0
   b77c8:	f7ff bc2e 	b.w	b7028 <network_set_listen_timeout>

000b77cc <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b77cc:	6840      	ldr	r0, [r0, #4]
   b77ce:	2200      	movs	r2, #0
   b77d0:	f081 0101 	eor.w	r1, r1, #1
   b77d4:	f7ff bc18 	b.w	b7008 <network_listen>

000b77d8 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b77d8:	2300      	movs	r3, #0
   b77da:	6840      	ldr	r0, [r0, #4]
   b77dc:	461a      	mov	r2, r3
   b77de:	4619      	mov	r1, r3
   b77e0:	f7ff bc0a 	b.w	b6ff8 <network_off>

000b77e4 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b77e4:	2300      	movs	r3, #0
   b77e6:	6840      	ldr	r0, [r0, #4]
   b77e8:	461a      	mov	r2, r3
   b77ea:	4619      	mov	r1, r3
   b77ec:	f7ff bbfc 	b.w	b6fe8 <network_on>

000b77f0 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b77f0:	2200      	movs	r2, #0
   b77f2:	6840      	ldr	r0, [r0, #4]
   b77f4:	4611      	mov	r1, r2
   b77f6:	f7ff bbef 	b.w	b6fd8 <network_ready>

000b77fa <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b77fa:	2200      	movs	r2, #0
   b77fc:	6840      	ldr	r0, [r0, #4]
   b77fe:	4611      	mov	r1, r2
   b7800:	f7ff bbda 	b.w	b6fb8 <network_connecting>

000b7804 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b7804:	6840      	ldr	r0, [r0, #4]
   b7806:	2200      	movs	r2, #0
   b7808:	2102      	movs	r1, #2
   b780a:	f7ff bbdd 	b.w	b6fc8 <network_disconnect>

000b780e <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b780e:	2300      	movs	r3, #0
   b7810:	6840      	ldr	r0, [r0, #4]
   b7812:	461a      	mov	r2, r3
   b7814:	f7ff bbc8 	b.w	b6fa8 <network_connect>

000b7818 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   b7818:	4b02      	ldr	r3, [pc, #8]	; (b7824 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b781a:	2203      	movs	r2, #3
   b781c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b781e:	4a02      	ldr	r2, [pc, #8]	; (b7828 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b7820:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b7822:	4770      	bx	lr
   b7824:	2003e69c 	.word	0x2003e69c
   b7828:	000bad5c 	.word	0x000bad5c

000b782c <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b782c:	4770      	bx	lr

000b782e <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b782e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7830:	4606      	mov	r6, r0
   b7832:	4615      	mov	r5, r2
   b7834:	460c      	mov	r4, r1
   b7836:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b7838:	42bc      	cmp	r4, r7
   b783a:	d006      	beq.n	b784a <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b783c:	6833      	ldr	r3, [r6, #0]
   b783e:	f814 1b01 	ldrb.w	r1, [r4], #1
   b7842:	689b      	ldr	r3, [r3, #8]
   b7844:	4630      	mov	r0, r6
   b7846:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b7848:	e7f6      	b.n	b7838 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b784a:	4628      	mov	r0, r5
   b784c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b784e <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b784e:	7c00      	ldrb	r0, [r0, #16]
   b7850:	2200      	movs	r2, #0
   b7852:	f7ff ba25 	b.w	b6ca0 <hal_i2c_write>

000b7856 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b7856:	7c00      	ldrb	r0, [r0, #16]
   b7858:	2100      	movs	r1, #0
   b785a:	f7ff ba29 	b.w	b6cb0 <hal_i2c_available>

000b785e <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b785e:	7c00      	ldrb	r0, [r0, #16]
   b7860:	2100      	movs	r1, #0
   b7862:	f7ff ba2d 	b.w	b6cc0 <hal_i2c_read>

000b7866 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b7866:	7c00      	ldrb	r0, [r0, #16]
   b7868:	2100      	movs	r1, #0
   b786a:	f7ff ba31 	b.w	b6cd0 <hal_i2c_peek>

000b786e <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b786e:	7c00      	ldrb	r0, [r0, #16]
   b7870:	2100      	movs	r1, #0
   b7872:	f7ff ba35 	b.w	b6ce0 <hal_i2c_flush>

000b7876 <_ZN7TwoWireD0Ev>:
   b7876:	b510      	push	{r4, lr}
   b7878:	2114      	movs	r1, #20
   b787a:	4604      	mov	r4, r0
   b787c:	f7fc fc0d 	bl	b409a <_ZdlPvj>
   b7880:	4620      	mov	r0, r4
   b7882:	bd10      	pop	{r4, pc}

000b7884 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b7884:	b538      	push	{r3, r4, r5, lr}
   b7886:	4604      	mov	r4, r0
   b7888:	4615      	mov	r5, r2
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b788a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b788e:	2200      	movs	r2, #0
   b7890:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b7894:	4b09      	ldr	r3, [pc, #36]	; (b78bc <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
  _i2c = i2c;
   b7896:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b7898:	4608      	mov	r0, r1
   b789a:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
   b789c:	4629      	mov	r1, r5
   b789e:	f7ff fa27 	bl	b6cf0 <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b78a2:	30bf      	adds	r0, #191	; 0xbf
   b78a4:	d108      	bne.n	b78b8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
   b78a6:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b78a8:	07db      	lsls	r3, r3, #31
   b78aa:	d505      	bpl.n	b78b8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
   b78ac:	6868      	ldr	r0, [r5, #4]
   b78ae:	f7ff fbe3 	bl	b7078 <free>
    free(conf.tx_buffer);
   b78b2:	68e8      	ldr	r0, [r5, #12]
   b78b4:	f7ff fbe0 	bl	b7078 <free>
}
   b78b8:	4620      	mov	r0, r4
   b78ba:	bd38      	pop	{r3, r4, r5, pc}
   b78bc:	000bad98 	.word	0x000bad98

000b78c0 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   b78c0:	2300      	movs	r3, #0
   b78c2:	7c00      	ldrb	r0, [r0, #16]
   b78c4:	461a      	mov	r2, r3
   b78c6:	4619      	mov	r1, r3
   b78c8:	f7ff b9d2 	b.w	b6c70 <hal_i2c_begin>

000b78cc <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   b78cc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   b78ce:	2200      	movs	r2, #0
   b78d0:	2314      	movs	r3, #20
   b78d2:	e9cd 2201 	strd	r2, r2, [sp, #4]
   b78d6:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   b78da:	780b      	ldrb	r3, [r1, #0]
   b78dc:	f88d 3008 	strb.w	r3, [sp, #8]
   b78e0:	684b      	ldr	r3, [r1, #4]
   b78e2:	9303      	str	r3, [sp, #12]
   b78e4:	68cb      	ldr	r3, [r1, #12]
   b78e6:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   b78e8:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   b78ea:	7a0b      	ldrb	r3, [r1, #8]
   b78ec:	9305      	str	r3, [sp, #20]
   b78ee:	a901      	add	r1, sp, #4
   b78f0:	f7ff fa16 	bl	b6d20 <hal_i2c_request_ex>
}
   b78f4:	b007      	add	sp, #28
   b78f6:	f85d fb04 	ldr.w	pc, [sp], #4

000b78fa <_ZN7TwoWire11requestFromEhjh>:
{
   b78fa:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   b78fc:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   b78fe:	f88d 1000 	strb.w	r1, [sp]
   b7902:	f04f 0164 	mov.w	r1, #100	; 0x64
   b7906:	9103      	str	r1, [sp, #12]
   b7908:	bf18      	it	ne
   b790a:	2301      	movne	r3, #1
   b790c:	4669      	mov	r1, sp
    size_ = size;
   b790e:	9201      	str	r2, [sp, #4]
   b7910:	f88d 3008 	strb.w	r3, [sp, #8]
   b7914:	f7ff ffda 	bl	b78cc <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   b7918:	b005      	add	sp, #20
   b791a:	f85d fb04 	ldr.w	pc, [sp], #4

000b791e <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   b791e:	7c00      	ldrb	r0, [r0, #16]
   b7920:	2200      	movs	r2, #0
   b7922:	f7ff b9ad 	b.w	b6c80 <hal_i2c_begin_transmission>

000b7926 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   b7926:	b2c9      	uxtb	r1, r1
   b7928:	f7ff bff9 	b.w	b791e <_ZN7TwoWire17beginTransmissionEh>

000b792c <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   b792c:	7c00      	ldrb	r0, [r0, #16]
   b792e:	2200      	movs	r2, #0
   b7930:	f7ff b9ae 	b.w	b6c90 <hal_i2c_end_transmission>

000b7934 <_ZN7TwoWire4lockEv>:
{
  hal_i2c_reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
   b7934:	b508      	push	{r3, lr}
  return hal_i2c_lock(_i2c, NULL) == 0;
   b7936:	2100      	movs	r1, #0
   b7938:	7c00      	ldrb	r0, [r0, #16]
   b793a:	f7ff f9e1 	bl	b6d00 <hal_i2c_lock>
}
   b793e:	fab0 f080 	clz	r0, r0
   b7942:	0940      	lsrs	r0, r0, #5
   b7944:	bd08      	pop	{r3, pc}

000b7946 <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
   b7946:	b508      	push	{r3, lr}
  return hal_i2c_unlock(_i2c, NULL) == 0;
   b7948:	2100      	movs	r1, #0
   b794a:	7c00      	ldrb	r0, [r0, #16]
   b794c:	f7ff f9e0 	bl	b6d10 <hal_i2c_unlock>
}
   b7950:	fab0 f080 	clz	r0, r0
   b7954:	0940      	lsrs	r0, r0, #5
   b7956:	bd08      	pop	{r3, pc}

000b7958 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b7958:	4770      	bx	lr

000b795a <_ZN9IPAddressD0Ev>:
   b795a:	b510      	push	{r4, lr}
   b795c:	2118      	movs	r1, #24
   b795e:	4604      	mov	r4, r0
   b7960:	f7fc fb9b 	bl	b409a <_ZdlPvj>
   b7964:	4620      	mov	r0, r4
   b7966:	bd10      	pop	{r4, pc}

000b7968 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b7968:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b796a:	7d03      	ldrb	r3, [r0, #20]
   b796c:	2b06      	cmp	r3, #6
{
   b796e:	b08d      	sub	sp, #52	; 0x34
   b7970:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b7972:	f100 0704 	add.w	r7, r0, #4
   b7976:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b797a:	d012      	beq.n	b79a2 <_ZNK9IPAddress7printToER5Print+0x3a>
   b797c:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b7980:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b7984:	220a      	movs	r2, #10
   b7986:	4630      	mov	r0, r6
   b7988:	f001 fa93 	bl	b8eb2 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b798c:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b798e:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b7990:	d019      	beq.n	b79c6 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b7992:	2c00      	cmp	r4, #0
   b7994:	d0f4      	beq.n	b7980 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b7996:	212e      	movs	r1, #46	; 0x2e
   b7998:	4630      	mov	r0, r6
   b799a:	f001 fa7b 	bl	b8e94 <_ZN5Print5printEc>
   b799e:	4404      	add	r4, r0
   b79a0:	e7ee      	b.n	b7980 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b79a2:	232f      	movs	r3, #47	; 0x2f
   b79a4:	466a      	mov	r2, sp
   b79a6:	4639      	mov	r1, r7
   b79a8:	200a      	movs	r0, #10
		buf[0] = 0;
   b79aa:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b79ae:	f7ff f9bf 	bl	b6d30 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b79b2:	4668      	mov	r0, sp
   b79b4:	f002 f8c7 	bl	b9b46 <strlen>
   b79b8:	6833      	ldr	r3, [r6, #0]
   b79ba:	4602      	mov	r2, r0
   b79bc:	68db      	ldr	r3, [r3, #12]
   b79be:	4669      	mov	r1, sp
   b79c0:	4630      	mov	r0, r6
   b79c2:	4798      	blx	r3
   b79c4:	4604      	mov	r4, r0
    }
    return n;
}
   b79c6:	4620      	mov	r0, r4
   b79c8:	b00d      	add	sp, #52	; 0x34
   b79ca:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b79cc <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b79cc:	b510      	push	{r4, lr}
   b79ce:	4b05      	ldr	r3, [pc, #20]	; (b79e4 <_ZN9IPAddressC1Ev+0x18>)
   b79d0:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b79d2:	2211      	movs	r2, #17
   b79d4:	f840 3b04 	str.w	r3, [r0], #4
   b79d8:	2100      	movs	r1, #0
   b79da:	f001 fff9 	bl	b99d0 <memset>
}
   b79de:	4620      	mov	r0, r4
   b79e0:	bd10      	pop	{r4, pc}
   b79e2:	bf00      	nop
   b79e4:	000badc0 	.word	0x000badc0

000b79e8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b79e8:	4603      	mov	r3, r0
   b79ea:	4a07      	ldr	r2, [pc, #28]	; (b7a08 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b79ec:	b510      	push	{r4, lr}
   b79ee:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b79f2:	f101 0210 	add.w	r2, r1, #16
   b79f6:	f851 4b04 	ldr.w	r4, [r1], #4
   b79fa:	f843 4b04 	str.w	r4, [r3], #4
   b79fe:	4291      	cmp	r1, r2
   b7a00:	d1f9      	bne.n	b79f6 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b7a02:	780a      	ldrb	r2, [r1, #0]
   b7a04:	701a      	strb	r2, [r3, #0]
}
   b7a06:	bd10      	pop	{r4, pc}
   b7a08:	000badc0 	.word	0x000badc0

000b7a0c <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b7a0c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b7a0e:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b7a12:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b7a16:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b7a1a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b7a1e:	2304      	movs	r3, #4
   b7a20:	6041      	str	r1, [r0, #4]
   b7a22:	7503      	strb	r3, [r0, #20]
}
   b7a24:	bd10      	pop	{r4, pc}
	...

000b7a28 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b7a28:	b507      	push	{r0, r1, r2, lr}
   b7a2a:	4b06      	ldr	r3, [pc, #24]	; (b7a44 <_ZN9IPAddressC1EPKh+0x1c>)
   b7a2c:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b7a2e:	78cb      	ldrb	r3, [r1, #3]
   b7a30:	9300      	str	r3, [sp, #0]
   b7a32:	788b      	ldrb	r3, [r1, #2]
   b7a34:	784a      	ldrb	r2, [r1, #1]
   b7a36:	7809      	ldrb	r1, [r1, #0]
   b7a38:	f7ff ffe8 	bl	b7a0c <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b7a3c:	b003      	add	sp, #12
   b7a3e:	f85d fb04 	ldr.w	pc, [sp], #4
   b7a42:	bf00      	nop
   b7a44:	000badc0 	.word	0x000badc0

000b7a48 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
   b7a48:	f100 0310 	add.w	r3, r0, #16
   b7a4c:	2201      	movs	r2, #1
    do {
        if (t->type == JSMN_OBJECT) {
   b7a4e:	f813 1c10 	ldrb.w	r1, [r3, #-16]
   b7a52:	2901      	cmp	r1, #1
   b7a54:	4618      	mov	r0, r3
   b7a56:	d108      	bne.n	b7a6a <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
   b7a58:	f853 1c04 	ldr.w	r1, [r3, #-4]
   b7a5c:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
   b7a60:	3a01      	subs	r2, #1
   b7a62:	f103 0310 	add.w	r3, r3, #16
   b7a66:	d1f2      	bne.n	b7a4e <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
   b7a68:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
   b7a6a:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
   b7a6c:	bf04      	itt	eq
   b7a6e:	f853 1c04 	ldreq.w	r1, [r3, #-4]
   b7a72:	1852      	addeq	r2, r2, r1
   b7a74:	e7f4      	b.n	b7a60 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

000b7a76 <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
   b7a76:	b40e      	push	{r1, r2, r3}
   b7a78:	b5f0      	push	{r4, r5, r6, r7, lr}
   b7a7a:	b088      	sub	sp, #32
   b7a7c:	af00      	add	r7, sp, #0
   b7a7e:	f107 0534 	add.w	r5, r7, #52	; 0x34
    char buf[16];
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b7a82:	2110      	movs	r1, #16
void spark::JSONWriter::printf(const char *fmt, ...) {
   b7a84:	f855 2b04 	ldr.w	r2, [r5], #4
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b7a88:	607a      	str	r2, [r7, #4]
void spark::JSONWriter::printf(const char *fmt, ...) {
   b7a8a:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b7a8c:	462b      	mov	r3, r5
   b7a8e:	1878      	adds	r0, r7, r1
    va_start(args, fmt);
   b7a90:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b7a92:	f7ff fb19 	bl	b70c8 <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
   b7a96:	280f      	cmp	r0, #15
   b7a98:	687a      	ldr	r2, [r7, #4]
   b7a9a:	d91a      	bls.n	b7ad2 <_ZN5spark10JSONWriter6printfEPKcz+0x5c>
        char buf[n + 1]; // Use larger buffer
   b7a9c:	f100 0308 	add.w	r3, r0, #8
   b7aa0:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
   b7aa4:	466e      	mov	r6, sp
        char buf[n + 1]; // Use larger buffer
   b7aa6:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   b7aaa:	1c41      	adds	r1, r0, #1
   b7aac:	462b      	mov	r3, r5
   b7aae:	4668      	mov	r0, sp
        va_start(args, fmt);
   b7ab0:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   b7ab2:	f7ff fb09 	bl	b70c8 <vsnprintf>
        if (n > 0) {
   b7ab6:	1e02      	subs	r2, r0, #0
   b7ab8:	dd04      	ble.n	b7ac4 <_ZN5spark10JSONWriter6printfEPKcz+0x4e>
            write(buf, n);
   b7aba:	6823      	ldr	r3, [r4, #0]
   b7abc:	4669      	mov	r1, sp
   b7abe:	689b      	ldr	r3, [r3, #8]
   b7ac0:	4620      	mov	r0, r4
   b7ac2:	4798      	blx	r3
   b7ac4:	46b5      	mov	sp, r6
    } else if (n > 0) {
        write(buf, n);
    }
}
   b7ac6:	3720      	adds	r7, #32
   b7ac8:	46bd      	mov	sp, r7
   b7aca:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b7ace:	b003      	add	sp, #12
   b7ad0:	4770      	bx	lr
    } else if (n > 0) {
   b7ad2:	2800      	cmp	r0, #0
   b7ad4:	d0f7      	beq.n	b7ac6 <_ZN5spark10JSONWriter6printfEPKcz+0x50>
        write(buf, n);
   b7ad6:	6823      	ldr	r3, [r4, #0]
   b7ad8:	4602      	mov	r2, r0
   b7ada:	689b      	ldr	r3, [r3, #8]
   b7adc:	f107 0110 	add.w	r1, r7, #16
   b7ae0:	4620      	mov	r0, r4
   b7ae2:	4798      	blx	r3
}
   b7ae4:	e7ef      	b.n	b7ac6 <_ZN5spark10JSONWriter6printfEPKcz+0x50>

000b7ae6 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>:
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b7ae6:	b538      	push	{r3, r4, r5, lr}
   b7ae8:	680b      	ldr	r3, [r1, #0]
   b7aea:	6003      	str	r3, [r0, #0]
   b7aec:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
   b7aee:	6843      	ldr	r3, [r0, #4]
   b7af0:	429d      	cmp	r5, r3
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b7af2:	4604      	mov	r4, r0
	if (__tmp != _M_pi)
   b7af4:	d008      	beq.n	b7b08 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x22>
	    if (__tmp != 0)
   b7af6:	b115      	cbz	r5, b7afe <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x18>
    { ++_M_use_count; }
   b7af8:	686b      	ldr	r3, [r5, #4]
   b7afa:	3301      	adds	r3, #1
   b7afc:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
   b7afe:	6860      	ldr	r0, [r4, #4]
   b7b00:	b108      	cbz	r0, b7b06 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x20>
	      _M_pi->_M_release();
   b7b02:	f7ff fb31 	bl	b7168 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
   b7b06:	6065      	str	r5, [r4, #4]
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b7b08:	bd38      	pop	{r3, r4, r5, pc}

000b7b0a <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
   b7b0a:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   b7b0c:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
   b7b0e:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   b7b12:	689b      	ldr	r3, [r3, #8]
   b7b14:	2201      	movs	r2, #1
   b7b16:	f10d 0107 	add.w	r1, sp, #7
   b7b1a:	4798      	blx	r3
}
   b7b1c:	b003      	add	sp, #12
   b7b1e:	f85d fb04 	ldr.w	pc, [sp], #4

000b7b22 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
   b7b22:	460b      	mov	r3, r1
   b7b24:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
   b7b26:	2200      	movs	r2, #0
   b7b28:	b510      	push	{r4, lr}
      constexpr __shared_count() noexcept : _M_pi(0)
   b7b2a:	e9c0 2200 	strd	r2, r2, [r0]
   b7b2e:	4604      	mov	r4, r0
        t_ = t;
   b7b30:	6083      	str	r3, [r0, #8]
    if (t) {
   b7b32:	b90b      	cbnz	r3, b7b38 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
}
   b7b34:	4620      	mov	r0, r4
   b7b36:	bd10      	pop	{r4, pc}
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count() == 0 && get() == nullptr
       */
      constexpr shared_ptr(nullptr_t) noexcept : shared_ptr() { }

      shared_ptr& operator=(const shared_ptr&) noexcept = default;
   b7b38:	f7ff ffd5 	bl	b7ae6 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
   b7b3c:	e7fa      	b.n	b7b34 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

000b7b3e <_ZNK5spark9JSONValue4typeEv>:
    if (!t_) {
   b7b3e:	6883      	ldr	r3, [r0, #8]
   b7b40:	b1eb      	cbz	r3, b7b7e <_ZNK5spark9JSONValue4typeEv+0x40>
    switch (t_->type) {
   b7b42:	781a      	ldrb	r2, [r3, #0]
   b7b44:	2a03      	cmp	r2, #3
   b7b46:	d81a      	bhi.n	b7b7e <_ZNK5spark9JSONValue4typeEv+0x40>
   b7b48:	e8df f002 	tbb	[pc, r2]
   b7b4c:	1b021704 	.word	0x1b021704
   b7b50:	2005      	movs	r0, #5
   b7b52:	4770      	bx	lr
        const char c = d_->json[t_->start];
   b7b54:	6802      	ldr	r2, [r0, #0]
   b7b56:	685b      	ldr	r3, [r3, #4]
   b7b58:	6852      	ldr	r2, [r2, #4]
   b7b5a:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
   b7b5c:	282d      	cmp	r0, #45	; 0x2d
   b7b5e:	d012      	beq.n	b7b86 <_ZNK5spark9JSONValue4typeEv+0x48>
   b7b60:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   b7b64:	2b09      	cmp	r3, #9
   b7b66:	d90e      	bls.n	b7b86 <_ZNK5spark9JSONValue4typeEv+0x48>
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
   b7b68:	2874      	cmp	r0, #116	; 0x74
   b7b6a:	d00e      	beq.n	b7b8a <_ZNK5spark9JSONValue4typeEv+0x4c>
   b7b6c:	2866      	cmp	r0, #102	; 0x66
   b7b6e:	d00c      	beq.n	b7b8a <_ZNK5spark9JSONValue4typeEv+0x4c>
        return JSON_TYPE_INVALID;
   b7b70:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
   b7b74:	4258      	negs	r0, r3
   b7b76:	4158      	adcs	r0, r3
   b7b78:	4770      	bx	lr
        return JSON_TYPE_OBJECT;
   b7b7a:	2006      	movs	r0, #6
   b7b7c:	4770      	bx	lr
        return JSON_TYPE_INVALID;
   b7b7e:	2000      	movs	r0, #0
   b7b80:	4770      	bx	lr
        return JSON_TYPE_STRING;
   b7b82:	2004      	movs	r0, #4
   b7b84:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
   b7b86:	2003      	movs	r0, #3
   b7b88:	4770      	bx	lr
            return JSON_TYPE_BOOL;
   b7b8a:	2002      	movs	r0, #2
}
   b7b8c:	4770      	bx	lr

000b7b8e <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
   b7b8e:	b510      	push	{r4, lr}
   b7b90:	4604      	mov	r4, r0
    switch (type()) {
   b7b92:	f7ff ffd4 	bl	b7b3e <_ZNK5spark9JSONValue4typeEv>
   b7b96:	2802      	cmp	r0, #2
   b7b98:	d00e      	beq.n	b7bb8 <_ZNK5spark9JSONValue5toIntEv+0x2a>
   b7b9a:	1ec3      	subs	r3, r0, #3
   b7b9c:	b2db      	uxtb	r3, r3
   b7b9e:	2b01      	cmp	r3, #1
   b7ba0:	d814      	bhi.n	b7bcc <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
   b7ba2:	6822      	ldr	r2, [r4, #0]
   b7ba4:	68a3      	ldr	r3, [r4, #8]
   b7ba6:	6850      	ldr	r0, [r2, #4]
   b7ba8:	685b      	ldr	r3, [r3, #4]
}
   b7baa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
   b7bae:	220a      	movs	r2, #10
   b7bb0:	2100      	movs	r1, #0
   b7bb2:	4418      	add	r0, r3
   b7bb4:	f002 b87a 	b.w	b9cac <strtol>
        const char* const s = d_->json + t_->start;
   b7bb8:	6822      	ldr	r2, [r4, #0]
   b7bba:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   b7bbc:	6852      	ldr	r2, [r2, #4]
   b7bbe:	685b      	ldr	r3, [r3, #4]
   b7bc0:	5cd0      	ldrb	r0, [r2, r3]
   b7bc2:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
   b7bc6:	4258      	negs	r0, r3
   b7bc8:	4158      	adcs	r0, r3
}
   b7bca:	bd10      	pop	{r4, pc}
    switch (type()) {
   b7bcc:	2000      	movs	r0, #0
   b7bce:	e7fc      	b.n	b7bca <_ZNK5spark9JSONValue5toIntEv+0x3c>

000b7bd0 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
   b7bd0:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   b7bd2:	2300      	movs	r3, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   b7bd4:	e9c0 3300 	strd	r3, r3, [r0]
   b7bd8:	4604      	mov	r4, r0
        n_(0) {
   b7bda:	480e      	ldr	r0, [pc, #56]	; (b7c14 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
   b7bdc:	e9c4 0302 	strd	r0, r3, [r4, #8]
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
   b7be0:	b1a9      	cbz	r1, b7c0e <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
   b7be2:	780b      	ldrb	r3, [r1, #0]
   b7be4:	2b03      	cmp	r3, #3
   b7be6:	d006      	beq.n	b7bf6 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
   b7be8:	b98b      	cbnz	r3, b7c0e <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
   b7bea:	6813      	ldr	r3, [r2, #0]
   b7bec:	6858      	ldr	r0, [r3, #4]
   b7bee:	684b      	ldr	r3, [r1, #4]
   b7bf0:	5cc3      	ldrb	r3, [r0, r3]
   b7bf2:	2b6e      	cmp	r3, #110	; 0x6e
   b7bf4:	d007      	beq.n	b7c06 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x36>
            s_ = d->json + t->start;
   b7bf6:	6813      	ldr	r3, [r2, #0]
   b7bf8:	684d      	ldr	r5, [r1, #4]
   b7bfa:	6858      	ldr	r0, [r3, #4]
            n_ = t->end - t->start;
   b7bfc:	688b      	ldr	r3, [r1, #8]
            s_ = d->json + t->start;
   b7bfe:	4428      	add	r0, r5
            n_ = t->end - t->start;
   b7c00:	1b5b      	subs	r3, r3, r5
            s_ = d->json + t->start;
   b7c02:	60a0      	str	r0, [r4, #8]
            n_ = t->end - t->start;
   b7c04:	60e3      	str	r3, [r4, #12]
   b7c06:	4611      	mov	r1, r2
   b7c08:	4620      	mov	r0, r4
   b7c0a:	f7ff ff6c 	bl	b7ae6 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
   b7c0e:	4620      	mov	r0, r4
   b7c10:	bd38      	pop	{r3, r4, r5, pc}
   b7c12:	bf00      	nop
   b7c14:	000bae2f 	.word	0x000bae2f

000b7c18 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
   b7c18:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   b7c1a:	2500      	movs	r5, #0
   b7c1c:	460b      	mov	r3, r1
      constexpr __shared_count() noexcept : _M_pi(0)
   b7c1e:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
   b7c22:	e9c0 5502 	strd	r5, r5, [r0, #8]
   b7c26:	e9c0 5504 	strd	r5, r5, [r0, #16]
   b7c2a:	4604      	mov	r4, r0
   b7c2c:	4611      	mov	r1, r2
    if (t && t->type == JSMN_OBJECT) {
   b7c2e:	b14b      	cbz	r3, b7c44 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
   b7c30:	781a      	ldrb	r2, [r3, #0]
   b7c32:	2a01      	cmp	r2, #1
   b7c34:	d106      	bne.n	b7c44 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
   b7c36:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
   b7c3a:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
   b7c3c:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
   b7c3e:	6143      	str	r3, [r0, #20]
   b7c40:	f7ff ff51 	bl	b7ae6 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
   b7c44:	4620      	mov	r0, r4
   b7c46:	bd38      	pop	{r3, r4, r5, pc}

000b7c48 <_ZN5spark18JSONObjectIterator4nextEv>:
bool spark::JSONObjectIterator::next() {
   b7c48:	b510      	push	{r4, lr}
    if (!n_) {
   b7c4a:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
   b7c4c:	4604      	mov	r4, r0
    if (!n_) {
   b7c4e:	b163      	cbz	r3, b7c6a <_ZN5spark18JSONObjectIterator4nextEv+0x22>
    k_ = t_; // Name
   b7c50:	6880      	ldr	r0, [r0, #8]
   b7c52:	60e0      	str	r0, [r4, #12]
    --n_;
   b7c54:	3b01      	subs	r3, #1
    ++t_;
   b7c56:	3010      	adds	r0, #16
   b7c58:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
   b7c5a:	6120      	str	r0, [r4, #16]
    --n_;
   b7c5c:	6163      	str	r3, [r4, #20]
    if (n_) {
   b7c5e:	b113      	cbz	r3, b7c66 <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
   b7c60:	f7ff fef2 	bl	b7a48 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
   b7c64:	60a0      	str	r0, [r4, #8]
    return true;
   b7c66:	2001      	movs	r0, #1
   b7c68:	e000      	b.n	b7c6c <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
   b7c6a:	4618      	mov	r0, r3
}
   b7c6c:	bd10      	pop	{r4, pc}

000b7c6e <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
   b7c6e:	b510      	push	{r4, lr}
    write('}');
   b7c70:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
   b7c72:	4604      	mov	r4, r0
    write('}');
   b7c74:	f7ff ff49 	bl	b7b0a <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
   b7c78:	2301      	movs	r3, #1
   b7c7a:	7123      	strb	r3, [r4, #4]
}
   b7c7c:	4620      	mov	r0, r4
   b7c7e:	bd10      	pop	{r4, pc}

000b7c80 <_ZN5spark10JSONWriter14writeSeparatorEv>:

void spark::JSONWriter::writeSeparator() {
   b7c80:	b508      	push	{r3, lr}
    switch (state_) {
   b7c82:	7903      	ldrb	r3, [r0, #4]
   b7c84:	2b01      	cmp	r3, #1
   b7c86:	d002      	beq.n	b7c8e <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
   b7c88:	2b02      	cmp	r3, #2
   b7c8a:	d004      	beq.n	b7c96 <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
        write(':');
        break;
    default:
        break;
    }
}
   b7c8c:	bd08      	pop	{r3, pc}
        write(',');
   b7c8e:	212c      	movs	r1, #44	; 0x2c
        write(':');
   b7c90:	f7ff ff3b 	bl	b7b0a <_ZN5spark10JSONWriter5writeEc>
}
   b7c94:	e7fa      	b.n	b7c8c <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
   b7c96:	213a      	movs	r1, #58	; 0x3a
   b7c98:	e7fa      	b.n	b7c90 <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

000b7c9a <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
   b7c9a:	b510      	push	{r4, lr}
   b7c9c:	4604      	mov	r4, r0
    writeSeparator();
   b7c9e:	f7ff ffef 	bl	b7c80 <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
   b7ca2:	4620      	mov	r0, r4
   b7ca4:	217b      	movs	r1, #123	; 0x7b
   b7ca6:	f7ff ff30 	bl	b7b0a <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
   b7caa:	2300      	movs	r3, #0
   b7cac:	7123      	strb	r3, [r4, #4]
}
   b7cae:	4620      	mov	r0, r4
   b7cb0:	bd10      	pop	{r4, pc}
	...

000b7cb4 <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
   b7cb4:	b513      	push	{r0, r1, r4, lr}
   b7cb6:	4604      	mov	r4, r0
   b7cb8:	9101      	str	r1, [sp, #4]
    writeSeparator();
   b7cba:	f7ff ffe1 	bl	b7c80 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
   b7cbe:	6823      	ldr	r3, [r4, #0]
   b7cc0:	9a01      	ldr	r2, [sp, #4]
   b7cc2:	68db      	ldr	r3, [r3, #12]
   b7cc4:	4903      	ldr	r1, [pc, #12]	; (b7cd4 <_ZN5spark10JSONWriter5valueEi+0x20>)
   b7cc6:	4620      	mov	r0, r4
   b7cc8:	4798      	blx	r3
    state_ = NEXT;
   b7cca:	2301      	movs	r3, #1
}
   b7ccc:	4620      	mov	r0, r4
    state_ = NEXT;
   b7cce:	7123      	strb	r3, [r4, #4]
}
   b7cd0:	b002      	add	sp, #8
   b7cd2:	bd10      	pop	{r4, pc}
   b7cd4:	000ba8f1 	.word	0x000ba8f1

000b7cd8 <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
   b7cd8:	b513      	push	{r0, r1, r4, lr}
   b7cda:	4604      	mov	r4, r0
   b7cdc:	9101      	str	r1, [sp, #4]
    writeSeparator();
   b7cde:	f7ff ffcf 	bl	b7c80 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
   b7ce2:	6823      	ldr	r3, [r4, #0]
   b7ce4:	9a01      	ldr	r2, [sp, #4]
   b7ce6:	68db      	ldr	r3, [r3, #12]
   b7ce8:	4903      	ldr	r1, [pc, #12]	; (b7cf8 <_ZN5spark10JSONWriter5valueEj+0x20>)
   b7cea:	4620      	mov	r0, r4
   b7cec:	4798      	blx	r3
    state_ = NEXT;
   b7cee:	2301      	movs	r3, #1
}
   b7cf0:	4620      	mov	r0, r4
    state_ = NEXT;
   b7cf2:	7123      	strb	r3, [r4, #4]
}
   b7cf4:	b002      	add	sp, #8
   b7cf6:	bd10      	pop	{r4, pc}
   b7cf8:	000badcc 	.word	0x000badcc

000b7cfc <_ZN5spark10JSONWriter12writeEscapedEPKcj>:

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   b7cfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b7d00:	460d      	mov	r5, r1
    write('"');
   b7d02:	2122      	movs	r1, #34	; 0x22
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   b7d04:	4690      	mov	r8, r2
   b7d06:	4604      	mov	r4, r0
    write('"');
   b7d08:	f7ff feff 	bl	b7b0a <_ZN5spark10JSONWriter5writeEc>
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
   b7d0c:	f8df 90a4 	ldr.w	r9, [pc, #164]	; b7db4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xb8>
    const char* const end = str + size;
   b7d10:	44a8      	add	r8, r5
    const char *s = str;
   b7d12:	462f      	mov	r7, r5
    while (s != end) {
   b7d14:	4547      	cmp	r7, r8
   b7d16:	46ba      	mov	sl, r7
   b7d18:	d03d      	beq.n	b7d96 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9a>
        const char c = *s;
   b7d1a:	f817 6b01 	ldrb.w	r6, [r7], #1
        if (c == '"' || c == '\\' || !std::isprint((unsigned char)c)) {
   b7d1e:	2e22      	cmp	r6, #34	; 0x22
   b7d20:	d006      	beq.n	b7d30 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   b7d22:	2e5c      	cmp	r6, #92	; 0x5c
   b7d24:	d004      	beq.n	b7d30 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   b7d26:	4630      	mov	r0, r6
   b7d28:	f001 fe22 	bl	b9970 <isprint>
   b7d2c:	2800      	cmp	r0, #0
   b7d2e:	d1f1      	bne.n	b7d14 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
   b7d30:	6823      	ldr	r3, [r4, #0]
   b7d32:	ebaa 0205 	sub.w	r2, sl, r5
   b7d36:	689b      	ldr	r3, [r3, #8]
   b7d38:	4629      	mov	r1, r5
   b7d3a:	4620      	mov	r0, r4
   b7d3c:	4798      	blx	r3
            write('\\');
   b7d3e:	215c      	movs	r1, #92	; 0x5c
   b7d40:	4620      	mov	r0, r4
   b7d42:	f7ff fee2 	bl	b7b0a <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
   b7d46:	2e0d      	cmp	r6, #13
   b7d48:	d80a      	bhi.n	b7d60 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
   b7d4a:	2e07      	cmp	r6, #7
   b7d4c:	d91c      	bls.n	b7d88 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   b7d4e:	f1a6 0308 	sub.w	r3, r6, #8
   b7d52:	2b05      	cmp	r3, #5
   b7d54:	d818      	bhi.n	b7d88 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   b7d56:	e8df f003 	tbb	[pc, r3]
   b7d5a:	0f0d      	.short	0x0f0d
   b7d5c:	15131711 	.word	0x15131711
   b7d60:	2e22      	cmp	r6, #34	; 0x22
   b7d62:	d001      	beq.n	b7d68 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6c>
   b7d64:	2e5c      	cmp	r6, #92	; 0x5c
   b7d66:	d10f      	bne.n	b7d88 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
                write(c);
   b7d68:	4631      	mov	r1, r6
                write('b');
   b7d6a:	4620      	mov	r0, r4
   b7d6c:	f7ff fecd 	bl	b7b0a <_ZN5spark10JSONWriter5writeEc>
                break;
            }
            str = s + 1;
   b7d70:	463d      	mov	r5, r7
    while (s != end) {
   b7d72:	e7cf      	b.n	b7d14 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
   b7d74:	2162      	movs	r1, #98	; 0x62
   b7d76:	e7f8      	b.n	b7d6a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('t');
   b7d78:	2174      	movs	r1, #116	; 0x74
   b7d7a:	e7f6      	b.n	b7d6a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('n');
   b7d7c:	216e      	movs	r1, #110	; 0x6e
   b7d7e:	e7f4      	b.n	b7d6a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('f');
   b7d80:	2166      	movs	r1, #102	; 0x66
   b7d82:	e7f2      	b.n	b7d6a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('r');
   b7d84:	2172      	movs	r1, #114	; 0x72
   b7d86:	e7f0      	b.n	b7d6a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                printf("u%04x", (unsigned)c);
   b7d88:	6823      	ldr	r3, [r4, #0]
   b7d8a:	4632      	mov	r2, r6
   b7d8c:	68db      	ldr	r3, [r3, #12]
   b7d8e:	4649      	mov	r1, r9
   b7d90:	4620      	mov	r0, r4
   b7d92:	4798      	blx	r3
                break;
   b7d94:	e7ec      	b.n	b7d70 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x74>
        }
        ++s;
    }
    if (s != str) {
   b7d96:	42bd      	cmp	r5, r7
   b7d98:	d005      	beq.n	b7da6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xaa>
        write(str, s - str); // Write remaining characters
   b7d9a:	6823      	ldr	r3, [r4, #0]
   b7d9c:	1b7a      	subs	r2, r7, r5
   b7d9e:	689b      	ldr	r3, [r3, #8]
   b7da0:	4629      	mov	r1, r5
   b7da2:	4620      	mov	r0, r4
   b7da4:	4798      	blx	r3
    }
    write('"');
   b7da6:	2122      	movs	r1, #34	; 0x22
   b7da8:	4620      	mov	r0, r4
   b7daa:	f7ff feae 	bl	b7b0a <_ZN5spark10JSONWriter5writeEc>
}
   b7dae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b7db2:	bf00      	nop
   b7db4:	000badcf 	.word	0x000badcf

000b7db8 <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
   b7db8:	b513      	push	{r0, r1, r4, lr}
   b7dba:	4604      	mov	r4, r0
   b7dbc:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   b7dc0:	f7ff ff5e 	bl	b7c80 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
   b7dc4:	4620      	mov	r0, r4
   b7dc6:	e9dd 2100 	ldrd	r2, r1, [sp]
   b7dca:	f7ff ff97 	bl	b7cfc <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
   b7dce:	2302      	movs	r3, #2
}
   b7dd0:	4620      	mov	r0, r4
    state_ = VALUE;
   b7dd2:	7123      	strb	r3, [r4, #4]
}
   b7dd4:	b002      	add	sp, #8
   b7dd6:	bd10      	pop	{r4, pc}

000b7dd8 <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
   b7dd8:	b513      	push	{r0, r1, r4, lr}
   b7dda:	4604      	mov	r4, r0
   b7ddc:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   b7de0:	f7ff ff4e 	bl	b7c80 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
   b7de4:	4620      	mov	r0, r4
   b7de6:	e9dd 2100 	ldrd	r2, r1, [sp]
   b7dea:	f7ff ff87 	bl	b7cfc <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
   b7dee:	2301      	movs	r3, #1
}
   b7df0:	4620      	mov	r0, r4
    state_ = NEXT;
   b7df2:	7123      	strb	r3, [r4, #4]
}
   b7df4:	b002      	add	sp, #8
   b7df6:	bd10      	pop	{r4, pc}

000b7df8 <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
   b7df8:	6880      	ldr	r0, [r0, #8]
   b7dfa:	6803      	ldr	r3, [r0, #0]
   b7dfc:	68db      	ldr	r3, [r3, #12]
   b7dfe:	4718      	bx	r3

000b7e00 <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
    // This handler doesn't support direct logging
}
   b7e00:	4770      	bx	lr

000b7e02 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
   b7e02:	4608      	mov	r0, r1
   b7e04:	b111      	cbz	r1, b7e0c <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
   b7e06:	680b      	ldr	r3, [r1, #0]
   b7e08:	685b      	ldr	r3, [r3, #4]
   b7e0a:	4718      	bx	r3
}
   b7e0c:	4770      	bx	lr

000b7e0e <__tcf_0>:
    }
    return nullptr; // Unknown handler type
}

spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
    static DefaultLogHandlerFactory factory;
   b7e0e:	4770      	bx	lr

000b7e10 <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   b7e10:	4770      	bx	lr

000b7e12 <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
class DefaultLogHandlerFactory: public LogHandlerFactory {
   b7e12:	4770      	bx	lr

000b7e14 <_ZN5spark16JSONStreamWriterD1Ev>:
class JSONStreamWriter: public JSONWriter {
   b7e14:	4770      	bx	lr

000b7e16 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
const char* nextSubcategoryName(const char* &category, size_t &size) {
   b7e16:	b538      	push	{r3, r4, r5, lr}
   b7e18:	4604      	mov	r4, r0
   b7e1a:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
   b7e1c:	6800      	ldr	r0, [r0, #0]
   b7e1e:	212e      	movs	r1, #46	; 0x2e
   b7e20:	f001 fe57 	bl	b9ad2 <strchrnul>
    size = s - category;
   b7e24:	6823      	ldr	r3, [r4, #0]
   b7e26:	1ac3      	subs	r3, r0, r3
   b7e28:	602b      	str	r3, [r5, #0]
    if (size) {
   b7e2a:	b123      	cbz	r3, b7e36 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
   b7e2c:	7803      	ldrb	r3, [r0, #0]
   b7e2e:	b103      	cbz	r3, b7e32 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
   b7e30:	3001      	adds	r0, #1
   b7e32:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b7e34:	6020      	str	r0, [r4, #0]
}
   b7e36:	4618      	mov	r0, r3
   b7e38:	bd38      	pop	{r3, r4, r5, pc}

000b7e3a <_ZN5spark16JSONStreamWriterD0Ev>:
   b7e3a:	b510      	push	{r4, lr}
   b7e3c:	210c      	movs	r1, #12
   b7e3e:	4604      	mov	r4, r0
   b7e40:	f7fc f92b 	bl	b409a <_ZdlPvj>
   b7e44:	4620      	mov	r0, r4
   b7e46:	bd10      	pop	{r4, pc}

000b7e48 <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
   b7e48:	b510      	push	{r4, lr}
   b7e4a:	2104      	movs	r1, #4
   b7e4c:	4604      	mov	r4, r0
   b7e4e:	f7fc f924 	bl	b409a <_ZdlPvj>
   b7e52:	4620      	mov	r0, r4
   b7e54:	bd10      	pop	{r4, pc}

000b7e56 <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   b7e56:	b510      	push	{r4, lr}
   b7e58:	2104      	movs	r1, #4
   b7e5a:	4604      	mov	r4, r0
   b7e5c:	f7fc f91d 	bl	b409a <_ZdlPvj>
   b7e60:	4620      	mov	r0, r4
   b7e62:	bd10      	pop	{r4, pc}

000b7e64 <_ZN14RecursiveMutex4lockEv.isra.0>:
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   b7e64:	f7fe becc 	b.w	b6c00 <os_mutex_recursive_lock>

000b7e68 <_ZNK5spark10JSONStringeqEPKc.isra.0>:
inline bool spark::JSONString::operator==(const char *str) const {
   b7e68:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
   b7e6a:	f001 fe3c 	bl	b9ae6 <strcmp>
}
   b7e6e:	fab0 f080 	clz	r0, r0
   b7e72:	0940      	lsrs	r0, r0, #5
   b7e74:	bd08      	pop	{r3, pc}

000b7e76 <__tcf_1>:
   b7e76:	4770      	bx	lr

000b7e78 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
   b7e78:	b510      	push	{r4, lr}
   b7e7a:	460c      	mov	r4, r1
#if PLATFORM_ID != PLATFORM_GCC
    if (stream == &Serial) {
   b7e7c:	f001 fa6c 	bl	b9358 <_Z16_fetch_usbserialv>
   b7e80:	4284      	cmp	r4, r0
   b7e82:	d010      	beq.n	b7ea6 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
    if (stream == &USBSerial1) {
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
   b7e84:	f001 fb86 	bl	b9594 <_Z22__fetch_global_Serial1v>
   b7e88:	4284      	cmp	r4, r0
   b7e8a:	d105      	bne.n	b7e98 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x20>
        Serial1.end();
   b7e8c:	f001 fb82 	bl	b9594 <_Z22__fetch_global_Serial1v>
        return;
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    OutputStreamFactory::destroyStream(stream);
}
   b7e90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial1.end();
   b7e94:	f001 b9fb 	b.w	b928e <_ZN11USARTSerial3endEv>

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
   b7e98:	b12c      	cbz	r4, b7ea6 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
   b7e9a:	6823      	ldr	r3, [r4, #0]
   b7e9c:	4620      	mov	r0, r4
   b7e9e:	685b      	ldr	r3, [r3, #4]
}
   b7ea0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b7ea4:	4718      	bx	r3
   b7ea6:	bd10      	pop	{r4, pc}

000b7ea8 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b7ea8:	680b      	ldr	r3, [r1, #0]
   b7eaa:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   b7eac:	684b      	ldr	r3, [r1, #4]
   b7eae:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   b7eb0:	b113      	cbz	r3, b7eb8 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_+0x10>
    { ++_M_use_count; }
   b7eb2:	685a      	ldr	r2, [r3, #4]
   b7eb4:	3201      	adds	r2, #1
   b7eb6:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b7eb8:	4770      	bx	lr

000b7eba <_ZN5spark10JSONWriter5valueEPKc>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   b7eba:	b513      	push	{r0, r1, r4, lr}
   b7ebc:	4604      	mov	r4, r0
    return value(val, strlen(val));
   b7ebe:	4608      	mov	r0, r1
   b7ec0:	9101      	str	r1, [sp, #4]
   b7ec2:	f001 fe40 	bl	b9b46 <strlen>
   b7ec6:	9901      	ldr	r1, [sp, #4]
   b7ec8:	4602      	mov	r2, r0
   b7eca:	4620      	mov	r0, r4
}
   b7ecc:	b002      	add	sp, #8
   b7ece:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return value(val, strlen(val));
   b7ed2:	f7ff bf81 	b.w	b7dd8 <_ZN5spark10JSONWriter5valueEPKcj>

000b7ed6 <_ZN5spark16StreamLogHandler5writeEPKc>:
inline void spark::StreamLogHandler::write(const char *str) {
   b7ed6:	b513      	push	{r0, r1, r4, lr}
   b7ed8:	4604      	mov	r4, r0
    write(str, strlen(str));
   b7eda:	4608      	mov	r0, r1
   b7edc:	9101      	str	r1, [sp, #4]
   b7ede:	f001 fe32 	bl	b9b46 <strlen>
   b7ee2:	6823      	ldr	r3, [r4, #0]
   b7ee4:	9901      	ldr	r1, [sp, #4]
   b7ee6:	68db      	ldr	r3, [r3, #12]
   b7ee8:	4602      	mov	r2, r0
   b7eea:	4620      	mov	r0, r4
}
   b7eec:	b002      	add	sp, #8
   b7eee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    write(str, strlen(str));
   b7ef2:	4718      	bx	r3

000b7ef4 <_ZN5spark16StreamLogHandler5writeEc>:
inline void spark::StreamLogHandler::write(char c) {
   b7ef4:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   b7ef6:	6803      	ldr	r3, [r0, #0]
inline void spark::StreamLogHandler::write(char c) {
   b7ef8:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   b7efc:	68db      	ldr	r3, [r3, #12]
   b7efe:	2201      	movs	r2, #1
   b7f00:	f10d 0107 	add.w	r1, sp, #7
   b7f04:	4798      	blx	r3
}
   b7f06:	b003      	add	sp, #12
   b7f08:	f85d fb04 	ldr.w	pc, [sp], #4

000b7f0c <_ZN5spark16StreamLogHandler6printfEPKcz>:
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   b7f0c:	b40e      	push	{r1, r2, r3}
   b7f0e:	b503      	push	{r0, r1, lr}
   b7f10:	ab03      	add	r3, sp, #12
    stream_->vprintf(false, fmt, args);
   b7f12:	2100      	movs	r1, #0
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   b7f14:	f853 2b04 	ldr.w	r2, [r3], #4
    stream_->vprintf(false, fmt, args);
   b7f18:	6a00      	ldr	r0, [r0, #32]
    va_start(args, fmt);
   b7f1a:	9301      	str	r3, [sp, #4]
    stream_->vprintf(false, fmt, args);
   b7f1c:	f000 ffe7 	bl	b8eee <_ZN5Print7vprintfEbPKcSt9__va_list>
}
   b7f20:	b002      	add	sp, #8
   b7f22:	f85d eb04 	ldr.w	lr, [sp], #4
   b7f26:	b003      	add	sp, #12
   b7f28:	4770      	bx	lr

000b7f2a <_ZN5spark6detail9LogFilter4NodeC1EOS2_>:
struct spark::detail::LogFilter::Node {
   b7f2a:	680a      	ldr	r2, [r1, #0]
   b7f2c:	6002      	str	r2, [r0, #0]
   b7f2e:	684a      	ldr	r2, [r1, #4]
   b7f30:	6042      	str	r2, [r0, #4]
        capacity_(0) {
   b7f32:	2200      	movs	r2, #0
   b7f34:	e9c0 2202 	strd	r2, r2, [r0, #8]
   b7f38:	b510      	push	{r4, lr}
   b7f3a:	6102      	str	r2, [r0, #16]
      __a = _GLIBCXX_MOVE(__b);
   b7f3c:	688c      	ldr	r4, [r1, #8]
   b7f3e:	6084      	str	r4, [r0, #8]
   b7f40:	68cc      	ldr	r4, [r1, #12]
   b7f42:	60c4      	str	r4, [r0, #12]
   b7f44:	690c      	ldr	r4, [r1, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   b7f46:	608a      	str	r2, [r1, #8]
   b7f48:	60ca      	str	r2, [r1, #12]
      __a = _GLIBCXX_MOVE(__b);
   b7f4a:	6104      	str	r4, [r0, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   b7f4c:	610a      	str	r2, [r1, #16]
   b7f4e:	bd10      	pop	{r4, pc}

000b7f50 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   b7f50:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return data_ + size_;
}

template<typename T, typename AllocatorT>
const T* spark::Vector<T, AllocatorT>::end() const {
    return data_ + size_;
   b7f54:	e9d0 8400 	ldrd	r8, r4, [r0]
   b7f58:	f04f 0a14 	mov.w	sl, #20
   b7f5c:	9300      	str	r3, [sp, #0]
   b7f5e:	fb0a f404 	mul.w	r4, sl, r4
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   b7f62:	4b18      	ldr	r3, [pc, #96]	; (b7fc4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
   b7f64:	10a4      	asrs	r4, r4, #2
   b7f66:	4617      	mov	r7, r2
   b7f68:	435c      	muls	r4, r3
   b7f6a:	4645      	mov	r5, r8
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
   b7f6c:	2c00      	cmp	r4, #0
   b7f6e:	dd21      	ble.n	b7fb4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x64>
	{
	  _DistanceType __half = __len >> 1;
   b7f70:	1066      	asrs	r6, r4, #1
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
   b7f72:	fb0a f006 	mul.w	r0, sl, r6
   b7f76:	eb05 0900 	add.w	r9, r5, r0
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
   b7f7a:	463a      	mov	r2, r7
   b7f7c:	f8b9 b004 	ldrh.w	fp, [r9, #4]
   b7f80:	5828      	ldr	r0, [r5, r0]
   b7f82:	9101      	str	r1, [sp, #4]
   b7f84:	455f      	cmp	r7, fp
   b7f86:	bf28      	it	cs
   b7f88:	465a      	movcs	r2, fp
   b7f8a:	f001 fde4 	bl	b9b56 <strncmp>
                if (cmp == 0) {
   b7f8e:	2800      	cmp	r0, #0
   b7f90:	9901      	ldr	r1, [sp, #4]
   b7f92:	f04f 0301 	mov.w	r3, #1
   b7f96:	d10b      	bne.n	b7fb0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x60>
                    if (node.size == value.second) { // Lengths are equal
   b7f98:	455f      	cmp	r7, fp
   b7f9a:	d103      	bne.n	b7fa4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x54>
                        found = true; // Allows caller code to avoid extra call to strncmp()
   b7f9c:	9a00      	ldr	r2, [sp, #0]
   b7f9e:	7013      	strb	r3, [r2, #0]
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   b7fa0:	4634      	mov	r4, r6
   b7fa2:	e7e3      	b.n	b7f6c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x1c>
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
   b7fa4:	d9fc      	bls.n	b7fa0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
   b7fa6:	1ba6      	subs	r6, r4, r6
	      ++__first;
   b7fa8:	f109 0514 	add.w	r5, r9, #20
	      __len = __len - __half - 1;
   b7fac:	3e01      	subs	r6, #1
   b7fae:	e7f7      	b.n	b7fa0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	  if (__comp(__middle, __val))
   b7fb0:	dbf9      	blt.n	b7fa6 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
   b7fb2:	e7f5      	b.n	b7fa0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
      return __last - __first;
   b7fb4:	eba5 0508 	sub.w	r5, r5, r8
}
   b7fb8:	4802      	ldr	r0, [pc, #8]	; (b7fc4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
   b7fba:	10ad      	asrs	r5, r5, #2
   b7fbc:	4368      	muls	r0, r5
   b7fbe:	b003      	add	sp, #12
   b7fc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b7fc4:	cccccccd 	.word	0xcccccccd

000b7fc8 <_ZNK5spark6detail9LogFilter5levelEPKc>:
LogLevel spark::detail::LogFilter::level(const char *category) const {
   b7fc8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (!nodes_.isEmpty() && category) {
   b7fca:	6903      	ldr	r3, [r0, #16]
    LogLevel level = level_; // Default level
   b7fcc:	7e05      	ldrb	r5, [r0, #24]
LogLevel spark::detail::LogFilter::level(const char *category) const {
   b7fce:	9101      	str	r1, [sp, #4]
    if (!nodes_.isEmpty() && category) {
   b7fd0:	b303      	cbz	r3, b8014 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
   b7fd2:	b1f9      	cbz	r1, b8014 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
        size_t size = 0; // Name length
   b7fd4:	2600      	movs	r6, #0
        const Vector<Node> *pNodes = &nodes_; // Root nodes
   b7fd6:	f100 040c 	add.w	r4, r0, #12
        size_t size = 0; // Name length
   b7fda:	9603      	str	r6, [sp, #12]
        while ((name = nextSubcategoryName(category, size))) {
   b7fdc:	a903      	add	r1, sp, #12
   b7fde:	a801      	add	r0, sp, #4
   b7fe0:	f7ff ff19 	bl	b7e16 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   b7fe4:	4601      	mov	r1, r0
   b7fe6:	b1a8      	cbz	r0, b8014 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
            const int index = nodeIndex(*pNodes, name, size, found);
   b7fe8:	f10d 030b 	add.w	r3, sp, #11
   b7fec:	9a03      	ldr	r2, [sp, #12]
            bool found = false;
   b7fee:	f88d 600b 	strb.w	r6, [sp, #11]
            const int index = nodeIndex(*pNodes, name, size, found);
   b7ff2:	4620      	mov	r0, r4
   b7ff4:	f7ff ffac 	bl	b7f50 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
   b7ff8:	f89d 300b 	ldrb.w	r3, [sp, #11]
   b7ffc:	b153      	cbz	r3, b8014 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
    return data_[i];
   b7ffe:	6823      	ldr	r3, [r4, #0]
   b8000:	2414      	movs	r4, #20
   b8002:	fb04 3400 	mla	r4, r4, r0, r3
            pNodes = &node.nodes;
   b8006:	3408      	adds	r4, #8
            if (node.level >= 0) {
   b8008:	f934 3c02 	ldrsh.w	r3, [r4, #-2]
   b800c:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
   b800e:	bfa8      	it	ge
   b8010:	b2dd      	uxtbge	r5, r3
        while ((name = nextSubcategoryName(category, size))) {
   b8012:	e7e3      	b.n	b7fdc <_ZNK5spark6detail9LogFilter5levelEPKc+0x14>
}
   b8014:	4628      	mov	r0, r5
   b8016:	b004      	add	sp, #16
   b8018:	bd70      	pop	{r4, r5, r6, pc}
	...

000b801c <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
   b801c:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
   b801e:	4c09      	ldr	r4, [pc, #36]	; (b8044 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x28>)
   b8020:	7823      	ldrb	r3, [r4, #0]
   b8022:	f3bf 8f5b 	dmb	ish
   b8026:	07db      	lsls	r3, r3, #31
   b8028:	d409      	bmi.n	b803e <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   b802a:	4620      	mov	r0, r4
   b802c:	f7fc f844 	bl	b40b8 <__cxa_guard_acquire>
   b8030:	b128      	cbz	r0, b803e <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   b8032:	4620      	mov	r0, r4
   b8034:	f7fc f845 	bl	b40c2 <__cxa_guard_release>
   b8038:	4803      	ldr	r0, [pc, #12]	; (b8048 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
   b803a:	f001 fc93 	bl	b9964 <atexit>
}
   b803e:	4803      	ldr	r0, [pc, #12]	; (b804c <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x30>)
   b8040:	bd10      	pop	{r4, pc}
   b8042:	bf00      	nop
   b8044:	2003e6a8 	.word	0x2003e6a8
   b8048:	000b7e0f 	.word	0x000b7e0f
   b804c:	2003b6cc 	.word	0x2003b6cc

000b8050 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
   b8050:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
   b8052:	4c09      	ldr	r4, [pc, #36]	; (b8078 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x28>)
   b8054:	7823      	ldrb	r3, [r4, #0]
   b8056:	f3bf 8f5b 	dmb	ish
   b805a:	07db      	lsls	r3, r3, #31
   b805c:	d409      	bmi.n	b8072 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   b805e:	4620      	mov	r0, r4
   b8060:	f7fc f82a 	bl	b40b8 <__cxa_guard_acquire>
   b8064:	b128      	cbz	r0, b8072 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   b8066:	4620      	mov	r0, r4
   b8068:	f7fc f82b 	bl	b40c2 <__cxa_guard_release>
   b806c:	4803      	ldr	r0, [pc, #12]	; (b807c <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
   b806e:	f001 fc79 	bl	b9964 <atexit>
    return &factory;
}
   b8072:	4803      	ldr	r0, [pc, #12]	; (b8080 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x30>)
   b8074:	bd10      	pop	{r4, pc}
   b8076:	bf00      	nop
   b8078:	2003e6ac 	.word	0x2003e6ac
   b807c:	000b7e77 	.word	0x000b7e77
   b8080:	2003b6d0 	.word	0x2003b6d0

000b8084 <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
   b8084:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
   b8086:	2500      	movs	r5, #0
   b8088:	4604      	mov	r4, r0
   b808a:	e9c0 5500 	strd	r5, r5, [r0]
   b808e:	e9c0 5504 	strd	r5, r5, [r0, #16]
   b8092:	6085      	str	r5, [r0, #8]
   b8094:	6185      	str	r5, [r0, #24]
    RecursiveMutex() : handle_(nullptr)
   b8096:	f840 5f24 	str.w	r5, [r0, #36]!
        os_mutex_recursive_create(&handle_);
   b809a:	f7fe fda1 	bl	b6be0 <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
   b809e:	f7ff ffbd 	bl	b801c <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
   b80a2:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   b80a4:	f7ff ffd4 	bl	b8050 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
   b80a8:	7325      	strb	r5, [r4, #12]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   b80aa:	6220      	str	r0, [r4, #32]
}
   b80ac:	4620      	mov	r0, r4
   b80ae:	bd38      	pop	{r3, r4, r5, pc}

000b80b0 <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
   b80b0:	b510      	push	{r4, lr}
    static LogManager mgr;
   b80b2:	4c0a      	ldr	r4, [pc, #40]	; (b80dc <_ZN5spark10LogManager8instanceEv+0x2c>)
   b80b4:	7823      	ldrb	r3, [r4, #0]
   b80b6:	f3bf 8f5b 	dmb	ish
   b80ba:	07db      	lsls	r3, r3, #31
   b80bc:	d40c      	bmi.n	b80d8 <_ZN5spark10LogManager8instanceEv+0x28>
   b80be:	4620      	mov	r0, r4
   b80c0:	f7fb fffa 	bl	b40b8 <__cxa_guard_acquire>
   b80c4:	b140      	cbz	r0, b80d8 <_ZN5spark10LogManager8instanceEv+0x28>
   b80c6:	4806      	ldr	r0, [pc, #24]	; (b80e0 <_ZN5spark10LogManager8instanceEv+0x30>)
   b80c8:	f7ff ffdc 	bl	b8084 <_ZN5spark10LogManagerC1Ev>
   b80cc:	4620      	mov	r0, r4
   b80ce:	f7fb fff8 	bl	b40c2 <__cxa_guard_release>
   b80d2:	4804      	ldr	r0, [pc, #16]	; (b80e4 <_ZN5spark10LogManager8instanceEv+0x34>)
   b80d4:	f001 fc46 	bl	b9964 <atexit>
    return &mgr;
}
   b80d8:	4801      	ldr	r0, [pc, #4]	; (b80e0 <_ZN5spark10LogManager8instanceEv+0x30>)
   b80da:	bd10      	pop	{r4, pc}
   b80dc:	2003e6a4 	.word	0x2003e6a4
   b80e0:	2003e6b4 	.word	0x2003e6b4
   b80e4:	000b8605 	.word	0x000b8605

000b80e8 <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
   b80e8:	4a02      	ldr	r2, [pc, #8]	; (b80f4 <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
   b80ea:	4903      	ldr	r1, [pc, #12]	; (b80f8 <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
   b80ec:	4803      	ldr	r0, [pc, #12]	; (b80fc <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
   b80ee:	2300      	movs	r3, #0
   b80f0:	f7fe bee6 	b.w	b6ec0 <log_set_callbacks>
   b80f4:	000b83e9 	.word	0x000b83e9
   b80f8:	000b8375 	.word	0x000b8375
   b80fc:	000b82f5 	.word	0x000b82f5

000b8100 <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
   b8100:	2300      	movs	r3, #0
   b8102:	461a      	mov	r2, r3
   b8104:	4619      	mov	r1, r3
   b8106:	4618      	mov	r0, r3
   b8108:	f7fe beda 	b.w	b6ec0 <log_set_callbacks>

000b810c <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   b810c:	b537      	push	{r0, r1, r2, r4, r5, lr}
        JSONObjectIterator(value.t_, value.d_) {
   b810e:	688d      	ldr	r5, [r1, #8]
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   b8110:	4604      	mov	r4, r0
      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b8112:	4668      	mov	r0, sp
   b8114:	f7ff fec8 	bl	b7ea8 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
        JSONObjectIterator(value.t_, value.d_) {
   b8118:	466a      	mov	r2, sp
   b811a:	4629      	mov	r1, r5
   b811c:	4620      	mov	r0, r4
   b811e:	f7ff fd7b 	bl	b7c18 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   b8122:	a801      	add	r0, sp, #4
   b8124:	f7fc f8aa 	bl	b427c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b8128:	4620      	mov	r0, r4
   b812a:	b003      	add	sp, #12
   b812c:	bd30      	pop	{r4, r5, pc}

000b812e <_ZNK5spark18JSONObjectIterator4nameEv>:
inline spark::JSONString spark::JSONObjectIterator::name() const {
   b812e:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONString(k_, d_);
   b8130:	68cd      	ldr	r5, [r1, #12]
inline spark::JSONString spark::JSONObjectIterator::name() const {
   b8132:	4604      	mov	r4, r0
   b8134:	4668      	mov	r0, sp
   b8136:	f7ff feb7 	bl	b7ea8 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONString(k_, d_);
   b813a:	466a      	mov	r2, sp
   b813c:	4629      	mov	r1, r5
   b813e:	4620      	mov	r0, r4
   b8140:	f7ff fd46 	bl	b7bd0 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   b8144:	a801      	add	r0, sp, #4
   b8146:	f7fc f899 	bl	b427c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b814a:	4620      	mov	r0, r4
   b814c:	b003      	add	sp, #12
   b814e:	bd30      	pop	{r4, r5, pc}

000b8150 <_ZNK5spark18JSONObjectIterator5valueEv>:
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   b8150:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONValue(v_, d_);
   b8152:	690d      	ldr	r5, [r1, #16]
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   b8154:	4604      	mov	r4, r0
   b8156:	4668      	mov	r0, sp
   b8158:	f7ff fea6 	bl	b7ea8 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONValue(v_, d_);
   b815c:	466a      	mov	r2, sp
   b815e:	4629      	mov	r1, r5
   b8160:	4620      	mov	r0, r4
   b8162:	f7ff fcde 	bl	b7b22 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   b8166:	a801      	add	r0, sp, #4
   b8168:	f7fc f888 	bl	b427c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b816c:	4620      	mov	r0, r4
   b816e:	b003      	add	sp, #12
   b8170:	bd30      	pop	{r4, r5, pc}
	...

000b8174 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
   b8174:	b570      	push	{r4, r5, r6, lr}
   b8176:	b08a      	sub	sp, #40	; 0x28
   b8178:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
   b817a:	4601      	mov	r1, r0
   b817c:	a804      	add	r0, sp, #16
   b817e:	f7ff ffc5 	bl	b810c <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
        if (it.name() == "baud" && baudRate) {
   b8182:	4e14      	ldr	r6, [pc, #80]	; (b81d4 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x60>)
    while (it.next()) {
   b8184:	a804      	add	r0, sp, #16
   b8186:	f7ff fd5f 	bl	b7c48 <_ZN5spark18JSONObjectIterator4nextEv>
   b818a:	b1e8      	cbz	r0, b81c8 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x54>
        if (it.name() == "baud" && baudRate) {
   b818c:	a904      	add	r1, sp, #16
   b818e:	4668      	mov	r0, sp
   b8190:	f7ff ffcd 	bl	b812e <_ZNK5spark18JSONObjectIterator4nameEv>
   b8194:	9802      	ldr	r0, [sp, #8]
   b8196:	4631      	mov	r1, r6
   b8198:	f7ff fe66 	bl	b7e68 <_ZNK5spark10JSONStringeqEPKc.isra.0>
   b819c:	4604      	mov	r4, r0
   b819e:	b110      	cbz	r0, b81a6 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x32>
   b81a0:	1e2c      	subs	r4, r5, #0
   b81a2:	bf18      	it	ne
   b81a4:	2401      	movne	r4, #1
   b81a6:	a801      	add	r0, sp, #4
   b81a8:	f7fc f868 	bl	b427c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b81ac:	2c00      	cmp	r4, #0
   b81ae:	d0e9      	beq.n	b8184 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
            *baudRate = it.value().toInt();
   b81b0:	a904      	add	r1, sp, #16
   b81b2:	4668      	mov	r0, sp
   b81b4:	f7ff ffcc 	bl	b8150 <_ZNK5spark18JSONObjectIterator5valueEv>
   b81b8:	4668      	mov	r0, sp
   b81ba:	f7ff fce8 	bl	b7b8e <_ZNK5spark9JSONValue5toIntEv>
   b81be:	6028      	str	r0, [r5, #0]
   b81c0:	a801      	add	r0, sp, #4
   b81c2:	f7fc f85b 	bl	b427c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b81c6:	e7dd      	b.n	b8184 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
   b81c8:	a805      	add	r0, sp, #20
   b81ca:	f7fc f857 	bl	b427c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b81ce:	b00a      	add	sp, #40	; 0x28
   b81d0:	bd70      	pop	{r4, r5, r6, pc}
   b81d2:	bf00      	nop
   b81d4:	000badd5 	.word	0x000badd5

000b81d8 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   b81d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b81da:	460c      	mov	r4, r1
    if (strcmp(type, "Serial") == 0) {
   b81dc:	4620      	mov	r0, r4
   b81de:	4913      	ldr	r1, [pc, #76]	; (b822c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   b81e0:	4615      	mov	r5, r2
    if (strcmp(type, "Serial") == 0) {
   b81e2:	f001 fc80 	bl	b9ae6 <strcmp>
   b81e6:	b950      	cbnz	r0, b81fe <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x26>
        Serial.begin();
   b81e8:	f001 f8b6 	bl	b9358 <_Z16_fetch_usbserialv>
   b81ec:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b81f0:	f001 f8a2 	bl	b9338 <_ZN9USBSerial5beginEl>
}
   b81f4:	b003      	add	sp, #12
   b81f6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        return &Serial;
   b81fa:	f001 b8ad 	b.w	b9358 <_Z16_fetch_usbserialv>
    if (strcmp(type, "Serial1") == 0) {
   b81fe:	490c      	ldr	r1, [pc, #48]	; (b8230 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x58>)
   b8200:	4620      	mov	r0, r4
   b8202:	f001 fc70 	bl	b9ae6 <strcmp>
   b8206:	b978      	cbnz	r0, b8228 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x50>
        int baud = 9600;
   b8208:	f44f 5316 	mov.w	r3, #9600	; 0x2580
        getParams(params, &baud);
   b820c:	a901      	add	r1, sp, #4
   b820e:	4628      	mov	r0, r5
        int baud = 9600;
   b8210:	9301      	str	r3, [sp, #4]
        getParams(params, &baud);
   b8212:	f7ff ffaf 	bl	b8174 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
   b8216:	f001 f9bd 	bl	b9594 <_Z22__fetch_global_Serial1v>
   b821a:	9901      	ldr	r1, [sp, #4]
   b821c:	f001 f834 	bl	b9288 <_ZN11USARTSerial5beginEm>
        return &Serial1;
   b8220:	f001 f9b8 	bl	b9594 <_Z22__fetch_global_Serial1v>
}
   b8224:	b003      	add	sp, #12
   b8226:	bd30      	pop	{r4, r5, pc}
    return nullptr;
   b8228:	2000      	movs	r0, #0
   b822a:	e7fb      	b.n	b8224 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
   b822c:	000badda 	.word	0x000badda
   b8230:	000bade1 	.word	0x000bade1

000b8234 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b8234:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b8236:	e9d0 5300 	ldrd	r5, r3, [r0]
   b823a:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   b823c:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b823e:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b8242:	42ae      	cmp	r6, r5
   b8244:	d005      	beq.n	b8252 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
struct spark::detail::LogFilter::Node {
   b8246:	f105 0008 	add.w	r0, r5, #8
   b824a:	f7ff fff3 	bl	b8234 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   b824e:	3514      	adds	r5, #20
   b8250:	e7f7      	b.n	b8242 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   b8252:	6820      	ldr	r0, [r4, #0]
   b8254:	f7fe ff10 	bl	b7078 <free>
}
   b8258:	4620      	mov	r0, r4
   b825a:	bd70      	pop	{r4, r5, r6, pc}

000b825c <_ZN5spark6detail9LogFilterD1Ev>:
spark::detail::LogFilter::~LogFilter() {
   b825c:	b510      	push	{r4, lr}
   b825e:	4604      	mov	r4, r0
   b8260:	300c      	adds	r0, #12
   b8262:	f7ff ffe7 	bl	b8234 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   b8266:	4620      	mov	r0, r4
   b8268:	f7fe ff92 	bl	b7190 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   b826c:	4620      	mov	r0, r4
   b826e:	bd10      	pop	{r4, pc}

000b8270 <_ZN5spark16StreamLogHandlerD1Ev>:
class StreamLogHandler: public LogHandler {
   b8270:	b510      	push	{r4, lr}
    virtual ~LogHandler() = default;
   b8272:	4b04      	ldr	r3, [pc, #16]	; (b8284 <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
class StreamLogHandler: public LogHandler {
   b8274:	4604      	mov	r4, r0
    virtual ~LogHandler() = default;
   b8276:	f840 3b04 	str.w	r3, [r0], #4
   b827a:	f7ff ffef 	bl	b825c <_ZN5spark6detail9LogFilterD1Ev>
class StreamLogHandler: public LogHandler {
   b827e:	4620      	mov	r0, r4
   b8280:	bd10      	pop	{r4, pc}
   b8282:	bf00      	nop
   b8284:	000ba9d0 	.word	0x000ba9d0

000b8288 <_ZN5spark16StreamLogHandlerD0Ev>:
   b8288:	b510      	push	{r4, lr}
   b828a:	4604      	mov	r4, r0
   b828c:	f7ff fff0 	bl	b8270 <_ZN5spark16StreamLogHandlerD1Ev>
   b8290:	4620      	mov	r0, r4
   b8292:	2124      	movs	r1, #36	; 0x24
   b8294:	f7fb ff01 	bl	b409a <_ZdlPvj>
   b8298:	4620      	mov	r0, r4
   b829a:	bd10      	pop	{r4, pc}

000b829c <_ZN5spark20JSONStreamLogHandlerD1Ev>:
class JSONStreamLogHandler: public StreamLogHandler {
   b829c:	b510      	push	{r4, lr}
   b829e:	4b03      	ldr	r3, [pc, #12]	; (b82ac <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
   b82a0:	6003      	str	r3, [r0, #0]
   b82a2:	4604      	mov	r4, r0
   b82a4:	f7ff ffe4 	bl	b8270 <_ZN5spark16StreamLogHandlerD1Ev>
   b82a8:	4620      	mov	r0, r4
   b82aa:	bd10      	pop	{r4, pc}
   b82ac:	000bae80 	.word	0x000bae80

000b82b0 <_ZN5spark20JSONStreamLogHandlerD0Ev>:
   b82b0:	b510      	push	{r4, lr}
   b82b2:	4604      	mov	r4, r0
   b82b4:	f7ff fff2 	bl	b829c <_ZN5spark20JSONStreamLogHandlerD1Ev>
   b82b8:	4620      	mov	r0, r4
   b82ba:	2124      	movs	r1, #36	; 0x24
   b82bc:	f7fb feed 	bl	b409a <_ZdlPvj>
   b82c0:	4620      	mov	r0, r4
   b82c2:	bd10      	pop	{r4, pc}

000b82c4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        capacity_(0) {
   b82c4:	2200      	movs	r2, #0
   b82c6:	e9c0 2200 	strd	r2, r2, [r0]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   b82ca:	b510      	push	{r4, lr}
        capacity_(0) {
   b82cc:	6082      	str	r2, [r0, #8]
      __a = _GLIBCXX_MOVE(__b);
   b82ce:	680c      	ldr	r4, [r1, #0]
   b82d0:	6004      	str	r4, [r0, #0]
   b82d2:	684c      	ldr	r4, [r1, #4]
   b82d4:	6044      	str	r4, [r0, #4]
   b82d6:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b82d8:	600a      	str	r2, [r1, #0]
   b82da:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   b82dc:	6084      	str	r4, [r0, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b82de:	608a      	str	r2, [r1, #8]
}
   b82e0:	bd10      	pop	{r4, pc}

000b82e2 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      ~lock_guard()
   b82e2:	b510      	push	{r4, lr}
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   b82e4:	6803      	ldr	r3, [r0, #0]
   b82e6:	4604      	mov	r4, r0
   b82e8:	6818      	ldr	r0, [r3, #0]
   b82ea:	f7fe fc91 	bl	b6c10 <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
   b82ee:	4620      	mov	r0, r4
   b82f0:	bd10      	pop	{r4, pc}
	...

000b82f4 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   b82f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b82f8:	b087      	sub	sp, #28
   b82fa:	4680      	mov	r8, r0
   b82fc:	9303      	str	r3, [sp, #12]
#endif /* nRF52840 */

#if defined(STM32F10X_MD) || defined(STM32F10X_HD) || defined(STM32F2XX) || defined(nRF52840)
static inline bool HAL_IsISR() 
{
	return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   b82fe:	4b1c      	ldr	r3, [pc, #112]	; (b8370 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x7c>)
   b8300:	685b      	ldr	r3, [r3, #4]
   b8302:	f3c3 0308 	ubfx	r3, r3, #0, #9
   b8306:	4689      	mov	r9, r1
   b8308:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   b830a:	b96b      	cbnz	r3, b8328 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x34>
        return;
    }
#endif
    LogManager *that = instance();
   b830c:	f7ff fed0 	bl	b80b0 <_ZN5spark10LogManager8instanceEv>
   b8310:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   b8312:	f100 0324 	add.w	r3, r0, #36	; 0x24
      { _M_device.lock(); }
   b8316:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b8318:	9305      	str	r3, [sp, #20]
      { _M_device.lock(); }
   b831a:	f7ff fda3 	bl	b7e64 <_ZN14RecursiveMutex4lockEv.isra.0>
        // prevent re-entry
        if (that->isActive()) {
   b831e:	7b23      	ldrb	r3, [r4, #12]
   b8320:	b12b      	cbz	r3, b832e <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x3a>
    LOG_WITH_LOCK(that->mutex_) {
   b8322:	a805      	add	r0, sp, #20
   b8324:	f7ff ffdd 	bl	b82e2 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
   b8328:	b007      	add	sp, #28
   b832a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   b832e:	2301      	movs	r3, #1
   b8330:	7323      	strb	r3, [r4, #12]
    return data_ + size_;
   b8332:	e9d4 5300 	ldrd	r5, r3, [r4]
            handler->message(msg, (LogLevel)level, category, *attr);
   b8336:	fa5f f989 	uxtb.w	r9, r9
   b833a:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   b833e:	45aa      	cmp	sl, r5
   b8340:	d012      	beq.n	b8368 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>
   b8342:	f855 7b04 	ldr.w	r7, [r5], #4
    if (level >= filter_.level(category)) {
   b8346:	4631      	mov	r1, r6
   b8348:	1d38      	adds	r0, r7, #4
   b834a:	f7ff fe3d 	bl	b7fc8 <_ZNK5spark6detail9LogFilter5levelEPKc>
   b834e:	4581      	cmp	r9, r0
   b8350:	d3f5      	bcc.n	b833e <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
        logMessage(msg, level, category, attr);
   b8352:	683b      	ldr	r3, [r7, #0]
   b8354:	9a03      	ldr	r2, [sp, #12]
   b8356:	9200      	str	r2, [sp, #0]
   b8358:	f8d3 b008 	ldr.w	fp, [r3, #8]
   b835c:	464a      	mov	r2, r9
   b835e:	4633      	mov	r3, r6
   b8360:	4641      	mov	r1, r8
   b8362:	4638      	mov	r0, r7
   b8364:	47d8      	blx	fp
   b8366:	e7ea      	b.n	b833e <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
    outputActive_ = outputActive;
   b8368:	2300      	movs	r3, #0
   b836a:	7323      	strb	r3, [r4, #12]
   b836c:	e7d9      	b.n	b8322 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x2e>
   b836e:	bf00      	nop
   b8370:	e000ed00 	.word	0xe000ed00

000b8374 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:
void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   b8374:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b8378:	469b      	mov	fp, r3
   b837a:	4b1a      	ldr	r3, [pc, #104]	; (b83e4 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x70>)
   b837c:	685b      	ldr	r3, [r3, #4]
   b837e:	f3c3 0308 	ubfx	r3, r3, #0, #9
   b8382:	4680      	mov	r8, r0
   b8384:	4689      	mov	r9, r1
   b8386:	4616      	mov	r6, r2
    if (HAL_IsISR()) {
   b8388:	b96b      	cbnz	r3, b83a6 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x32>
    LogManager *that = instance();
   b838a:	f7ff fe91 	bl	b80b0 <_ZN5spark10LogManager8instanceEv>
   b838e:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   b8390:	f100 0324 	add.w	r3, r0, #36	; 0x24
   b8394:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b8396:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   b8398:	f7ff fd64 	bl	b7e64 <_ZN14RecursiveMutex4lockEv.isra.0>
        if (that->isActive()) {
   b839c:	7b23      	ldrb	r3, [r4, #12]
   b839e:	b12b      	cbz	r3, b83ac <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
    LOG_WITH_LOCK(that->mutex_) {
   b83a0:	a801      	add	r0, sp, #4
   b83a2:	f7ff ff9e 	bl	b82e2 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   b83a6:	b003      	add	sp, #12
   b83a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outputActive_ = outputActive;
   b83ac:	2301      	movs	r3, #1
   b83ae:	7323      	strb	r3, [r4, #12]
   b83b0:	e9d4 5300 	ldrd	r5, r3, [r4]
    if (level >= filter_.level(category)) {
   b83b4:	b2f6      	uxtb	r6, r6
   b83b6:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   b83ba:	4555      	cmp	r5, sl
   b83bc:	d00e      	beq.n	b83dc <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x68>
   b83be:	f855 7b04 	ldr.w	r7, [r5], #4
   b83c2:	4659      	mov	r1, fp
   b83c4:	1d38      	adds	r0, r7, #4
   b83c6:	f7ff fdff 	bl	b7fc8 <_ZNK5spark6detail9LogFilter5levelEPKc>
   b83ca:	4286      	cmp	r6, r0
   b83cc:	d3f5      	bcc.n	b83ba <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
        write(data, size);
   b83ce:	683b      	ldr	r3, [r7, #0]
   b83d0:	464a      	mov	r2, r9
   b83d2:	68db      	ldr	r3, [r3, #12]
   b83d4:	4641      	mov	r1, r8
   b83d6:	4638      	mov	r0, r7
   b83d8:	4798      	blx	r3
   b83da:	e7ee      	b.n	b83ba <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
    outputActive_ = outputActive;
   b83dc:	2300      	movs	r3, #0
   b83de:	7323      	strb	r3, [r4, #12]
   b83e0:	e7de      	b.n	b83a0 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x2c>
   b83e2:	bf00      	nop
   b83e4:	e000ed00 	.word	0xe000ed00

000b83e8 <_ZN5spark10LogManager10logEnabledEiPKcPv>:
int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   b83e8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b83ec:	4b16      	ldr	r3, [pc, #88]	; (b8448 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x60>)
   b83ee:	685b      	ldr	r3, [r3, #4]
   b83f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
   b83f4:	4605      	mov	r5, r0
   b83f6:	460f      	mov	r7, r1
    if (HAL_IsISR()) {
   b83f8:	bb1b      	cbnz	r3, b8442 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5a>
    LogManager *that = instance();
   b83fa:	f7ff fe59 	bl	b80b0 <_ZN5spark10LogManager8instanceEv>
    LOG_WITH_LOCK(that->mutex_) {
   b83fe:	f100 0324 	add.w	r3, r0, #36	; 0x24
    LogManager *that = instance();
   b8402:	4604      	mov	r4, r0
   b8404:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b8406:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   b8408:	f7ff fd2c 	bl	b7e64 <_ZN14RecursiveMutex4lockEv.isra.0>
   b840c:	e9d4 6300 	ldrd	r6, r3, [r4]
    int minLevel = LOG_LEVEL_NONE;
   b8410:	2446      	movs	r4, #70	; 0x46
   b8412:	eb06 0883 	add.w	r8, r6, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   b8416:	45b0      	cmp	r8, r6
   b8418:	d109      	bne.n	b842e <_ZN5spark10LogManager10logEnabledEiPKcPv+0x46>
    LOG_WITH_LOCK(that->mutex_) {
   b841a:	a801      	add	r0, sp, #4
   b841c:	f7ff ff61 	bl	b82e2 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    return (level >= minLevel);
   b8420:	42a5      	cmp	r5, r4
   b8422:	bfb4      	ite	lt
   b8424:	2000      	movlt	r0, #0
   b8426:	2001      	movge	r0, #1
}
   b8428:	b002      	add	sp, #8
   b842a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return filter_.level(category);
   b842e:	f856 0b04 	ldr.w	r0, [r6], #4
   b8432:	4639      	mov	r1, r7
   b8434:	3004      	adds	r0, #4
   b8436:	f7ff fdc7 	bl	b7fc8 <_ZNK5spark6detail9LogFilter5levelEPKc>
            if (level < minLevel) {
   b843a:	4284      	cmp	r4, r0
   b843c:	bfa8      	it	ge
   b843e:	4604      	movge	r4, r0
        for (LogHandler *handler: that->activeHandlers_) {
   b8440:	e7e9      	b.n	b8416 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2e>
        return 0;
   b8442:	2000      	movs	r0, #0
   b8444:	e7f0      	b.n	b8428 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x40>
   b8446:	bf00      	nop
   b8448:	e000ed00 	.word	0xe000ed00

000b844c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b844c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b844e:	e9d0 5301 	ldrd	r5, r3, [r0, #4]
   b8452:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b8454:	4604      	mov	r4, r0
   b8456:	460e      	mov	r6, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b8458:	db0d      	blt.n	b8476 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x2a>
   b845a:	1c6f      	adds	r7, r5, #1
        if (n > 0) {
   b845c:	2f00      	cmp	r7, #0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   b845e:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   b8460:	dd04      	ble.n	b846c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x20>
    return ::realloc(ptr, size);
   b8462:	00b9      	lsls	r1, r7, #2
   b8464:	f7fe fe10 	bl	b7088 <realloc>
            if (!d) {
   b8468:	b918      	cbnz	r0, b8472 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x26>
}
   b846a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ::free(ptr);
   b846c:	f7fe fe04 	bl	b7078 <free>
        T* d = nullptr;
   b8470:	2000      	movs	r0, #0
        data_ = d;
   b8472:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   b8474:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   b8476:	6827      	ldr	r7, [r4, #0]
    move(p + 1, p, data_ + size_);
   b8478:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b847a:	eb07 0185 	add.w	r1, r7, r5, lsl #2
    move(p + 1, p, data_ + size_);
   b847e:	0092      	lsls	r2, r2, #2
        ::memmove(dest, p, (end - p) * sizeof(T));
   b8480:	eba2 0285 	sub.w	r2, r2, r5, lsl #2
   b8484:	1d08      	adds	r0, r1, #4
   b8486:	f001 fa89 	bl	b999c <memmove>
    new(p) T(std::move(value));
   b848a:	f847 6025 	str.w	r6, [r7, r5, lsl #2]
    ++size_;
   b848e:	6863      	ldr	r3, [r4, #4]
   b8490:	3301      	adds	r3, #1
   b8492:	6063      	str	r3, [r4, #4]
    return true;
   b8494:	2001      	movs	r0, #1
   b8496:	e7e8      	b.n	b846a <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x1e>

000b8498 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
bool spark::LogManager::addHandler(LogHandler *handler) {
   b8498:	b537      	push	{r0, r1, r2, r4, r5, lr}
    LOG_WITH_LOCK(mutex_) {
   b849a:	f100 0324 	add.w	r3, r0, #36	; 0x24
bool spark::LogManager::addHandler(LogHandler *handler) {
   b849e:	4604      	mov	r4, r0
   b84a0:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b84a2:	9301      	str	r3, [sp, #4]
   b84a4:	460d      	mov	r5, r1
      { _M_device.lock(); }
   b84a6:	f7ff fcdd 	bl	b7e64 <_ZN14RecursiveMutex4lockEv.isra.0>
    return find(data_, data_ + size_, value);
   b84aa:	e9d4 3200 	ldrd	r3, r2, [r4]
   b84ae:	eb03 0282 	add.w	r2, r3, r2, lsl #2
        for (; p != end; ++p) {
   b84b2:	4293      	cmp	r3, r2
   b84b4:	4619      	mov	r1, r3
   b84b6:	d00b      	beq.n	b84d0 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x38>
            if (*p == value) {
   b84b8:	6809      	ldr	r1, [r1, #0]
   b84ba:	42a9      	cmp	r1, r5
   b84bc:	f103 0304 	add.w	r3, r3, #4
   b84c0:	d1f7      	bne.n	b84b2 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x1a>
            return false;
   b84c2:	a801      	add	r0, sp, #4
   b84c4:	f7ff ff0d 	bl	b82e2 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   b84c8:	2500      	movs	r5, #0
}
   b84ca:	4628      	mov	r0, r5
   b84cc:	b003      	add	sp, #12
   b84ce:	bd30      	pop	{r4, r5, pc}
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
   b84d0:	4629      	mov	r1, r5
   b84d2:	4620      	mov	r0, r4
   b84d4:	f7ff ffba 	bl	b844c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>
   b84d8:	4605      	mov	r5, r0
   b84da:	2800      	cmp	r0, #0
   b84dc:	d0f1      	beq.n	b84c2 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x2a>
        if (activeHandlers_.size() == 1) {
   b84de:	6863      	ldr	r3, [r4, #4]
   b84e0:	2b01      	cmp	r3, #1
   b84e2:	d101      	bne.n	b84e8 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x50>
            setSystemCallbacks();
   b84e4:	f7ff fe00 	bl	b80e8 <_ZN5spark10LogManager18setSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   b84e8:	a801      	add	r0, sp, #4
   b84ea:	f7ff fefa 	bl	b82e2 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   b84ee:	e7ec      	b.n	b84ca <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x32>

000b84f0 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b84f0:	b570      	push	{r4, r5, r6, lr}
   b84f2:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
   b84f4:	e9d0 0200 	ldrd	r0, r2, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b84f8:	460b      	mov	r3, r1
    T* const p = find(data_, data_ + size_, value);
   b84fa:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        for (; p != end; ++p) {
   b84fe:	4282      	cmp	r2, r0
   b8500:	d00f      	beq.n	b8522 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x32>
    move(p, p + 1, data_ + size_);
   b8502:	4601      	mov	r1, r0
            if (*p == value) {
   b8504:	681d      	ldr	r5, [r3, #0]
   b8506:	f851 6b04 	ldr.w	r6, [r1], #4
   b850a:	42ae      	cmp	r6, r5
   b850c:	d107      	bne.n	b851e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2e>
        ::memmove(dest, p, (end - p) * sizeof(T));
   b850e:	1a52      	subs	r2, r2, r1
   b8510:	f001 fa44 	bl	b999c <memmove>
    --size_;
   b8514:	6863      	ldr	r3, [r4, #4]
   b8516:	3b01      	subs	r3, #1
   b8518:	6063      	str	r3, [r4, #4]
    return true;
   b851a:	2001      	movs	r0, #1
}
   b851c:	bd70      	pop	{r4, r5, r6, pc}
    move(p, p + 1, data_ + size_);
   b851e:	4608      	mov	r0, r1
   b8520:	e7ed      	b.n	b84fe <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xe>
        return false;
   b8522:	2000      	movs	r0, #0
   b8524:	e7fa      	b.n	b851c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2c>

000b8526 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
void spark::LogManager::removeHandler(LogHandler *handler) {
   b8526:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    LOG_WITH_LOCK(mutex_) {
   b8528:	f100 0324 	add.w	r3, r0, #36	; 0x24
void spark::LogManager::removeHandler(LogHandler *handler) {
   b852c:	4604      	mov	r4, r0
   b852e:	6a40      	ldr	r0, [r0, #36]	; 0x24
   b8530:	9101      	str	r1, [sp, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b8532:	9303      	str	r3, [sp, #12]
      { _M_device.lock(); }
   b8534:	f7ff fc96 	bl	b7e64 <_ZN14RecursiveMutex4lockEv.isra.0>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   b8538:	a901      	add	r1, sp, #4
   b853a:	4620      	mov	r0, r4
   b853c:	f7ff ffd8 	bl	b84f0 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
   b8540:	b118      	cbz	r0, b854a <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
   b8542:	6863      	ldr	r3, [r4, #4]
   b8544:	b90b      	cbnz	r3, b854a <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
            resetSystemCallbacks();
   b8546:	f7ff fddb 	bl	b8100 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   b854a:	a803      	add	r0, sp, #12
   b854c:	f7ff fec9 	bl	b82e2 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   b8550:	b004      	add	sp, #16
   b8552:	bd10      	pop	{r4, pc}

000b8554 <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
void spark::LogManager::destroyFactoryHandlers() {
   b8554:	b570      	push	{r4, r5, r6, lr}
    return data_ + size_;
   b8556:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
   b855a:	2318      	movs	r3, #24
   b855c:	4604      	mov	r4, r0
   b855e:	fb03 5606 	mla	r6, r3, r6, r5
    for (const FactoryHandler &h: factoryHandlers_) {
   b8562:	42ae      	cmp	r6, r5
   b8564:	d015      	beq.n	b8592 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
   b8566:	f105 0110 	add.w	r1, r5, #16
   b856a:	4620      	mov	r0, r4
   b856c:	f7ff ffc0 	bl	b84f0 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
   b8570:	6863      	ldr	r3, [r4, #4]
   b8572:	b90b      	cbnz	r3, b8578 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
   b8574:	f7ff fdc4 	bl	b8100 <_ZN5spark10LogManager20resetSystemCallbacksEv>
        handlerFactory_->destroyHandler(h.handler);
   b8578:	69e0      	ldr	r0, [r4, #28]
   b857a:	6929      	ldr	r1, [r5, #16]
   b857c:	6803      	ldr	r3, [r0, #0]
   b857e:	68db      	ldr	r3, [r3, #12]
   b8580:	4798      	blx	r3
        if (h.stream) {
   b8582:	6969      	ldr	r1, [r5, #20]
   b8584:	b119      	cbz	r1, b858e <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
   b8586:	6a20      	ldr	r0, [r4, #32]
   b8588:	6803      	ldr	r3, [r0, #0]
   b858a:	68db      	ldr	r3, [r3, #12]
   b858c:	4798      	blx	r3
    for (const FactoryHandler &h: factoryHandlers_) {
   b858e:	3518      	adds	r5, #24
   b8590:	e7e7      	b.n	b8562 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    destruct(data_, data_ + size_);
   b8592:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   b8596:	2618      	movs	r6, #24
   b8598:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b859c:	42ae      	cmp	r6, r5
   b859e:	d004      	beq.n	b85aa <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
struct spark::LogManager::FactoryHandler {
   b85a0:	4628      	mov	r0, r5
   b85a2:	f000 fcdb 	bl	b8f5c <_ZN6StringD1Ev>
   b85a6:	3518      	adds	r5, #24
   b85a8:	e7f8      	b.n	b859c <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
    size_ = 0;
   b85aa:	2300      	movs	r3, #0
   b85ac:	6163      	str	r3, [r4, #20]
}
   b85ae:	bd70      	pop	{r4, r5, r6, pc}

000b85b0 <_ZN5spark10LogManagerD1Ev>:
spark::LogManager::~LogManager() {
   b85b0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b85b2:	4604      	mov	r4, r0
    resetSystemCallbacks();
   b85b4:	f7ff fda4 	bl	b8100 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   b85b8:	f104 0324 	add.w	r3, r4, #36	; 0x24
   b85bc:	6a60      	ldr	r0, [r4, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b85be:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   b85c0:	f7ff fc50 	bl	b7e64 <_ZN14RecursiveMutex4lockEv.isra.0>
         destroyFactoryHandlers();
   b85c4:	4620      	mov	r0, r4
   b85c6:	f7ff ffc5 	bl	b8554 <_ZN5spark10LogManager22destroyFactoryHandlersEv>
    LOG_WITH_LOCK(mutex_) {
   b85ca:	a801      	add	r0, sp, #4
   b85cc:	f7ff fe89 	bl	b82e2 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (handle_) {
   b85d0:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b85d2:	b108      	cbz	r0, b85d8 <_ZN5spark10LogManagerD1Ev+0x28>
            os_mutex_recursive_destroy(handle_);
   b85d4:	f7fe fb0c 	bl	b6bf0 <os_mutex_recursive_destroy>
    destruct(data_, data_ + size_);
   b85d8:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   b85dc:	2618      	movs	r6, #24
   b85de:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b85e2:	42ae      	cmp	r6, r5
   b85e4:	d004      	beq.n	b85f0 <_ZN5spark10LogManagerD1Ev+0x40>
struct spark::LogManager::FactoryHandler {
   b85e6:	4628      	mov	r0, r5
   b85e8:	f000 fcb8 	bl	b8f5c <_ZN6StringD1Ev>
   b85ec:	3518      	adds	r5, #24
   b85ee:	e7f8      	b.n	b85e2 <_ZN5spark10LogManagerD1Ev+0x32>
    ::free(ptr);
   b85f0:	6920      	ldr	r0, [r4, #16]
   b85f2:	f7fe fd41 	bl	b7078 <free>
   b85f6:	6820      	ldr	r0, [r4, #0]
   b85f8:	f7fe fd3e 	bl	b7078 <free>
}
   b85fc:	4620      	mov	r0, r4
   b85fe:	b002      	add	sp, #8
   b8600:	bd70      	pop	{r4, r5, r6, pc}
	...

000b8604 <__tcf_2>:
    static LogManager mgr;
   b8604:	4801      	ldr	r0, [pc, #4]	; (b860c <__tcf_2+0x8>)
   b8606:	f7ff bfd3 	b.w	b85b0 <_ZN5spark10LogManagerD1Ev>
   b860a:	bf00      	nop
   b860c:	2003e6b4 	.word	0x2003e6b4

000b8610 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        if (dest > p && dest < end) {
   b8610:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b8612:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b8614:	4604      	mov	r4, r0
   b8616:	460d      	mov	r5, r1
   b8618:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b861a:	d915      	bls.n	b8648 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x38>
   b861c:	4290      	cmp	r0, r2
   b861e:	d214      	bcs.n	b864a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
            --end;
   b8620:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   b8624:	1a75      	subs	r5, r6, r1
   b8626:	f1a1 0714 	sub.w	r7, r1, #20
   b862a:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b862c:	42b7      	cmp	r7, r6
   b862e:	d01a      	beq.n	b8666 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*end));
   b8630:	b11c      	cbz	r4, b863a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x2a>
   b8632:	4631      	mov	r1, r6
   b8634:	4620      	mov	r0, r4
   b8636:	f7ff fc78 	bl	b7f2a <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
struct spark::detail::LogFilter::Node {
   b863a:	f106 0008 	add.w	r0, r6, #8
   b863e:	f7ff fdf9 	bl	b8234 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
   b8642:	3e14      	subs	r6, #20
   b8644:	3c14      	subs	r4, #20
   b8646:	e7f1      	b.n	b862c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1c>
        } else if (dest != p) {
   b8648:	d00d      	beq.n	b8666 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
            for (; p != end; ++p, ++dest) {
   b864a:	42b5      	cmp	r5, r6
   b864c:	d00b      	beq.n	b8666 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*p));
   b864e:	b11c      	cbz	r4, b8658 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x48>
   b8650:	4629      	mov	r1, r5
   b8652:	4620      	mov	r0, r4
   b8654:	f7ff fc69 	bl	b7f2a <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
   b8658:	f105 0008 	add.w	r0, r5, #8
   b865c:	f7ff fdea 	bl	b8234 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; p != end; ++p, ++dest) {
   b8660:	3514      	adds	r5, #20
   b8662:	3414      	adds	r4, #20
   b8664:	e7f1      	b.n	b864a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
    }
   b8666:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b8668 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   b8668:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b866a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b866c:	4604      	mov	r4, r0
   b866e:	460d      	mov	r5, r1
   b8670:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b8672:	d914      	bls.n	b869e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
   b8674:	4290      	cmp	r0, r2
   b8676:	d213      	bcs.n	b86a0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            --end;
   b8678:	f1a2 0610 	sub.w	r6, r2, #16
            dest += end - p - 1;
   b867c:	1a75      	subs	r5, r6, r1
   b867e:	f1a1 0710 	sub.w	r7, r1, #16
   b8682:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b8684:	42b7      	cmp	r7, r6
   b8686:	d018      	beq.n	b86ba <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
   b8688:	b11c      	cbz	r4, b8692 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
   b868a:	4631      	mov	r1, r6
   b868c:	4620      	mov	r0, r4
   b868e:	f000 fce2 	bl	b9056 <_ZN6StringC1EOS_>
                end->~T();
   b8692:	4630      	mov	r0, r6
   b8694:	f000 fc62 	bl	b8f5c <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   b8698:	3e10      	subs	r6, #16
   b869a:	3c10      	subs	r4, #16
   b869c:	e7f2      	b.n	b8684 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   b869e:	d00c      	beq.n	b86ba <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
   b86a0:	42b5      	cmp	r5, r6
   b86a2:	d00a      	beq.n	b86ba <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
   b86a4:	b11c      	cbz	r4, b86ae <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
   b86a6:	4629      	mov	r1, r5
   b86a8:	4620      	mov	r0, r4
   b86aa:	f000 fcd4 	bl	b9056 <_ZN6StringC1EOS_>
                p->~T();
   b86ae:	4628      	mov	r0, r5
   b86b0:	f000 fc54 	bl	b8f5c <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   b86b4:	3510      	adds	r5, #16
   b86b6:	3410      	adds	r4, #16
   b86b8:	e7f2      	b.n	b86a0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
    }
   b86ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b86bc <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
   b86bc:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b86be:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b86c0:	4605      	mov	r5, r0
        if (n > 0) {
   b86c2:	dd11      	ble.n	b86e8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2c>
    return ::malloc(size);
   b86c4:	0130      	lsls	r0, r6, #4
   b86c6:	f7fe fccf 	bl	b7068 <malloc>
            if (!d) {
   b86ca:	4604      	mov	r4, r0
   b86cc:	b158      	cbz	r0, b86e6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b86ce:	e9d5 1200 	ldrd	r1, r2, [r5]
   b86d2:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   b86d6:	f7ff ffc7 	bl	b8668 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   b86da:	6828      	ldr	r0, [r5, #0]
   b86dc:	f7fe fccc 	bl	b7078 <free>
        data_ = d;
   b86e0:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b86e2:	60ae      	str	r6, [r5, #8]
        return true;
   b86e4:	2001      	movs	r0, #1
    }
   b86e6:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b86e8:	2400      	movs	r4, #0
   b86ea:	e7f6      	b.n	b86da <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x1e>

000b86ec <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   b86ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b86f0:	4690      	mov	r8, r2
   b86f2:	b095      	sub	sp, #84	; 0x54
        capacity_(0) {
   b86f4:	2300      	movs	r3, #0
   b86f6:	9103      	str	r1, [sp, #12]
    return size_;
   b86f8:	f8d8 1004 	ldr.w	r1, [r8, #4]
        capacity_(0) {
   b86fc:	930a      	str	r3, [sp, #40]	; 0x28
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   b86fe:	2246      	movs	r2, #70	; 0x46
    if (n > capacity_ && !realloc(n)) {
   b8700:	4299      	cmp	r1, r3
        capacity_(0) {
   b8702:	e9c0 3300 	strd	r3, r3, [r0]
   b8706:	e9c0 3302 	strd	r3, r3, [r0, #8]
   b870a:	e9c0 3304 	strd	r3, r3, [r0, #16]
   b870e:	e9cd 3308 	strd	r3, r3, [sp, #32]
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   b8712:	4604      	mov	r4, r0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   b8714:	7602      	strb	r2, [r0, #24]
    if (n > capacity_ && !realloc(n)) {
   b8716:	dc23      	bgt.n	b8760 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_ + size_;
   b8718:	e9d8 5700 	ldrd	r5, r7, [r8]
   b871c:	2314      	movs	r3, #20
   b871e:	fb03 5707 	mla	r7, r3, r7, r5
    for (LogCategoryFilter &filter: filters) {
   b8722:	42af      	cmp	r7, r5
   b8724:	d03b      	beq.n	b879e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xb2>
        cats.append(std::move(filter.cat_));
   b8726:	4629      	mov	r1, r5
   b8728:	a80b      	add	r0, sp, #44	; 0x2c
   b872a:	f000 fc94 	bl	b9056 <_ZN6StringC1EOS_>
    return insert(size_, std::move(value));
   b872e:	a90b      	add	r1, sp, #44	; 0x2c
   b8730:	a80f      	add	r0, sp, #60	; 0x3c
   b8732:	9e09      	ldr	r6, [sp, #36]	; 0x24
   b8734:	f000 fc8f 	bl	b9056 <_ZN6StringC1EOS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b8738:	e9dd 1309 	ldrd	r1, r3, [sp, #36]	; 0x24
   b873c:	4299      	cmp	r1, r3
   b873e:	da1b      	bge.n	b8778 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x8c>
    T* const p = data_ + i;
   b8740:	9b08      	ldr	r3, [sp, #32]
    move(p + 1, p, data_ + size_);
   b8742:	9a09      	ldr	r2, [sp, #36]	; 0x24
    T* const p = data_ + i;
   b8744:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
   b8748:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   b874c:	4631      	mov	r1, r6
   b874e:	f106 0010 	add.w	r0, r6, #16
   b8752:	f7ff ff89 	bl	b8668 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
   b8756:	b9ee      	cbnz	r6, b8794 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa8>
    ++size_;
   b8758:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b875a:	3301      	adds	r3, #1
   b875c:	9309      	str	r3, [sp, #36]	; 0x24
    return true;
   b875e:	e011      	b.n	b8784 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x98>
    if (n > capacity_ && !realloc(n)) {
   b8760:	a808      	add	r0, sp, #32
   b8762:	f7ff ffab 	bl	b86bc <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   b8766:	2800      	cmp	r0, #0
   b8768:	d1d6      	bne.n	b8718 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>
        return;
   b876a:	a808      	add	r0, sp, #32
   b876c:	f7fe fd10 	bl	b7190 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   b8770:	4620      	mov	r0, r4
   b8772:	b015      	add	sp, #84	; 0x54
   b8774:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b8778:	3101      	adds	r1, #1
   b877a:	a808      	add	r0, sp, #32
   b877c:	f7ff ff9e 	bl	b86bc <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   b8780:	2800      	cmp	r0, #0
   b8782:	d1dd      	bne.n	b8740 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x54>
    return insert(size_, std::move(value));
   b8784:	a80f      	add	r0, sp, #60	; 0x3c
   b8786:	f000 fbe9 	bl	b8f5c <_ZN6StringD1Ev>
        cats.append(std::move(filter.cat_));
   b878a:	a80b      	add	r0, sp, #44	; 0x2c
   b878c:	f000 fbe6 	bl	b8f5c <_ZN6StringD1Ev>
    for (LogCategoryFilter &filter: filters) {
   b8790:	3514      	adds	r5, #20
   b8792:	e7c6      	b.n	b8722 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x36>
    new(p) T(std::move(value));
   b8794:	a90f      	add	r1, sp, #60	; 0x3c
   b8796:	4630      	mov	r0, r6
   b8798:	f000 fc5d 	bl	b9056 <_ZN6StringC1EOS_>
   b879c:	e7dc      	b.n	b8758 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x6c>
        capacity_(0) {
   b879e:	2600      	movs	r6, #0
   b87a0:	e9cd 660b 	strd	r6, r6, [sp, #44]	; 0x2c
   b87a4:	960d      	str	r6, [sp, #52]	; 0x34
    for (int i = 0; i < cats.size(); ++i) {
   b87a6:	f04f 0914 	mov.w	r9, #20
    return data_[i];
   b87aa:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   b87ae:	429e      	cmp	r6, r3
   b87b0:	da7c      	bge.n	b88ac <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1c0>
    char operator [] (unsigned int index) const;
    char& operator [] (unsigned int index);
    void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
    void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
        {getBytes((unsigned char *)buf, bufsize, index);}
    const char * c_str() const { return buffer; }
   b87b2:	0133      	lsls	r3, r6, #4
   b87b4:	58d3      	ldr	r3, [r2, r3]
        const char *category = cats.at(i).c_str();
   b87b6:	9306      	str	r3, [sp, #24]
        if (!category) {
   b87b8:	b90b      	cbnz	r3, b87be <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd2>
    for (int i = 0; i < cats.size(); ++i) {
   b87ba:	3601      	adds	r6, #1
   b87bc:	e7f5      	b.n	b87aa <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xbe>
        size_t size = 0; // Name length
   b87be:	2300      	movs	r3, #0
   b87c0:	9307      	str	r3, [sp, #28]
   b87c2:	fb09 f306 	mul.w	r3, r9, r6
   b87c6:	9302      	str	r3, [sp, #8]
        Vector<Node> *pNodes = &nodes; // Root nodes
   b87c8:	ad0b      	add	r5, sp, #44	; 0x2c
        while ((name = nextSubcategoryName(category, size))) {
   b87ca:	a907      	add	r1, sp, #28
   b87cc:	a806      	add	r0, sp, #24
   b87ce:	f7ff fb22 	bl	b7e16 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   b87d2:	4682      	mov	sl, r0
   b87d4:	2800      	cmp	r0, #0
   b87d6:	d0f0      	beq.n	b87ba <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xce>
            bool found = false;
   b87d8:	f04f 0300 	mov.w	r3, #0
   b87dc:	f88d 3017 	strb.w	r3, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
   b87e0:	4601      	mov	r1, r0
   b87e2:	9a07      	ldr	r2, [sp, #28]
   b87e4:	f10d 0317 	add.w	r3, sp, #23
   b87e8:	4628      	mov	r0, r5
   b87ea:	f7ff fbb1 	bl	b7f50 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   b87ee:	f89d 7017 	ldrb.w	r7, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
   b87f2:	9001      	str	r0, [sp, #4]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   b87f4:	2f00      	cmp	r7, #0
   b87f6:	d14a      	bne.n	b888e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
   b87f8:	f8bd 301c 	ldrh.w	r3, [sp, #28]
            level(-1) {
   b87fc:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
        capacity_(0) {
   b8800:	e9cd 7711 	strd	r7, r7, [sp, #68]	; 0x44
   b8804:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b8808:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
   b880c:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
   b8810:	9713      	str	r7, [sp, #76]	; 0x4c
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b8812:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
   b8816:	4293      	cmp	r3, r2
   b8818:	db17      	blt.n	b884a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x15e>
   b881a:	f103 0a01 	add.w	sl, r3, #1
        if (n > 0) {
   b881e:	f1ba 0f00 	cmp.w	sl, #0
   b8822:	dd30      	ble.n	b8886 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19a>
    return ::malloc(size);
   b8824:	fb09 f00a 	mul.w	r0, r9, sl
   b8828:	f7fe fc1e 	bl	b7068 <malloc>
            if (!d) {
   b882c:	4683      	mov	fp, r0
   b882e:	b360      	cbz	r0, b888a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19e>
            move(d, data_, data_ + size_);
   b8830:	e9d5 1200 	ldrd	r1, r2, [r5]
   b8834:	fb09 1202 	mla	r2, r9, r2, r1
   b8838:	f7ff feea 	bl	b8610 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    ::free(ptr);
   b883c:	6828      	ldr	r0, [r5, #0]
   b883e:	f7fe fc1b 	bl	b7078 <free>
        data_ = d;
   b8842:	f8c5 b000 	str.w	fp, [r5]
        capacity_ = n;
   b8846:	f8c5 a008 	str.w	sl, [r5, #8]
    T* const p = data_ + i;
   b884a:	682b      	ldr	r3, [r5, #0]
   b884c:	9a01      	ldr	r2, [sp, #4]
   b884e:	fb09 3a02 	mla	sl, r9, r2, r3
    move(p + 1, p, data_ + size_);
   b8852:	686a      	ldr	r2, [r5, #4]
   b8854:	4651      	mov	r1, sl
   b8856:	fb09 3202 	mla	r2, r9, r2, r3
   b885a:	f10a 0014 	add.w	r0, sl, #20
   b885e:	f7ff fed7 	bl	b8610 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
   b8862:	f1ba 0f00 	cmp.w	sl, #0
   b8866:	d003      	beq.n	b8870 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x184>
   b8868:	a90f      	add	r1, sp, #60	; 0x3c
   b886a:	4650      	mov	r0, sl
   b886c:	f7ff fb5d 	bl	b7f2a <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
    ++size_;
   b8870:	686b      	ldr	r3, [r5, #4]
   b8872:	3301      	adds	r3, #1
   b8874:	606b      	str	r3, [r5, #4]
struct spark::detail::LogFilter::Node {
   b8876:	a811      	add	r0, sp, #68	; 0x44
   b8878:	f7ff fcdc 	bl	b8234 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   b887c:	b13f      	cbz	r7, b888e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
    Vector<Node> nodes;
   b887e:	a80b      	add	r0, sp, #44	; 0x2c
   b8880:	f7ff fcd8 	bl	b8234 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   b8884:	e771      	b.n	b876a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x7e>
        T* d = nullptr;
   b8886:	46bb      	mov	fp, r7
   b8888:	e7d8      	b.n	b883c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x150>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   b888a:	2701      	movs	r7, #1
   b888c:	e7f3      	b.n	b8876 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x18a>
    return data_[i];
   b888e:	9b01      	ldr	r3, [sp, #4]
   b8890:	682d      	ldr	r5, [r5, #0]
   b8892:	fb09 5503 	mla	r5, r9, r3, r5
            if (!*category) { // Check if it's last subcategory
   b8896:	9b06      	ldr	r3, [sp, #24]
   b8898:	781b      	ldrb	r3, [r3, #0]
   b889a:	b92b      	cbnz	r3, b88a8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>
                node.level = filters.at(i).level_;
   b889c:	f8d8 3000 	ldr.w	r3, [r8]
   b88a0:	9a02      	ldr	r2, [sp, #8]
   b88a2:	4413      	add	r3, r2
   b88a4:	7c1b      	ldrb	r3, [r3, #16]
   b88a6:	80eb      	strh	r3, [r5, #6]
            pNodes = &node.nodes;
   b88a8:	3508      	adds	r5, #8
        while ((name = nextSubcategoryName(category, size))) {
   b88aa:	e78e      	b.n	b87ca <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xde>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b88ac:	6821      	ldr	r1, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   b88ae:	6022      	str	r2, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b88b0:	6862      	ldr	r2, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
   b88b2:	6063      	str	r3, [r4, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b88b4:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b88b6:	9209      	str	r2, [sp, #36]	; 0x24
      __a = _GLIBCXX_MOVE(__b);
   b88b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
      __b = _GLIBCXX_MOVE(__tmp);
   b88ba:	930a      	str	r3, [sp, #40]	; 0x28
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b88bc:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   b88be:	60a2      	str	r2, [r4, #8]
   b88c0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
      __b = _GLIBCXX_MOVE(__tmp);
   b88c2:	930b      	str	r3, [sp, #44]	; 0x2c
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b88c4:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   b88c6:	60e2      	str	r2, [r4, #12]
   b88c8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
   b88ca:	930c      	str	r3, [sp, #48]	; 0x30
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b88cc:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
   b88ce:	6122      	str	r2, [r4, #16]
   b88d0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
   b88d2:	930d      	str	r3, [sp, #52]	; 0x34
    level_ = level;
   b88d4:	9b03      	ldr	r3, [sp, #12]
   b88d6:	9108      	str	r1, [sp, #32]
      __a = _GLIBCXX_MOVE(__b);
   b88d8:	6162      	str	r2, [r4, #20]
   b88da:	7623      	strb	r3, [r4, #24]
   b88dc:	e7cf      	b.n	b887e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x192>
	...

000b88e0 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
   b88e0:	b5f0      	push	{r4, r5, r6, r7, lr}
   b88e2:	4604      	mov	r4, r0
   b88e4:	b087      	sub	sp, #28
   b88e6:	460d      	mov	r5, r1
        filter_(level, filters) {
   b88e8:	4626      	mov	r6, r4
        stream_(&stream) {
   b88ea:	4619      	mov	r1, r3
   b88ec:	4668      	mov	r0, sp
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
   b88ee:	4617      	mov	r7, r2
        stream_(&stream) {
   b88f0:	f7fb ff47 	bl	b4782 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   b88f4:	4b0b      	ldr	r3, [pc, #44]	; (b8924 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x44>)
   b88f6:	f846 3b04 	str.w	r3, [r6], #4
   b88fa:	4669      	mov	r1, sp
   b88fc:	a803      	add	r0, sp, #12
   b88fe:	f7fb ff40 	bl	b4782 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b8902:	aa03      	add	r2, sp, #12
   b8904:	4639      	mov	r1, r7
   b8906:	4630      	mov	r0, r6
   b8908:	f7ff fef0 	bl	b86ec <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b890c:	a803      	add	r0, sp, #12
   b890e:	f7fb fdbb 	bl	b4488 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   b8912:	4668      	mov	r0, sp
   b8914:	f7fb fdb8 	bl	b4488 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b8918:	4b03      	ldr	r3, [pc, #12]	; (b8928 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x48>)
   b891a:	6023      	str	r3, [r4, #0]
}
   b891c:	4620      	mov	r0, r4
        stream_(&stream) {
   b891e:	6225      	str	r5, [r4, #32]
}
   b8920:	b007      	add	sp, #28
   b8922:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b8924:	000ba9d0 	.word	0x000ba9d0
   b8928:	000bae68 	.word	0x000bae68

000b892c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:
            Print *stream, const JSONValue &params) {
   b892c:	b5f0      	push	{r4, r5, r6, r7, lr}
   b892e:	460f      	mov	r7, r1
   b8930:	b085      	sub	sp, #20
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   b8932:	491d      	ldr	r1, [pc, #116]	; (b89a8 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x7c>)
            Print *stream, const JSONValue &params) {
   b8934:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   b8936:	4638      	mov	r0, r7
            Print *stream, const JSONValue &params) {
   b8938:	4616      	mov	r6, r2
   b893a:	461d      	mov	r5, r3
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   b893c:	f001 f8d3 	bl	b9ae6 <strcmp>
   b8940:	b9c0      	cbnz	r0, b8974 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x48>
        if (!stream) {
   b8942:	b1a4      	cbz	r4, b896e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
   b8944:	4629      	mov	r1, r5
   b8946:	a801      	add	r0, sp, #4
   b8948:	f7ff fcbc 	bl	b82c4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   b894c:	4917      	ldr	r1, [pc, #92]	; (b89ac <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
   b894e:	2024      	movs	r0, #36	; 0x24
   b8950:	f000 fe44 	bl	b95dc <_ZnwjRKSt9nothrow_t>
   b8954:	4605      	mov	r5, r0
   b8956:	b130      	cbz	r0, b8966 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
    using StreamLogHandler::StreamLogHandler;
   b8958:	ab01      	add	r3, sp, #4
   b895a:	4632      	mov	r2, r6
   b895c:	4621      	mov	r1, r4
   b895e:	f7ff ffbf 	bl	b88e0 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b8962:	4b13      	ldr	r3, [pc, #76]	; (b89b0 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x84>)
   b8964:	602b      	str	r3, [r5, #0]
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   b8966:	a801      	add	r0, sp, #4
   b8968:	f7fb fd8e 	bl	b4488 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b896c:	462c      	mov	r4, r5
}
   b896e:	4620      	mov	r0, r4
   b8970:	b005      	add	sp, #20
   b8972:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (strcmp(type, "StreamLogHandler") == 0) {
   b8974:	490f      	ldr	r1, [pc, #60]	; (b89b4 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x88>)
   b8976:	4638      	mov	r0, r7
   b8978:	f001 f8b5 	bl	b9ae6 <strcmp>
   b897c:	b990      	cbnz	r0, b89a4 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x78>
        if (!stream) {
   b897e:	2c00      	cmp	r4, #0
   b8980:	d0f5      	beq.n	b896e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   b8982:	4629      	mov	r1, r5
   b8984:	a801      	add	r0, sp, #4
   b8986:	f7ff fc9d 	bl	b82c4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   b898a:	4908      	ldr	r1, [pc, #32]	; (b89ac <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
   b898c:	2024      	movs	r0, #36	; 0x24
   b898e:	f000 fe25 	bl	b95dc <_ZnwjRKSt9nothrow_t>
   b8992:	4605      	mov	r5, r0
   b8994:	2800      	cmp	r0, #0
   b8996:	d0e6      	beq.n	b8966 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
   b8998:	ab01      	add	r3, sp, #4
   b899a:	4632      	mov	r2, r6
   b899c:	4621      	mov	r1, r4
   b899e:	f7ff ff9f 	bl	b88e0 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b89a2:	e7e0      	b.n	b8966 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
            return nullptr; // Output stream is not specified
   b89a4:	2400      	movs	r4, #0
   b89a6:	e7e2      	b.n	b896e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
   b89a8:	000bade9 	.word	0x000bade9
   b89ac:	000baf78 	.word	0x000baf78
   b89b0:	000bae80 	.word	0x000bae80
   b89b4:	000baded 	.word	0x000baded

000b89b8 <_GLOBAL__sub_I__ZN5spark3LogE>:
        name_(name) {
   b89b8:	4b01      	ldr	r3, [pc, #4]	; (b89c0 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b89ba:	4a02      	ldr	r2, [pc, #8]	; (b89c4 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b89bc:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b89be:	4770      	bx	lr
   b89c0:	2003e6b0 	.word	0x2003e6b0
   b89c4:	000badfe 	.word	0x000badfe

000b89c8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   b89c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b89cc:	9d08      	ldr	r5, [sp, #32]
    if (stream_ == &Serial && Network.listening()) {
   b89ce:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   b89d2:	4604      	mov	r4, r0
   b89d4:	460e      	mov	r6, r1
   b89d6:	4617      	mov	r7, r2
   b89d8:	4698      	mov	r8, r3
    if (stream_ == &Serial && Network.listening()) {
   b89da:	f000 fcbd 	bl	b9358 <_Z16_fetch_usbserialv>
   b89de:	4581      	cmp	r9, r0
   b89e0:	d04c      	beq.n	b8a7c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb4>
    if (attr.has_time) {
   b89e2:	792b      	ldrb	r3, [r5, #4]
   b89e4:	0719      	lsls	r1, r3, #28
   b89e6:	d504      	bpl.n	b89f2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x2a>
        printf("%010u ", (unsigned)attr.time);
   b89e8:	696a      	ldr	r2, [r5, #20]
   b89ea:	4954      	ldr	r1, [pc, #336]	; (b8b3c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x174>)
   b89ec:	4620      	mov	r0, r4
   b89ee:	f7ff fa8d 	bl	b7f0c <_ZN5spark16StreamLogHandler6printfEPKcz>
    if (category) {
   b89f2:	f1b8 0f00 	cmp.w	r8, #0
   b89f6:	d00d      	beq.n	b8a14 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x4c>
        write('[');
   b89f8:	215b      	movs	r1, #91	; 0x5b
   b89fa:	4620      	mov	r0, r4
   b89fc:	f7ff fa7a 	bl	b7ef4 <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
   b8a00:	4641      	mov	r1, r8
   b8a02:	4620      	mov	r0, r4
   b8a04:	f7ff fa67 	bl	b7ed6 <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
   b8a08:	6823      	ldr	r3, [r4, #0]
   b8a0a:	494d      	ldr	r1, [pc, #308]	; (b8b40 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
   b8a0c:	68db      	ldr	r3, [r3, #12]
   b8a0e:	2202      	movs	r2, #2
   b8a10:	4620      	mov	r0, r4
   b8a12:	4798      	blx	r3
    if (attr.has_file) {
   b8a14:	792b      	ldrb	r3, [r5, #4]
   b8a16:	07da      	lsls	r2, r3, #31
   b8a18:	d523      	bpl.n	b8a62 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9a>
        s = extractFileName(attr.file); // Strip directory path
   b8a1a:	f8d5 8008 	ldr.w	r8, [r5, #8]
    const char *s1 = strrchr(s, '/');
   b8a1e:	212f      	movs	r1, #47	; 0x2f
   b8a20:	4640      	mov	r0, r8
   b8a22:	f001 f8ac 	bl	b9b7e <strrchr>
    if (s1) {
   b8a26:	b108      	cbz	r0, b8a2c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x64>
        return s1 + 1;
   b8a28:	f100 0801 	add.w	r8, r0, #1
        write(s); // File name
   b8a2c:	4641      	mov	r1, r8
   b8a2e:	4620      	mov	r0, r4
   b8a30:	f7ff fa51 	bl	b7ed6 <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
   b8a34:	792b      	ldrb	r3, [r5, #4]
   b8a36:	079b      	lsls	r3, r3, #30
   b8a38:	d508      	bpl.n	b8a4c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x84>
            write(':');
   b8a3a:	213a      	movs	r1, #58	; 0x3a
   b8a3c:	4620      	mov	r0, r4
   b8a3e:	f7ff fa59 	bl	b7ef4 <_ZN5spark16StreamLogHandler5writeEc>
            printf("%d", (int)attr.line); // Line number
   b8a42:	68ea      	ldr	r2, [r5, #12]
   b8a44:	493f      	ldr	r1, [pc, #252]	; (b8b44 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17c>)
   b8a46:	4620      	mov	r0, r4
   b8a48:	f7ff fa60 	bl	b7f0c <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_function) {
   b8a4c:	792a      	ldrb	r2, [r5, #4]
            write(", ", 2);
   b8a4e:	6823      	ldr	r3, [r4, #0]
        if (attr.has_function) {
   b8a50:	f012 0f04 	tst.w	r2, #4
            write(", ", 2);
   b8a54:	68db      	ldr	r3, [r3, #12]
   b8a56:	bf14      	ite	ne
   b8a58:	493b      	ldrne	r1, [pc, #236]	; (b8b48 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
            write(": ", 2);
   b8a5a:	493c      	ldreq	r1, [pc, #240]	; (b8b4c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
            write(", ", 2);
   b8a5c:	2202      	movs	r2, #2
            write(": ", 2);
   b8a5e:	4620      	mov	r0, r4
   b8a60:	4798      	blx	r3
    if (attr.has_function) {
   b8a62:	792b      	ldrb	r3, [r5, #4]
   b8a64:	0758      	lsls	r0, r3, #29
   b8a66:	d51d      	bpl.n	b8aa4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xdc>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   b8a68:	6929      	ldr	r1, [r5, #16]
const char* extractFuncName(const char *s, size_t *size) {
   b8a6a:	460b      	mov	r3, r1
   b8a6c:	461a      	mov	r2, r3
    for (; *s; ++s) {
   b8a6e:	f813 0b01 	ldrb.w	r0, [r3], #1
   b8a72:	b160      	cbz	r0, b8a8e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc6>
        if (*s == ' ') {
   b8a74:	2820      	cmp	r0, #32
   b8a76:	d108      	bne.n	b8a8a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc2>
            s1 = s + 1; // Skip return type
   b8a78:	4619      	mov	r1, r3
   b8a7a:	e7f7      	b.n	b8a6c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
    if (stream_ == &Serial && Network.listening()) {
   b8a7c:	4834      	ldr	r0, [pc, #208]	; (b8b50 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
   b8a7e:	f000 f966 	bl	b8d4e <_ZN5spark12NetworkClass9listeningEv>
   b8a82:	2800      	cmp	r0, #0
   b8a84:	d0ad      	beq.n	b89e2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a>
}
   b8a86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        } else if (*s == '(') {
   b8a8a:	2828      	cmp	r0, #40	; 0x28
   b8a8c:	d1ee      	bne.n	b8a6c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
        write(s, n);
   b8a8e:	6823      	ldr	r3, [r4, #0]
   b8a90:	1a52      	subs	r2, r2, r1
   b8a92:	68db      	ldr	r3, [r3, #12]
   b8a94:	4620      	mov	r0, r4
   b8a96:	4798      	blx	r3
        write("(): ", 4);
   b8a98:	6823      	ldr	r3, [r4, #0]
   b8a9a:	492e      	ldr	r1, [pc, #184]	; (b8b54 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
   b8a9c:	68db      	ldr	r3, [r3, #12]
   b8a9e:	2204      	movs	r2, #4
   b8aa0:	4620      	mov	r0, r4
   b8aa2:	4798      	blx	r3
    return log_level_name(level, nullptr);
   b8aa4:	2100      	movs	r1, #0
   b8aa6:	4638      	mov	r0, r7
   b8aa8:	f7fe fa02 	bl	b6eb0 <log_level_name>
   b8aac:	4601      	mov	r1, r0
    write(s);
   b8aae:	4620      	mov	r0, r4
   b8ab0:	f7ff fa11 	bl	b7ed6 <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
   b8ab4:	6823      	ldr	r3, [r4, #0]
   b8ab6:	4925      	ldr	r1, [pc, #148]	; (b8b4c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
   b8ab8:	68db      	ldr	r3, [r3, #12]
   b8aba:	2202      	movs	r2, #2
   b8abc:	4620      	mov	r0, r4
   b8abe:	4798      	blx	r3
    if (msg) {
   b8ac0:	b11e      	cbz	r6, b8aca <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x102>
        write(msg);
   b8ac2:	4631      	mov	r1, r6
   b8ac4:	4620      	mov	r0, r4
   b8ac6:	f7ff fa06 	bl	b7ed6 <_ZN5spark16StreamLogHandler5writeEPKc>
    if (attr.has_code || attr.has_details) {
   b8aca:	792b      	ldrb	r3, [r5, #4]
   b8acc:	f013 0f30 	tst.w	r3, #48	; 0x30
   b8ad0:	d02c      	beq.n	b8b2c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>
        write(" [", 2);
   b8ad2:	6823      	ldr	r3, [r4, #0]
   b8ad4:	4920      	ldr	r1, [pc, #128]	; (b8b58 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
   b8ad6:	68db      	ldr	r3, [r3, #12]
   b8ad8:	2202      	movs	r2, #2
   b8ada:	4620      	mov	r0, r4
   b8adc:	4798      	blx	r3
        if (attr.has_code) {
   b8ade:	792b      	ldrb	r3, [r5, #4]
   b8ae0:	06d9      	lsls	r1, r3, #27
   b8ae2:	d50a      	bpl.n	b8afa <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x132>
            write("code = ", 7);
   b8ae4:	6823      	ldr	r3, [r4, #0]
   b8ae6:	491d      	ldr	r1, [pc, #116]	; (b8b5c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
   b8ae8:	68db      	ldr	r3, [r3, #12]
   b8aea:	2207      	movs	r2, #7
   b8aec:	4620      	mov	r0, r4
   b8aee:	4798      	blx	r3
            printf("%" PRIiPTR, (intptr_t)attr.code);
   b8af0:	69aa      	ldr	r2, [r5, #24]
   b8af2:	491b      	ldr	r1, [pc, #108]	; (b8b60 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
   b8af4:	4620      	mov	r0, r4
   b8af6:	f7ff fa09 	bl	b7f0c <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_details) {
   b8afa:	792b      	ldrb	r3, [r5, #4]
   b8afc:	069a      	lsls	r2, r3, #26
   b8afe:	d511      	bpl.n	b8b24 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>
            if (attr.has_code) {
   b8b00:	06db      	lsls	r3, r3, #27
   b8b02:	d505      	bpl.n	b8b10 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>
                write(", ", 2);
   b8b04:	6823      	ldr	r3, [r4, #0]
   b8b06:	4910      	ldr	r1, [pc, #64]	; (b8b48 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
   b8b08:	68db      	ldr	r3, [r3, #12]
   b8b0a:	2202      	movs	r2, #2
   b8b0c:	4620      	mov	r0, r4
   b8b0e:	4798      	blx	r3
            write("details = ", 10);
   b8b10:	6823      	ldr	r3, [r4, #0]
   b8b12:	4914      	ldr	r1, [pc, #80]	; (b8b64 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
   b8b14:	68db      	ldr	r3, [r3, #12]
   b8b16:	4620      	mov	r0, r4
   b8b18:	220a      	movs	r2, #10
   b8b1a:	4798      	blx	r3
            write(attr.details);
   b8b1c:	69e9      	ldr	r1, [r5, #28]
   b8b1e:	4620      	mov	r0, r4
   b8b20:	f7ff f9d9 	bl	b7ed6 <_ZN5spark16StreamLogHandler5writeEPKc>
        write(']');
   b8b24:	215d      	movs	r1, #93	; 0x5d
   b8b26:	4620      	mov	r0, r4
   b8b28:	f7ff f9e4 	bl	b7ef4 <_ZN5spark16StreamLogHandler5writeEc>
    write("\r\n", 2);
   b8b2c:	6823      	ldr	r3, [r4, #0]
   b8b2e:	490e      	ldr	r1, [pc, #56]	; (b8b68 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
   b8b30:	68db      	ldr	r3, [r3, #12]
   b8b32:	4620      	mov	r0, r4
   b8b34:	2202      	movs	r2, #2
}
   b8b36:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    write("\r\n", 2);
   b8b3a:	4718      	bx	r3
   b8b3c:	000bae02 	.word	0x000bae02
   b8b40:	000bae09 	.word	0x000bae09
   b8b44:	000ba8f1 	.word	0x000ba8f1
   b8b48:	000bae0c 	.word	0x000bae0c
   b8b4c:	000bae11 	.word	0x000bae11
   b8b50:	2003e6dc 	.word	0x2003e6dc
   b8b54:	000bae0f 	.word	0x000bae0f
   b8b58:	000bae14 	.word	0x000bae14
   b8b5c:	000bae17 	.word	0x000bae17
   b8b60:	000bae1f 	.word	0x000bae1f
   b8b64:	000bae22 	.word	0x000bae22
   b8b68:	000bae2d 	.word	0x000bae2d

000b8b6c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   b8b6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b8b70:	b085      	sub	sp, #20
    return stream_;
   b8b72:	f8d0 9020 	ldr.w	r9, [r0, #32]
   b8b76:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   b8b78:	4605      	mov	r5, r0
   b8b7a:	460f      	mov	r7, r1
   b8b7c:	4690      	mov	r8, r2
   b8b7e:	461e      	mov	r6, r3
    if (this->stream() == &Serial && Network.listening()) {
   b8b80:	f000 fbea 	bl	b9358 <_Z16_fetch_usbserialv>
   b8b84:	4581      	cmp	r9, r0
   b8b86:	d105      	bne.n	b8b94 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
   b8b88:	4849      	ldr	r0, [pc, #292]	; (b8cb0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x144>)
   b8b8a:	f000 f8e0 	bl	b8d4e <_ZN5spark12NetworkClass9listeningEv>
   b8b8e:	2800      	cmp	r0, #0
   b8b90:	f040 808a 	bne.w	b8ca8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
   b8b94:	6a2b      	ldr	r3, [r5, #32]
        strm_(stream) {
   b8b96:	4a47      	ldr	r2, [pc, #284]	; (b8cb4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
   b8b98:	9201      	str	r2, [sp, #4]
        state_(BEGIN) {
   b8b9a:	f04f 0900 	mov.w	r9, #0
    json.beginObject();
   b8b9e:	a801      	add	r0, sp, #4
        strm_(stream) {
   b8ba0:	9303      	str	r3, [sp, #12]
        state_(BEGIN) {
   b8ba2:	f88d 9008 	strb.w	r9, [sp, #8]
   b8ba6:	f7ff f878 	bl	b7c9a <_ZN5spark10JSONWriter11beginObjectEv>
    return log_level_name(level, nullptr);
   b8baa:	4649      	mov	r1, r9
   b8bac:	4640      	mov	r0, r8
   b8bae:	f7fe f97f 	bl	b6eb0 <log_level_name>
    json.name("l", 1).value(s);
   b8bb2:	4941      	ldr	r1, [pc, #260]	; (b8cb8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
   b8bb4:	4680      	mov	r8, r0
   b8bb6:	2201      	movs	r2, #1
   b8bb8:	a801      	add	r0, sp, #4
   b8bba:	f7ff f8fd 	bl	b7db8 <_ZN5spark10JSONWriter4nameEPKcj>
   b8bbe:	4641      	mov	r1, r8
   b8bc0:	f7ff f97b 	bl	b7eba <_ZN5spark10JSONWriter5valueEPKc>
    if (msg) {
   b8bc4:	b13f      	cbz	r7, b8bd6 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
   b8bc6:	493d      	ldr	r1, [pc, #244]	; (b8cbc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
   b8bc8:	2201      	movs	r2, #1
   b8bca:	a801      	add	r0, sp, #4
   b8bcc:	f7ff f8f4 	bl	b7db8 <_ZN5spark10JSONWriter4nameEPKcj>
   b8bd0:	4639      	mov	r1, r7
   b8bd2:	f7ff f972 	bl	b7eba <_ZN5spark10JSONWriter5valueEPKc>
    if (category) {
   b8bd6:	b13e      	cbz	r6, b8be8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
   b8bd8:	4939      	ldr	r1, [pc, #228]	; (b8cc0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
   b8bda:	2201      	movs	r2, #1
   b8bdc:	a801      	add	r0, sp, #4
   b8bde:	f7ff f8eb 	bl	b7db8 <_ZN5spark10JSONWriter4nameEPKcj>
   b8be2:	4631      	mov	r1, r6
   b8be4:	f7ff f969 	bl	b7eba <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_file) {
   b8be8:	7923      	ldrb	r3, [r4, #4]
   b8bea:	07df      	lsls	r7, r3, #31
   b8bec:	d50e      	bpl.n	b8c0c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
   b8bee:	68a6      	ldr	r6, [r4, #8]
    const char *s1 = strrchr(s, '/');
   b8bf0:	212f      	movs	r1, #47	; 0x2f
   b8bf2:	4630      	mov	r0, r6
   b8bf4:	f000 ffc3 	bl	b9b7e <strrchr>
    if (s1) {
   b8bf8:	b100      	cbz	r0, b8bfc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
   b8bfa:	1c46      	adds	r6, r0, #1
        json.name("f", 1).value(s);
   b8bfc:	4931      	ldr	r1, [pc, #196]	; (b8cc4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
   b8bfe:	2201      	movs	r2, #1
   b8c00:	a801      	add	r0, sp, #4
   b8c02:	f7ff f8d9 	bl	b7db8 <_ZN5spark10JSONWriter4nameEPKcj>
   b8c06:	4631      	mov	r1, r6
   b8c08:	f7ff f957 	bl	b7eba <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_line) {
   b8c0c:	7923      	ldrb	r3, [r4, #4]
   b8c0e:	079e      	lsls	r6, r3, #30
   b8c10:	d507      	bpl.n	b8c22 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
   b8c12:	492d      	ldr	r1, [pc, #180]	; (b8cc8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
   b8c14:	2202      	movs	r2, #2
   b8c16:	a801      	add	r0, sp, #4
   b8c18:	f7ff f8ce 	bl	b7db8 <_ZN5spark10JSONWriter4nameEPKcj>
   b8c1c:	68e1      	ldr	r1, [r4, #12]
   b8c1e:	f7ff f849 	bl	b7cb4 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_function) {
   b8c22:	7923      	ldrb	r3, [r4, #4]
   b8c24:	0758      	lsls	r0, r3, #29
   b8c26:	d514      	bpl.n	b8c52 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe6>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   b8c28:	6926      	ldr	r6, [r4, #16]
const char* extractFuncName(const char *s, size_t *size) {
   b8c2a:	4633      	mov	r3, r6
   b8c2c:	461f      	mov	r7, r3
    for (; *s; ++s) {
   b8c2e:	f813 2b01 	ldrb.w	r2, [r3], #1
   b8c32:	b12a      	cbz	r2, b8c40 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        if (*s == ' ') {
   b8c34:	2a20      	cmp	r2, #32
   b8c36:	d101      	bne.n	b8c3c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
   b8c38:	461e      	mov	r6, r3
   b8c3a:	e7f7      	b.n	b8c2c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        } else if (*s == '(') {
   b8c3c:	2a28      	cmp	r2, #40	; 0x28
   b8c3e:	d1f5      	bne.n	b8c2c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        json.name("fn", 2).value(s, n);
   b8c40:	4922      	ldr	r1, [pc, #136]	; (b8ccc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
   b8c42:	2202      	movs	r2, #2
   b8c44:	a801      	add	r0, sp, #4
   b8c46:	f7ff f8b7 	bl	b7db8 <_ZN5spark10JSONWriter4nameEPKcj>
   b8c4a:	1bba      	subs	r2, r7, r6
   b8c4c:	4631      	mov	r1, r6
   b8c4e:	f7ff f8c3 	bl	b7dd8 <_ZN5spark10JSONWriter5valueEPKcj>
    if (attr.has_time) {
   b8c52:	7923      	ldrb	r3, [r4, #4]
   b8c54:	0719      	lsls	r1, r3, #28
   b8c56:	d507      	bpl.n	b8c68 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xfc>
        json.name("t", 1).value((unsigned)attr.time);
   b8c58:	491d      	ldr	r1, [pc, #116]	; (b8cd0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
   b8c5a:	2201      	movs	r2, #1
   b8c5c:	a801      	add	r0, sp, #4
   b8c5e:	f7ff f8ab 	bl	b7db8 <_ZN5spark10JSONWriter4nameEPKcj>
   b8c62:	6961      	ldr	r1, [r4, #20]
   b8c64:	f7ff f838 	bl	b7cd8 <_ZN5spark10JSONWriter5valueEj>
    if (attr.has_code) {
   b8c68:	7923      	ldrb	r3, [r4, #4]
   b8c6a:	06da      	lsls	r2, r3, #27
   b8c6c:	d508      	bpl.n	b8c80 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x114>
        json.name("code", 4).value((int)attr.code);
   b8c6e:	2204      	movs	r2, #4
   b8c70:	4918      	ldr	r1, [pc, #96]	; (b8cd4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
   b8c72:	eb0d 0002 	add.w	r0, sp, r2
   b8c76:	f7ff f89f 	bl	b7db8 <_ZN5spark10JSONWriter4nameEPKcj>
   b8c7a:	69a1      	ldr	r1, [r4, #24]
   b8c7c:	f7ff f81a 	bl	b7cb4 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_details) {
   b8c80:	7923      	ldrb	r3, [r4, #4]
   b8c82:	069b      	lsls	r3, r3, #26
   b8c84:	d507      	bpl.n	b8c96 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12a>
        json.name("detail", 6).value(attr.details);
   b8c86:	4914      	ldr	r1, [pc, #80]	; (b8cd8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
   b8c88:	2206      	movs	r2, #6
   b8c8a:	a801      	add	r0, sp, #4
   b8c8c:	f7ff f894 	bl	b7db8 <_ZN5spark10JSONWriter4nameEPKcj>
   b8c90:	69e1      	ldr	r1, [r4, #28]
   b8c92:	f7ff f912 	bl	b7eba <_ZN5spark10JSONWriter5valueEPKc>
    json.endObject();
   b8c96:	a801      	add	r0, sp, #4
   b8c98:	f7fe ffe9 	bl	b7c6e <_ZN5spark10JSONWriter9endObjectEv>
    return stream_;
   b8c9c:	6a28      	ldr	r0, [r5, #32]
    this->stream()->write((const uint8_t*)"\r\n", 2);
   b8c9e:	490f      	ldr	r1, [pc, #60]	; (b8cdc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
   b8ca0:	6803      	ldr	r3, [r0, #0]
   b8ca2:	2202      	movs	r2, #2
   b8ca4:	68db      	ldr	r3, [r3, #12]
   b8ca6:	4798      	blx	r3
}
   b8ca8:	b005      	add	sp, #20
   b8caa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b8cae:	bf00      	nop
   b8cb0:	2003e6dc 	.word	0x2003e6dc
   b8cb4:	000bae50 	.word	0x000bae50
   b8cb8:	000baddf 	.word	0x000baddf
   b8cbc:	000bae30 	.word	0x000bae30
   b8cc0:	000bafe7 	.word	0x000bafe7
   b8cc4:	000bae32 	.word	0x000bae32
   b8cc8:	000bae34 	.word	0x000bae34
   b8ccc:	000bae37 	.word	0x000bae37
   b8cd0:	000ba106 	.word	0x000ba106
   b8cd4:	000bae3a 	.word	0x000bae3a
   b8cd8:	000bae3f 	.word	0x000bae3f
   b8cdc:	000bae2d 	.word	0x000bae2d

000b8ce0 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b8ce0:	2300      	movs	r3, #0
   b8ce2:	6840      	ldr	r0, [r0, #4]
   b8ce4:	461a      	mov	r2, r3
   b8ce6:	f7fe b95f 	b.w	b6fa8 <network_connect>

000b8cea <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b8cea:	6840      	ldr	r0, [r0, #4]
   b8cec:	2200      	movs	r2, #0
   b8cee:	2102      	movs	r1, #2
   b8cf0:	f7fe b96a 	b.w	b6fc8 <network_disconnect>

000b8cf4 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b8cf4:	2200      	movs	r2, #0
   b8cf6:	6840      	ldr	r0, [r0, #4]
   b8cf8:	4611      	mov	r1, r2
   b8cfa:	f7fe b95d 	b.w	b6fb8 <network_connecting>

000b8cfe <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b8cfe:	2200      	movs	r2, #0
   b8d00:	6840      	ldr	r0, [r0, #4]
   b8d02:	4611      	mov	r1, r2
   b8d04:	f7fe b968 	b.w	b6fd8 <network_ready>

000b8d08 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b8d08:	2300      	movs	r3, #0
   b8d0a:	6840      	ldr	r0, [r0, #4]
   b8d0c:	461a      	mov	r2, r3
   b8d0e:	4619      	mov	r1, r3
   b8d10:	f7fe b96a 	b.w	b6fe8 <network_on>

000b8d14 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b8d14:	2300      	movs	r3, #0
   b8d16:	6840      	ldr	r0, [r0, #4]
   b8d18:	461a      	mov	r2, r3
   b8d1a:	4619      	mov	r1, r3
   b8d1c:	f7fe b96c 	b.w	b6ff8 <network_off>

000b8d20 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b8d20:	6840      	ldr	r0, [r0, #4]
   b8d22:	2100      	movs	r1, #0
   b8d24:	f7fe b990 	b.w	b7048 <network_is_on>

000b8d28 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b8d28:	6840      	ldr	r0, [r0, #4]
   b8d2a:	2100      	movs	r1, #0
   b8d2c:	f7fe b994 	b.w	b7058 <network_is_off>

000b8d30 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b8d30:	6840      	ldr	r0, [r0, #4]
   b8d32:	2200      	movs	r2, #0
   b8d34:	f081 0101 	eor.w	r1, r1, #1
   b8d38:	f7fe b966 	b.w	b7008 <network_listen>

000b8d3c <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b8d3c:	6840      	ldr	r0, [r0, #4]
   b8d3e:	2200      	movs	r2, #0
   b8d40:	f7fe b972 	b.w	b7028 <network_set_listen_timeout>

000b8d44 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b8d44:	2200      	movs	r2, #0
   b8d46:	6840      	ldr	r0, [r0, #4]
   b8d48:	4611      	mov	r1, r2
   b8d4a:	f7fe b975 	b.w	b7038 <network_get_listen_timeout>

000b8d4e <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b8d4e:	2200      	movs	r2, #0
   b8d50:	6840      	ldr	r0, [r0, #4]
   b8d52:	4611      	mov	r1, r2
   b8d54:	f7fe b960 	b.w	b7018 <network_listening>

000b8d58 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b8d58:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b8d5c:	b095      	sub	sp, #84	; 0x54
   b8d5e:	4614      	mov	r4, r2
   b8d60:	460d      	mov	r5, r1
   b8d62:	4607      	mov	r7, r0
    IPAddress addr;
   b8d64:	f7fe fe32 	bl	b79cc <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b8d68:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b8d6a:	221c      	movs	r2, #28
   b8d6c:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b8d6e:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b8d70:	f000 fe2e 	bl	b99d0 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b8d74:	2340      	movs	r3, #64	; 0x40
   b8d76:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b8d78:	4620      	mov	r0, r4
   b8d7a:	466b      	mov	r3, sp
   b8d7c:	aa0c      	add	r2, sp, #48	; 0x30
   b8d7e:	2100      	movs	r1, #0
   b8d80:	f7fd ffe6 	bl	b6d50 <netdb_getaddrinfo>
    if (!r) {
   b8d84:	4604      	mov	r4, r0
   b8d86:	2800      	cmp	r0, #0
   b8d88:	d14b      	bne.n	b8e22 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b8d8a:	4602      	mov	r2, r0
   b8d8c:	2101      	movs	r1, #1
   b8d8e:	6868      	ldr	r0, [r5, #4]
   b8d90:	f7fe f922 	bl	b6fd8 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b8d94:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b8d96:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b8d98:	4622      	mov	r2, r4
   b8d9a:	6868      	ldr	r0, [r5, #4]
   b8d9c:	f7fe f91c 	bl	b6fd8 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b8da0:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b8da2:	4681      	mov	r9, r0
        bool ok = false;
   b8da4:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b8da6:	2e00      	cmp	r6, #0
   b8da8:	d03b      	beq.n	b8e22 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b8daa:	2900      	cmp	r1, #0
   b8dac:	d139      	bne.n	b8e22 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b8dae:	6873      	ldr	r3, [r6, #4]
   b8db0:	2b02      	cmp	r3, #2
   b8db2:	d003      	beq.n	b8dbc <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b8db4:	2b0a      	cmp	r3, #10
   b8db6:	d011      	beq.n	b8ddc <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b8db8:	69f6      	ldr	r6, [r6, #28]
   b8dba:	e7f4      	b.n	b8da6 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b8dbc:	f1b8 0f00 	cmp.w	r8, #0
   b8dc0:	d0fa      	beq.n	b8db8 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b8dc2:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b8dc4:	a806      	add	r0, sp, #24
   b8dc6:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b8dc8:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b8dca:	f7fe fe2d 	bl	b7a28 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b8dce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b8dd0:	1d3c      	adds	r4, r7, #4
   b8dd2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b8dd4:	682b      	ldr	r3, [r5, #0]
   b8dd6:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b8dd8:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b8dda:	e7ed      	b.n	b8db8 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b8ddc:	f1b9 0f00 	cmp.w	r9, #0
   b8de0:	d0ea      	beq.n	b8db8 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b8de2:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b8de4:	2210      	movs	r2, #16
   b8de6:	a801      	add	r0, sp, #4
   b8de8:	f000 fdf2 	bl	b99d0 <memset>
                    a.v = 6;
   b8dec:	2306      	movs	r3, #6
   b8dee:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b8df2:	ad01      	add	r5, sp, #4
   b8df4:	f104 0308 	add.w	r3, r4, #8
   b8df8:	3418      	adds	r4, #24
   b8dfa:	6818      	ldr	r0, [r3, #0]
   b8dfc:	6859      	ldr	r1, [r3, #4]
   b8dfe:	462a      	mov	r2, r5
   b8e00:	c203      	stmia	r2!, {r0, r1}
   b8e02:	3308      	adds	r3, #8
   b8e04:	42a3      	cmp	r3, r4
   b8e06:	4615      	mov	r5, r2
   b8e08:	d1f7      	bne.n	b8dfa <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b8e0a:	a901      	add	r1, sp, #4
   b8e0c:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b8e0e:	ad07      	add	r5, sp, #28
   b8e10:	f7fe fdea 	bl	b79e8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b8e14:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b8e16:	1d3c      	adds	r4, r7, #4
   b8e18:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b8e1a:	682b      	ldr	r3, [r5, #0]
   b8e1c:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b8e1e:	4649      	mov	r1, r9
   b8e20:	e7ca      	b.n	b8db8 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b8e22:	9800      	ldr	r0, [sp, #0]
   b8e24:	f7fd ff8c 	bl	b6d40 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b8e28:	4638      	mov	r0, r7
   b8e2a:	b015      	add	sp, #84	; 0x54
   b8e2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b8e30 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b8e30:	4b02      	ldr	r3, [pc, #8]	; (b8e3c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b8e32:	4a03      	ldr	r2, [pc, #12]	; (b8e40 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b8e34:	601a      	str	r2, [r3, #0]
   b8e36:	2200      	movs	r2, #0
   b8e38:	605a      	str	r2, [r3, #4]

} // spark
   b8e3a:	4770      	bx	lr
   b8e3c:	2003e6dc 	.word	0x2003e6dc
   b8e40:	000baec8 	.word	0x000baec8

000b8e44 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b8e44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b8e46:	4606      	mov	r6, r0
   b8e48:	460d      	mov	r5, r1
  size_t n = 0;
   b8e4a:	188f      	adds	r7, r1, r2
   b8e4c:	2400      	movs	r4, #0
  while (size--) {
   b8e4e:	42bd      	cmp	r5, r7
   b8e50:	d00c      	beq.n	b8e6c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b8e52:	6833      	ldr	r3, [r6, #0]
   b8e54:	f815 1b01 	ldrb.w	r1, [r5], #1
   b8e58:	689b      	ldr	r3, [r3, #8]
   b8e5a:	4630      	mov	r0, r6
   b8e5c:	4798      	blx	r3
     if (chunk>=0)
   b8e5e:	1e03      	subs	r3, r0, #0
   b8e60:	db01      	blt.n	b8e66 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b8e62:	441c      	add	r4, r3
  while (size--) {
   b8e64:	e7f3      	b.n	b8e4e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b8e66:	2c00      	cmp	r4, #0
   b8e68:	bf08      	it	eq
   b8e6a:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b8e6c:	4620      	mov	r0, r4
   b8e6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b8e70 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b8e70:	b513      	push	{r0, r1, r4, lr}
   b8e72:	4604      	mov	r4, r0
    }
   b8e74:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b8e76:	b159      	cbz	r1, b8e90 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b8e78:	9101      	str	r1, [sp, #4]
   b8e7a:	f000 fe64 	bl	b9b46 <strlen>
   b8e7e:	6823      	ldr	r3, [r4, #0]
   b8e80:	9901      	ldr	r1, [sp, #4]
   b8e82:	68db      	ldr	r3, [r3, #12]
   b8e84:	4602      	mov	r2, r0
   b8e86:	4620      	mov	r0, r4
    }
   b8e88:	b002      	add	sp, #8
   b8e8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b8e8e:	4718      	bx	r3
    }
   b8e90:	b002      	add	sp, #8
   b8e92:	bd10      	pop	{r4, pc}

000b8e94 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   b8e94:	6803      	ldr	r3, [r0, #0]
   b8e96:	689b      	ldr	r3, [r3, #8]
   b8e98:	4718      	bx	r3

000b8e9a <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b8e9a:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b8e9c:	210d      	movs	r1, #13
{
   b8e9e:	4605      	mov	r5, r0
  size_t n = print('\r');
   b8ea0:	f7ff fff8 	bl	b8e94 <_ZN5Print5printEc>
  n += print('\n');
   b8ea4:	210a      	movs	r1, #10
  size_t n = print('\r');
   b8ea6:	4604      	mov	r4, r0
  n += print('\n');
   b8ea8:	4628      	mov	r0, r5
   b8eaa:	f7ff fff3 	bl	b8e94 <_ZN5Print5printEc>
  return n;
}
   b8eae:	4420      	add	r0, r4
   b8eb0:	bd38      	pop	{r3, r4, r5, pc}

000b8eb2 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b8eb2:	b530      	push	{r4, r5, lr}
   b8eb4:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b8eb6:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b8eb8:	2a01      	cmp	r2, #1
  *str = '\0';
   b8eba:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b8ebe:	bf98      	it	ls
   b8ec0:	220a      	movls	r2, #10
   b8ec2:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b8ec4:	460d      	mov	r5, r1
   b8ec6:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b8eca:	fb01 5312 	mls	r3, r1, r2, r5
   b8ece:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b8ed2:	2b09      	cmp	r3, #9
   b8ed4:	bf94      	ite	ls
   b8ed6:	3330      	addls	r3, #48	; 0x30
   b8ed8:	3337      	addhi	r3, #55	; 0x37
   b8eda:	b2db      	uxtb	r3, r3
  } while(n);
   b8edc:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b8ede:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b8ee2:	d9ef      	bls.n	b8ec4 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b8ee4:	4621      	mov	r1, r4
   b8ee6:	f7ff ffc3 	bl	b8e70 <_ZN5Print5writeEPKc>
}
   b8eea:	b00b      	add	sp, #44	; 0x2c
   b8eec:	bd30      	pop	{r4, r5, pc}

000b8eee <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b8eee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b8ef2:	b086      	sub	sp, #24
   b8ef4:	af00      	add	r7, sp, #0
   b8ef6:	4605      	mov	r5, r0
   b8ef8:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b8efa:	1d38      	adds	r0, r7, #4
   b8efc:	2114      	movs	r1, #20
{
   b8efe:	4614      	mov	r4, r2
    va_copy(args2, args);
   b8f00:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b8f02:	f7fe f8e1 	bl	b70c8 <vsnprintf>

    if (n<bufsize)
   b8f06:	2813      	cmp	r0, #19
   b8f08:	d80e      	bhi.n	b8f28 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b8f0a:	1d39      	adds	r1, r7, #4
   b8f0c:	4628      	mov	r0, r5
   b8f0e:	f7ff ffaf 	bl	b8e70 <_ZN5Print5writeEPKc>
   b8f12:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b8f14:	b11e      	cbz	r6, b8f1e <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b8f16:	4628      	mov	r0, r5
   b8f18:	f7ff ffbf 	bl	b8e9a <_ZN5Print7printlnEv>
   b8f1c:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b8f1e:	4620      	mov	r0, r4
   b8f20:	3718      	adds	r7, #24
   b8f22:	46bd      	mov	sp, r7
   b8f24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b8f28:	f100 0308 	add.w	r3, r0, #8
   b8f2c:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b8f30:	46e8      	mov	r8, sp
        char bigger[n+1];
   b8f32:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b8f36:	4622      	mov	r2, r4
   b8f38:	1c41      	adds	r1, r0, #1
   b8f3a:	683b      	ldr	r3, [r7, #0]
   b8f3c:	4668      	mov	r0, sp
   b8f3e:	f7fe f8c3 	bl	b70c8 <vsnprintf>
  return write(str);
   b8f42:	4669      	mov	r1, sp
   b8f44:	4628      	mov	r0, r5
   b8f46:	f7ff ff93 	bl	b8e70 <_ZN5Print5writeEPKc>
   b8f4a:	4604      	mov	r4, r0
   b8f4c:	46c5      	mov	sp, r8
   b8f4e:	e7e1      	b.n	b8f14 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b8f50 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   b8f50:	4b01      	ldr	r3, [pc, #4]	; (b8f58 <_GLOBAL__sub_I_RGB+0x8>)
   b8f52:	2200      	movs	r2, #0
   b8f54:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b8f56:	4770      	bx	lr
   b8f58:	2003e6e4 	.word	0x2003e6e4

000b8f5c <_ZN6StringD1Ev>:
    init();
    char buf[33] = {};
    dtoa(value, decimalPlaces, buf);
  *this = buf;
}
String::~String()
   b8f5c:	b510      	push	{r4, lr}
   b8f5e:	4604      	mov	r4, r0
{
    free(buffer);
   b8f60:	6800      	ldr	r0, [r0, #0]
   b8f62:	f7fe f889 	bl	b7078 <free>
}
   b8f66:	4620      	mov	r0, r4
   b8f68:	bd10      	pop	{r4, pc}

000b8f6a <_ZN6String10invalidateEv>:
    len = 0;
    flags = 0;
}

void String::invalidate(void)
{
   b8f6a:	b510      	push	{r4, lr}
   b8f6c:	4604      	mov	r4, r0
    if (buffer) {
   b8f6e:	6800      	ldr	r0, [r0, #0]
   b8f70:	b108      	cbz	r0, b8f76 <_ZN6String10invalidateEv+0xc>
        free(buffer);
   b8f72:	f7fe f881 	bl	b7078 <free>
    }
    buffer = nullptr;
   b8f76:	2300      	movs	r3, #0
    capacity = len = 0;
   b8f78:	e9c4 3301 	strd	r3, r3, [r4, #4]
    buffer = nullptr;
   b8f7c:	6023      	str	r3, [r4, #0]
}
   b8f7e:	bd10      	pop	{r4, pc}

000b8f80 <_ZN6String12changeBufferEj>:
    }
    return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b8f80:	b538      	push	{r3, r4, r5, lr}
   b8f82:	4604      	mov	r4, r0
   b8f84:	460d      	mov	r5, r1
    char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b8f86:	6800      	ldr	r0, [r0, #0]
   b8f88:	3101      	adds	r1, #1
   b8f8a:	f7fe f87d 	bl	b7088 <realloc>
    if (newbuffer) {
   b8f8e:	b110      	cbz	r0, b8f96 <_ZN6String12changeBufferEj+0x16>
        buffer = newbuffer;
        capacity = maxStrLen;
   b8f90:	e9c4 0500 	strd	r0, r5, [r4]
        return 1;
   b8f94:	2001      	movs	r0, #1
    }
    return 0;
}
   b8f96:	bd38      	pop	{r3, r4, r5, pc}

000b8f98 <_ZN6String7reserveEj>:
{
   b8f98:	b510      	push	{r4, lr}
    if (buffer && capacity >= size) {
   b8f9a:	6803      	ldr	r3, [r0, #0]
{
   b8f9c:	4604      	mov	r4, r0
    if (buffer && capacity >= size) {
   b8f9e:	b123      	cbz	r3, b8faa <_ZN6String7reserveEj+0x12>
   b8fa0:	6843      	ldr	r3, [r0, #4]
   b8fa2:	428b      	cmp	r3, r1
   b8fa4:	d301      	bcc.n	b8faa <_ZN6String7reserveEj+0x12>
   b8fa6:	2001      	movs	r0, #1
}
   b8fa8:	bd10      	pop	{r4, pc}
    if (changeBuffer(size)) {
   b8faa:	4620      	mov	r0, r4
   b8fac:	f7ff ffe8 	bl	b8f80 <_ZN6String12changeBufferEj>
   b8fb0:	2800      	cmp	r0, #0
   b8fb2:	d0f9      	beq.n	b8fa8 <_ZN6String7reserveEj+0x10>
        if (len == 0) {
   b8fb4:	68a3      	ldr	r3, [r4, #8]
   b8fb6:	2b00      	cmp	r3, #0
   b8fb8:	d1f5      	bne.n	b8fa6 <_ZN6String7reserveEj+0xe>
            buffer[0] = 0;
   b8fba:	6822      	ldr	r2, [r4, #0]
   b8fbc:	7013      	strb	r3, [r2, #0]
   b8fbe:	e7f2      	b.n	b8fa6 <_ZN6String7reserveEj+0xe>

000b8fc0 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b8fc0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b8fc2:	460d      	mov	r5, r1
    if (!reserve(length)) {
   b8fc4:	4611      	mov	r1, r2
   b8fc6:	9201      	str	r2, [sp, #4]
{
   b8fc8:	4604      	mov	r4, r0
    if (!reserve(length)) {
   b8fca:	f7ff ffe5 	bl	b8f98 <_ZN6String7reserveEj>
   b8fce:	9a01      	ldr	r2, [sp, #4]
   b8fd0:	b928      	cbnz	r0, b8fde <_ZN6String4copyEPKcj+0x1e>
        invalidate();
   b8fd2:	4620      	mov	r0, r4
   b8fd4:	f7ff ffc9 	bl	b8f6a <_ZN6String10invalidateEv>
    }
    len = length;
    memcpy(buffer, cstr, length);
    buffer[len] = 0;
    return *this;
}
   b8fd8:	4620      	mov	r0, r4
   b8fda:	b003      	add	sp, #12
   b8fdc:	bd30      	pop	{r4, r5, pc}
    len = length;
   b8fde:	60a2      	str	r2, [r4, #8]
    memcpy(buffer, cstr, length);
   b8fe0:	4629      	mov	r1, r5
   b8fe2:	6820      	ldr	r0, [r4, #0]
   b8fe4:	f000 fccc 	bl	b9980 <memcpy>
    buffer[len] = 0;
   b8fe8:	6822      	ldr	r2, [r4, #0]
   b8fea:	68a3      	ldr	r3, [r4, #8]
   b8fec:	2100      	movs	r1, #0
   b8fee:	54d1      	strb	r1, [r2, r3]
    return *this;
   b8ff0:	e7f2      	b.n	b8fd8 <_ZN6String4copyEPKcj+0x18>

000b8ff2 <_ZN6StringC1EPK19__FlashStringHelper>:
    buffer = nullptr;
   b8ff2:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b8ff4:	b513      	push	{r0, r1, r4, lr}
    capacity = 0;
   b8ff6:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b8ffa:	4604      	mov	r4, r0
    len = 0;
   b8ffc:	6083      	str	r3, [r0, #8]
    flags = 0;
   b8ffe:	7303      	strb	r3, [r0, #12]
    if (cstr) {
   b9000:	b141      	cbz	r1, b9014 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
        copy(cstr, strlen(cstr));
   b9002:	4608      	mov	r0, r1
   b9004:	9101      	str	r1, [sp, #4]
   b9006:	f000 fd9e 	bl	b9b46 <strlen>
   b900a:	9901      	ldr	r1, [sp, #4]
   b900c:	4602      	mov	r2, r0
   b900e:	4620      	mov	r0, r4
   b9010:	f7ff ffd6 	bl	b8fc0 <_ZN6String4copyEPKcj>
}
   b9014:	4620      	mov	r0, r4
   b9016:	b002      	add	sp, #8
   b9018:	bd10      	pop	{r4, pc}

000b901a <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   b901a:	b538      	push	{r3, r4, r5, lr}
   b901c:	4605      	mov	r5, r0
    if (buffer) {
   b901e:	6800      	ldr	r0, [r0, #0]
{
   b9020:	460c      	mov	r4, r1
    if (buffer) {
   b9022:	b170      	cbz	r0, b9042 <_ZN6String4moveERS_+0x28>
        if (capacity >= rhs.len && rhs.buffer) {
   b9024:	686a      	ldr	r2, [r5, #4]
   b9026:	688b      	ldr	r3, [r1, #8]
   b9028:	429a      	cmp	r2, r3
   b902a:	d308      	bcc.n	b903e <_ZN6String4moveERS_+0x24>
   b902c:	6809      	ldr	r1, [r1, #0]
   b902e:	b131      	cbz	r1, b903e <_ZN6String4moveERS_+0x24>
            strcpy(buffer, rhs.buffer);
   b9030:	f000 fd63 	bl	b9afa <strcpy>
            len = rhs.len;
   b9034:	68a3      	ldr	r3, [r4, #8]
   b9036:	60ab      	str	r3, [r5, #8]
            rhs.len = 0;
   b9038:	2300      	movs	r3, #0
    buffer = rhs.buffer;
    capacity = rhs.capacity;
    len = rhs.len;
    rhs.buffer = nullptr;
    rhs.capacity = 0;
    rhs.len = 0;
   b903a:	60a3      	str	r3, [r4, #8]
}
   b903c:	bd38      	pop	{r3, r4, r5, pc}
            free(buffer);
   b903e:	f7fe f81b 	bl	b7078 <free>
    buffer = rhs.buffer;
   b9042:	6823      	ldr	r3, [r4, #0]
   b9044:	602b      	str	r3, [r5, #0]
    capacity = rhs.capacity;
   b9046:	6863      	ldr	r3, [r4, #4]
   b9048:	606b      	str	r3, [r5, #4]
    len = rhs.len;
   b904a:	68a3      	ldr	r3, [r4, #8]
   b904c:	60ab      	str	r3, [r5, #8]
    rhs.buffer = nullptr;
   b904e:	2300      	movs	r3, #0
    rhs.capacity = 0;
   b9050:	e9c4 3300 	strd	r3, r3, [r4]
   b9054:	e7f1      	b.n	b903a <_ZN6String4moveERS_+0x20>

000b9056 <_ZN6StringC1EOS_>:
String::String(String &&rval)
   b9056:	b510      	push	{r4, lr}
    buffer = nullptr;
   b9058:	2300      	movs	r3, #0
    capacity = 0;
   b905a:	e9c0 3300 	strd	r3, r3, [r0]
String::String(String &&rval)
   b905e:	4604      	mov	r4, r0
    len = 0;
   b9060:	6083      	str	r3, [r0, #8]
    flags = 0;
   b9062:	7303      	strb	r3, [r0, #12]
    move(rval);
   b9064:	f7ff ffd9 	bl	b901a <_ZN6String4moveERS_>
}
   b9068:	4620      	mov	r0, r4
   b906a:	bd10      	pop	{r4, pc}

000b906c <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
    if (this == &rhs) {
   b906c:	4288      	cmp	r0, r1
{
   b906e:	b510      	push	{r4, lr}
   b9070:	4604      	mov	r4, r0
    if (this == &rhs) {
   b9072:	d005      	beq.n	b9080 <_ZN6StringaSERKS_+0x14>
        return *this;
    }

    if (rhs.buffer) {
   b9074:	680b      	ldr	r3, [r1, #0]
   b9076:	b12b      	cbz	r3, b9084 <_ZN6StringaSERKS_+0x18>
        copy(rhs.buffer, rhs.len);
   b9078:	688a      	ldr	r2, [r1, #8]
   b907a:	4619      	mov	r1, r3
   b907c:	f7ff ffa0 	bl	b8fc0 <_ZN6String4copyEPKcj>
    else {
        invalidate();
    }

    return *this;
}
   b9080:	4620      	mov	r0, r4
   b9082:	bd10      	pop	{r4, pc}
        invalidate();
   b9084:	f7ff ff71 	bl	b8f6a <_ZN6String10invalidateEv>
   b9088:	e7fa      	b.n	b9080 <_ZN6StringaSERKS_+0x14>

000b908a <_ZN6StringC1ERKS_>:
String::String(const String &value)
   b908a:	b510      	push	{r4, lr}
    buffer = nullptr;
   b908c:	2300      	movs	r3, #0
String::String(const String &value)
   b908e:	4604      	mov	r4, r0
    capacity = 0;
   b9090:	e9c0 3300 	strd	r3, r3, [r0]
    len = 0;
   b9094:	6083      	str	r3, [r0, #8]
    flags = 0;
   b9096:	7303      	strb	r3, [r0, #12]
    *this = value;
   b9098:	f7ff ffe8 	bl	b906c <_ZN6StringaSERKS_>
}
   b909c:	4620      	mov	r0, r4
   b909e:	bd10      	pop	{r4, pc}

000b90a0 <_ZN6StringaSEPKc>:
    return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   b90a0:	b513      	push	{r0, r1, r4, lr}
   b90a2:	4604      	mov	r4, r0
    if (cstr) {
   b90a4:	b159      	cbz	r1, b90be <_ZN6StringaSEPKc+0x1e>
        copy(cstr, strlen(cstr));
   b90a6:	4608      	mov	r0, r1
   b90a8:	9101      	str	r1, [sp, #4]
   b90aa:	f000 fd4c 	bl	b9b46 <strlen>
   b90ae:	9901      	ldr	r1, [sp, #4]
   b90b0:	4602      	mov	r2, r0
   b90b2:	4620      	mov	r0, r4
   b90b4:	f7ff ff84 	bl	b8fc0 <_ZN6String4copyEPKcj>
    else {
        invalidate();
    }

    return *this;
}
   b90b8:	4620      	mov	r0, r4
   b90ba:	b002      	add	sp, #8
   b90bc:	bd10      	pop	{r4, pc}
        invalidate();
   b90be:	f7ff ff54 	bl	b8f6a <_ZN6String10invalidateEv>
   b90c2:	e7f9      	b.n	b90b8 <_ZN6StringaSEPKc+0x18>

000b90c4 <_ZN6String6concatEPKcj>:
{
    return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   b90c4:	b570      	push	{r4, r5, r6, lr}
   b90c6:	4605      	mov	r5, r0
    unsigned int newlen = len + length;
    if (!cstr) {
   b90c8:	460e      	mov	r6, r1
   b90ca:	b909      	cbnz	r1, b90d0 <_ZN6String6concatEPKcj+0xc>
        return 0;
   b90cc:	2000      	movs	r0, #0
        return 0;
    }
    strcpy(buffer + len, cstr);
    len = newlen;
    return 1;
}
   b90ce:	bd70      	pop	{r4, r5, r6, pc}
    if (length == 0) {
   b90d0:	b16a      	cbz	r2, b90ee <_ZN6String6concatEPKcj+0x2a>
    unsigned int newlen = len + length;
   b90d2:	6884      	ldr	r4, [r0, #8]
   b90d4:	4414      	add	r4, r2
    if (!reserve(newlen)) {
   b90d6:	4621      	mov	r1, r4
   b90d8:	f7ff ff5e 	bl	b8f98 <_ZN6String7reserveEj>
   b90dc:	2800      	cmp	r0, #0
   b90de:	d0f5      	beq.n	b90cc <_ZN6String6concatEPKcj+0x8>
    strcpy(buffer + len, cstr);
   b90e0:	6828      	ldr	r0, [r5, #0]
   b90e2:	68ab      	ldr	r3, [r5, #8]
   b90e4:	4631      	mov	r1, r6
   b90e6:	4418      	add	r0, r3
   b90e8:	f000 fd07 	bl	b9afa <strcpy>
    len = newlen;
   b90ec:	60ac      	str	r4, [r5, #8]
        return 1;
   b90ee:	2001      	movs	r0, #1
   b90f0:	e7ed      	b.n	b90ce <_ZN6String6concatEPKcj+0xa>

000b90f2 <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
    return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
   b90f2:	b507      	push	{r0, r1, r2, lr}
    char buf[2] = {};
   b90f4:	2300      	movs	r3, #0
   b90f6:	f8ad 3004 	strh.w	r3, [sp, #4]
    buf[0] = c;
    buf[1] = 0;
    return concat(buf, 1);
   b90fa:	2201      	movs	r2, #1
    buf[0] = c;
   b90fc:	f88d 1004 	strb.w	r1, [sp, #4]
    return concat(buf, 1);
   b9100:	a901      	add	r1, sp, #4
   b9102:	f7ff ffdf 	bl	b90c4 <_ZN6String6concatEPKcj>
}
   b9106:	b003      	add	sp, #12
   b9108:	f85d fb04 	ldr.w	pc, [sp], #4

000b910c <_ZNK6String6equalsEPKc>:
{
    return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   b910c:	b508      	push	{r3, lr}
    if (len == 0) {
   b910e:	6882      	ldr	r2, [r0, #8]
   b9110:	b93a      	cbnz	r2, b9122 <_ZNK6String6equalsEPKc+0x16>
        return (cstr == nullptr || *cstr == 0);
   b9112:	b121      	cbz	r1, b911e <_ZNK6String6equalsEPKc+0x12>
   b9114:	7808      	ldrb	r0, [r1, #0]
    }
    if (cstr == nullptr) {
        return buffer[0] == 0;
    }
    return strcmp(buffer, cstr) == 0;
   b9116:	fab0 f080 	clz	r0, r0
   b911a:	0940      	lsrs	r0, r0, #5
   b911c:	e000      	b.n	b9120 <_ZNK6String6equalsEPKc+0x14>
        return (cstr == nullptr || *cstr == 0);
   b911e:	2001      	movs	r0, #1
}
   b9120:	bd08      	pop	{r3, pc}
        return buffer[0] == 0;
   b9122:	6800      	ldr	r0, [r0, #0]
    if (cstr == nullptr) {
   b9124:	b909      	cbnz	r1, b912a <_ZNK6String6equalsEPKc+0x1e>
        return buffer[0] == 0;
   b9126:	7800      	ldrb	r0, [r0, #0]
   b9128:	e7f5      	b.n	b9116 <_ZNK6String6equalsEPKc+0xa>
    return strcmp(buffer, cstr) == 0;
   b912a:	f000 fcdc 	bl	b9ae6 <strcmp>
   b912e:	e7f2      	b.n	b9116 <_ZNK6String6equalsEPKc+0xa>

000b9130 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b9130:	4b05      	ldr	r3, [pc, #20]	; (b9148 <_GLOBAL__sub_I_System+0x18>)
   b9132:	2202      	movs	r2, #2
   b9134:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b9136:	4b05      	ldr	r3, [pc, #20]	; (b914c <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b9138:	4a05      	ldr	r2, [pc, #20]	; (b9150 <_GLOBAL__sub_I_System+0x20>)
   b913a:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b913c:	2000      	movs	r0, #0
   b913e:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b9142:	f7fd becd 	b.w	b6ee0 <set_system_mode>
   b9146:	bf00      	nop
   b9148:	2003e700 	.word	0x2003e700
   b914c:	2003e6f4 	.word	0x2003e6f4
   b9150:	ffff0000 	.word	0xffff0000

000b9154 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimeDone(void)
   b9154:	b508      	push	{r3, lr}
        return !spark_sync_time_pending(nullptr) || disconnected();
   b9156:	2000      	movs	r0, #0
   b9158:	f7fd ff16 	bl	b6f88 <spark_sync_time_pending>
   b915c:	b128      	cbz	r0, b916a <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b915e:	f7fd ff03 	bl	b6f68 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   b9162:	f080 0001 	eor.w	r0, r0, #1
   b9166:	b2c0      	uxtb	r0, r0
    }
   b9168:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   b916a:	2001      	movs	r0, #1
   b916c:	e7fc      	b.n	b9168 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>

000b916e <_ZN9TimeClass7isValidEv>:
    strftime(buf, sizeof(buf), format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   b916e:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   b9170:	2000      	movs	r0, #0
   b9172:	f7fd fd6d 	bl	b6c50 <hal_rtc_time_is_valid>
    if (rtcstate)
   b9176:	4604      	mov	r4, r0
   b9178:	b9a0      	cbnz	r0, b91a4 <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   b917a:	f7fd fea9 	bl	b6ed0 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   b917e:	2801      	cmp	r0, #1
   b9180:	d110      	bne.n	b91a4 <_ZN9TimeClass7isValidEv+0x36>
   b9182:	4620      	mov	r0, r4
   b9184:	f7fd fecc 	bl	b6f20 <system_thread_get_state>
   b9188:	b960      	cbnz	r0, b91a4 <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   b918a:	f7ff ffe3 	bl	b9154 <_ZN10CloudClass12syncTimeDoneEv.isra.0>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   b918e:	b910      	cbnz	r0, b9196 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   b9190:	f7fd fee2 	bl	b6f58 <spark_process>
        while (_while() && !_condition()) {
   b9194:	e7f9      	b.n	b918a <_ZN9TimeClass7isValidEv+0x1c>
   b9196:	f7ff ffdd 	bl	b9154 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   b919a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   b919e:	2000      	movs	r0, #0
   b91a0:	f7fd bd56 	b.w	b6c50 <hal_rtc_time_is_valid>
}
   b91a4:	4620      	mov	r0, r4
   b91a6:	bd10      	pop	{r4, pc}

000b91a8 <_ZN9TimeClass3nowEv>:
{
   b91a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   b91aa:	f7ff ffe0 	bl	b916e <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   b91ae:	2210      	movs	r2, #16
   b91b0:	2100      	movs	r1, #0
   b91b2:	4668      	mov	r0, sp
   b91b4:	f000 fc0c 	bl	b99d0 <memset>
    hal_rtc_get_time(&tv, nullptr);
   b91b8:	2100      	movs	r1, #0
   b91ba:	4668      	mov	r0, sp
   b91bc:	f7fd fd50 	bl	b6c60 <hal_rtc_get_time>
}
   b91c0:	9800      	ldr	r0, [sp, #0]
   b91c2:	b005      	add	sp, #20
   b91c4:	f85d fb04 	ldr.w	pc, [sp], #4

000b91c8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b91c8:	4b02      	ldr	r3, [pc, #8]	; (b91d4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b91ca:	681a      	ldr	r2, [r3, #0]
   b91cc:	4b02      	ldr	r3, [pc, #8]	; (b91d8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b91ce:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b91d0:	4770      	bx	lr
   b91d2:	bf00      	nop
   b91d4:	2003b6d4 	.word	0x2003b6d4
   b91d8:	2003e704 	.word	0x2003e704

000b91dc <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b91dc:	4770      	bx	lr

000b91de <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b91de:	7441      	strb	r1, [r0, #17]
}
   b91e0:	4770      	bx	lr

000b91e2 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b91e2:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b91e4:	7c00      	ldrb	r0, [r0, #16]
   b91e6:	f7fd fdeb 	bl	b6dc0 <hal_usart_available_data_for_write>
}
   b91ea:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b91ee:	bd08      	pop	{r3, pc}

000b91f0 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b91f0:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b91f2:	7c00      	ldrb	r0, [r0, #16]
   b91f4:	f7fd fdc4 	bl	b6d80 <hal_usart_available>
}
   b91f8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b91fc:	bd08      	pop	{r3, pc}

000b91fe <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b91fe:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b9200:	7c00      	ldrb	r0, [r0, #16]
   b9202:	f7fd fdcd 	bl	b6da0 <hal_usart_peek>
}
   b9206:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b920a:	bd08      	pop	{r3, pc}

000b920c <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b920c:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b920e:	7c00      	ldrb	r0, [r0, #16]
   b9210:	f7fd fdbe 	bl	b6d90 <hal_usart_read>
}
   b9214:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b9218:	bd08      	pop	{r3, pc}

000b921a <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b921a:	7c00      	ldrb	r0, [r0, #16]
   b921c:	f7fd bdc8 	b.w	b6db0 <hal_usart_flush>

000b9220 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b9220:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b9222:	7c45      	ldrb	r5, [r0, #17]
{
   b9224:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b9226:	b12d      	cbz	r5, b9234 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b9228:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b922a:	b003      	add	sp, #12
   b922c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b9230:	f7fd bd9e 	b.w	b6d70 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b9234:	7c00      	ldrb	r0, [r0, #16]
   b9236:	9101      	str	r1, [sp, #4]
   b9238:	f7fd fdc2 	bl	b6dc0 <hal_usart_available_data_for_write>
   b923c:	2800      	cmp	r0, #0
   b923e:	9901      	ldr	r1, [sp, #4]
   b9240:	dcf2      	bgt.n	b9228 <_ZN11USARTSerial5writeEh+0x8>
}
   b9242:	4628      	mov	r0, r5
   b9244:	b003      	add	sp, #12
   b9246:	bd30      	pop	{r4, r5, pc}

000b9248 <_ZN11USARTSerialD0Ev>:
   b9248:	b510      	push	{r4, lr}
   b924a:	2114      	movs	r1, #20
   b924c:	4604      	mov	r4, r0
   b924e:	f7fa ff24 	bl	b409a <_ZdlPvj>
   b9252:	4620      	mov	r0, r4
   b9254:	bd10      	pop	{r4, pc}
	...

000b9258 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b9258:	b510      	push	{r4, lr}
   b925a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b925e:	4604      	mov	r4, r0
   b9260:	4608      	mov	r0, r1
   b9262:	4611      	mov	r1, r2
   b9264:	2200      	movs	r2, #0
   b9266:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b926a:	4b04      	ldr	r3, [pc, #16]	; (b927c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b926c:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b926e:	2301      	movs	r3, #1
  _serial = serial;
   b9270:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b9272:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b9274:	f7fd fdb4 	bl	b6de0 <hal_usart_init_ex>
}
   b9278:	4620      	mov	r0, r4
   b927a:	bd10      	pop	{r4, pc}
   b927c:	000baf20 	.word	0x000baf20

000b9280 <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
   b9280:	7c00      	ldrb	r0, [r0, #16]
   b9282:	2300      	movs	r3, #0
   b9284:	f7fd bda4 	b.w	b6dd0 <hal_usart_begin_config>

000b9288 <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
   b9288:	2200      	movs	r2, #0
   b928a:	f7ff bff9 	b.w	b9280 <_ZN11USARTSerial5beginEmm>

000b928e <_ZN11USARTSerial3endEv>:
  hal_usart_end(_serial);
   b928e:	7c00      	ldrb	r0, [r0, #16]
   b9290:	f7fd bd66 	b.w	b6d60 <hal_usart_end>

000b9294 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b9294:	7441      	strb	r1, [r0, #17]
}
   b9296:	4770      	bx	lr

000b9298 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b9298:	4770      	bx	lr

000b929a <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b929a:	4770      	bx	lr

000b929c <_ZN9USBSerial4readEv>:
{
   b929c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b929e:	2100      	movs	r1, #0
   b92a0:	7c00      	ldrb	r0, [r0, #16]
   b92a2:	f7fd fdcd 	bl	b6e40 <HAL_USB_USART_Receive_Data>
}
   b92a6:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b92aa:	bd08      	pop	{r3, pc}

000b92ac <_ZN9USBSerial4peekEv>:
{
   b92ac:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b92ae:	2101      	movs	r1, #1
   b92b0:	7c00      	ldrb	r0, [r0, #16]
   b92b2:	f7fd fdc5 	bl	b6e40 <HAL_USB_USART_Receive_Data>
}
   b92b6:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b92ba:	bd08      	pop	{r3, pc}

000b92bc <_ZN9USBSerial17availableForWriteEv>:
{
   b92bc:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b92be:	7c00      	ldrb	r0, [r0, #16]
   b92c0:	f7fd fdb6 	bl	b6e30 <HAL_USB_USART_Available_Data_For_Write>
}
   b92c4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b92c8:	bd08      	pop	{r3, pc}

000b92ca <_ZN9USBSerial9availableEv>:
{
   b92ca:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b92cc:	7c00      	ldrb	r0, [r0, #16]
   b92ce:	f7fd fda7 	bl	b6e20 <HAL_USB_USART_Available_Data>
}
   b92d2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b92d6:	bd08      	pop	{r3, pc}

000b92d8 <_ZN9USBSerial5writeEh>:
{
   b92d8:	b513      	push	{r0, r1, r4, lr}
   b92da:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b92dc:	7c00      	ldrb	r0, [r0, #16]
{
   b92de:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b92e0:	f7fd fda6 	bl	b6e30 <HAL_USB_USART_Available_Data_For_Write>
   b92e4:	2800      	cmp	r0, #0
   b92e6:	9901      	ldr	r1, [sp, #4]
   b92e8:	dc01      	bgt.n	b92ee <_ZN9USBSerial5writeEh+0x16>
   b92ea:	7c60      	ldrb	r0, [r4, #17]
   b92ec:	b120      	cbz	r0, b92f8 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b92ee:	7c20      	ldrb	r0, [r4, #16]
   b92f0:	f7fd fdae 	bl	b6e50 <HAL_USB_USART_Send_Data>
   b92f4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b92f8:	b002      	add	sp, #8
   b92fa:	bd10      	pop	{r4, pc}

000b92fc <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b92fc:	7c00      	ldrb	r0, [r0, #16]
   b92fe:	f7fd bdaf 	b.w	b6e60 <HAL_USB_USART_Flush_Data>

000b9302 <_ZN9USBSerialD0Ev>:
   b9302:	b510      	push	{r4, lr}
   b9304:	2114      	movs	r1, #20
   b9306:	4604      	mov	r4, r0
   b9308:	f7fa fec7 	bl	b409a <_ZdlPvj>
   b930c:	4620      	mov	r0, r4
   b930e:	bd10      	pop	{r4, pc}

000b9310 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b9310:	b510      	push	{r4, lr}
   b9312:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b9316:	4604      	mov	r4, r0
   b9318:	4608      	mov	r0, r1
   b931a:	2100      	movs	r1, #0
   b931c:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b9320:	4b04      	ldr	r3, [pc, #16]	; (b9334 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b9322:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b9324:	2301      	movs	r3, #1
  _serial = serial;
   b9326:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b9328:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b932a:	4611      	mov	r1, r2
   b932c:	f7fd fd60 	bl	b6df0 <HAL_USB_USART_Init>
}
   b9330:	4620      	mov	r0, r4
   b9332:	bd10      	pop	{r4, pc}
   b9334:	000baf50 	.word	0x000baf50

000b9338 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b9338:	7c00      	ldrb	r0, [r0, #16]
   b933a:	2200      	movs	r2, #0
   b933c:	f7fd bd60 	b.w	b6e00 <HAL_USB_USART_Begin>

000b9340 <_ZN9USBSerial3endEv>:
    HAL_USB_USART_End(_serial);
   b9340:	7c00      	ldrb	r0, [r0, #16]
   b9342:	f7fd bd65 	b.w	b6e10 <HAL_USB_USART_End>

000b9346 <_Z19acquireSerialBufferv>:
{
   b9346:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b9348:	2214      	movs	r2, #20
{
   b934a:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b934c:	2100      	movs	r1, #0
   b934e:	f000 fb3f 	bl	b99d0 <memset>
}
   b9352:	4620      	mov	r0, r4
   b9354:	bd10      	pop	{r4, pc}
	...

000b9358 <_Z16_fetch_usbserialv>:
{
   b9358:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b935a:	4c0f      	ldr	r4, [pc, #60]	; (b9398 <_Z16_fetch_usbserialv+0x40>)
{
   b935c:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b935e:	a803      	add	r0, sp, #12
   b9360:	f7ff fff1 	bl	b9346 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b9364:	7821      	ldrb	r1, [r4, #0]
   b9366:	f3bf 8f5b 	dmb	ish
   b936a:	f011 0101 	ands.w	r1, r1, #1
   b936e:	d10f      	bne.n	b9390 <_Z16_fetch_usbserialv+0x38>
   b9370:	4620      	mov	r0, r4
   b9372:	9101      	str	r1, [sp, #4]
   b9374:	f7fa fea0 	bl	b40b8 <__cxa_guard_acquire>
   b9378:	9901      	ldr	r1, [sp, #4]
   b937a:	b148      	cbz	r0, b9390 <_Z16_fetch_usbserialv+0x38>
   b937c:	aa03      	add	r2, sp, #12
   b937e:	4807      	ldr	r0, [pc, #28]	; (b939c <_Z16_fetch_usbserialv+0x44>)
   b9380:	f7ff ffc6 	bl	b9310 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b9384:	4620      	mov	r0, r4
   b9386:	f7fa fe9c 	bl	b40c2 <__cxa_guard_release>
   b938a:	4805      	ldr	r0, [pc, #20]	; (b93a0 <_Z16_fetch_usbserialv+0x48>)
   b938c:	f000 faea 	bl	b9964 <atexit>
	return _usbserial;
}
   b9390:	4802      	ldr	r0, [pc, #8]	; (b939c <_Z16_fetch_usbserialv+0x44>)
   b9392:	b008      	add	sp, #32
   b9394:	bd10      	pop	{r4, pc}
   b9396:	bf00      	nop
   b9398:	2003e708 	.word	0x2003e708
   b939c:	2003e70c 	.word	0x2003e70c
   b93a0:	000b9299 	.word	0x000b9299

000b93a4 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b93a4:	4b01      	ldr	r3, [pc, #4]	; (b93ac <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b93a6:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b93a8:	4770      	bx	lr
   b93aa:	bf00      	nop
   b93ac:	2003b6d8 	.word	0x2003b6d8

000b93b0 <serialEventRun>:
{
   b93b0:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b93b2:	4b0b      	ldr	r3, [pc, #44]	; (b93e0 <serialEventRun+0x30>)
   b93b4:	b143      	cbz	r3, b93c8 <serialEventRun+0x18>
   b93b6:	f7ff ffcf 	bl	b9358 <_Z16_fetch_usbserialv>
   b93ba:	6803      	ldr	r3, [r0, #0]
   b93bc:	691b      	ldr	r3, [r3, #16]
   b93be:	4798      	blx	r3
   b93c0:	2800      	cmp	r0, #0
   b93c2:	dd01      	ble.n	b93c8 <serialEventRun+0x18>
        serialEvent();
   b93c4:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b93c8:	4b06      	ldr	r3, [pc, #24]	; (b93e4 <serialEventRun+0x34>)
   b93ca:	b143      	cbz	r3, b93de <serialEventRun+0x2e>
   b93cc:	f000 f8e2 	bl	b9594 <_Z22__fetch_global_Serial1v>
   b93d0:	6803      	ldr	r3, [r0, #0]
   b93d2:	691b      	ldr	r3, [r3, #16]
   b93d4:	4798      	blx	r3
   b93d6:	2800      	cmp	r0, #0
   b93d8:	dd01      	ble.n	b93de <serialEventRun+0x2e>
        serialEvent1();
   b93da:	f3af 8000 	nop.w
}
   b93de:	bd08      	pop	{r3, pc}
	...

000b93e8 <_post_loop>:
{
   b93e8:	b508      	push	{r3, lr}
	serialEventRun();
   b93ea:	f7ff ffe1 	bl	b93b0 <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b93ee:	f7fd fc27 	bl	b6c40 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b93f2:	4b01      	ldr	r3, [pc, #4]	; (b93f8 <_post_loop+0x10>)
   b93f4:	6018      	str	r0, [r3, #0]
}
   b93f6:	bd08      	pop	{r3, pc}
   b93f8:	2003e728 	.word	0x2003e728

000b93fc <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b93fc:	4805      	ldr	r0, [pc, #20]	; (b9414 <_Z33system_initialize_user_backup_ramv+0x18>)
   b93fe:	4a06      	ldr	r2, [pc, #24]	; (b9418 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b9400:	4906      	ldr	r1, [pc, #24]	; (b941c <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b9402:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b9404:	1a12      	subs	r2, r2, r0
   b9406:	f000 fabb 	bl	b9980 <memcpy>
    __backup_sram_signature = signature;
   b940a:	4b05      	ldr	r3, [pc, #20]	; (b9420 <_Z33system_initialize_user_backup_ramv+0x24>)
   b940c:	4a05      	ldr	r2, [pc, #20]	; (b9424 <_Z33system_initialize_user_backup_ramv+0x28>)
   b940e:	601a      	str	r2, [r3, #0]
}
   b9410:	bd08      	pop	{r3, pc}
   b9412:	bf00      	nop
   b9414:	2003f400 	.word	0x2003f400
   b9418:	2003f404 	.word	0x2003f404
   b941c:	000bb144 	.word	0x000bb144
   b9420:	2003f400 	.word	0x2003f400
   b9424:	9a271c1e 	.word	0x9a271c1e

000b9428 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b9428:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b942a:	2300      	movs	r3, #0
   b942c:	9300      	str	r3, [sp, #0]
   b942e:	461a      	mov	r2, r3
   b9430:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b9434:	f7fd fd86 	bl	b6f44 <system_ctrl_set_result>
}
   b9438:	b003      	add	sp, #12
   b943a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b9440 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b9440:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b9442:	8843      	ldrh	r3, [r0, #2]
   b9444:	2b0a      	cmp	r3, #10
   b9446:	d008      	beq.n	b945a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b9448:	2b50      	cmp	r3, #80	; 0x50
   b944a:	d10b      	bne.n	b9464 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b944c:	4b09      	ldr	r3, [pc, #36]	; (b9474 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b944e:	681b      	ldr	r3, [r3, #0]
   b9450:	b14b      	cbz	r3, b9466 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b9452:	b003      	add	sp, #12
   b9454:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b9458:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b945a:	f7ff ffe5 	bl	b9428 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b945e:	b003      	add	sp, #12
   b9460:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b9464:	2300      	movs	r3, #0
   b9466:	9300      	str	r3, [sp, #0]
   b9468:	461a      	mov	r2, r3
   b946a:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b946e:	f7fd fd69 	bl	b6f44 <system_ctrl_set_result>
}
   b9472:	e7f4      	b.n	b945e <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b9474:	2003e724 	.word	0x2003e724

000b9478 <module_user_init_hook>:
{
   b9478:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b947a:	4812      	ldr	r0, [pc, #72]	; (b94c4 <module_user_init_hook+0x4c>)
   b947c:	2100      	movs	r1, #0
   b947e:	f7fd fe4b 	bl	b7118 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b9482:	4b11      	ldr	r3, [pc, #68]	; (b94c8 <module_user_init_hook+0x50>)
   b9484:	681a      	ldr	r2, [r3, #0]
   b9486:	4b11      	ldr	r3, [pc, #68]	; (b94cc <module_user_init_hook+0x54>)
   b9488:	429a      	cmp	r2, r3
   b948a:	4b11      	ldr	r3, [pc, #68]	; (b94d0 <module_user_init_hook+0x58>)
   b948c:	bf0c      	ite	eq
   b948e:	2201      	moveq	r2, #1
   b9490:	2200      	movne	r2, #0
   b9492:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b9494:	d001      	beq.n	b949a <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b9496:	f7ff ffb1 	bl	b93fc <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b949a:	f7fd fbc1 	bl	b6c20 <HAL_RNG_GetRandomNumber>
   b949e:	4604      	mov	r4, r0
    srand(seed);
   b94a0:	f000 fa9e 	bl	b99e0 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b94a4:	4b0b      	ldr	r3, [pc, #44]	; (b94d4 <module_user_init_hook+0x5c>)
   b94a6:	b113      	cbz	r3, b94ae <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b94a8:	4620      	mov	r0, r4
   b94aa:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b94ae:	2100      	movs	r1, #0
   b94b0:	4808      	ldr	r0, [pc, #32]	; (b94d4 <module_user_init_hook+0x5c>)
   b94b2:	f7fd fd71 	bl	b6f98 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b94b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b94ba:	4807      	ldr	r0, [pc, #28]	; (b94d8 <module_user_init_hook+0x60>)
   b94bc:	2100      	movs	r1, #0
   b94be:	f7fd bd37 	b.w	b6f30 <system_ctrl_set_app_request_handler>
   b94c2:	bf00      	nop
   b94c4:	000b93a5 	.word	0x000b93a5
   b94c8:	2003f400 	.word	0x2003f400
   b94cc:	9a271c1e 	.word	0x9a271c1e
   b94d0:	2003e720 	.word	0x2003e720
   b94d4:	00000000 	.word	0x00000000
   b94d8:	000b9441 	.word	0x000b9441

000b94dc <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b94dc:	4770      	bx	lr
	...

000b94e0 <_Z17acquireWireBufferv>:
{
   b94e0:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b94e2:	4b0a      	ldr	r3, [pc, #40]	; (b950c <_Z17acquireWireBufferv+0x2c>)
   b94e4:	6003      	str	r3, [r0, #0]
   b94e6:	2301      	movs	r3, #1
{
   b94e8:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b94ea:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b94ec:	4908      	ldr	r1, [pc, #32]	; (b9510 <_Z17acquireWireBufferv+0x30>)
   b94ee:	2020      	movs	r0, #32
   b94f0:	f000 f876 	bl	b95e0 <_ZnajRKSt9nothrow_t>
	};
   b94f4:	2520      	movs	r5, #32
   b94f6:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b94f8:	4905      	ldr	r1, [pc, #20]	; (b9510 <_Z17acquireWireBufferv+0x30>)
	};
   b94fa:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b94fc:	4628      	mov	r0, r5
   b94fe:	f000 f86f 	bl	b95e0 <_ZnajRKSt9nothrow_t>
	};
   b9502:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   b9506:	4620      	mov	r0, r4
   b9508:	bd38      	pop	{r3, r4, r5, pc}
   b950a:	bf00      	nop
   b950c:	00010018 	.word	0x00010018
   b9510:	000baf78 	.word	0x000baf78

000b9514 <_Z19__fetch_global_Wirev>:
{
   b9514:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b9516:	4d0e      	ldr	r5, [pc, #56]	; (b9550 <_Z19__fetch_global_Wirev+0x3c>)
   b9518:	7829      	ldrb	r1, [r5, #0]
   b951a:	f3bf 8f5b 	dmb	ish
   b951e:	f011 0401 	ands.w	r4, r1, #1
{
   b9522:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b9524:	d111      	bne.n	b954a <_Z19__fetch_global_Wirev+0x36>
   b9526:	4628      	mov	r0, r5
   b9528:	f7fa fdc6 	bl	b40b8 <__cxa_guard_acquire>
   b952c:	b168      	cbz	r0, b954a <_Z19__fetch_global_Wirev+0x36>
   b952e:	4668      	mov	r0, sp
   b9530:	f7ff ffd6 	bl	b94e0 <_Z17acquireWireBufferv>
   b9534:	466a      	mov	r2, sp
   b9536:	4621      	mov	r1, r4
   b9538:	4806      	ldr	r0, [pc, #24]	; (b9554 <_Z19__fetch_global_Wirev+0x40>)
   b953a:	f7fe f9a3 	bl	b7884 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b953e:	4628      	mov	r0, r5
   b9540:	f7fa fdbf 	bl	b40c2 <__cxa_guard_release>
   b9544:	4804      	ldr	r0, [pc, #16]	; (b9558 <_Z19__fetch_global_Wirev+0x44>)
   b9546:	f000 fa0d 	bl	b9964 <atexit>
	return wire;
}
   b954a:	4802      	ldr	r0, [pc, #8]	; (b9554 <_Z19__fetch_global_Wirev+0x40>)
   b954c:	b007      	add	sp, #28
   b954e:	bd30      	pop	{r4, r5, pc}
   b9550:	2003e72c 	.word	0x2003e72c
   b9554:	2003e730 	.word	0x2003e730
   b9558:	000b94dd 	.word	0x000b94dd

000b955c <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b955c:	4770      	bx	lr
	...

000b9560 <_Z20acquireSerial1Bufferv>:
{
   b9560:	b538      	push	{r3, r4, r5, lr}
   b9562:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b9564:	2514      	movs	r5, #20
   b9566:	462a      	mov	r2, r5
   b9568:	2100      	movs	r1, #0
   b956a:	f000 fa31 	bl	b99d0 <memset>
   b956e:	8025      	strh	r5, [r4, #0]
   b9570:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b9572:	4907      	ldr	r1, [pc, #28]	; (b9590 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b9574:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b9576:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b9578:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b957a:	f000 f831 	bl	b95e0 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b957e:	4904      	ldr	r1, [pc, #16]	; (b9590 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b9580:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b9582:	4628      	mov	r0, r5
   b9584:	f000 f82c 	bl	b95e0 <_ZnajRKSt9nothrow_t>
    };
   b9588:	60e0      	str	r0, [r4, #12]
}
   b958a:	4620      	mov	r0, r4
   b958c:	bd38      	pop	{r3, r4, r5, pc}
   b958e:	bf00      	nop
   b9590:	000baf78 	.word	0x000baf78

000b9594 <_Z22__fetch_global_Serial1v>:
{
   b9594:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b9596:	4d0e      	ldr	r5, [pc, #56]	; (b95d0 <_Z22__fetch_global_Serial1v+0x3c>)
   b9598:	7829      	ldrb	r1, [r5, #0]
   b959a:	f3bf 8f5b 	dmb	ish
   b959e:	f011 0401 	ands.w	r4, r1, #1
{
   b95a2:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b95a4:	d111      	bne.n	b95ca <_Z22__fetch_global_Serial1v+0x36>
   b95a6:	4628      	mov	r0, r5
   b95a8:	f7fa fd86 	bl	b40b8 <__cxa_guard_acquire>
   b95ac:	b168      	cbz	r0, b95ca <_Z22__fetch_global_Serial1v+0x36>
   b95ae:	a801      	add	r0, sp, #4
   b95b0:	f7ff ffd6 	bl	b9560 <_Z20acquireSerial1Bufferv>
   b95b4:	aa01      	add	r2, sp, #4
   b95b6:	4621      	mov	r1, r4
   b95b8:	4806      	ldr	r0, [pc, #24]	; (b95d4 <_Z22__fetch_global_Serial1v+0x40>)
   b95ba:	f7ff fe4d 	bl	b9258 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b95be:	4628      	mov	r0, r5
   b95c0:	f7fa fd7f 	bl	b40c2 <__cxa_guard_release>
   b95c4:	4804      	ldr	r0, [pc, #16]	; (b95d8 <_Z22__fetch_global_Serial1v+0x44>)
   b95c6:	f000 f9cd 	bl	b9964 <atexit>
    return serial1;
}
   b95ca:	4802      	ldr	r0, [pc, #8]	; (b95d4 <_Z22__fetch_global_Serial1v+0x40>)
   b95cc:	b007      	add	sp, #28
   b95ce:	bd30      	pop	{r4, r5, pc}
   b95d0:	2003e744 	.word	0x2003e744
   b95d4:	2003e748 	.word	0x2003e748
   b95d8:	000b955d 	.word	0x000b955d

000b95dc <_ZnwjRKSt9nothrow_t>:
   b95dc:	f7fa bd59 	b.w	b4092 <_Znwj>

000b95e0 <_ZnajRKSt9nothrow_t>:
   b95e0:	f7fa bd59 	b.w	b4096 <_Znaj>

000b95e4 <_ZSt25__throw_bad_function_callv>:
   b95e4:	b508      	push	{r3, lr}
   b95e6:	f7fd fd77 	bl	b70d8 <abort>
	...

000b95ec <__aeabi_drsub>:
   b95ec:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   b95f0:	e002      	b.n	b95f8 <__adddf3>
   b95f2:	bf00      	nop

000b95f4 <__aeabi_dsub>:
   b95f4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000b95f8 <__adddf3>:
   b95f8:	b530      	push	{r4, r5, lr}
   b95fa:	ea4f 0441 	mov.w	r4, r1, lsl #1
   b95fe:	ea4f 0543 	mov.w	r5, r3, lsl #1
   b9602:	ea94 0f05 	teq	r4, r5
   b9606:	bf08      	it	eq
   b9608:	ea90 0f02 	teqeq	r0, r2
   b960c:	bf1f      	itttt	ne
   b960e:	ea54 0c00 	orrsne.w	ip, r4, r0
   b9612:	ea55 0c02 	orrsne.w	ip, r5, r2
   b9616:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   b961a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b961e:	f000 80e2 	beq.w	b97e6 <__adddf3+0x1ee>
   b9622:	ea4f 5454 	mov.w	r4, r4, lsr #21
   b9626:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   b962a:	bfb8      	it	lt
   b962c:	426d      	neglt	r5, r5
   b962e:	dd0c      	ble.n	b964a <__adddf3+0x52>
   b9630:	442c      	add	r4, r5
   b9632:	ea80 0202 	eor.w	r2, r0, r2
   b9636:	ea81 0303 	eor.w	r3, r1, r3
   b963a:	ea82 0000 	eor.w	r0, r2, r0
   b963e:	ea83 0101 	eor.w	r1, r3, r1
   b9642:	ea80 0202 	eor.w	r2, r0, r2
   b9646:	ea81 0303 	eor.w	r3, r1, r3
   b964a:	2d36      	cmp	r5, #54	; 0x36
   b964c:	bf88      	it	hi
   b964e:	bd30      	pophi	{r4, r5, pc}
   b9650:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b9654:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b9658:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   b965c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   b9660:	d002      	beq.n	b9668 <__adddf3+0x70>
   b9662:	4240      	negs	r0, r0
   b9664:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b9668:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   b966c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b9670:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   b9674:	d002      	beq.n	b967c <__adddf3+0x84>
   b9676:	4252      	negs	r2, r2
   b9678:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b967c:	ea94 0f05 	teq	r4, r5
   b9680:	f000 80a7 	beq.w	b97d2 <__adddf3+0x1da>
   b9684:	f1a4 0401 	sub.w	r4, r4, #1
   b9688:	f1d5 0e20 	rsbs	lr, r5, #32
   b968c:	db0d      	blt.n	b96aa <__adddf3+0xb2>
   b968e:	fa02 fc0e 	lsl.w	ip, r2, lr
   b9692:	fa22 f205 	lsr.w	r2, r2, r5
   b9696:	1880      	adds	r0, r0, r2
   b9698:	f141 0100 	adc.w	r1, r1, #0
   b969c:	fa03 f20e 	lsl.w	r2, r3, lr
   b96a0:	1880      	adds	r0, r0, r2
   b96a2:	fa43 f305 	asr.w	r3, r3, r5
   b96a6:	4159      	adcs	r1, r3
   b96a8:	e00e      	b.n	b96c8 <__adddf3+0xd0>
   b96aa:	f1a5 0520 	sub.w	r5, r5, #32
   b96ae:	f10e 0e20 	add.w	lr, lr, #32
   b96b2:	2a01      	cmp	r2, #1
   b96b4:	fa03 fc0e 	lsl.w	ip, r3, lr
   b96b8:	bf28      	it	cs
   b96ba:	f04c 0c02 	orrcs.w	ip, ip, #2
   b96be:	fa43 f305 	asr.w	r3, r3, r5
   b96c2:	18c0      	adds	r0, r0, r3
   b96c4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   b96c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b96cc:	d507      	bpl.n	b96de <__adddf3+0xe6>
   b96ce:	f04f 0e00 	mov.w	lr, #0
   b96d2:	f1dc 0c00 	rsbs	ip, ip, #0
   b96d6:	eb7e 0000 	sbcs.w	r0, lr, r0
   b96da:	eb6e 0101 	sbc.w	r1, lr, r1
   b96de:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   b96e2:	d31b      	bcc.n	b971c <__adddf3+0x124>
   b96e4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   b96e8:	d30c      	bcc.n	b9704 <__adddf3+0x10c>
   b96ea:	0849      	lsrs	r1, r1, #1
   b96ec:	ea5f 0030 	movs.w	r0, r0, rrx
   b96f0:	ea4f 0c3c 	mov.w	ip, ip, rrx
   b96f4:	f104 0401 	add.w	r4, r4, #1
   b96f8:	ea4f 5244 	mov.w	r2, r4, lsl #21
   b96fc:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   b9700:	f080 809a 	bcs.w	b9838 <__adddf3+0x240>
   b9704:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b9708:	bf08      	it	eq
   b970a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b970e:	f150 0000 	adcs.w	r0, r0, #0
   b9712:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b9716:	ea41 0105 	orr.w	r1, r1, r5
   b971a:	bd30      	pop	{r4, r5, pc}
   b971c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   b9720:	4140      	adcs	r0, r0
   b9722:	eb41 0101 	adc.w	r1, r1, r1
   b9726:	3c01      	subs	r4, #1
   b9728:	bf28      	it	cs
   b972a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   b972e:	d2e9      	bcs.n	b9704 <__adddf3+0x10c>
   b9730:	f091 0f00 	teq	r1, #0
   b9734:	bf04      	itt	eq
   b9736:	4601      	moveq	r1, r0
   b9738:	2000      	moveq	r0, #0
   b973a:	fab1 f381 	clz	r3, r1
   b973e:	bf08      	it	eq
   b9740:	3320      	addeq	r3, #32
   b9742:	f1a3 030b 	sub.w	r3, r3, #11
   b9746:	f1b3 0220 	subs.w	r2, r3, #32
   b974a:	da0c      	bge.n	b9766 <__adddf3+0x16e>
   b974c:	320c      	adds	r2, #12
   b974e:	dd08      	ble.n	b9762 <__adddf3+0x16a>
   b9750:	f102 0c14 	add.w	ip, r2, #20
   b9754:	f1c2 020c 	rsb	r2, r2, #12
   b9758:	fa01 f00c 	lsl.w	r0, r1, ip
   b975c:	fa21 f102 	lsr.w	r1, r1, r2
   b9760:	e00c      	b.n	b977c <__adddf3+0x184>
   b9762:	f102 0214 	add.w	r2, r2, #20
   b9766:	bfd8      	it	le
   b9768:	f1c2 0c20 	rsble	ip, r2, #32
   b976c:	fa01 f102 	lsl.w	r1, r1, r2
   b9770:	fa20 fc0c 	lsr.w	ip, r0, ip
   b9774:	bfdc      	itt	le
   b9776:	ea41 010c 	orrle.w	r1, r1, ip
   b977a:	4090      	lslle	r0, r2
   b977c:	1ae4      	subs	r4, r4, r3
   b977e:	bfa2      	ittt	ge
   b9780:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   b9784:	4329      	orrge	r1, r5
   b9786:	bd30      	popge	{r4, r5, pc}
   b9788:	ea6f 0404 	mvn.w	r4, r4
   b978c:	3c1f      	subs	r4, #31
   b978e:	da1c      	bge.n	b97ca <__adddf3+0x1d2>
   b9790:	340c      	adds	r4, #12
   b9792:	dc0e      	bgt.n	b97b2 <__adddf3+0x1ba>
   b9794:	f104 0414 	add.w	r4, r4, #20
   b9798:	f1c4 0220 	rsb	r2, r4, #32
   b979c:	fa20 f004 	lsr.w	r0, r0, r4
   b97a0:	fa01 f302 	lsl.w	r3, r1, r2
   b97a4:	ea40 0003 	orr.w	r0, r0, r3
   b97a8:	fa21 f304 	lsr.w	r3, r1, r4
   b97ac:	ea45 0103 	orr.w	r1, r5, r3
   b97b0:	bd30      	pop	{r4, r5, pc}
   b97b2:	f1c4 040c 	rsb	r4, r4, #12
   b97b6:	f1c4 0220 	rsb	r2, r4, #32
   b97ba:	fa20 f002 	lsr.w	r0, r0, r2
   b97be:	fa01 f304 	lsl.w	r3, r1, r4
   b97c2:	ea40 0003 	orr.w	r0, r0, r3
   b97c6:	4629      	mov	r1, r5
   b97c8:	bd30      	pop	{r4, r5, pc}
   b97ca:	fa21 f004 	lsr.w	r0, r1, r4
   b97ce:	4629      	mov	r1, r5
   b97d0:	bd30      	pop	{r4, r5, pc}
   b97d2:	f094 0f00 	teq	r4, #0
   b97d6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   b97da:	bf06      	itte	eq
   b97dc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   b97e0:	3401      	addeq	r4, #1
   b97e2:	3d01      	subne	r5, #1
   b97e4:	e74e      	b.n	b9684 <__adddf3+0x8c>
   b97e6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b97ea:	bf18      	it	ne
   b97ec:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b97f0:	d029      	beq.n	b9846 <__adddf3+0x24e>
   b97f2:	ea94 0f05 	teq	r4, r5
   b97f6:	bf08      	it	eq
   b97f8:	ea90 0f02 	teqeq	r0, r2
   b97fc:	d005      	beq.n	b980a <__adddf3+0x212>
   b97fe:	ea54 0c00 	orrs.w	ip, r4, r0
   b9802:	bf04      	itt	eq
   b9804:	4619      	moveq	r1, r3
   b9806:	4610      	moveq	r0, r2
   b9808:	bd30      	pop	{r4, r5, pc}
   b980a:	ea91 0f03 	teq	r1, r3
   b980e:	bf1e      	ittt	ne
   b9810:	2100      	movne	r1, #0
   b9812:	2000      	movne	r0, #0
   b9814:	bd30      	popne	{r4, r5, pc}
   b9816:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   b981a:	d105      	bne.n	b9828 <__adddf3+0x230>
   b981c:	0040      	lsls	r0, r0, #1
   b981e:	4149      	adcs	r1, r1
   b9820:	bf28      	it	cs
   b9822:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   b9826:	bd30      	pop	{r4, r5, pc}
   b9828:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   b982c:	bf3c      	itt	cc
   b982e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   b9832:	bd30      	popcc	{r4, r5, pc}
   b9834:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b9838:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   b983c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b9840:	f04f 0000 	mov.w	r0, #0
   b9844:	bd30      	pop	{r4, r5, pc}
   b9846:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b984a:	bf1a      	itte	ne
   b984c:	4619      	movne	r1, r3
   b984e:	4610      	movne	r0, r2
   b9850:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   b9854:	bf1c      	itt	ne
   b9856:	460b      	movne	r3, r1
   b9858:	4602      	movne	r2, r0
   b985a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b985e:	bf06      	itte	eq
   b9860:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   b9864:	ea91 0f03 	teqeq	r1, r3
   b9868:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   b986c:	bd30      	pop	{r4, r5, pc}
   b986e:	bf00      	nop

000b9870 <__aeabi_ui2d>:
   b9870:	f090 0f00 	teq	r0, #0
   b9874:	bf04      	itt	eq
   b9876:	2100      	moveq	r1, #0
   b9878:	4770      	bxeq	lr
   b987a:	b530      	push	{r4, r5, lr}
   b987c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b9880:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b9884:	f04f 0500 	mov.w	r5, #0
   b9888:	f04f 0100 	mov.w	r1, #0
   b988c:	e750      	b.n	b9730 <__adddf3+0x138>
   b988e:	bf00      	nop

000b9890 <__aeabi_i2d>:
   b9890:	f090 0f00 	teq	r0, #0
   b9894:	bf04      	itt	eq
   b9896:	2100      	moveq	r1, #0
   b9898:	4770      	bxeq	lr
   b989a:	b530      	push	{r4, r5, lr}
   b989c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b98a0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b98a4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   b98a8:	bf48      	it	mi
   b98aa:	4240      	negmi	r0, r0
   b98ac:	f04f 0100 	mov.w	r1, #0
   b98b0:	e73e      	b.n	b9730 <__adddf3+0x138>
   b98b2:	bf00      	nop

000b98b4 <__aeabi_f2d>:
   b98b4:	0042      	lsls	r2, r0, #1
   b98b6:	ea4f 01e2 	mov.w	r1, r2, asr #3
   b98ba:	ea4f 0131 	mov.w	r1, r1, rrx
   b98be:	ea4f 7002 	mov.w	r0, r2, lsl #28
   b98c2:	bf1f      	itttt	ne
   b98c4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   b98c8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   b98cc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   b98d0:	4770      	bxne	lr
   b98d2:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   b98d6:	bf08      	it	eq
   b98d8:	4770      	bxeq	lr
   b98da:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   b98de:	bf04      	itt	eq
   b98e0:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   b98e4:	4770      	bxeq	lr
   b98e6:	b530      	push	{r4, r5, lr}
   b98e8:	f44f 7460 	mov.w	r4, #896	; 0x380
   b98ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b98f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b98f4:	e71c      	b.n	b9730 <__adddf3+0x138>
   b98f6:	bf00      	nop

000b98f8 <__aeabi_ul2d>:
   b98f8:	ea50 0201 	orrs.w	r2, r0, r1
   b98fc:	bf08      	it	eq
   b98fe:	4770      	bxeq	lr
   b9900:	b530      	push	{r4, r5, lr}
   b9902:	f04f 0500 	mov.w	r5, #0
   b9906:	e00a      	b.n	b991e <__aeabi_l2d+0x16>

000b9908 <__aeabi_l2d>:
   b9908:	ea50 0201 	orrs.w	r2, r0, r1
   b990c:	bf08      	it	eq
   b990e:	4770      	bxeq	lr
   b9910:	b530      	push	{r4, r5, lr}
   b9912:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   b9916:	d502      	bpl.n	b991e <__aeabi_l2d+0x16>
   b9918:	4240      	negs	r0, r0
   b991a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b991e:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b9922:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b9926:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   b992a:	f43f aed8 	beq.w	b96de <__adddf3+0xe6>
   b992e:	f04f 0203 	mov.w	r2, #3
   b9932:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b9936:	bf18      	it	ne
   b9938:	3203      	addne	r2, #3
   b993a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b993e:	bf18      	it	ne
   b9940:	3203      	addne	r2, #3
   b9942:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   b9946:	f1c2 0320 	rsb	r3, r2, #32
   b994a:	fa00 fc03 	lsl.w	ip, r0, r3
   b994e:	fa20 f002 	lsr.w	r0, r0, r2
   b9952:	fa01 fe03 	lsl.w	lr, r1, r3
   b9956:	ea40 000e 	orr.w	r0, r0, lr
   b995a:	fa21 f102 	lsr.w	r1, r1, r2
   b995e:	4414      	add	r4, r2
   b9960:	e6bd      	b.n	b96de <__adddf3+0xe6>
   b9962:	bf00      	nop

000b9964 <atexit>:
   b9964:	2300      	movs	r3, #0
   b9966:	4601      	mov	r1, r0
   b9968:	461a      	mov	r2, r3
   b996a:	4618      	mov	r0, r3
   b996c:	f000 b9a8 	b.w	b9cc0 <__register_exitproc>

000b9970 <isprint>:
   b9970:	4b02      	ldr	r3, [pc, #8]	; (b997c <isprint+0xc>)
   b9972:	4418      	add	r0, r3
   b9974:	7840      	ldrb	r0, [r0, #1]
   b9976:	f000 0097 	and.w	r0, r0, #151	; 0x97
   b997a:	4770      	bx	lr
   b997c:	000bafe9 	.word	0x000bafe9

000b9980 <memcpy>:
   b9980:	440a      	add	r2, r1
   b9982:	4291      	cmp	r1, r2
   b9984:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   b9988:	d100      	bne.n	b998c <memcpy+0xc>
   b998a:	4770      	bx	lr
   b998c:	b510      	push	{r4, lr}
   b998e:	f811 4b01 	ldrb.w	r4, [r1], #1
   b9992:	f803 4f01 	strb.w	r4, [r3, #1]!
   b9996:	4291      	cmp	r1, r2
   b9998:	d1f9      	bne.n	b998e <memcpy+0xe>
   b999a:	bd10      	pop	{r4, pc}

000b999c <memmove>:
   b999c:	4288      	cmp	r0, r1
   b999e:	b510      	push	{r4, lr}
   b99a0:	eb01 0402 	add.w	r4, r1, r2
   b99a4:	d902      	bls.n	b99ac <memmove+0x10>
   b99a6:	4284      	cmp	r4, r0
   b99a8:	4623      	mov	r3, r4
   b99aa:	d807      	bhi.n	b99bc <memmove+0x20>
   b99ac:	1e43      	subs	r3, r0, #1
   b99ae:	42a1      	cmp	r1, r4
   b99b0:	d008      	beq.n	b99c4 <memmove+0x28>
   b99b2:	f811 2b01 	ldrb.w	r2, [r1], #1
   b99b6:	f803 2f01 	strb.w	r2, [r3, #1]!
   b99ba:	e7f8      	b.n	b99ae <memmove+0x12>
   b99bc:	4402      	add	r2, r0
   b99be:	4601      	mov	r1, r0
   b99c0:	428a      	cmp	r2, r1
   b99c2:	d100      	bne.n	b99c6 <memmove+0x2a>
   b99c4:	bd10      	pop	{r4, pc}
   b99c6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   b99ca:	f802 4d01 	strb.w	r4, [r2, #-1]!
   b99ce:	e7f7      	b.n	b99c0 <memmove+0x24>

000b99d0 <memset>:
   b99d0:	4402      	add	r2, r0
   b99d2:	4603      	mov	r3, r0
   b99d4:	4293      	cmp	r3, r2
   b99d6:	d100      	bne.n	b99da <memset+0xa>
   b99d8:	4770      	bx	lr
   b99da:	f803 1b01 	strb.w	r1, [r3], #1
   b99de:	e7f9      	b.n	b99d4 <memset+0x4>

000b99e0 <srand>:
   b99e0:	b538      	push	{r3, r4, r5, lr}
   b99e2:	4b10      	ldr	r3, [pc, #64]	; (b9a24 <srand+0x44>)
   b99e4:	681d      	ldr	r5, [r3, #0]
   b99e6:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b99e8:	4604      	mov	r4, r0
   b99ea:	b9b3      	cbnz	r3, b9a1a <srand+0x3a>
   b99ec:	2018      	movs	r0, #24
   b99ee:	f7fd fb3b 	bl	b7068 <malloc>
   b99f2:	4602      	mov	r2, r0
   b99f4:	63a8      	str	r0, [r5, #56]	; 0x38
   b99f6:	b920      	cbnz	r0, b9a02 <srand+0x22>
   b99f8:	4b0b      	ldr	r3, [pc, #44]	; (b9a28 <srand+0x48>)
   b99fa:	480c      	ldr	r0, [pc, #48]	; (b9a2c <srand+0x4c>)
   b99fc:	2142      	movs	r1, #66	; 0x42
   b99fe:	f7fd fb83 	bl	b7108 <__assert_func>
   b9a02:	490b      	ldr	r1, [pc, #44]	; (b9a30 <srand+0x50>)
   b9a04:	4b0b      	ldr	r3, [pc, #44]	; (b9a34 <srand+0x54>)
   b9a06:	e9c0 1300 	strd	r1, r3, [r0]
   b9a0a:	4b0b      	ldr	r3, [pc, #44]	; (b9a38 <srand+0x58>)
   b9a0c:	6083      	str	r3, [r0, #8]
   b9a0e:	230b      	movs	r3, #11
   b9a10:	8183      	strh	r3, [r0, #12]
   b9a12:	2100      	movs	r1, #0
   b9a14:	2001      	movs	r0, #1
   b9a16:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b9a1a:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b9a1c:	2200      	movs	r2, #0
   b9a1e:	611c      	str	r4, [r3, #16]
   b9a20:	615a      	str	r2, [r3, #20]
   b9a22:	bd38      	pop	{r3, r4, r5, pc}
   b9a24:	2003b6d8 	.word	0x2003b6d8
   b9a28:	000baf79 	.word	0x000baf79
   b9a2c:	000baf90 	.word	0x000baf90
   b9a30:	abcd330e 	.word	0xabcd330e
   b9a34:	e66d1234 	.word	0xe66d1234
   b9a38:	0005deec 	.word	0x0005deec

000b9a3c <rand>:
   b9a3c:	4b16      	ldr	r3, [pc, #88]	; (b9a98 <rand+0x5c>)
   b9a3e:	b510      	push	{r4, lr}
   b9a40:	681c      	ldr	r4, [r3, #0]
   b9a42:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   b9a44:	b9b3      	cbnz	r3, b9a74 <rand+0x38>
   b9a46:	2018      	movs	r0, #24
   b9a48:	f7fd fb0e 	bl	b7068 <malloc>
   b9a4c:	63a0      	str	r0, [r4, #56]	; 0x38
   b9a4e:	b928      	cbnz	r0, b9a5c <rand+0x20>
   b9a50:	4602      	mov	r2, r0
   b9a52:	4b12      	ldr	r3, [pc, #72]	; (b9a9c <rand+0x60>)
   b9a54:	4812      	ldr	r0, [pc, #72]	; (b9aa0 <rand+0x64>)
   b9a56:	214e      	movs	r1, #78	; 0x4e
   b9a58:	f7fd fb56 	bl	b7108 <__assert_func>
   b9a5c:	4a11      	ldr	r2, [pc, #68]	; (b9aa4 <rand+0x68>)
   b9a5e:	4b12      	ldr	r3, [pc, #72]	; (b9aa8 <rand+0x6c>)
   b9a60:	e9c0 2300 	strd	r2, r3, [r0]
   b9a64:	4b11      	ldr	r3, [pc, #68]	; (b9aac <rand+0x70>)
   b9a66:	6083      	str	r3, [r0, #8]
   b9a68:	230b      	movs	r3, #11
   b9a6a:	8183      	strh	r3, [r0, #12]
   b9a6c:	2201      	movs	r2, #1
   b9a6e:	2300      	movs	r3, #0
   b9a70:	e9c0 2304 	strd	r2, r3, [r0, #16]
   b9a74:	6ba4      	ldr	r4, [r4, #56]	; 0x38
   b9a76:	4a0e      	ldr	r2, [pc, #56]	; (b9ab0 <rand+0x74>)
   b9a78:	6920      	ldr	r0, [r4, #16]
   b9a7a:	6963      	ldr	r3, [r4, #20]
   b9a7c:	490d      	ldr	r1, [pc, #52]	; (b9ab4 <rand+0x78>)
   b9a7e:	4342      	muls	r2, r0
   b9a80:	fb01 2203 	mla	r2, r1, r3, r2
   b9a84:	fba0 0101 	umull	r0, r1, r0, r1
   b9a88:	1c43      	adds	r3, r0, #1
   b9a8a:	eb42 0001 	adc.w	r0, r2, r1
   b9a8e:	e9c4 3004 	strd	r3, r0, [r4, #16]
   b9a92:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
   b9a96:	bd10      	pop	{r4, pc}
   b9a98:	2003b6d8 	.word	0x2003b6d8
   b9a9c:	000baf79 	.word	0x000baf79
   b9aa0:	000baf90 	.word	0x000baf90
   b9aa4:	abcd330e 	.word	0xabcd330e
   b9aa8:	e66d1234 	.word	0xe66d1234
   b9aac:	0005deec 	.word	0x0005deec
   b9ab0:	5851f42d 	.word	0x5851f42d
   b9ab4:	4c957f2d 	.word	0x4c957f2d

000b9ab8 <strchr>:
   b9ab8:	b2c9      	uxtb	r1, r1
   b9aba:	4603      	mov	r3, r0
   b9abc:	f810 2b01 	ldrb.w	r2, [r0], #1
   b9ac0:	b11a      	cbz	r2, b9aca <strchr+0x12>
   b9ac2:	428a      	cmp	r2, r1
   b9ac4:	d1f9      	bne.n	b9aba <strchr+0x2>
   b9ac6:	4618      	mov	r0, r3
   b9ac8:	4770      	bx	lr
   b9aca:	2900      	cmp	r1, #0
   b9acc:	bf18      	it	ne
   b9ace:	2300      	movne	r3, #0
   b9ad0:	e7f9      	b.n	b9ac6 <strchr+0xe>

000b9ad2 <strchrnul>:
   b9ad2:	b510      	push	{r4, lr}
   b9ad4:	4604      	mov	r4, r0
   b9ad6:	f7ff ffef 	bl	b9ab8 <strchr>
   b9ada:	b918      	cbnz	r0, b9ae4 <strchrnul+0x12>
   b9adc:	4620      	mov	r0, r4
   b9ade:	f000 f832 	bl	b9b46 <strlen>
   b9ae2:	4420      	add	r0, r4
   b9ae4:	bd10      	pop	{r4, pc}

000b9ae6 <strcmp>:
   b9ae6:	f810 2b01 	ldrb.w	r2, [r0], #1
   b9aea:	f811 3b01 	ldrb.w	r3, [r1], #1
   b9aee:	2a01      	cmp	r2, #1
   b9af0:	bf28      	it	cs
   b9af2:	429a      	cmpcs	r2, r3
   b9af4:	d0f7      	beq.n	b9ae6 <strcmp>
   b9af6:	1ad0      	subs	r0, r2, r3
   b9af8:	4770      	bx	lr

000b9afa <strcpy>:
   b9afa:	4603      	mov	r3, r0
   b9afc:	f811 2b01 	ldrb.w	r2, [r1], #1
   b9b00:	f803 2b01 	strb.w	r2, [r3], #1
   b9b04:	2a00      	cmp	r2, #0
   b9b06:	d1f9      	bne.n	b9afc <strcpy+0x2>
   b9b08:	4770      	bx	lr
	...

000b9b0c <strdup>:
   b9b0c:	4b02      	ldr	r3, [pc, #8]	; (b9b18 <strdup+0xc>)
   b9b0e:	4601      	mov	r1, r0
   b9b10:	6818      	ldr	r0, [r3, #0]
   b9b12:	f000 b803 	b.w	b9b1c <_strdup_r>
   b9b16:	bf00      	nop
   b9b18:	2003b6d8 	.word	0x2003b6d8

000b9b1c <_strdup_r>:
   b9b1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b9b1e:	4604      	mov	r4, r0
   b9b20:	4608      	mov	r0, r1
   b9b22:	460d      	mov	r5, r1
   b9b24:	f000 f80f 	bl	b9b46 <strlen>
   b9b28:	1c42      	adds	r2, r0, #1
   b9b2a:	4611      	mov	r1, r2
   b9b2c:	4620      	mov	r0, r4
   b9b2e:	9201      	str	r2, [sp, #4]
   b9b30:	f7fd fada 	bl	b70e8 <_malloc_r>
   b9b34:	4604      	mov	r4, r0
   b9b36:	b118      	cbz	r0, b9b40 <_strdup_r+0x24>
   b9b38:	9a01      	ldr	r2, [sp, #4]
   b9b3a:	4629      	mov	r1, r5
   b9b3c:	f7ff ff20 	bl	b9980 <memcpy>
   b9b40:	4620      	mov	r0, r4
   b9b42:	b003      	add	sp, #12
   b9b44:	bd30      	pop	{r4, r5, pc}

000b9b46 <strlen>:
   b9b46:	4603      	mov	r3, r0
   b9b48:	f813 2b01 	ldrb.w	r2, [r3], #1
   b9b4c:	2a00      	cmp	r2, #0
   b9b4e:	d1fb      	bne.n	b9b48 <strlen+0x2>
   b9b50:	1a18      	subs	r0, r3, r0
   b9b52:	3801      	subs	r0, #1
   b9b54:	4770      	bx	lr

000b9b56 <strncmp>:
   b9b56:	b510      	push	{r4, lr}
   b9b58:	b17a      	cbz	r2, b9b7a <strncmp+0x24>
   b9b5a:	4603      	mov	r3, r0
   b9b5c:	3901      	subs	r1, #1
   b9b5e:	1884      	adds	r4, r0, r2
   b9b60:	f813 0b01 	ldrb.w	r0, [r3], #1
   b9b64:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   b9b68:	4290      	cmp	r0, r2
   b9b6a:	d101      	bne.n	b9b70 <strncmp+0x1a>
   b9b6c:	42a3      	cmp	r3, r4
   b9b6e:	d101      	bne.n	b9b74 <strncmp+0x1e>
   b9b70:	1a80      	subs	r0, r0, r2
   b9b72:	bd10      	pop	{r4, pc}
   b9b74:	2800      	cmp	r0, #0
   b9b76:	d1f3      	bne.n	b9b60 <strncmp+0xa>
   b9b78:	e7fa      	b.n	b9b70 <strncmp+0x1a>
   b9b7a:	4610      	mov	r0, r2
   b9b7c:	e7f9      	b.n	b9b72 <strncmp+0x1c>

000b9b7e <strrchr>:
   b9b7e:	b538      	push	{r3, r4, r5, lr}
   b9b80:	4603      	mov	r3, r0
   b9b82:	460c      	mov	r4, r1
   b9b84:	b969      	cbnz	r1, b9ba2 <strrchr+0x24>
   b9b86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b9b8a:	f7ff bf95 	b.w	b9ab8 <strchr>
   b9b8e:	1c43      	adds	r3, r0, #1
   b9b90:	4605      	mov	r5, r0
   b9b92:	4621      	mov	r1, r4
   b9b94:	4618      	mov	r0, r3
   b9b96:	f7ff ff8f 	bl	b9ab8 <strchr>
   b9b9a:	2800      	cmp	r0, #0
   b9b9c:	d1f7      	bne.n	b9b8e <strrchr+0x10>
   b9b9e:	4628      	mov	r0, r5
   b9ba0:	bd38      	pop	{r3, r4, r5, pc}
   b9ba2:	2500      	movs	r5, #0
   b9ba4:	e7f5      	b.n	b9b92 <strrchr+0x14>
	...

000b9ba8 <_strtol_l.constprop.0>:
   b9ba8:	2b01      	cmp	r3, #1
   b9baa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b9bae:	d001      	beq.n	b9bb4 <_strtol_l.constprop.0+0xc>
   b9bb0:	2b24      	cmp	r3, #36	; 0x24
   b9bb2:	d906      	bls.n	b9bc2 <_strtol_l.constprop.0+0x1a>
   b9bb4:	f7fd faa0 	bl	b70f8 <__errno>
   b9bb8:	2316      	movs	r3, #22
   b9bba:	6003      	str	r3, [r0, #0]
   b9bbc:	2000      	movs	r0, #0
   b9bbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b9bc2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; b9ca8 <_strtol_l.constprop.0+0x100>
   b9bc6:	460d      	mov	r5, r1
   b9bc8:	462e      	mov	r6, r5
   b9bca:	f815 4b01 	ldrb.w	r4, [r5], #1
   b9bce:	f814 700c 	ldrb.w	r7, [r4, ip]
   b9bd2:	f017 0708 	ands.w	r7, r7, #8
   b9bd6:	d1f7      	bne.n	b9bc8 <_strtol_l.constprop.0+0x20>
   b9bd8:	2c2d      	cmp	r4, #45	; 0x2d
   b9bda:	d132      	bne.n	b9c42 <_strtol_l.constprop.0+0x9a>
   b9bdc:	782c      	ldrb	r4, [r5, #0]
   b9bde:	2701      	movs	r7, #1
   b9be0:	1cb5      	adds	r5, r6, #2
   b9be2:	2b00      	cmp	r3, #0
   b9be4:	d05b      	beq.n	b9c9e <_strtol_l.constprop.0+0xf6>
   b9be6:	2b10      	cmp	r3, #16
   b9be8:	d109      	bne.n	b9bfe <_strtol_l.constprop.0+0x56>
   b9bea:	2c30      	cmp	r4, #48	; 0x30
   b9bec:	d107      	bne.n	b9bfe <_strtol_l.constprop.0+0x56>
   b9bee:	782c      	ldrb	r4, [r5, #0]
   b9bf0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   b9bf4:	2c58      	cmp	r4, #88	; 0x58
   b9bf6:	d14d      	bne.n	b9c94 <_strtol_l.constprop.0+0xec>
   b9bf8:	786c      	ldrb	r4, [r5, #1]
   b9bfa:	2310      	movs	r3, #16
   b9bfc:	3502      	adds	r5, #2
   b9bfe:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   b9c02:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   b9c06:	f04f 0c00 	mov.w	ip, #0
   b9c0a:	fbb8 f9f3 	udiv	r9, r8, r3
   b9c0e:	4666      	mov	r6, ip
   b9c10:	fb03 8a19 	mls	sl, r3, r9, r8
   b9c14:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   b9c18:	f1be 0f09 	cmp.w	lr, #9
   b9c1c:	d816      	bhi.n	b9c4c <_strtol_l.constprop.0+0xa4>
   b9c1e:	4674      	mov	r4, lr
   b9c20:	42a3      	cmp	r3, r4
   b9c22:	dd24      	ble.n	b9c6e <_strtol_l.constprop.0+0xc6>
   b9c24:	f1bc 0f00 	cmp.w	ip, #0
   b9c28:	db1e      	blt.n	b9c68 <_strtol_l.constprop.0+0xc0>
   b9c2a:	45b1      	cmp	r9, r6
   b9c2c:	d31c      	bcc.n	b9c68 <_strtol_l.constprop.0+0xc0>
   b9c2e:	d101      	bne.n	b9c34 <_strtol_l.constprop.0+0x8c>
   b9c30:	45a2      	cmp	sl, r4
   b9c32:	db19      	blt.n	b9c68 <_strtol_l.constprop.0+0xc0>
   b9c34:	fb06 4603 	mla	r6, r6, r3, r4
   b9c38:	f04f 0c01 	mov.w	ip, #1
   b9c3c:	f815 4b01 	ldrb.w	r4, [r5], #1
   b9c40:	e7e8      	b.n	b9c14 <_strtol_l.constprop.0+0x6c>
   b9c42:	2c2b      	cmp	r4, #43	; 0x2b
   b9c44:	bf04      	itt	eq
   b9c46:	782c      	ldrbeq	r4, [r5, #0]
   b9c48:	1cb5      	addeq	r5, r6, #2
   b9c4a:	e7ca      	b.n	b9be2 <_strtol_l.constprop.0+0x3a>
   b9c4c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   b9c50:	f1be 0f19 	cmp.w	lr, #25
   b9c54:	d801      	bhi.n	b9c5a <_strtol_l.constprop.0+0xb2>
   b9c56:	3c37      	subs	r4, #55	; 0x37
   b9c58:	e7e2      	b.n	b9c20 <_strtol_l.constprop.0+0x78>
   b9c5a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   b9c5e:	f1be 0f19 	cmp.w	lr, #25
   b9c62:	d804      	bhi.n	b9c6e <_strtol_l.constprop.0+0xc6>
   b9c64:	3c57      	subs	r4, #87	; 0x57
   b9c66:	e7db      	b.n	b9c20 <_strtol_l.constprop.0+0x78>
   b9c68:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   b9c6c:	e7e6      	b.n	b9c3c <_strtol_l.constprop.0+0x94>
   b9c6e:	f1bc 0f00 	cmp.w	ip, #0
   b9c72:	da05      	bge.n	b9c80 <_strtol_l.constprop.0+0xd8>
   b9c74:	2322      	movs	r3, #34	; 0x22
   b9c76:	6003      	str	r3, [r0, #0]
   b9c78:	4646      	mov	r6, r8
   b9c7a:	b942      	cbnz	r2, b9c8e <_strtol_l.constprop.0+0xe6>
   b9c7c:	4630      	mov	r0, r6
   b9c7e:	e79e      	b.n	b9bbe <_strtol_l.constprop.0+0x16>
   b9c80:	b107      	cbz	r7, b9c84 <_strtol_l.constprop.0+0xdc>
   b9c82:	4276      	negs	r6, r6
   b9c84:	2a00      	cmp	r2, #0
   b9c86:	d0f9      	beq.n	b9c7c <_strtol_l.constprop.0+0xd4>
   b9c88:	f1bc 0f00 	cmp.w	ip, #0
   b9c8c:	d000      	beq.n	b9c90 <_strtol_l.constprop.0+0xe8>
   b9c8e:	1e69      	subs	r1, r5, #1
   b9c90:	6011      	str	r1, [r2, #0]
   b9c92:	e7f3      	b.n	b9c7c <_strtol_l.constprop.0+0xd4>
   b9c94:	2430      	movs	r4, #48	; 0x30
   b9c96:	2b00      	cmp	r3, #0
   b9c98:	d1b1      	bne.n	b9bfe <_strtol_l.constprop.0+0x56>
   b9c9a:	2308      	movs	r3, #8
   b9c9c:	e7af      	b.n	b9bfe <_strtol_l.constprop.0+0x56>
   b9c9e:	2c30      	cmp	r4, #48	; 0x30
   b9ca0:	d0a5      	beq.n	b9bee <_strtol_l.constprop.0+0x46>
   b9ca2:	230a      	movs	r3, #10
   b9ca4:	e7ab      	b.n	b9bfe <_strtol_l.constprop.0+0x56>
   b9ca6:	bf00      	nop
   b9ca8:	000bafea 	.word	0x000bafea

000b9cac <strtol>:
   b9cac:	4613      	mov	r3, r2
   b9cae:	460a      	mov	r2, r1
   b9cb0:	4601      	mov	r1, r0
   b9cb2:	4802      	ldr	r0, [pc, #8]	; (b9cbc <strtol+0x10>)
   b9cb4:	6800      	ldr	r0, [r0, #0]
   b9cb6:	f7ff bf77 	b.w	b9ba8 <_strtol_l.constprop.0>
   b9cba:	bf00      	nop
   b9cbc:	2003b6d8 	.word	0x2003b6d8

000b9cc0 <__register_exitproc>:
   b9cc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b9cc4:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b9d80 <__register_exitproc+0xc0>
   b9cc8:	4606      	mov	r6, r0
   b9cca:	f8d8 0000 	ldr.w	r0, [r8]
   b9cce:	461f      	mov	r7, r3
   b9cd0:	460d      	mov	r5, r1
   b9cd2:	4691      	mov	r9, r2
   b9cd4:	f000 f856 	bl	b9d84 <__retarget_lock_acquire_recursive>
   b9cd8:	4b25      	ldr	r3, [pc, #148]	; (b9d70 <__register_exitproc+0xb0>)
   b9cda:	681c      	ldr	r4, [r3, #0]
   b9cdc:	b934      	cbnz	r4, b9cec <__register_exitproc+0x2c>
   b9cde:	4c25      	ldr	r4, [pc, #148]	; (b9d74 <__register_exitproc+0xb4>)
   b9ce0:	601c      	str	r4, [r3, #0]
   b9ce2:	4b25      	ldr	r3, [pc, #148]	; (b9d78 <__register_exitproc+0xb8>)
   b9ce4:	b113      	cbz	r3, b9cec <__register_exitproc+0x2c>
   b9ce6:	681b      	ldr	r3, [r3, #0]
   b9ce8:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b9cec:	6863      	ldr	r3, [r4, #4]
   b9cee:	2b1f      	cmp	r3, #31
   b9cf0:	dd07      	ble.n	b9d02 <__register_exitproc+0x42>
   b9cf2:	f8d8 0000 	ldr.w	r0, [r8]
   b9cf6:	f000 f847 	bl	b9d88 <__retarget_lock_release_recursive>
   b9cfa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b9cfe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b9d02:	b34e      	cbz	r6, b9d58 <__register_exitproc+0x98>
   b9d04:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b9d08:	b988      	cbnz	r0, b9d2e <__register_exitproc+0x6e>
   b9d0a:	4b1c      	ldr	r3, [pc, #112]	; (b9d7c <__register_exitproc+0xbc>)
   b9d0c:	b923      	cbnz	r3, b9d18 <__register_exitproc+0x58>
   b9d0e:	f8d8 0000 	ldr.w	r0, [r8]
   b9d12:	f000 f838 	bl	b9d86 <__retarget_lock_release>
   b9d16:	e7f0      	b.n	b9cfa <__register_exitproc+0x3a>
   b9d18:	f44f 7084 	mov.w	r0, #264	; 0x108
   b9d1c:	f7fd f9a4 	bl	b7068 <malloc>
   b9d20:	2800      	cmp	r0, #0
   b9d22:	d0f4      	beq.n	b9d0e <__register_exitproc+0x4e>
   b9d24:	2300      	movs	r3, #0
   b9d26:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b9d2a:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b9d2e:	6863      	ldr	r3, [r4, #4]
   b9d30:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b9d34:	2201      	movs	r2, #1
   b9d36:	409a      	lsls	r2, r3
   b9d38:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b9d3c:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b9d40:	4313      	orrs	r3, r2
   b9d42:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b9d46:	2e02      	cmp	r6, #2
   b9d48:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b9d4c:	bf02      	ittt	eq
   b9d4e:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b9d52:	4313      	orreq	r3, r2
   b9d54:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b9d58:	6863      	ldr	r3, [r4, #4]
   b9d5a:	f8d8 0000 	ldr.w	r0, [r8]
   b9d5e:	1c5a      	adds	r2, r3, #1
   b9d60:	3302      	adds	r3, #2
   b9d62:	6062      	str	r2, [r4, #4]
   b9d64:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b9d68:	f000 f80e 	bl	b9d88 <__retarget_lock_release_recursive>
   b9d6c:	2000      	movs	r0, #0
   b9d6e:	e7c6      	b.n	b9cfe <__register_exitproc+0x3e>
   b9d70:	2003e7e8 	.word	0x2003e7e8
   b9d74:	2003e75c 	.word	0x2003e75c
   b9d78:	00000000 	.word	0x00000000
   b9d7c:	000b7069 	.word	0x000b7069
   b9d80:	2003b73c 	.word	0x2003b73c

000b9d84 <__retarget_lock_acquire_recursive>:
   b9d84:	4770      	bx	lr

000b9d86 <__retarget_lock_release>:
   b9d86:	4770      	bx	lr

000b9d88 <__retarget_lock_release_recursive>:
   b9d88:	4770      	bx	lr

000b9d8a <link_code_end>:
	...

000b9d8c <dynalib_user>:
   b9d8c:	401d 000b 4059 000b 4081 000b 4085 000b     .@..Y@...@...@..
   b9d9c:	0000 0000 6143 6c6c 6f20 206e 7570 6572     ....Call on pure
   b9dac:	7620 7269 7574 6c61 4f00 4a42 4345 0054      virtual.OBJECT.
   b9dbc:	7974 6570 253d 2073 7473 7261 3d74 6425     type=%s start=%d
   b9dcc:	6520 646e 253d 2064 6f74 656b 736e 253d      end=%d tokens=%
   b9ddc:	2064 202d 7325 6e00 646f 7365 7400 7079     d - %s.nodes.typ
   b9dec:	0065 7270 6e69 6974 676e 7420 6b6f 6e65     e.printing token
   b9dfc:	0073 754f 6574 2072 626f 656a 7463 7320     s.Outer object s
   b9e0c:	6174 7472 253d 2064 6e65 3d64 6425 7420     tart=%d end=%d t
   b9e1c:	6b6f 6e65 3d73 6425 2d20 2520 0073 6574     okens=%d - %s.te
   b9e2c:	7473 7400 7365 2074 7325 5400 7365 0074     st.test %s.Test.
   b9e3c:	6f54 6174 206c 6f74 656b 736e 253d 2064     Total tokens=%d 
   b9e4c:	2528 2e34 6632 2525 6620 6c75 296c 7320     (%4.2f%% full) s
   b9e5c:	6f74 6172 6567 253d 2064 2528 2e34 6632     torage=%d (%4.2f
   b9e6c:	2525 6620 6c75 296c 5500 6b6e 6f6e 6e77     %% full).Unknown
   b9e7c:	7320 6e65 6f73 2072 7974 6570 6920 206e      sensor type in 
   b9e8c:	6170 7372 4a65 696f 506e 7961 6f6c 6461     parseJoinPayload
   b9e9c:	6156 756c 7365 2520 0064 6e55 6e6b 776f     Values %d.Unknow
   b9eac:	206e 6573 736e 726f 7420 7079 2065 6e69     n sensor type in
   b9ebc:	7020 7261 6573 6f4a 6e69 6150 6c79 616f      parseJoinPayloa
   b9ecc:	5664 6c61 6575 0073 6c41 7265 0074 4975     dValues.Alert.uI
   b9edc:	0044 6f6e 6564 7000 0031 3270 7000 6e65     D.node.p1.p2.pen
   b9eec:	0064 6f63 746e 4e00 646f 2065 6425 202c     d.cont.Node %d, 
   b9efc:	6e75 7169 6575 4449 2520 756c 202c 7974     uniqueID %lu, ty
   b9f0c:	6570 2520 2c64 6f20 6363 7075 6e61 7963     pe %d, occupancy
   b9f1c:	654e 2074 6425 202c 636f 7563 6170 636e     Net %d, occupanc
   b9f2c:	4779 6f72 7373 2520 2c64 7020 7961 6f6c     yGross %d, paylo
   b9f3c:	6461 2820 6425 252f 2f64 6425 252f 2964     ad (%d/%d/%d/%d)
   b9f4c:	7720 7469 2068 6570 646e 6e69 2067 6c61      with pending al
   b9f5c:	7265 2074 6425 6120 646e 6120 656c 7472     ert %d and alert
   b9f6c:	6320 6e6f 6574 7478 2520 0064 6f4e 6564      context %d.Node
   b9f7c:	2520 2c64 7520 696e 7571 4965 2044 6c25      %d, uniqueID %l
   b9f8c:	2c75 7420 7079 2065 6425 202c 6170 6c79     u, type %d, payl
   b9f9c:	616f 2064 2528 2f64 6425 252f 2f64 6425     oad (%d/%d/%d/%d
   b9fac:	2029 6977 6874 7020 6e65 6964 676e 6120     ) with pending a
   b9fbc:	656c 7472 2520 2064 6e61 2064 6c61 7265     lert %d and aler
   b9fcc:	2074 6f63 746e 7865 2074 6425 5500 6b6e     t context %d.Unk
   b9fdc:	6f6e 6e77 7320 6e65 6f73 2072 7974 6570     nown sensor type
   b9fec:	6920 206e 7270 6e69 4e74 646f 4465 7461      in printNodeDat
   b9ffc:	2061 6425 5500 6b6e 6f6e 6e77 7320 6e65     a %d.Unknown sen
   ba00c:	6f73 2072 7974 6570 6920 206e 7270 6e69     sor type in prin
   ba01c:	4e74 646f 4465 7461 0061 6f6e 6564 6144     tNodeData.nodeDa
   ba02c:	6174 4600 756f 646e 7420 6568 7520 696e     ta.Found the uni
   ba03c:	7571 4965 2c44 6e20 646f 2065 666f 2520     queID, node of %
   ba04c:	0064 6944 2064 6f6e 2074 6966 646e 7420     d.Did not find t
   ba05c:	6568 7520 696e 7571 4965 2c44 6e20 7765     he uniqueID, new
   ba06c:	6e20 646f 2065 666f 2520 0064 6c25 0075      node of %d.%lu.
   ba07c:	6843 6e61 6967 676e 7320 6e65 6f73 2072     Changing sensor 
   ba08c:	7974 6570 6620 726f 7520 696e 7571 4965     type for uniqueI
   ba09c:	2044 6c25 2075 7266 6d6f 2520 2064 6f74     D %lu from %d to
   ba0ac:	2520 0064 7453 7261 6974 676e 7420 7365      %d.Starting tes
   ba0bc:	7374 4600 7269 7473 5420 7365 2c74 7720     ts.First Test, w
   ba0cc:	2065 6977 6c6c 6320 656c 7261 7420 6568     e will clear the
   ba0dc:	4e20 646f 2065 6144 6174 6162 6573 6120      Node Database a
   ba0ec:	646e 6c20 616f 2064 6874 2065 6173 706d     nd load the samp
   ba0fc:	656c 6420 7461 2061 6573 0074 6f4e 2077     le data set.Now 
   ba10c:	6874 7461 7420 6568 6e20 646f 4465 7461     that the nodeDat
   ba11c:	6261 7361 2065 7369 6520 706d 7974 202c     abase is empty, 
   ba12c:	6577 7720 6c69 206c 6f6c 6461 7420 6568     we will load the
   ba13c:	7320 6d61 6c70 2065 6164 6174 7320 7465      sample data set
   ba14c:	7b00 6e22 646f 7365 3a22 7b5b 6e22 646f     .{"nodes":[{"nod
   ba15c:	2265 313a 222c 4975 2244 323a 3136 3433     e":1,"uID":26134
   ba16c:	3037 3535 2c39 7422 7079 2265 313a 222c     70559,"type":1,"
   ba17c:	2270 303a 222c 3170 3a22 2c30 7022 2232     p":0,"p1":0,"p2"
   ba18c:	303a 222c 6570 646e 3a22 2c30 6322 6e6f     :0,"pend":0,"con
   ba19c:	2274 313a 2c7d 227b 6f6e 6564 3a22 2c32     t":1},{"node":2,
   ba1ac:	7522 4449 3a22 3132 3132 3633 3330 3234     "uID":2121360342
   ba1bc:	222c 7974 6570 3a22 2c31 7022 3a22 2c30     ,"type":1,"p":0,
   ba1cc:	7022 2231 303a 222c 3270 3a22 2c30 7022     "p1":0,"p2":0,"p
   ba1dc:	6e65 2264 303a 222c 6f63 746e 3a22 7d32     end":0,"cont":2}
   ba1ec:	7b2c 6e22 646f 2265 333a 222c 4975 2244     ,{"node":3,"uID"
   ba1fc:	323a 3131 3333 3138 3938 2c31 7422 7079     :2113381891,"typ
   ba20c:	2265 313a 222c 2270 303a 222c 3170 3a22     e":1,"p":0,"p1":
   ba21c:	2c30 7022 2232 303a 222c 6570 646e 3a22     0,"p2":0,"pend":
   ba22c:	2c30 6322 6e6f 2274 333a 2c7d 227b 6f6e     0,"cont":3},{"no
   ba23c:	6564 3a22 2c34 7522 4449 3a22 3232 3232     de":4,"uID":2222
   ba24c:	3930 3130 3432 222c 7974 6570 3a22 2c31     090124,"type":1,
   ba25c:	7022 3a22 2c30 7022 2231 303a 222c 3270     "p":0,"p1":0,"p2
   ba26c:	3a22 2c30 7022 6e65 2264 303a 222c 6f63     ":0,"pend":0,"co
   ba27c:	746e 3a22 7d34 7b2c 6e22 646f 2265 353a     nt":4},{"node":5
   ba28c:	222c 4975 2244 323a 3338 3639 3933 3136     ,"uID":283963961
   ba29c:	2c30 7422 7079 2265 313a 222c 2270 303a     0,"type":1,"p":0
   ba2ac:	222c 3170 3a22 2c30 7022 2232 303a 222c     ,"p1":0,"p2":0,"
   ba2bc:	6570 646e 3a22 2c30 6322 6e6f 2274 353a     pend":0,"cont":5
   ba2cc:	2c7d 227b 6f6e 6564 3a22 2c36 7522 4449     },{"node":6,"uID
   ba2dc:	3a22 3539 3338 3939 3236 222c 7974 6570     ":95839962,"type
   ba2ec:	3a22 2c31 7022 3a22 2c30 7022 2231 303a     ":1,"p":0,"p1":0
   ba2fc:	222c 3270 3a22 2c30 7022 6e65 2264 303a     ,"p2":0,"pend":0
   ba30c:	222c 6f63 746e 3a22 7d36 7b2c 6e22 646f     ,"cont":6},{"nod
   ba31c:	2265 373a 222c 4975 2244 333a 3138 3638     e":7,"uID":38186
   ba32c:	3837 3433 2c31 7422 7079 2265 313a 222c     78341,"type":1,"
   ba33c:	2270 303a 222c 3170 3a22 2c30 7022 2232     p":0,"p1":0,"p2"
   ba34c:	303a 222c 6570 646e 3a22 2c30 6322 6e6f     :0,"pend":0,"con
   ba35c:	2274 373a 2c7d 227b 6f6e 6564 3a22 2c38     t":7},{"node":8,
   ba36c:	7522 4449 3a22 3832 3432 3330 3239 3939     "uID":2824039299
   ba37c:	222c 7974 6570 3a22 2c31 7022 3a22 2c30     ,"type":1,"p":0,
   ba38c:	7022 2231 303a 222c 3270 3a22 2c30 7022     "p1":0,"p2":0,"p
   ba39c:	6e65 2264 303a 222c 6f63 746e 3a22 7d38     end":0,"cont":8}
   ba3ac:	7b2c 6e22 646f 2265 393a 222c 4975 2244     ,{"node":9,"uID"
   ba3bc:	323a 3635 3431 3533 3938 2c32 7422 7079     :2561435892,"typ
   ba3cc:	2265 313a 222c 2270 303a 222c 3170 3a22     e":1,"p":0,"p1":
   ba3dc:	2c30 7022 2232 303a 222c 6570 646e 3a22     0,"p2":0,"pend":
   ba3ec:	2c30 6322 6e6f 2274 393a 2c7d 227b 6f6e     0,"cont":9},{"no
   ba3fc:	6564 3a22 3031 222c 4975 2244 333a 3336     de":10,"uID":363
   ba40c:	3933 3333 3035 2c37 7422 7079 2265 313a     3933507,"type":1
   ba41c:	222c 2270 303a 222c 3170 3a22 2c30 7022     ,"p":0,"p1":0,"p
   ba42c:	2232 303a 222c 6570 646e 3a22 2c30 6322     2":0,"pend":0,"c
   ba43c:	6e6f 2274 313a 7d30 7b2c 6e22 646f 2265     ont":10},{"node"
   ba44c:	313a 2c31 7522 4449 3a22 3632 3734 3437     :11,"uID":264774
   ba45c:	3434 3431 222c 7974 6570 3a22 2c31 7022     4414,"type":1,"p
   ba46c:	3a22 2c30 7022 2231 303a 222c 3270 3a22     ":0,"p1":0,"p2":
   ba47c:	2c30 7022 6e65 2264 303a 222c 6f63 746e     0,"pend":0,"cont
   ba48c:	3a22 3131 2c7d 227b 6f6e 6564 3a22 3231     ":11},{"node":12
   ba49c:	222c 4975 2244 333a 3636 3532 3330 3535     ,"uID":366250355
   ba4ac:	2c34 7422 7079 2265 313a 222c 2270 303a     4,"type":1,"p":0
   ba4bc:	222c 3170 3a22 2c30 7022 2232 303a 222c     ,"p1":0,"p2":0,"
   ba4cc:	6570 646e 3a22 2c30 6322 6e6f 2274 313a     pend":0,"cont":1
   ba4dc:	7d32 7b2c 6e22 646f 2265 313a 2c33 7522     2},{"node":13,"u
   ba4ec:	4449 3a22 3532 3538 3437 3536 3532 222c     ID":2585746525,"
   ba4fc:	7974 6570 3a22 2c31 7022 3a22 2c30 7022     type":1,"p":0,"p
   ba50c:	2231 303a 222c 3270 3a22 2c30 7022 6e65     1":0,"p2":0,"pen
   ba51c:	2264 303a 222c 6f63 746e 3a22 3331 2c7d     d":0,"cont":13},
   ba52c:	227b 6f6e 6564 3a22 3431 222c 4975 2244     {"node":14,"uID"
   ba53c:	363a 3036 3132 3138 3431 222c 7974 6570     :660218114,"type
   ba54c:	3a22 2c31 7022 3a22 2c30 7022 2231 303a     ":1,"p":0,"p1":0
   ba55c:	222c 3270 3a22 2c30 7022 6e65 2264 303a     ,"p2":0,"pend":0
   ba56c:	222c 6f63 746e 3a22 3431 5d7d 007d 6854     ,"cont":14}]}.Th
   ba57c:	2065 6164 6174 7320 7274 6e69 2067 7369     e data string is
   ba58c:	203a 7325 5000 7261 6573 2064 7553 6363     : %s.Parsed Succ
   ba59c:	7365 6673 6c75 796c 4e00 7865 2c74 7720     essfully.Next, w
   ba5ac:	2065 6977 6c6c 6c20 616f 2064 6e61 2064     e will load and 
   ba5bc:	7473 726f 2065 6874 2065 6f6e 6564 6420     store the node d
   ba5cc:	7461 6261 7361 2065 6e69 6f74 6d20 6d65     atabase into mem
   ba5dc:	726f 0079 6f4e 6574 7420 6168 2074 756f     ory.Note that ou
   ba5ec:	2072 534a 4e4f 6f20 6a62 6365 2074 6c61     r JSON object al
   ba5fc:	6f6c 6163 6974 6e6f 6920 2073 3425 322e     location is %4.2
   ba60c:	2566 2025 666f 7420 6568 6d20 6d65 726f     f%% of the memor
   ba61c:	2079 6c61 6f6c 6163 6574 2064 6c28 7365     y allocated (les
   ba62c:	2073 6874 6e61 3120 3030 2525 6920 2073     s than 100%% is 
   ba63c:	4b4f 0029 6854 2065 6f6e 6564 7320 7274     OK).The node str
   ba64c:	6e69 2067 7369 203a 7325 5000 7261 6973     ing is: %s.Parsi
   ba65c:	676e 6520 7272 726f 6820 6c61 6974 676e     ng error halting
   ba66c:	6520 6578 7563 6974 6e6f 4600 6e69 6c61      execution.Final
   ba67c:	796c 202c 6577 7720 6c69 206c 6461 2064     ly, we will add 
   ba68c:	2061 656e 2077 6f6e 6564 7420 206f 6874     a new node to th
   ba69c:	2065 6164 6174 6162 6573 6120 646e 7020     e database and p
   ba6ac:	6972 746e 7420 6568 6420 7461 6261 7361     rint the databas
   ba6bc:	0065 6854 2065 6f6e 6564 6e20 6d75 6562     e.The node numbe
   ba6cc:	2072 7369 203a 6425 4e00 776f 7720 2065     r is: %d.Now we 
   ba6dc:	6977 6c6c 6320 6168 676e 2065 6874 2065     will change the 
   ba6ec:	7974 6570 6f20 2066 6874 2065 6f6e 6564     type of the node
   ba6fc:	6120 646e 7020 6972 746e 7420 6568 6420      and print the d
   ba70c:	7461 6261 7361 0065 6854 2065 7563 7272     atabase.The curr
   ba71c:	6e65 2074 7974 6570 6620 726f 6e20 646f     ent type for nod
   ba72c:	2065 756e 626d 7265 2520 2064 7369 203a     e number %d is: 
   ba73c:	6425 5400 6568 6e20 7765 7420 7079 2065     %d.The new type 
   ba74c:	6f66 2072 6f6e 6564 6e20 6d75 6562 2072     for node number 
   ba75c:	6425 6920 3a73 2520 0064 6f4e 2077 6577     %d is: %d.Now we
   ba76c:	7720 6c69 206c 6863 6e61 6567 7420 6568      will change the
   ba77c:	7420 7079 2065 6877 6369 2068 6977 6c6c      type which will
   ba78c:	6120 746c 7265 6920 7374 7320 7274 6375      alter its struc
   ba79c:	7574 6572 6120 646e 7020 6972 746e 7420     ture and print t
   ba7ac:	6568 6420 7461 6261 7361 0065 6f4e 2077     he database.Now 
   ba7bc:	6577 7720 6c69 206c 6863 6e61 6567 7420     we will change t
   ba7cc:	6568 7420 7079 2065 6e6f 6120 6e20 746f     he type on a not
   ba7dc:	2065 6874 7461 6920 2073 6e69 7420 6568     e that is in the
   ba7ec:	6d20 6469 6c64 2065 666f 7420 6568 7020      middle of the p
   ba7fc:	6361 206b 6e61 2064 6874 6e65 6320 6168     ack and then cha
   ba80c:	676e 2065 7469 6220 6361 2e6b 0020 6f4e     nge it back. .No
   ba81c:	6974 6563 6820 776f 7420 6568 6e20 7765     tice how the new
   ba82c:	6e20 646f 2065 7369 6e20 206f 6f6c 676e      node is no long
   ba83c:	7265 7420 6568 6520 646e 6f20 2066 6874     er the end of th
   ba84c:	2065 756f 6574 2072 6a6f 6562 7463 2d20     e outer ojbect -
   ba85c:	7420 6968 2073 6873 756f 646c 7720 726f      this should wor
   ba86c:	006b 6946 696e 6873 6465 5020 7261 6973     k.Finished Parsi
   ba87c:	676e 5420 7365 2e74 5220 6e75 696e 676e     ng Test. Running
   ba88c:	6420 7461 2061 6572 6f70 7472 7420 7365      data report tes
   ba89c:	7374 6920 206e 2061 6f6c 706f 002e 6150     ts in a loop..Pa
   ba8ac:	7372 6e69 2067 7265 6f72 2072 202d 7473     rsing error - st
   ba8bc:	706f 6970 676e 6520 6578 7563 6974 6e6f     opping execution
   ba8cc:	4900 766e 6c61 6469 7320 6e65 6f73 2072     .Invalid sensor 
   ba8dc:	7974 6570 6920 206e 6573 4a74 6f73 446e     type in setJsonD
   ba8ec:	7461 3161 2520 0064 6152 206e 756f 2074     ata1 %d.Ran out 
   ba8fc:	666f 6520 746e 6972 7365 6920 206e 6573     of entries in se
   ba90c:	4a74 6f73 446e 7461 3161 5500 6470 7461     tJsonData1.Updat
   ba91c:	6e69 2067 736a 6e6f 6144 6174 2031 6176     ing jsonData1 va
   ba92c:	756c 2065 7266 6d6f 2520 2064 6f74 2520     lue from %d to %
   ba93c:	0064 7055 6164 6974 676e 6a20 6f73 446e     d.Updating jsonD
   ba94c:	7461 3261 7620 6c61 6575 6620 6f72 206d     ata2 value from 
   ba95c:	6425 7420 206f 6425 6600 6c61 6573 7400     %d to %d.false.t
   ba96c:	7572 0065 6146 6c69 6465 7420 206f 6573     rue.Failed to se
   ba97c:	2074 734a 6e6f 4420 7461 2161 2021 6977     t Json Data!! wi
   ba98c:	6874 7220 7365 6c75 3174 3d20 2520 2073     th result1 = %s 
   ba99c:	6e61 2064 6572 7573 746c 2032 203d 7325     and result2 = %s
   ba9ac:	5300 6f74 2070 6574 7473 6e69 2067 6e6f     .Stop testing on
   ba9bc:	6620 6961 756c 6572 0000 0000                failure....

000ba9c8 <_ZTVN5spark10LogHandlerE>:
	...
   ba9d8:	40a1 000b 40c9 000b                         .@...@..

000ba9e0 <_ZTVN5spark16SerialLogHandlerE>:
	...
   ba9e8:	4135 000b 4169 000b 89c9 000b 40cb 000b     5A..iA.......@..

000ba9f8 <_ZTV16JsonParserStaticILj3072ELj550EE>:
	...
   baa00:	40d5 000b 40e9 000b                         .@...@..

000baa08 <_ZL9uniqueIDs>:
   baa08:	655f 9bc6 63d6 7e71 a603 7df7 678c 8472     _e...cq~...}.gr.
   baa18:	763a a941 66da 05b6 6845 e39c 6b83 a853     :vA..f..Eh...kS.
   baa28:	68f4 98ac 6cc3 d899 5f9e 9dd1 5e82 da4d     .h...l..._...^M.
   baa38:	5c5d 9a1f 2102 275a 755c 3025 5834 0000     ]\...!Z'\u%04X..

000baa48 <_ZTV10JsonBuffer>:
	...
   baa50:	5119 000b 5135 000b                         .Q..5Q..

000baa58 <_ZTV10JsonParser>:
	...
   baa60:	5199 000b 51bd 000b                         .Q...Q..

000baa68 <_ZTV10JsonWriter>:
	...
   baa70:	5149 000b 515d 000b                         IQ..]Q..

000baa78 <_ZTV12JsonModifier>:
	...
   baa80:	5171 000b 5185 000b 6f6e 2074 6176 696c     qQ...Q..not vali
   baa90:	0064 7563 7272 6e65 2074 6164 6174 6920     d.current data i
   baaa0:	2073 7325 4300 7275 6572 746e 4420 7461     s %s.Current Dat
   baab0:	2061 6e49 7469 6169 696c 657a 0064 6f6e     a Initialized.no
   baac0:	6564 4449 6420 7461 2061 7369 2520 0073     deID data is %s.
   baad0:	2e25 732a 4e00 646f 2065 6144 6174 6162     %.*s.Node Databa
   baae0:	6573 6220 6665 726f 2065 6573 3a74 4e00     se before set:.N
   baaf0:	646f 2065 6144 6174 6162 6573 6120 7466     ode Database aft
   bab00:	7265 7320 7465 003a 227b 6f6e 6564 2273     er set:.{"nodes"
   bab10:	5b3a 7d5d 5200 7365 7465 6974 2067 6f4e     :[]}.Resettig No
   bab20:	6564 4449 6320 6e6f 6966 2067 6f74 203a     deID config to: 
   bab30:	7325 4e00 646f 4965 2044 6164 6174 6920     %s.NodeID data i
   bab40:	2073 6f6e 2077 7325 4500 6172 6973 676e     s now %s.Erasing
   bab50:	4620 4152 204d 6572 6967 6e6f 4900 696e      FRAM region.Ini
   bab60:	6974 6c61 7a69 6e69 2067 6164 6174 0000     tializing data..

000bab70 <_ZTV8MB85RC64>:
	...
   bab78:	5d61 000b 5d75 000b 646d 000b 6503 000b     a]..u]..md...e..
   bab88:	6585 000b                                   .e..

000bab8c <_ZTV10nodeIDData>:
	...
   bab94:	603d 000b 5e33 000b 5e0b 000b 663b 000b     =`..3^...^..;f..
   baba4:	6663 000b 5dd1 000b 61e5 000b 5ead 000b     cf...]...a...^..
   babb4:	5ec1 000b                                   .^..

000babb8 <_ZTV17currentStatusData>:
	...
   babc0:	5f39 000b 5e33 000b 5e0b 000b 663b 000b     9_..3^...^..;f..
   babd0:	6663 000b 5d89 000b 5dad 000b 5e85 000b     cf...]...]...^..
   babe0:	5e99 000b                                   .^..

000babe4 <_ZTV6MB85RC>:
	...
   babec:	642d 000b 642f 000b 646d 000b 6503 000b     -d../d..md...e..
   babfc:	6585 000b 6176 696c 6164 6974 676e 6420     .e..validating d
   bac0c:	7461 2061 6973 657a 253d 0064 6f67 3a74     ata size=%d.got:
   bac1c:	6d20 6761 6369 253d 3830 2078 6576 7372      magic=%08x vers
   bac2c:	6f69 3d6e 3025 7834 7320 7a69 3d65 3025     ion=%04x size=%0
   bac3c:	7834 6820 7361 3d68 3025 7838 6500 7078     4x hash=%08x.exp
   bac4c:	203a 616d 6967 3d63 3025 7838 7620 7265     : magic=%08x ver
   bac5c:	6973 6e6f 253d 3430 2078 6973 657a 253d     sion=%04x size=%
   bac6c:	3430 2078 6168 6873 253d 3830 0078 6173     04x hash=%08x.sa
   bac7c:	6976 676e 6420 7461 2061 6973 657a 253d     ving data size=%
   bac8c:	0064 0000                                   d...

000bac90 <_ZTVN15StorageHelperRK18PersistentDataBaseE>:
	...
   bac98:	6635 000b 66cd 000b 6955 000b 663b 000b     5f...f..Ui..;f..
   baca8:	6663 000b 6851 000b 6929 000b 6f4e 6564     cf..Qh..)i..Node
   bacb8:	2520 2064 6977 6874 7520 696e 7571 4965      %d with uniqueI
   bacc8:	2044 6c25 2075 6573 746e 6120 6420 7461     D %lu sent a dat
   bacd8:	2061 6572 6f70 7472 6d20 7365 6173 6567     a report message
   bace8:	0000 0000                                   ....

000bacec <_ZTV7Gateway>:
	...
   bacf4:	6a75 000b 6a77 000b                         uj..wj..

000bacfc <_ZTVN5spark13CellularClassE>:
	...
   bad04:	7247 000b 723d 000b 7233 000b 71e9 000b     Gr..=r..3r...q..
   bad14:	7227 000b 721b 000b 8d21 000b 8d29 000b     'r...r..!...)...
   bad24:	720f 000b 7207 000b 71fd 000b 71f3 000b     .r...r...q...q..
   bad34:	8d59 000b                                   Y...

000bad38 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bad40:	7281 000b 7287 000b 72c5 000b 7295 000b     .r...r...r...r..
   bad50:	7283 000b                                   .r..

000bad54 <_ZTVN5spark13EthernetClassE>:
	...
   bad5c:	780f 000b 7805 000b 77fb 000b 77f1 000b     .x...x...w...w..
   bad6c:	77e5 000b 77d9 000b 8d21 000b 8d29 000b     .w...w..!...)...
   bad7c:	77cd 000b 77c5 000b 77bb 000b 77b1 000b     .w...w...w...w..
   bad8c:	8d59 000b                                   Y...

000bad90 <_ZTV7TwoWire>:
	...
   bad98:	782d 000b 7877 000b 784f 000b 782f 000b     -x..wx..Ox../x..
   bada8:	7857 000b 785f 000b 7867 000b 786f 000b     Wx.._x..gx..ox..

000badb8 <_ZTV9IPAddress>:
	...
   badc0:	7969 000b 7959 000b 795b 000b 7525 7500     iy..Yy..[y..%u.u
   badd0:	3025 7834 6200 7561 0064 6553 6972 6c61     %04x.baud.Serial
   bade0:	5300 7265 6169 316c 4a00 4f53 534e 7274     .Serial1.JSONStr
   badf0:	6165 4c6d 676f 6148 646e 656c 0072 7061     eamLogHandler.ap
   bae00:	0070 3025 3031 2075 5d00 0020 202c 2800     p.%010u .] ., .(
   bae10:	3a29 0020 5b20 6300 646f 2065 203d 2500     ): . [.code = .%
   bae20:	0069 6564 6174 6c69 2073 203d 0d00 000a     i.details = ....
   bae30:	006d 0066 6e6c 6600 006e 6f63 6564 6400     m.f.ln.fn.code.d
   bae40:	7465 6961 006c 0000                         etail...

000bae48 <_ZTVN5spark16JSONStreamWriterE>:
	...
   bae50:	7e15 000b 7e3b 000b 7df9 000b 7a77 000b     .~..;~...}..wz..

000bae60 <_ZTVN5spark16StreamLogHandlerE>:
	...
   bae68:	8271 000b 8289 000b 89c9 000b 40cb 000b     q............@..

000bae78 <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
   bae80:	829d 000b 82b1 000b 8b6d 000b 7e01 000b     ........m....~..

000bae90 <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
   bae98:	7e13 000b 7e49 000b 892d 000b 7e03 000b     .~..I~..-....~..

000baea8 <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
   baeb0:	7e11 000b 7e57 000b 81d9 000b 7e79 000b     .~..W~......y~..

000baec0 <_ZTVN5spark12NetworkClassE>:
	...
   baec8:	8ce1 000b 8ceb 000b 8cf5 000b 8cff 000b     ................
   baed8:	8d09 000b 8d15 000b 8d21 000b 8d29 000b     ........!...)...
   baee8:	8d31 000b 8d3d 000b 8d45 000b 8d4f 000b     1...=...E...O...
   baef8:	8d59 000b 5925 252d 2d6d 6425 2554 3a48     Y...%Y-%m-%dT%H:
   baf08:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

000baf18 <_ZTV11USARTSerial>:
	...
   baf20:	91dd 000b 9249 000b 9221 000b 8e45 000b     ....I...!...E...
   baf30:	91f1 000b 920d 000b 91ff 000b 921b 000b     ................
   baf40:	91df 000b 91e3 000b                         ........

000baf48 <_ZTV9USBSerial>:
	...
   baf50:	929b 000b 9303 000b 92d9 000b 8e45 000b     ............E...
   baf60:	92cb 000b 929d 000b 92ad 000b 92fd 000b     ................
   baf70:	92bd 000b 9295 000b                         ........

000baf78 <_ZSt7nothrow>:
   baf78:	5200 4545 544e 6d20 6c61 6f6c 2063 7573     .REENT malloc su
   baf88:	6363 6565 6564 0064 742f 706d 6a2f 6e65     cceeded./tmp/jen
   baf98:	696b 736e 472d 4343 312d 2d30 6970 6570     kins-GCC-10-pipe
   bafa8:	696c 656e 342d 5f38 3032 3032 3131 3432     line-48_20201124
   bafb8:	315f 3036 3136 3038 3336 2f39 7273 2f63     _1606180639/src/
   bafc8:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
   bafd8:	6362 732f 6474 696c 2f62 6172 646e 632e     bc/stdlib/rand.c
	...

000bafe9 <_ctype_>:
   bafe9:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   baff9:	2020 2020 2020 2020 2020 2020 2020 2020                     
   bb009:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   bb019:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   bb029:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   bb039:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   bb049:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   bb059:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   bb069:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000bb0ea <link_const_variable_data_end>:
	...

000bb0ec <link_constructors_location>:
   bb0ec:	000b47e9 	.word	0x000b47e9
   bb0f0:	000b63fd 	.word	0x000b63fd
   bb0f4:	000b71d9 	.word	0x000b71d9
   bb0f8:	000b7251 	.word	0x000b7251
   bb0fc:	000b7819 	.word	0x000b7819
   bb100:	000b89b9 	.word	0x000b89b9
   bb104:	000b8e31 	.word	0x000b8e31
   bb108:	000b8f51 	.word	0x000b8f51
   bb10c:	000b9131 	.word	0x000b9131
   bb110:	000b91c9 	.word	0x000b91c9

000bb114 <link_constructors_end>:
	...
